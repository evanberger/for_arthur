{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./check-npm.js","imported":[],"specifiers":[]},{"source":"apollo-server","imported":["apolloExpress","graphiqlExpress"],"specifiers":[{"kind":"named","imported":"apolloExpress","local":"apolloExpress"},{"kind":"named","imported":"graphiqlExpress","local":"graphiqlExpress"}]},{"source":"body-parser","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"bodyParser"}]},{"source":"express","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"express"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/webapp","imported":["WebApp"],"specifiers":[{"kind":"named","imported":"WebApp","local":"WebApp"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]}],"exports":{"exported":["createApolloServer"],"specifiers":[{"kind":"local","local":"createApolloServer","exported":"createApolloServer"}]}}},"options":{"filename":"/packages/apollo/main-server.js","filenameRelative":"/packages/apollo/main-server.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/apollo/main-server.js.map","sourceFileName":"/packages/apollo/main-server.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"main-server"},"ignored":false,"code":"module.export({createApolloServer:function(){return createApolloServer}});var _regeneratorRuntime;module.import('babel-runtime/regenerator',{\"default\":function(v){_regeneratorRuntime=v}});module.import('./check-npm.js');var apolloExpress,graphiqlExpress;module.import('apollo-server',{\"apolloExpress\":function(v){apolloExpress=v},\"graphiqlExpress\":function(v){graphiqlExpress=v}});var bodyParser;module.import('body-parser',{\"default\":function(v){bodyParser=v}});var express;module.import('express',{\"default\":function(v){express=v}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var WebApp;module.import('meteor/webapp',{\"WebApp\":function(v){WebApp=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});var Accounts;module.import('meteor/accounts-base',{\"Accounts\":function(v){Accounts=v}});var _;module.import('meteor/underscore',{\"_\":function(v){_=v}});\n\nvar _this = this;\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar defaultConfig = {\n  path: '/graphql',\n  maxAccountsCacheSizeInMB: 1,\n  graphiql: Meteor.isDevelopment,\n  graphiqlPath: '/graphiql',\n  graphiqlOptions: {}\n};\n\nvar defaultOptions = {\n  formatError: function () {\n    function formatError(e) {\n      return {\n        message: e.message,\n        locations: e.locations,\n        path: e.path\n      };\n    }\n\n    return formatError;\n  }()\n};\n\nvar createApolloServer = function createApolloServer(givenOptions, givenConfig) {\n\n  var config = Object.assign({}, defaultConfig, givenConfig);\n\n  var graphQLServer = express();\n\n  // GraphQL endpoint\n  graphQLServer.use(config.path, bodyParser.json(), apolloExpress(function () {\n    function _callee(req) {\n      var options, user, token, hashedToken, expiresAt, isExpired;\n      return _regeneratorRuntime.async(function () {\n        function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = void 0, user = null;\n\n\n                if (_.isFunction(givenOptions)) options = givenOptions(req);else options = givenOptions;\n\n                // Merge in the defaults\n                options = Object.assign({}, defaultOptions, options);\n\n                // Get the token from the header\n\n                if (!req.headers.authorization) {\n                  _context.next = 11;\n                  break;\n                }\n\n                token = req.headers.authorization;\n\n                check(token, String);\n                hashedToken = Accounts._hashLoginToken(token);\n\n                // Get the user from the database\n\n                _context.next = 9;\n                return _regeneratorRuntime.awrap(Meteor.users.findOne({ \"services.resume.loginTokens.hashedToken\": hashedToken }, { fields: {\n                    _id: 1,\n                    'services.resume.loginTokens.$': 1\n                  } }));\n\n              case 9:\n                user = _context.sent;\n\n\n                if (user) {\n                  expiresAt = Accounts._tokenExpiration(user.services.resume.loginTokens[0].when);\n                  isExpired = expiresAt < new Date();\n\n\n                  if (!isExpired) {\n                    if (!options.context) {\n                      options.context = {};\n                    }\n\n                    options.context.userId = user._id;\n                  }\n                }\n\n              case 11:\n                return _context.abrupt('return', options);\n\n              case 12:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }\n\n        return _callee$;\n      }(), null, _this);\n    }\n\n    return _callee;\n  }()));\n\n  // Start GraphiQL if enabled\n  if (config.graphiql) {\n    graphQLServer.use(config.graphiqlPath, graphiqlExpress(_.extend(config.graphiqlOptions, { endpointURL: config.path })));\n  }\n\n  // This binds the specified paths to the Express server running Apollo + GraphiQL\n  WebApp.connectHandlers.use(Meteor.bindEnvironment(graphQLServer));\n};","ast":null,"map":{"version":3,"sources":["/packages/apollo/main-server.js"],"names":[],"mappings":";;;;AAAA,OAAO,gBAAP;;AAEA,SAAS,aAAT,EAAwB,eAAxB,QAA+C,eAA/C;AACA,OAAO,UAAP,MAAuB,aAAvB;AACA,OAAO,OAAP,MAAoB,SAApB;;AAEA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,KAAT,QAAsB,cAAtB;AACA,SAAS,QAAT,QAAyB,sBAAzB;AACA,SAAS,CAAT,QAAkB,mBAAlB;;AAEA,IAAM,gBAAgB;AACpB,QAAM,UADc;AAEpB,4BAA0B,CAFN;AAGpB,YAAW,OAAO,aAHE;AAIpB,gBAAe,WAJK;AAKpB,mBAAkB;AALE,CAAtB;;AAQA,IAAM,iBAAiB;AACrB;AAAa;AAAA,aAAM;AACjB,iBAAS,EAAE,OADM;AAEjB,mBAAW,EAAE,SAFI;AAGjB,cAAM,EAAE;AAHS,OAAN;AAAA;;AAAb;AAAA;AADqB,CAAvB;;AAQA,OAAO,IAAM,qBAAqB,SAArB,kBAAqB,CAAC,YAAD,EAAe,WAAf,EAA+B;;AAE/D,MAAI,SAAS,OAAO,MAAP,CAAc,EAAd,EAAkB,aAAlB,EAAiC,WAAjC,CAAb;;AAEA,MAAM,gBAAgB,SAAtB;;;AAGA,gBAAc,GAAd,CAAkB,OAAO,IAAzB,EAA+B,WAAW,IAAX,EAA/B,EAAkD;AAAc,qBAAO,GAAP;AAAA,UAC1D,OAD0D,EAE1D,IAF0D,EActD,KAdsD,EAgBtD,WAhBsD,EA2BpD,SA3BoD,EA4BpD,SA5BoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1D,uBAD0D,WAE1D,IAF0D,GAEnD,IAFmD;;;AAI9D,oBAAI,EAAE,UAAF,CAAa,YAAb,CAAJ,EACE,UAAU,aAAa,GAAb,CAAV,CADF,KAGE,UAAU,YAAV;;;AAGF,0BAAU,OAAO,MAAP,CAAc,EAAd,EAAkB,cAAlB,EAAkC,OAAlC,CAAV;;;;AAV8D,qBAa1D,IAAI,OAAJ,CAAY,aAb8C;AAAA;AAAA;AAAA;;AActD,qBAdsD,GAc9C,IAAI,OAAJ,CAAY,aAdkC;;AAe5D,sBAAM,KAAN,EAAa,MAAb;AACM,2BAhBsD,GAgBxC,SAAS,eAAT,CAAyB,KAAzB,CAhBwC;;;;AAAA;AAAA,iDAmB/C,OAAO,KAAP,CAAa,OAAb,CACX,EAAC,2CAA2C,WAA5C,EADW,EAEX,EAAC,QAAQ;AACP,yBAAK,CADE;AAEP,qDAAiC;AAF1B,mBAAT,EAFW,CAnB+C;;AAAA;AAmB5D,oBAnB4D;;;AA0B5D,oBAAI,IAAJ,EAAU;AACF,2BADE,GACU,SAAS,gBAAT,CAA0B,KAAK,QAAL,CAAc,MAAd,CAAqB,WAArB,CAAiC,CAAjC,EAAoC,IAA9D,CADV;AAEF,2BAFE,GAEU,YAAY,IAAI,IAAJ,EAFtB;;;AAIR,sBAAI,CAAC,SAAL,EAAgB;AACd,wBAAI,CAAC,QAAQ,OAAb,EAAsB;AACpB,8BAAQ,OAAR,GAAkB,EAAlB;AACD;;AAED,4BAAQ,OAAR,CAAgB,MAAhB,GAAyB,KAAK,GAA9B;AACD;AACF;;AArC2D;AAAA,iDAwCvD,OAxCuD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAd;AAAA,MAAlD;;;AA6CA,MAAI,OAAO,QAAX,EAAqB;AACnB,kBAAc,GAAd,CAAkB,OAAO,YAAzB,EAAuC,gBAAgB,EAAE,MAAF,CAAS,OAAO,eAAhB,EAAiC,EAAC,aAAc,OAAO,IAAtB,EAAjC,CAAhB,CAAvC;AACD;;;AAGD,SAAO,eAAP,CAAuB,GAAvB,CAA2B,OAAO,eAAP,CAAuB,aAAvB,CAA3B;AACD,CA1DM","file":"/packages/apollo/main-server.js.map","sourcesContent":["import './check-npm.js';\n\nimport { apolloExpress, graphiqlExpress } from 'apollo-server';\nimport bodyParser from 'body-parser';\nimport express from 'express';\n\nimport { Meteor } from 'meteor/meteor';\nimport { WebApp } from 'meteor/webapp';\nimport { check } from 'meteor/check';\nimport { Accounts } from 'meteor/accounts-base';\nimport { _ } from 'meteor/underscore';\n\nconst defaultConfig = {\n  path: '/graphql',\n  maxAccountsCacheSizeInMB: 1,\n  graphiql : Meteor.isDevelopment,\n  graphiqlPath : '/graphiql',\n  graphiqlOptions : {}\n};\n\nconst defaultOptions = {\n  formatError: e => ({ \n    message: e.message,\n    locations: e.locations,\n    path: e.path\n  }),\n};\n\nexport const createApolloServer = (givenOptions, givenConfig) => {\n\n  let config = Object.assign({}, defaultConfig, givenConfig);\n\n  const graphQLServer = express();\n\n  // GraphQL endpoint\n  graphQLServer.use(config.path, bodyParser.json(), apolloExpress(async (req) => {\n    let options,\n        user = null;\n\n    if (_.isFunction(givenOptions))\n      options = givenOptions(req);\n    else\n      options = givenOptions;\n\n    // Merge in the defaults\n    options = Object.assign({}, defaultOptions, options);\n\n    // Get the token from the header\n    if (req.headers.authorization) {\n      const token = req.headers.authorization;\n      check(token, String);\n      const hashedToken = Accounts._hashLoginToken(token);\n\n      // Get the user from the database\n      user = await Meteor.users.findOne(\n        {\"services.resume.loginTokens.hashedToken\": hashedToken},\n        {fields: {\n          _id: 1,\n          'services.resume.loginTokens.$': 1\n        }});\n\n      if (user) {\n        const expiresAt = Accounts._tokenExpiration(user.services.resume.loginTokens[0].when);\n        const isExpired = expiresAt < new Date();\n\n        if (!isExpired) {\n          if (!options.context) {\n            options.context = {};\n          }\n\n          options.context.userId = user._id;\n        }\n      }\n    }\n\n    return options;\n\n  }));\n\n  // Start GraphiQL if enabled\n  if (config.graphiql) {\n    graphQLServer.use(config.graphiqlPath, graphiqlExpress(_.extend(config.graphiqlOptions, {endpointURL : config.path})));\n  }\n\n  // This binds the specified paths to the Express server running Apollo + GraphiQL\n  WebApp.connectHandlers.use(Meteor.bindEnvironment(graphQLServer));\n};\n"]},"hash":"7d16c8125a7ed2fc6e90eabd4b36b2f7377756ce"}
