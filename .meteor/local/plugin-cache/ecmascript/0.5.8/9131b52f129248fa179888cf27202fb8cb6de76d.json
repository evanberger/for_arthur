{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./check-npm.js","imported":[],"specifiers":[]},{"source":"apollo-client","imported":["createNetworkInterface"],"specifiers":[{"kind":"named","imported":"createNetworkInterface","local":"createNetworkInterface"}]},{"source":"apollo-client/queries/queryTransform","imported":["addTypenameToSelectionSet"],"specifiers":[{"kind":"named","imported":"addTypenameToSelectionSet","local":"addTypenameToSelectionSet"}]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]}],"exports":{"exported":["createMeteorNetworkInterface","meteorClientConfig"],"specifiers":[{"kind":"local","local":"createMeteorNetworkInterface","exported":"createMeteorNetworkInterface"},{"kind":"local","local":"meteorClientConfig","exported":"meteorClientConfig"}]}}},"options":{"filename":"/packages/apollo/main-client.js","filenameRelative":"/packages/apollo/main-client.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/apollo/main-client.js.map","sourceFileName":"/packages/apollo/main-client.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"main-client"},"ignored":false,"code":"module.export({createMeteorNetworkInterface:function(){return createMeteorNetworkInterface},meteorClientConfig:function(){return meteorClientConfig}});module.import('./check-npm.js');var createNetworkInterface;module.import('apollo-client',{\"createNetworkInterface\":function(v){createNetworkInterface=v}});var addTypenameToSelectionSet;module.import('apollo-client/queries/queryTransform',{\"addTypenameToSelectionSet\":function(v){addTypenameToSelectionSet=v}});var Accounts;module.import('meteor/accounts-base',{\"Accounts\":function(v){Accounts=v}});var _;module.import('meteor/underscore',{\"_\":function(v){_=v}});\n\n\n\n\n\n\nvar defaultNetworkInterfaceConfig = {\n  path: '/graphql',\n  options: {},\n  useMeteorAccounts: true\n};\n\nvar createMeteorNetworkInterface = function createMeteorNetworkInterface(givenConfig) {\n  var config = _.extend(defaultNetworkInterfaceConfig, givenConfig);\n\n  // absoluteUrl adds a '/', so let's remove it first\n  var path = config.path;\n  if (path[0] === '/') {\n    path = path.slice(1);\n  }\n\n  // For SSR\n  var url = Meteor.absoluteUrl(path);\n  var networkInterface = createNetworkInterface(url);\n\n  if (config.useMeteorAccounts) {\n    networkInterface.use([{\n      applyMiddleware: function () {\n        function applyMiddleware(request, next) {\n          var currentUserToken = Accounts._storedLoginToken();\n\n          if (!currentUserToken) {\n            next();\n            return;\n          }\n\n          if (!request.options.headers) {\n            request.options.headers = new Headers();\n          }\n\n          request.options.headers.Authorization = currentUserToken;\n\n          next();\n        }\n\n        return applyMiddleware;\n      }()\n    }]);\n  }\n\n  return networkInterface;\n};\n\nvar meteorClientConfig = function meteorClientConfig(networkInterfaceConfig) {\n  return {\n    networkInterface: createMeteorNetworkInterface(networkInterfaceConfig),\n    queryTransformer: addTypenameToSelectionSet,\n\n    // Default to using Mongo _id, must use _id for queries.\n    dataIdFromObject: function () {\n      function dataIdFromObject(result) {\n        if (result._id && result.__typename) {\n          var dataId = result.__typename + result._id;\n          return dataId;\n        }\n      }\n\n      return dataIdFromObject;\n    }()\n  };\n};","ast":null,"map":{"version":3,"sources":["/packages/apollo/main-client.js"],"names":[],"mappings":"AAAA,OAAO,gBAAP;;AAEA,SAAS,sBAAT,QAAuC,eAAvC;AACA,SAAS,yBAAT,QAA0C,sCAA1C;AACA,SAAS,QAAT,QAAyB,sBAAzB;AACA,SAAS,CAAT,QAAkB,mBAAlB;;AAEA,IAAM,gCAAgC;AACpC,QAAM,UAD8B;AAEpC,WAAS,EAF2B;AAGpC,qBAAmB;AAHiB,CAAtC;;AAMA,OAAO,IAAM,+BAA+B,SAA/B,4BAA+B,CAAC,WAAD,EAAiB;AAC3D,MAAM,SAAS,EAAE,MAAF,CAAS,6BAAT,EAAwC,WAAxC,CAAf;;;AAGA,MAAI,OAAO,OAAO,IAAlB;AACA,MAAI,KAAK,CAAL,MAAY,GAAhB,EAAqB;AACnB,WAAO,KAAK,KAAL,CAAW,CAAX,CAAP;AACD;;;AAGD,MAAM,MAAM,OAAO,WAAP,CAAmB,IAAnB,CAAZ;AACA,MAAM,mBAAmB,uBAAuB,GAAvB,CAAzB;;AAEA,MAAI,OAAO,iBAAX,EAA8B;AAC5B,qBAAiB,GAAjB,CAAqB,CAAC;AACpB,qBADoB;AAAA,iCACJ,OADI,EACK,IADL,EACW;AAC7B,cAAM,mBAAmB,SAAS,iBAAT,EAAzB;;AAEA,cAAI,CAAC,gBAAL,EAAuB;AACrB;AACA;AACD;;AAED,cAAI,CAAC,QAAQ,OAAR,CAAgB,OAArB,EAA8B;AAC5B,oBAAQ,OAAR,CAAgB,OAAhB,GAA0B,IAAI,OAAJ,EAA1B;AACD;;AAED,kBAAQ,OAAR,CAAgB,OAAhB,CAAwB,aAAxB,GAAwC,gBAAxC;;AAEA;AACD;;AAhBmB;AAAA;AAAA,KAAD,CAArB;AAkBD;;AAED,SAAO,gBAAP;AACD,CAnCM;;AAqCP,OAAO,IAAM,qBAAqB,SAArB,kBAAqB,CAAC,sBAAD,EAA4B;AAC5D,SAAO;AACL,sBAAkB,6BAA6B,sBAA7B,CADb;AAEL,sBAAkB,yBAFb;;;AAKL;AAAkB,gCAAC,MAAD,EAAY;AAC5B,YAAI,OAAO,GAAP,IAAc,OAAO,UAAzB,EAAqC;AACnC,cAAM,SAAS,OAAO,UAAP,GAAoB,OAAO,GAA1C;AACA,iBAAO,MAAP;AACD;AACF;;AALD;AAAA;AALK,GAAP;AAYD,CAbM","file":"/packages/apollo/main-client.js.map","sourcesContent":["import './check-npm.js';\n\nimport { createNetworkInterface } from 'apollo-client';\nimport { addTypenameToSelectionSet } from 'apollo-client/queries/queryTransform';\nimport { Accounts } from 'meteor/accounts-base';\nimport { _ } from 'meteor/underscore';\n\nconst defaultNetworkInterfaceConfig = {\n  path: '/graphql',\n  options: {},\n  useMeteorAccounts: true\n};\n\nexport const createMeteorNetworkInterface = (givenConfig) => {\n  const config = _.extend(defaultNetworkInterfaceConfig, givenConfig);\n\n  // absoluteUrl adds a '/', so let's remove it first\n  let path = config.path;\n  if (path[0] === '/') {\n    path = path.slice(1);\n  }\n\n  // For SSR\n  const url = Meteor.absoluteUrl(path);\n  const networkInterface = createNetworkInterface(url);\n\n  if (config.useMeteorAccounts) {\n    networkInterface.use([{\n      applyMiddleware(request, next) {\n        const currentUserToken = Accounts._storedLoginToken();\n\n        if (!currentUserToken) {\n          next();\n          return;\n        }\n\n        if (!request.options.headers) {\n          request.options.headers = new Headers();\n        }\n\n        request.options.headers.Authorization = currentUserToken;\n\n        next();\n      },\n    }]);\n  }\n\n  return networkInterface;\n};\n\nexport const meteorClientConfig = (networkInterfaceConfig) => {\n  return {\n    networkInterface: createMeteorNetworkInterface(networkInterfaceConfig),\n    queryTransformer: addTypenameToSelectionSet,\n\n    // Default to using Mongo _id, must use _id for queries.\n    dataIdFromObject: (result) => {\n      if (result._id && result.__typename) {\n        const dataId = result.__typename + result._id;\n        return dataId;\n      }\n    },\n  };\n};\n"]},"hash":"9131b52f129248fa179888cf27202fb8cb6de76d"}
