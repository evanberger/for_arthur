[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar meteorInstall = Package['modules-runtime'].meteorInstall;\n\n/* Package-scope variables */\nvar Buffer, process, __e, __g;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"modules\":{\"client.js\":[\"./install-packages.js\",\"./stubs.js\",\"./buffer.js\",\"./process.js\",\"reify/lib/runtime\",\"./css\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/client.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"./install-packages.js\");                                                                                      // 1\nrequire(\"./stubs.js\");                                                                                                 // 2\nrequire(\"./buffer.js\");                                                                                                // 3\nrequire(\"./process.js\");                                                                                               // 4\nrequire(\"reify/lib/runtime\").enable(module.constructor);                                                               // 5\n                                                                                                                       // 6\nexports.addStyles = require(\"./css\").addStyles;                                                                        // 7\n                                                                                                                       // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"buffer.js\":[\"buffer\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/buffer.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ntry {                                                                                                                  // 1\n  Buffer = global.Buffer || require(\"buffer\").Buffer;                                                                  // 2\n} catch (noBuffer) {}                                                                                                  // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"css.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/css.js                                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar doc = document;                                                                                                    // 1\nvar head = doc.getElementsByTagName(\"head\").item(0);                                                                   // 2\n                                                                                                                       // 3\nexports.addStyles = function (css) {                                                                                   // 4\n  var style = doc.createElement(\"style\");                                                                              // 5\n                                                                                                                       // 6\n  style.setAttribute(\"type\", \"text/css\");                                                                              // 7\n                                                                                                                       // 8\n  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                                   // 9\n  var internetExplorerSheetObject =                                                                                    // 10\n    style.sheet || // Edge/IE11.                                                                                       // 11\n    style.styleSheet; // Older IEs.                                                                                    // 12\n                                                                                                                       // 13\n  if (internetExplorerSheetObject) {                                                                                   // 14\n    internetExplorerSheetObject.cssText = css;                                                                         // 15\n  } else {                                                                                                             // 16\n    style.appendChild(doc.createTextNode(css));                                                                        // 17\n  }                                                                                                                    // 18\n                                                                                                                       // 19\n  return head.appendChild(style);                                                                                      // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"install-packages.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/install-packages.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction install(name, mainModule) {                                                                                   // 1\n  var meteorDir = {};                                                                                                  // 2\n                                                                                                                       // 3\n  // Given a package name <name>, install a stub module in the                                                         // 4\n  // /node_modules/meteor directory called <name>.js, so that                                                          // 5\n  // require.resolve(\"meteor/<name>\") will always return                                                               // 6\n  // /node_modules/meteor/<name>.js instead of something like                                                          // 7\n  // /node_modules/meteor/<name>/index.js, in the rare but possible event                                              // 8\n  // that the package contains a file called index.js (#6590).                                                         // 9\n                                                                                                                       // 10\n  if (mainModule) {                                                                                                    // 11\n    meteorDir[name + \".js\"] = [mainModule, function (require, e, module) {                                             // 12\n      module.exports = require(mainModule);                                                                            // 13\n    }];                                                                                                                // 14\n  } else {                                                                                                             // 15\n    // back compat with old Meteor packages                                                                            // 16\n    meteorDir[name + \".js\"] = function (r, e, module) {                                                                // 17\n      module.exports = Package[name];                                                                                  // 18\n    };                                                                                                                 // 19\n  }                                                                                                                    // 20\n                                                                                                                       // 21\n  meteorInstall({                                                                                                      // 22\n    node_modules: {                                                                                                    // 23\n      meteor: meteorDir                                                                                                // 24\n    }                                                                                                                  // 25\n  });                                                                                                                  // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\n// This file will be modified during computeJsOutputFilesMap to include                                                // 29\n// install(<name>) calls for every Meteor package.                                                                     // 30\n                                                                                                                       // 31\ninstall(\"underscore\");                                                                                                 // 32\ninstall(\"meteor\");                                                                                                     // 33\ninstall(\"meteor-base\");                                                                                                // 34\ninstall(\"mobile-experience\");                                                                                          // 35\ninstall(\"modules-runtime\");                                                                                            // 36\ninstall(\"modules\", \"meteor/modules/client.js\");                                                                        // 37\ninstall(\"es5-shim\", \"meteor/es5-shim/client.js\");                                                                      // 38\ninstall(\"promise\", \"meteor/promise/client.js\");                                                                        // 39\ninstall(\"ecmascript-runtime\", \"meteor/ecmascript-runtime/runtime.js\");                                                 // 40\ninstall(\"babel-compiler\");                                                                                             // 41\ninstall(\"ecmascript\");                                                                                                 // 42\ninstall(\"base64\");                                                                                                     // 43\ninstall(\"ejson\");                                                                                                      // 44\ninstall(\"id-map\");                                                                                                     // 45\ninstall(\"ordered-dict\");                                                                                               // 46\ninstall(\"tracker\");                                                                                                    // 47\ninstall(\"babel-runtime\");                                                                                              // 48\ninstall(\"random\");                                                                                                     // 49\ninstall(\"mongo-id\");                                                                                                   // 50\ninstall(\"diff-sequence\");                                                                                              // 51\ninstall(\"geojson-utils\", \"meteor/geojson-utils/main.js\");                                                              // 52\ninstall(\"minimongo\");                                                                                                  // 53\ninstall(\"check\", \"meteor/check/match.js\");                                                                             // 54\ninstall(\"retry\");                                                                                                      // 55\ninstall(\"ddp-common\");                                                                                                 // 56\ninstall(\"reload\");                                                                                                     // 57\ninstall(\"ddp-client\");                                                                                                 // 58\ninstall(\"ddp\");                                                                                                        // 59\ninstall(\"ddp-server\");                                                                                                 // 60\ninstall(\"allow-deny\");                                                                                                 // 61\ninstall(\"mongo\");                                                                                                      // 62\ninstall(\"blaze-html-templates\");                                                                                       // 63\ninstall(\"reactive-dict\");                                                                                              // 64\ninstall(\"session\");                                                                                                    // 65\ninstall(\"jquery\", \"meteor/jquery/main.js\");                                                                            // 66\ninstall(\"audit-argument-checks\");                                                                                      // 67\ninstall(\"standard-minifier-css\");                                                                                      // 68\ninstall(\"standard-minifier-js\");                                                                                       // 69\ninstall(\"shell-server\");                                                                                               // 70\ninstall(\"deps\");                                                                                                       // 71\ninstall(\"aldeed:simple-schema\");                                                                                       // 72\ninstall(\"ddp-rate-limiter\");                                                                                           // 73\ninstall(\"localstorage\");                                                                                               // 74\ninstall(\"callback-hook\");                                                                                              // 75\ninstall(\"htmljs\");                                                                                                     // 76\ninstall(\"observe-sequence\");                                                                                           // 77\ninstall(\"reactive-var\");                                                                                               // 78\ninstall(\"blaze\");                                                                                                      // 79\ninstall(\"accounts-base\", \"meteor/accounts-base/client_main.js\");                                                       // 80\ninstall(\"tmeasday:check-npm-versions\", \"meteor/tmeasday:check-npm-versions/check-npm-versions.js\");                    // 81\ninstall(\"apollo\", \"meteor/apollo/main-client.js\");                                                                     // 82\ninstall(\"webapp\");                                                                                                     // 83\ninstall(\"livedata\");                                                                                                   // 84\ninstall(\"hot-code-push\");                                                                                              // 85\ninstall(\"spacebars\");                                                                                                  // 86\ninstall(\"templating\");                                                                                                 // 87\ninstall(\"launch-screen\");                                                                                              // 88\ninstall(\"ui\");                                                                                                         // 89\ninstall(\"autoupdate\");                                                                                                 // 90\ninstall(\"mdg:validation-error\");                                                                                       // 91\ninstall(\"service-configuration\");                                                                                      // 92\n                                                                                                                       // 93\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"process.js\":[\"process\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/process.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ntry {                                                                                                                  // 1\n  // The application can run `npm install process` to provide its own                                                  // 2\n  // process stub; otherwise this module will provide a partial stub.                                                  // 3\n  process = global.process || require(\"process\");                                                                      // 4\n} catch (noProcess) {                                                                                                  // 5\n  process = {};                                                                                                        // 6\n}                                                                                                                      // 7\n                                                                                                                       // 8\nif (Meteor.isServer) {                                                                                                 // 9\n  // Make require(\"process\") work on the server in all versions of Node.                                               // 10\n  meteorInstall({                                                                                                      // 11\n    node_modules: {                                                                                                    // 12\n      \"process.js\": function (r, e, module) {                                                                          // 13\n        module.exports = process;                                                                                      // 14\n      }                                                                                                                // 15\n    }                                                                                                                  // 16\n  });                                                                                                                  // 17\n} else {                                                                                                               // 18\n  process.platform = \"browser\";                                                                                        // 19\n  process.nextTick = process.nextTick || Meteor._setImmediate;                                                         // 20\n}                                                                                                                      // 21\n                                                                                                                       // 22\nif (typeof process.env !== \"object\") {                                                                                 // 23\n  process.env = {};                                                                                                    // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\n_.extend(process.env, meteorEnv);                                                                                      // 27\n                                                                                                                       // 28\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"stubs.js\":[\"meteor-node-stubs\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/stubs.js                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ntry {                                                                                                                  // 1\n  // When meteor-node-stubs is installed in the application's root                                                     // 2\n  // node_modules directory, requiring it here installs aliases for stubs                                              // 3\n  // for all Node built-in modules, such as fs, util, and http.                                                        // 4\n  require(\"meteor-node-stubs\");                                                                                        // 5\n} catch (noStubs) {}                                                                                                   // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"node_modules\":{\"reify\":{\"lib\":{\"runtime.js\":[\"./entry.js\",\"./utils.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/modules/node_modules/reify/lib/runtime.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Entry = require(\"./entry.js\").Entry;                                                                               // 1\nvar utils = require(\"./utils.js\");                                                                                     // 2\n                                                                                                                       // 3\nexports.enable = function (Module) {                                                                                   // 4\n  var Mp = Module.prototype;                                                                                           // 5\n                                                                                                                       // 6\n  if (typeof Mp.import === \"function\" &&                                                                               // 7\n      typeof Mp.export === \"function\") {                                                                               // 8\n    // If the Mp.{import,export} methods have already been                                                             // 9\n    // defined, abandon reification immediately.                                                                       // 10\n    return Module;                                                                                                     // 11\n  }                                                                                                                    // 12\n                                                                                                                       // 13\n  // Platform-specific code should implement this method however                                                       // 14\n  // appropriate. Module.prototype.resolve(id) should return an absolute                                               // 15\n  // version of the given module identifier, like require.resolve.                                                     // 16\n  Mp.resolve = Mp.resolve || function resolve(id) {                                                                    // 17\n    throw new Error(\"Module.prototype.resolve not implemented\");                                                       // 18\n  };                                                                                                                   // 19\n                                                                                                                       // 20\n  // Platform-specific code should find a way to call this method whenever                                             // 21\n  // the module system is about to return module.exports from require. This                                            // 22\n  // might happen more than once per module, in case of dependency cycles,                                             // 23\n  // so we want Module.prototype.runModuleSetters to run each time.                                                    // 24\n  Mp.runModuleSetters = function runModuleSetters(valueToPassThrough) {                                                // 25\n    var entry = Entry.get(this.id);                                                                                    // 26\n    if (entry) {                                                                                                       // 27\n      entry.runModuleSetters(this);                                                                                    // 28\n    }                                                                                                                  // 29\n                                                                                                                       // 30\n    // Assignments to exported local variables get wrapped with calls to                                               // 31\n    // module.runModuleSetters, so module.runModuleSetters returns the                                                 // 32\n    // valueToPassThrough parameter to allow the value of the original                                                 // 33\n    // expression to pass through. For example,                                                                        // 34\n    //                                                                                                                 // 35\n    //   export var a = 1;                                                                                             // 36\n    //   console.log(a += 3);                                                                                          // 37\n    //                                                                                                                 // 38\n    // becomes                                                                                                         // 39\n    //                                                                                                                 // 40\n    //   module.export(\"a\", () => a);                                                                                  // 41\n    //   var a = 1;                                                                                                    // 42\n    //   console.log(module.runModuleSetters(a += 3));                                                                 // 43\n    //                                                                                                                 // 44\n    // This ensures module.runModuleSetters runs immediately after the                                                 // 45\n    // assignment, and does not interfere with the larger computation.                                                 // 46\n    return valueToPassThrough;                                                                                         // 47\n  };                                                                                                                   // 48\n                                                                                                                       // 49\n  function setESModule(module) {                                                                                       // 50\n    var exports = module.exports;                                                                                      // 51\n    if (exports && typeof exports === \"object\") {                                                                      // 52\n      exports.__esModule = true;                                                                                       // 53\n    }                                                                                                                  // 54\n  }                                                                                                                    // 55\n                                                                                                                       // 56\n  Mp.import = function (id, setters) {                                                                                 // 57\n    var module = this;                                                                                                 // 58\n    setESModule(module);                                                                                               // 59\n                                                                                                                       // 60\n    var absoluteId = module.resolve(id);                                                                               // 61\n                                                                                                                       // 62\n    if (setters && typeof setters === \"object\") {                                                                      // 63\n      var entry = Entry.getOrCreate(absoluteId);                                                                       // 64\n      entry.addSetters(module, setters);                                                                               // 65\n    }                                                                                                                  // 66\n                                                                                                                       // 67\n    var countBefore = entry && entry.runCount;                                                                         // 68\n    var exports = typeof module.require === \"function\"                                                                 // 69\n      ? module.require(absoluteId)                                                                                     // 70\n      : require(absoluteId);                                                                                           // 71\n                                                                                                                       // 72\n    if (entry && entry.runCount === countBefore) {                                                                     // 73\n      // If require(absoluteId) didn't run any setters for this entry,                                                 // 74\n      // perhaps because it's not the first time this module has been                                                  // 75\n      // required, run the setters now using an object that passes as the                                              // 76\n      // real module object.                                                                                           // 77\n      entry.runModuleSetters({                                                                                         // 78\n        id: absoluteId,                                                                                                // 79\n        exports: exports,                                                                                              // 80\n        getExportByName: Mp.getExportByName                                                                            // 81\n      });                                                                                                              // 82\n    }                                                                                                                  // 83\n  };                                                                                                                   // 84\n                                                                                                                       // 85\n  // Register getter functions for local variables in the scope of an                                                  // 86\n  // export statement. The keys of the getters object are exported names,                                              // 87\n  // and the values are functions that return local values.                                                            // 88\n  Mp.export = function (getters) {                                                                                     // 89\n    var module = this;                                                                                                 // 90\n    setESModule(module);                                                                                               // 91\n                                                                                                                       // 92\n    if (utils.isPlainObject(getters)) {                                                                                // 93\n      Entry.getOrCreate(module.id).addGetters(getters);                                                                // 94\n    }                                                                                                                  // 95\n                                                                                                                       // 96\n    if (module.loaded) {                                                                                               // 97\n      // If the module has already been evaluated, then we need to trigger                                             // 98\n      // another round of entry.runModuleSetters calls, which begins by                                                // 99\n      // calling entry.runModuleGetters(module).                                                                       // 100\n      module.runModuleSetters();                                                                                       // 101\n    }                                                                                                                  // 102\n  };                                                                                                                   // 103\n                                                                                                                       // 104\n  // This method can be overridden by client code to implement custom export                                           // 105\n  // naming logic. The current implementation works well with Babel's                                                  // 106\n  // __esModule convention.                                                                                            // 107\n  Mp.getExportByName = function (name) {                                                                               // 108\n    var exports = this.exports;                                                                                        // 109\n                                                                                                                       // 110\n    if (name === \"*\") {                                                                                                // 111\n      return exports;                                                                                                  // 112\n    }                                                                                                                  // 113\n                                                                                                                       // 114\n    if (name === \"default\" &&                                                                                          // 115\n        ! (exports &&                                                                                                  // 116\n           typeof exports === \"object\" &&                                                                              // 117\n           exports.__esModule &&                                                                                       // 118\n           \"default\" in exports)) {                                                                                    // 119\n      return exports;                                                                                                  // 120\n    }                                                                                                                  // 121\n                                                                                                                       // 122\n    return exports && exports[name];                                                                                   // 123\n  };                                                                                                                   // 124\n                                                                                                                       // 125\n  return Module;                                                                                                       // 126\n};                                                                                                                     // 127\n                                                                                                                       // 128\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"entry.js\":[\"./utils.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/modules/node_modules/reify/lib/entry.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                          // 1\nvar entryMap = Object.create(null);                                                                                    // 2\nvar utils = require(\"./utils.js\");                                                                                     // 3\n                                                                                                                       // 4\nfunction Entry(id) {                                                                                                   // 5\n  // Same as module.id for this module.                                                                                // 6\n  this.id = id;                                                                                                        // 7\n  // The number of times this.runModuleSetters has been called.                                                        // 8\n  this.runCount = 0;                                                                                                   // 9\n  // Setters for assigning to local variables in parent modules.                                                       // 10\n  this.setters = Object.create(null);                                                                                  // 11\n  // Getters for local variables exported from this module.                                                            // 12\n  this.getters = Object.create(null);                                                                                  // 13\n}                                                                                                                      // 14\n                                                                                                                       // 15\nvar Ep = Entry.prototype;                                                                                              // 16\n                                                                                                                       // 17\nEntry.get = function (id) {                                                                                            // 18\n  return entryMap[id] || null;                                                                                         // 19\n};                                                                                                                     // 20\n                                                                                                                       // 21\nEntry.getOrCreate = function (id) {                                                                                    // 22\n  return entryMap[id] = entryMap[id] || new Entry(id);                                                                 // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\nEp.addSetters = function (parent, setters) {                                                                           // 26\n  var entry = this;                                                                                                    // 27\n                                                                                                                       // 28\n  Object.keys(setters).forEach(function (name) {                                                                       // 29\n    var setter = setters[name];                                                                                        // 30\n    if (typeof setter === \"function\" &&                                                                                // 31\n        // Ignore any requests for the exports.__esModule property.\"                                                   // 32\n        name !== \"__esModule\") {                                                                                       // 33\n      setter.parent = parent;                                                                                          // 34\n      (entry.setters[name] =                                                                                           // 35\n       entry.setters[name] || []                                                                                       // 36\n      ).push(setter);                                                                                                  // 37\n    }                                                                                                                  // 38\n  });                                                                                                                  // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\nEp.addGetters = function (getters) {                                                                                   // 42\n  var entry = this;                                                                                                    // 43\n  Object.keys(getters).forEach(function (name) {                                                                       // 44\n    var getter = getters[name];                                                                                        // 45\n    if (typeof getter === \"function\" &&                                                                                // 46\n        // Ignore any requests for the exports.__esModule property.\"                                                   // 47\n        name !== \"__esModule\") {                                                                                       // 48\n      // Should this throw if hasOwn.call(this.getters, name)?                                                         // 49\n      entry.getters[name] = getter;                                                                                    // 50\n    }                                                                                                                  // 51\n  });                                                                                                                  // 52\n};                                                                                                                     // 53\n                                                                                                                       // 54\nfunction runModuleSetters(module) {                                                                                    // 55\n  var entry = entryMap[module.id];                                                                                     // 56\n  if (entry) {                                                                                                         // 57\n    entry.runModuleSetters(module);                                                                                    // 58\n  }                                                                                                                    // 59\n}                                                                                                                      // 60\n                                                                                                                       // 61\nfunction runModuleGetters(module) {                                                                                    // 62\n  var entry = entryMap[module.id];                                                                                     // 63\n  return entry ? entry.runModuleGetters(module) : 0;                                                                   // 64\n}                                                                                                                      // 65\n                                                                                                                       // 66\nEp.runModuleGetters = function (module) {                                                                              // 67\n  var entry = this;                                                                                                    // 68\n  var changeCount = 0;                                                                                                 // 69\n                                                                                                                       // 70\n  Object.keys(entry.getters).forEach(function (name) {                                                                 // 71\n    if (entry.runGetter(module, name)) {                                                                               // 72\n      ++changeCount;                                                                                                   // 73\n    }                                                                                                                  // 74\n  });                                                                                                                  // 75\n                                                                                                                       // 76\n  return changeCount;                                                                                                  // 77\n};                                                                                                                     // 78\n                                                                                                                       // 79\n// Returns true iff the getter updated module.exports with a new value.                                                // 80\nEp.runGetter = function (module, name) {                                                                               // 81\n  if (! hasOwn.call(this.getters, name)) {                                                                             // 82\n    return false;                                                                                                      // 83\n  }                                                                                                                    // 84\n                                                                                                                       // 85\n  var getter = this.getters[name];                                                                                     // 86\n  try {                                                                                                                // 87\n    var value = getter.call(module);                                                                                   // 88\n  } catch (e) {}                                                                                                       // 89\n  var exports = module.exports;                                                                                        // 90\n                                                                                                                       // 91\n  if (! hasOwn.call(exports, name) ||                                                                                  // 92\n      exports[name] !== value) {                                                                                       // 93\n    // We update module.exports[name] with the current value so that                                                   // 94\n    // CommonJS require calls remain consistent with module.import.                                                    // 95\n    exports[name] = value;                                                                                             // 96\n    return true;                                                                                                       // 97\n  }                                                                                                                    // 98\n                                                                                                                       // 99\n  return false;                                                                                                        // 100\n};                                                                                                                     // 101\n                                                                                                                       // 102\n// Called whenever module.exports might have changed, to trigger any                                                   // 103\n// setters associated with the newly exported values.                                                                  // 104\nEp.runModuleSetters = function (module) {                                                                              // 105\n  var entry = this;                                                                                                    // 106\n  var names = Object.keys(entry.setters);                                                                              // 107\n                                                                                                                       // 108\n  // Make sure module.exports is up to date before we call                                                             // 109\n  // module.getExportByName(name).                                                                                     // 110\n  entry.runModuleGetters(module);                                                                                      // 111\n                                                                                                                       // 112\n  // Invoke the given callback once for every (setter, value, name) triple                                             // 113\n  // that needs to be called. Note that forEachSetter does not call any                                                // 114\n  // setters itself, only the given callback.                                                                          // 115\n  function forEachSetter(callback, context) {                                                                          // 116\n    names.forEach(function (name) {                                                                                    // 117\n      entry.setters[name].forEach(function (setter) {                                                                  // 118\n        var value = module.getExportByName(name);                                                                      // 119\n        if (name === \"*\") {                                                                                            // 120\n          Object.keys(value).forEach(function (name) {                                                                 // 121\n            call(setter, value[name], name);                                                                           // 122\n          });                                                                                                          // 123\n        } else {                                                                                                       // 124\n          call(setter, value, name);                                                                                   // 125\n        }                                                                                                              // 126\n      });                                                                                                              // 127\n    });                                                                                                                // 128\n                                                                                                                       // 129\n    function call(setter, value, name) {                                                                               // 130\n      if (name === \"__esModule\") {                                                                                     // 131\n        // Ignore setters asking for module.exports.__esModule.                                                        // 132\n        return;                                                                                                        // 133\n      }                                                                                                                // 134\n                                                                                                                       // 135\n      setter.last = setter.last || Object.create(null);                                                                // 136\n                                                                                                                       // 137\n      if (! hasOwn.call(setter.last, name) ||                                                                          // 138\n          setter.last[name] !== value) {                                                                               // 139\n        // Only invoke the callback if we have not called this setter                                                  // 140\n        // (with a value of this name) before, or the current value is                                                 // 141\n        // different from the last value we passed to this setter.                                                     // 142\n        return callback.apply(context, arguments);                                                                     // 143\n      }                                                                                                                // 144\n    }                                                                                                                  // 145\n  }                                                                                                                    // 146\n                                                                                                                       // 147\n  // Every three elements of this list form a (setter, value, name) triple                                             // 148\n  // that needs to be invoked.                                                                                         // 149\n  var settersToCall = [];                                                                                              // 150\n                                                                                                                       // 151\n  // Lazily-initialized objects mapping parent module identifiers to                                                   // 152\n  // relevant parent module objects and snapshots of their exports.                                                    // 153\n  var relevantParents;                                                                                                 // 154\n  var parentSnapshots;                                                                                                 // 155\n                                                                                                                       // 156\n  // Take snapshots of setter.parent.exports for any setters that we are                                               // 157\n  // planning to call, so that we can later determine if calling the                                                   // 158\n  // setters modified any of those exports objects.                                                                    // 159\n  forEachSetter(function (setter, value, name) {                                                                       // 160\n    var parent = setter.parent;                                                                                        // 161\n    parentSnapshots = parentSnapshots || Object.create(null);                                                          // 162\n    if (! hasOwn.call(parentSnapshots, parent.id)) {                                                                   // 163\n      relevantParents = relevantParents || Object.create(null);                                                        // 164\n      relevantParents[parent.id] = parent;                                                                             // 165\n      if (utils.isPlainObject(parent.exports)) {                                                                       // 166\n        // If parent.exports is an object, make a shallow clone of it so                                               // 167\n        // that we can see if it changes as a result of calling setters.                                               // 168\n        parentSnapshots[parent.id] = utils.assign({}, parent.exports);                                                 // 169\n      } else {                                                                                                         // 170\n        // If parent.exports is not an object, the \"snapshot\" is just the                                              // 171\n        // value of parent.exports.                                                                                    // 172\n        parentSnapshots[parent.id] = parent.exports;                                                                   // 173\n      }                                                                                                                // 174\n    }                                                                                                                  // 175\n                                                                                                                       // 176\n    // Push three elements at a time to avoid creating wrapper arrays for                                              // 177\n    // each (setter, value, name) triple. Note the i += 3 below.                                                       // 178\n    settersToCall.push(setter, value, name);                                                                           // 179\n  });                                                                                                                  // 180\n                                                                                                                       // 181\n  // Now call all the setters that we decided we need to call.                                                         // 182\n  for (var i = 0; i < settersToCall.length; i += 3) {                                                                  // 183\n    var setter = settersToCall[i];                                                                                     // 184\n    var value = settersToCall[i + 1];                                                                                  // 185\n    var name = settersToCall[i + 2];                                                                                   // 186\n    setter.call(module, setter.last[name] = value, name);                                                              // 187\n  }                                                                                                                    // 188\n                                                                                                                       // 189\n  ++entry.runCount;                                                                                                    // 190\n                                                                                                                       // 191\n  if (! relevantParents) {                                                                                             // 192\n    // If we never called takeSnapshot, then we can avoid checking                                                     // 193\n    // relevantParents and parentSnapshots below.                                                                      // 194\n    return;                                                                                                            // 195\n  }                                                                                                                    // 196\n                                                                                                                       // 197\n  // If any of the setters updated the module.exports of a parent module,                                              // 198\n  // or updated local variables that are exported by that parent module,                                               // 199\n  // then we must re-run any setters registered by that parent module.                                                 // 200\n  Object.keys(relevantParents).forEach(function (id) {                                                                 // 201\n    var parent = relevantParents[id];                                                                                  // 202\n                                                                                                                       // 203\n    if (runModuleGetters(parent) > 0) {                                                                                // 204\n      return runModuleSetters(parent);                                                                                 // 205\n    }                                                                                                                  // 206\n                                                                                                                       // 207\n    var exports = parent.exports;                                                                                      // 208\n    var snapshot = parentSnapshots[parent.id];                                                                         // 209\n    if (utils.shallowObjEqual(exports, snapshot)) {                                                                    // 210\n      // If parent.exports have not changed since we took the snapshot,                                                // 211\n      // then we do not need to run the parent's setters.                                                              // 212\n      return;                                                                                                          // 213\n    }                                                                                                                  // 214\n                                                                                                                       // 215\n    runModuleSetters(parent);                                                                                          // 216\n  });                                                                                                                  // 217\n};                                                                                                                     // 218\n                                                                                                                       // 219\nexports.Entry = Entry;                                                                                                 // 220\n                                                                                                                       // 221\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"utils.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/modules/node_modules/reify/lib/utils.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                          // 1\nvar objToStr = Object.prototype.toString;                                                                              // 2\nvar objStr = objToStr.call({});                                                                                        // 3\n                                                                                                                       // 4\nfunction isPlainObject(value) {                                                                                        // 5\n  return objToStr.call(value) === objStr;                                                                              // 6\n}                                                                                                                      // 7\nexports.isPlainObject = isPlainObject;                                                                                 // 8\n                                                                                                                       // 9\nexports.assign = Object.assign || function (obj) {                                                                     // 10\n  var argc = arguments.length;                                                                                         // 11\n  for (var i = 1; i < argc; ++i) {                                                                                     // 12\n    var arg = arguments[i];                                                                                            // 13\n    if (arg && typeof arg === \"object\") {                                                                              // 14\n      var keys = Object.keys(arg);                                                                                     // 15\n      for (var k = 0; k < keys.length; ++k) {                                                                          // 16\n        var key = keys[k];                                                                                             // 17\n        obj[key] = arg[key];                                                                                           // 18\n      }                                                                                                                // 19\n    }                                                                                                                  // 20\n  }                                                                                                                    // 21\n  return obj;                                                                                                          // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\nexports.shallowObjEqual = function(a, b) {                                                                             // 25\n  if (a === b) {                                                                                                       // 26\n    return true;                                                                                                       // 27\n  }                                                                                                                    // 28\n                                                                                                                       // 29\n  if (! isPlainObject(a) ||                                                                                            // 30\n      ! isPlainObject(b)) {                                                                                            // 31\n    return false;                                                                                                      // 32\n  }                                                                                                                    // 33\n                                                                                                                       // 34\n  var aKeys = Object.keys(a);                                                                                          // 35\n  var bKeys = Object.keys(b);                                                                                          // 36\n                                                                                                                       // 37\n  if (aKeys.length !== bKeys.length) {                                                                                 // 38\n    return false;                                                                                                      // 39\n  }                                                                                                                    // 40\n                                                                                                                       // 41\n  return aKeys.every(function (key) {                                                                                  // 42\n    return hasOwn.call(b, key) &&                                                                                      // 43\n      a[key] === b[key];                                                                                               // 44\n  });                                                                                                                  // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},\"meteor-node-stubs\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/package.json                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"meteor-node-stubs\";                                                                                    // 1\nexports.version = \"0.2.3\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"./map.json\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/index.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar map = require(\"./map.json\");                                                                                       // 1\nvar meteorAliases = {};                                                                                                // 2\n                                                                                                                       // 3\nObject.keys(map).forEach(function (id) {                                                                               // 4\n  if (typeof map[id] === \"string\") {                                                                                   // 5\n    try {                                                                                                              // 6\n      exports[id] = meteorAliases[id + \".js\"] =                                                                        // 7\n        require.resolve(map[id]);                                                                                      // 8\n    } catch (e) {                                                                                                      // 9\n      // Resolution can fail at runtime if the stub was not included in the                                            // 10\n      // bundle because nothing depended on it.                                                                        // 11\n    }                                                                                                                  // 12\n  } else {                                                                                                             // 13\n    exports[id] = map[id];                                                                                             // 14\n    meteorAliases[id + \".js\"] = function(){};                                                                          // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\nif (typeof meteorInstall === \"function\") {                                                                             // 19\n  meteorInstall({                                                                                                      // 20\n    // Install the aliases into a node_modules directory one level up from                                             // 21\n    // the root directory, so that they do not clutter the namespace                                                   // 22\n    // available to apps and packages.                                                                                 // 23\n    \"..\": {                                                                                                            // 24\n      node_modules: meteorAliases                                                                                      // 25\n    }                                                                                                                  // 26\n  });                                                                                                                  // 27\n}                                                                                                                      // 28\n                                                                                                                       // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"map.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/map.json                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {                                                                                                     // 1\n  \"assert\": \"assert/\",                                                                                                 // 2\n  \"buffer\": \"buffer/\",                                                                                                 // 3\n  \"child_process\": null,                                                                                               // 4\n  \"cluster\": null,                                                                                                     // 5\n  \"console\": \"console-browserify\",                                                                                     // 6\n  \"constants\": \"constants-browserify\",                                                                                 // 7\n  \"crypto\": \"crypto-browserify\",                                                                                       // 8\n  \"dgram\": null,                                                                                                       // 9\n  \"dns\": null,                                                                                                         // 10\n  \"domain\": \"domain-browser\",                                                                                          // 11\n  \"events\": \"events/\",                                                                                                 // 12\n  \"fs\": null,                                                                                                          // 13\n  \"http\": \"http-browserify\",                                                                                           // 14\n  \"https\": \"https-browserify\",                                                                                         // 15\n  \"module\": null,                                                                                                      // 16\n  \"net\": null,                                                                                                         // 17\n  \"os\": \"os-browserify/browser.js\",                                                                                    // 18\n  \"path\": \"path-browserify\",                                                                                           // 19\n  \"process\": \"process/browser.js\",                                                                                     // 20\n  \"punycode\": \"punycode/\",                                                                                             // 21\n  \"querystring\": \"querystring-es3/\",                                                                                   // 22\n  \"readline\": null,                                                                                                    // 23\n  \"repl\": null,                                                                                                        // 24\n  \"stream\": \"stream-browserify\",                                                                                       // 25\n  \"_stream_duplex\": \"readable-stream/duplex.js\",                                                                       // 26\n  \"_stream_passthrough\": \"readable-stream/passthrough.js\",                                                             // 27\n  \"_stream_readable\": \"readable-stream/readable.js\",                                                                   // 28\n  \"_stream_transform\": \"readable-stream/transform.js\",                                                                 // 29\n  \"_stream_writable\": \"readable-stream/writable.js\",                                                                   // 30\n  \"string_decoder\": \"string_decoder/\",                                                                                 // 31\n  \"sys\": \"util/util.js\",                                                                                               // 32\n  \"timers\": \"timers-browserify\",                                                                                       // 33\n  \"tls\": null,                                                                                                         // 34\n  \"tty\": \"tty-browserify\",                                                                                             // 35\n  \"url\": \"url/\",                                                                                                       // 36\n  \"util\": \"util/util.js\",                                                                                              // 37\n  \"vm\": \"vm-browserify\",                                                                                               // 38\n  \"zlib\": \"browserify-zlib\"                                                                                            // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"deps\":{\"buffer.js\":[\"buffer/\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/deps/buffer.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"buffer/\");                                                                                                    // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"process.js\":[\"process/browser.js\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/deps/process.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"process/browser.js\");                                                                                         // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"domain.js\":[\"domain-browser\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/deps/domain.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"domain-browser\");                                                                                             // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"node_modules\":{\"buffer\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/package.json                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"buffer\";                                                                                               // 1\nexports.version = \"4.5.1\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"base64-js\",\"ieee754\",\"isarray\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/index.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * The buffer module from node.js, for the browser.                                                                    // 2\n *                                                                                                                     // 3\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>                                               // 4\n * @license  MIT                                                                                                       // 5\n */                                                                                                                    // 6\n/* eslint-disable no-proto */                                                                                          // 7\n                                                                                                                       // 8\n'use strict'                                                                                                           // 9\n                                                                                                                       // 10\nvar base64 = require('base64-js')                                                                                      // 11\nvar ieee754 = require('ieee754')                                                                                       // 12\nvar isArray = require('isarray')                                                                                       // 13\n                                                                                                                       // 14\nexports.Buffer = Buffer                                                                                                // 15\nexports.SlowBuffer = SlowBuffer                                                                                        // 16\nexports.INSPECT_MAX_BYTES = 50                                                                                         // 17\nBuffer.poolSize = 8192 // not used by this implementation                                                              // 18\n                                                                                                                       // 19\nvar rootParent = {}                                                                                                    // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * If `Buffer.TYPED_ARRAY_SUPPORT`:                                                                                    // 23\n *   === true    Use Uint8Array implementation (fastest)                                                               // 24\n *   === false   Use Object implementation (most compatible, even IE6)                                                 // 25\n *                                                                                                                     // 26\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,                                  // 27\n * Opera 11.6+, iOS 4.2+.                                                                                              // 28\n *                                                                                                                     // 29\n * Due to various browser bugs, sometimes the Object implementation will be used even                                  // 30\n * when the browser supports typed arrays.                                                                             // 31\n *                                                                                                                     // 32\n * Note:                                                                                                               // 33\n *                                                                                                                     // 34\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,                                 // 35\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.                                                       // 36\n *                                                                                                                     // 37\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.                                            // 38\n *                                                                                                                     // 39\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of                              // 40\n *     incorrect length in some situations.                                                                            // 41\n                                                                                                                       // 42\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they                              // 43\n * get the Object implementation, which is slower but behaves correctly.                                               // 44\n */                                                                                                                    // 45\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined                                                  // 46\n  ? global.TYPED_ARRAY_SUPPORT                                                                                         // 47\n  : typedArraySupport()                                                                                                // 48\n                                                                                                                       // 49\nfunction typedArraySupport () {                                                                                        // 50\n  try {                                                                                                                // 51\n    var arr = new Uint8Array(1)                                                                                        // 52\n    arr.foo = function () { return 42 }                                                                                // 53\n    return arr.foo() === 42 && // typed array instances can be augmented                                               // 54\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`                                           // 55\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`                                              // 56\n  } catch (e) {                                                                                                        // 57\n    return false                                                                                                       // 58\n  }                                                                                                                    // 59\n}                                                                                                                      // 60\n                                                                                                                       // 61\nfunction kMaxLength () {                                                                                               // 62\n  return Buffer.TYPED_ARRAY_SUPPORT                                                                                    // 63\n    ? 0x7fffffff                                                                                                       // 64\n    : 0x3fffffff                                                                                                       // 65\n}                                                                                                                      // 66\n                                                                                                                       // 67\n/**                                                                                                                    // 68\n * The Buffer constructor returns instances of `Uint8Array` that have their                                            // 69\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of                                     // 70\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods                                     // 71\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it                                       // 72\n * returns a single octet.                                                                                             // 73\n *                                                                                                                     // 74\n * The `Uint8Array` prototype remains unmodified.                                                                      // 75\n */                                                                                                                    // 76\nfunction Buffer (arg) {                                                                                                // 77\n  if (!(this instanceof Buffer)) {                                                                                     // 78\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.                                           // 79\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])                                                     // 80\n    return new Buffer(arg)                                                                                             // 81\n  }                                                                                                                    // 82\n                                                                                                                       // 83\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 84\n    this.length = 0                                                                                                    // 85\n    this.parent = undefined                                                                                            // 86\n  }                                                                                                                    // 87\n                                                                                                                       // 88\n  // Common case.                                                                                                      // 89\n  if (typeof arg === 'number') {                                                                                       // 90\n    return fromNumber(this, arg)                                                                                       // 91\n  }                                                                                                                    // 92\n                                                                                                                       // 93\n  // Slightly less common case.                                                                                        // 94\n  if (typeof arg === 'string') {                                                                                       // 95\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')                                         // 96\n  }                                                                                                                    // 97\n                                                                                                                       // 98\n  // Unusual.                                                                                                          // 99\n  return fromObject(this, arg)                                                                                         // 100\n}                                                                                                                      // 101\n                                                                                                                       // 102\n// TODO: Legacy, not needed anymore. Remove in next major version.                                                     // 103\nBuffer._augment = function (arr) {                                                                                     // 104\n  arr.__proto__ = Buffer.prototype                                                                                     // 105\n  return arr                                                                                                           // 106\n}                                                                                                                      // 107\n                                                                                                                       // 108\nfunction fromNumber (that, length) {                                                                                   // 109\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)                                                          // 110\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 111\n    for (var i = 0; i < length; i++) {                                                                                 // 112\n      that[i] = 0                                                                                                      // 113\n    }                                                                                                                  // 114\n  }                                                                                                                    // 115\n  return that                                                                                                          // 116\n}                                                                                                                      // 117\n                                                                                                                       // 118\nfunction fromString (that, string, encoding) {                                                                         // 119\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'                                               // 120\n                                                                                                                       // 121\n  // Assumption: byteLength() return value is always < kMaxLength.                                                     // 122\n  var length = byteLength(string, encoding) | 0                                                                        // 123\n  that = allocate(that, length)                                                                                        // 124\n                                                                                                                       // 125\n  that.write(string, encoding)                                                                                         // 126\n  return that                                                                                                          // 127\n}                                                                                                                      // 128\n                                                                                                                       // 129\nfunction fromObject (that, object) {                                                                                   // 130\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)                                                         // 131\n                                                                                                                       // 132\n  if (isArray(object)) return fromArray(that, object)                                                                  // 133\n                                                                                                                       // 134\n  if (object == null) {                                                                                                // 135\n    throw new TypeError('must start with number, buffer, array or string')                                             // 136\n  }                                                                                                                    // 137\n                                                                                                                       // 138\n  if (typeof ArrayBuffer !== 'undefined') {                                                                            // 139\n    if (object.buffer instanceof ArrayBuffer) {                                                                        // 140\n      return fromTypedArray(that, object)                                                                              // 141\n    }                                                                                                                  // 142\n    if (object instanceof ArrayBuffer) {                                                                               // 143\n      return fromArrayBuffer(that, object)                                                                             // 144\n    }                                                                                                                  // 145\n  }                                                                                                                    // 146\n                                                                                                                       // 147\n  if (object.length) return fromArrayLike(that, object)                                                                // 148\n                                                                                                                       // 149\n  return fromJsonObject(that, object)                                                                                  // 150\n}                                                                                                                      // 151\n                                                                                                                       // 152\nfunction fromBuffer (that, buffer) {                                                                                   // 153\n  var length = checked(buffer.length) | 0                                                                              // 154\n  that = allocate(that, length)                                                                                        // 155\n  buffer.copy(that, 0, 0, length)                                                                                      // 156\n  return that                                                                                                          // 157\n}                                                                                                                      // 158\n                                                                                                                       // 159\nfunction fromArray (that, array) {                                                                                     // 160\n  var length = checked(array.length) | 0                                                                               // 161\n  that = allocate(that, length)                                                                                        // 162\n  for (var i = 0; i < length; i += 1) {                                                                                // 163\n    that[i] = array[i] & 255                                                                                           // 164\n  }                                                                                                                    // 165\n  return that                                                                                                          // 166\n}                                                                                                                      // 167\n                                                                                                                       // 168\n// Duplicate of fromArray() to keep fromArray() monomorphic.                                                           // 169\nfunction fromTypedArray (that, array) {                                                                                // 170\n  var length = checked(array.length) | 0                                                                               // 171\n  that = allocate(that, length)                                                                                        // 172\n  // Truncating the elements is probably not what people expect from typed                                             // 173\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior                                           // 174\n  // of the old Buffer constructor.                                                                                    // 175\n  for (var i = 0; i < length; i += 1) {                                                                                // 176\n    that[i] = array[i] & 255                                                                                           // 177\n  }                                                                                                                    // 178\n  return that                                                                                                          // 179\n}                                                                                                                      // 180\n                                                                                                                       // 181\nfunction fromArrayBuffer (that, array) {                                                                               // 182\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer                                                // 183\n                                                                                                                       // 184\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 185\n    // Return an augmented `Uint8Array` instance, for best performance                                                 // 186\n    that = new Uint8Array(array)                                                                                       // 187\n    that.__proto__ = Buffer.prototype                                                                                  // 188\n  } else {                                                                                                             // 189\n    // Fallback: Return an object instance of the Buffer class                                                         // 190\n    that = fromTypedArray(that, new Uint8Array(array))                                                                 // 191\n  }                                                                                                                    // 192\n  return that                                                                                                          // 193\n}                                                                                                                      // 194\n                                                                                                                       // 195\nfunction fromArrayLike (that, array) {                                                                                 // 196\n  var length = checked(array.length) | 0                                                                               // 197\n  that = allocate(that, length)                                                                                        // 198\n  for (var i = 0; i < length; i += 1) {                                                                                // 199\n    that[i] = array[i] & 255                                                                                           // 200\n  }                                                                                                                    // 201\n  return that                                                                                                          // 202\n}                                                                                                                      // 203\n                                                                                                                       // 204\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.                                             // 205\n// Returns a zero-length buffer for inputs that don't conform to the spec.                                             // 206\nfunction fromJsonObject (that, object) {                                                                               // 207\n  var array                                                                                                            // 208\n  var length = 0                                                                                                       // 209\n                                                                                                                       // 210\n  if (object.type === 'Buffer' && isArray(object.data)) {                                                              // 211\n    array = object.data                                                                                                // 212\n    length = checked(array.length) | 0                                                                                 // 213\n  }                                                                                                                    // 214\n  that = allocate(that, length)                                                                                        // 215\n                                                                                                                       // 216\n  for (var i = 0; i < length; i += 1) {                                                                                // 217\n    that[i] = array[i] & 255                                                                                           // 218\n  }                                                                                                                    // 219\n  return that                                                                                                          // 220\n}                                                                                                                      // 221\n                                                                                                                       // 222\nif (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                      // 223\n  Buffer.prototype.__proto__ = Uint8Array.prototype                                                                    // 224\n  Buffer.__proto__ = Uint8Array                                                                                        // 225\n  if (typeof Symbol !== 'undefined' && Symbol.species &&                                                               // 226\n      Buffer[Symbol.species] === Buffer) {                                                                             // 227\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97                                         // 228\n    Object.defineProperty(Buffer, Symbol.species, {                                                                    // 229\n      value: null,                                                                                                     // 230\n      configurable: true                                                                                               // 231\n    })                                                                                                                 // 232\n  }                                                                                                                    // 233\n} else {                                                                                                               // 234\n  // pre-set for values that may exist in the future                                                                   // 235\n  Buffer.prototype.length = undefined                                                                                  // 236\n  Buffer.prototype.parent = undefined                                                                                  // 237\n}                                                                                                                      // 238\n                                                                                                                       // 239\nfunction allocate (that, length) {                                                                                     // 240\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 241\n    // Return an augmented `Uint8Array` instance, for best performance                                                 // 242\n    that = new Uint8Array(length)                                                                                      // 243\n    that.__proto__ = Buffer.prototype                                                                                  // 244\n  } else {                                                                                                             // 245\n    // Fallback: Return an object instance of the Buffer class                                                         // 246\n    that.length = length                                                                                               // 247\n  }                                                                                                                    // 248\n                                                                                                                       // 249\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1                                                       // 250\n  if (fromPool) that.parent = rootParent                                                                               // 251\n                                                                                                                       // 252\n  return that                                                                                                          // 253\n}                                                                                                                      // 254\n                                                                                                                       // 255\nfunction checked (length) {                                                                                            // 256\n  // Note: cannot use `length < kMaxLength` here because that fails when                                               // 257\n  // length is NaN (which is otherwise coerced to zero.)                                                               // 258\n  if (length >= kMaxLength()) {                                                                                        // 259\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +                                           // 260\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')                                            // 261\n  }                                                                                                                    // 262\n  return length | 0                                                                                                    // 263\n}                                                                                                                      // 264\n                                                                                                                       // 265\nfunction SlowBuffer (subject, encoding) {                                                                              // 266\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)                                          // 267\n                                                                                                                       // 268\n  var buf = new Buffer(subject, encoding)                                                                              // 269\n  delete buf.parent                                                                                                    // 270\n  return buf                                                                                                           // 271\n}                                                                                                                      // 272\n                                                                                                                       // 273\nBuffer.isBuffer = function isBuffer (b) {                                                                              // 274\n  return !!(b != null && b._isBuffer)                                                                                  // 275\n}                                                                                                                      // 276\n                                                                                                                       // 277\nBuffer.compare = function compare (a, b) {                                                                             // 278\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {                                                                    // 279\n    throw new TypeError('Arguments must be Buffers')                                                                   // 280\n  }                                                                                                                    // 281\n                                                                                                                       // 282\n  if (a === b) return 0                                                                                                // 283\n                                                                                                                       // 284\n  var x = a.length                                                                                                     // 285\n  var y = b.length                                                                                                     // 286\n                                                                                                                       // 287\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {                                                                // 288\n    if (a[i] !== b[i]) {                                                                                               // 289\n      x = a[i]                                                                                                         // 290\n      y = b[i]                                                                                                         // 291\n      break                                                                                                            // 292\n    }                                                                                                                  // 293\n  }                                                                                                                    // 294\n                                                                                                                       // 295\n  if (x < y) return -1                                                                                                 // 296\n  if (y < x) return 1                                                                                                  // 297\n  return 0                                                                                                             // 298\n}                                                                                                                      // 299\n                                                                                                                       // 300\nBuffer.isEncoding = function isEncoding (encoding) {                                                                   // 301\n  switch (String(encoding).toLowerCase()) {                                                                            // 302\n    case 'hex':                                                                                                        // 303\n    case 'utf8':                                                                                                       // 304\n    case 'utf-8':                                                                                                      // 305\n    case 'ascii':                                                                                                      // 306\n    case 'binary':                                                                                                     // 307\n    case 'base64':                                                                                                     // 308\n    case 'raw':                                                                                                        // 309\n    case 'ucs2':                                                                                                       // 310\n    case 'ucs-2':                                                                                                      // 311\n    case 'utf16le':                                                                                                    // 312\n    case 'utf-16le':                                                                                                   // 313\n      return true                                                                                                      // 314\n    default:                                                                                                           // 315\n      return false                                                                                                     // 316\n  }                                                                                                                    // 317\n}                                                                                                                      // 318\n                                                                                                                       // 319\nBuffer.concat = function concat (list, length) {                                                                       // 320\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')                                // 321\n                                                                                                                       // 322\n  if (list.length === 0) {                                                                                             // 323\n    return new Buffer(0)                                                                                               // 324\n  }                                                                                                                    // 325\n                                                                                                                       // 326\n  var i                                                                                                                // 327\n  if (length === undefined) {                                                                                          // 328\n    length = 0                                                                                                         // 329\n    for (i = 0; i < list.length; i++) {                                                                                // 330\n      length += list[i].length                                                                                         // 331\n    }                                                                                                                  // 332\n  }                                                                                                                    // 333\n                                                                                                                       // 334\n  var buf = new Buffer(length)                                                                                         // 335\n  var pos = 0                                                                                                          // 336\n  for (i = 0; i < list.length; i++) {                                                                                  // 337\n    var item = list[i]                                                                                                 // 338\n    item.copy(buf, pos)                                                                                                // 339\n    pos += item.length                                                                                                 // 340\n  }                                                                                                                    // 341\n  return buf                                                                                                           // 342\n}                                                                                                                      // 343\n                                                                                                                       // 344\nfunction byteLength (string, encoding) {                                                                               // 345\n  if (typeof string !== 'string') string = '' + string                                                                 // 346\n                                                                                                                       // 347\n  var len = string.length                                                                                              // 348\n  if (len === 0) return 0                                                                                              // 349\n                                                                                                                       // 350\n  // Use a for loop to avoid recursion                                                                                 // 351\n  var loweredCase = false                                                                                              // 352\n  for (;;) {                                                                                                           // 353\n    switch (encoding) {                                                                                                // 354\n      case 'ascii':                                                                                                    // 355\n      case 'binary':                                                                                                   // 356\n      // Deprecated                                                                                                    // 357\n      case 'raw':                                                                                                      // 358\n      case 'raws':                                                                                                     // 359\n        return len                                                                                                     // 360\n      case 'utf8':                                                                                                     // 361\n      case 'utf-8':                                                                                                    // 362\n        return utf8ToBytes(string).length                                                                              // 363\n      case 'ucs2':                                                                                                     // 364\n      case 'ucs-2':                                                                                                    // 365\n      case 'utf16le':                                                                                                  // 366\n      case 'utf-16le':                                                                                                 // 367\n        return len * 2                                                                                                 // 368\n      case 'hex':                                                                                                      // 369\n        return len >>> 1                                                                                               // 370\n      case 'base64':                                                                                                   // 371\n        return base64ToBytes(string).length                                                                            // 372\n      default:                                                                                                         // 373\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8                                              // 374\n        encoding = ('' + encoding).toLowerCase()                                                                       // 375\n        loweredCase = true                                                                                             // 376\n    }                                                                                                                  // 377\n  }                                                                                                                    // 378\n}                                                                                                                      // 379\nBuffer.byteLength = byteLength                                                                                         // 380\n                                                                                                                       // 381\nfunction slowToString (encoding, start, end) {                                                                         // 382\n  var loweredCase = false                                                                                              // 383\n                                                                                                                       // 384\n  start = start | 0                                                                                                    // 385\n  end = end === undefined || end === Infinity ? this.length : end | 0                                                  // 386\n                                                                                                                       // 387\n  if (!encoding) encoding = 'utf8'                                                                                     // 388\n  if (start < 0) start = 0                                                                                             // 389\n  if (end > this.length) end = this.length                                                                             // 390\n  if (end <= start) return ''                                                                                          // 391\n                                                                                                                       // 392\n  while (true) {                                                                                                       // 393\n    switch (encoding) {                                                                                                // 394\n      case 'hex':                                                                                                      // 395\n        return hexSlice(this, start, end)                                                                              // 396\n                                                                                                                       // 397\n      case 'utf8':                                                                                                     // 398\n      case 'utf-8':                                                                                                    // 399\n        return utf8Slice(this, start, end)                                                                             // 400\n                                                                                                                       // 401\n      case 'ascii':                                                                                                    // 402\n        return asciiSlice(this, start, end)                                                                            // 403\n                                                                                                                       // 404\n      case 'binary':                                                                                                   // 405\n        return binarySlice(this, start, end)                                                                           // 406\n                                                                                                                       // 407\n      case 'base64':                                                                                                   // 408\n        return base64Slice(this, start, end)                                                                           // 409\n                                                                                                                       // 410\n      case 'ucs2':                                                                                                     // 411\n      case 'ucs-2':                                                                                                    // 412\n      case 'utf16le':                                                                                                  // 413\n      case 'utf-16le':                                                                                                 // 414\n        return utf16leSlice(this, start, end)                                                                          // 415\n                                                                                                                       // 416\n      default:                                                                                                         // 417\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                          // 418\n        encoding = (encoding + '').toLowerCase()                                                                       // 419\n        loweredCase = true                                                                                             // 420\n    }                                                                                                                  // 421\n  }                                                                                                                    // 422\n}                                                                                                                      // 423\n                                                                                                                       // 424\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect                                 // 425\n// Buffer instances.                                                                                                   // 426\nBuffer.prototype._isBuffer = true                                                                                      // 427\n                                                                                                                       // 428\nBuffer.prototype.toString = function toString () {                                                                     // 429\n  var length = this.length | 0                                                                                         // 430\n  if (length === 0) return ''                                                                                          // 431\n  if (arguments.length === 0) return utf8Slice(this, 0, length)                                                        // 432\n  return slowToString.apply(this, arguments)                                                                           // 433\n}                                                                                                                      // 434\n                                                                                                                       // 435\nBuffer.prototype.equals = function equals (b) {                                                                        // 436\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                            // 437\n  if (this === b) return true                                                                                          // 438\n  return Buffer.compare(this, b) === 0                                                                                 // 439\n}                                                                                                                      // 440\n                                                                                                                       // 441\nBuffer.prototype.inspect = function inspect () {                                                                       // 442\n  var str = ''                                                                                                         // 443\n  var max = exports.INSPECT_MAX_BYTES                                                                                  // 444\n  if (this.length > 0) {                                                                                               // 445\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')                                                        // 446\n    if (this.length > max) str += ' ... '                                                                              // 447\n  }                                                                                                                    // 448\n  return '<Buffer ' + str + '>'                                                                                        // 449\n}                                                                                                                      // 450\n                                                                                                                       // 451\nBuffer.prototype.compare = function compare (b) {                                                                      // 452\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                            // 453\n  return Buffer.compare(this, b)                                                                                       // 454\n}                                                                                                                      // 455\n                                                                                                                       // 456\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {                                                        // 457\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff                                                                 // 458\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000                                                          // 459\n  byteOffset >>= 0                                                                                                     // 460\n                                                                                                                       // 461\n  if (this.length === 0) return -1                                                                                     // 462\n  if (byteOffset >= this.length) return -1                                                                             // 463\n                                                                                                                       // 464\n  // Negative offsets start from the end of the buffer                                                                 // 465\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)                                               // 466\n                                                                                                                       // 467\n  if (typeof val === 'string') {                                                                                       // 468\n    if (val.length === 0) return -1 // special case: looking for empty string always fails                             // 469\n    return String.prototype.indexOf.call(this, val, byteOffset)                                                        // 470\n  }                                                                                                                    // 471\n  if (Buffer.isBuffer(val)) {                                                                                          // 472\n    return arrayIndexOf(this, val, byteOffset)                                                                         // 473\n  }                                                                                                                    // 474\n  if (typeof val === 'number') {                                                                                       // 475\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {                                   // 476\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)                                                  // 477\n    }                                                                                                                  // 478\n    return arrayIndexOf(this, [ val ], byteOffset)                                                                     // 479\n  }                                                                                                                    // 480\n                                                                                                                       // 481\n  function arrayIndexOf (arr, val, byteOffset) {                                                                       // 482\n    var foundIndex = -1                                                                                                // 483\n    for (var i = 0; byteOffset + i < arr.length; i++) {                                                                // 484\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {                                       // 485\n        if (foundIndex === -1) foundIndex = i                                                                          // 486\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex                                          // 487\n      } else {                                                                                                         // 488\n        foundIndex = -1                                                                                                // 489\n      }                                                                                                                // 490\n    }                                                                                                                  // 491\n    return -1                                                                                                          // 492\n  }                                                                                                                    // 493\n                                                                                                                       // 494\n  throw new TypeError('val must be string, number or Buffer')                                                          // 495\n}                                                                                                                      // 496\n                                                                                                                       // 497\nfunction hexWrite (buf, string, offset, length) {                                                                      // 498\n  offset = Number(offset) || 0                                                                                         // 499\n  var remaining = buf.length - offset                                                                                  // 500\n  if (!length) {                                                                                                       // 501\n    length = remaining                                                                                                 // 502\n  } else {                                                                                                             // 503\n    length = Number(length)                                                                                            // 504\n    if (length > remaining) {                                                                                          // 505\n      length = remaining                                                                                               // 506\n    }                                                                                                                  // 507\n  }                                                                                                                    // 508\n                                                                                                                       // 509\n  // must be an even number of digits                                                                                  // 510\n  var strLen = string.length                                                                                           // 511\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')                                                          // 512\n                                                                                                                       // 513\n  if (length > strLen / 2) {                                                                                           // 514\n    length = strLen / 2                                                                                                // 515\n  }                                                                                                                    // 516\n  for (var i = 0; i < length; i++) {                                                                                   // 517\n    var parsed = parseInt(string.substr(i * 2, 2), 16)                                                                 // 518\n    if (isNaN(parsed)) throw new Error('Invalid hex string')                                                           // 519\n    buf[offset + i] = parsed                                                                                           // 520\n  }                                                                                                                    // 521\n  return i                                                                                                             // 522\n}                                                                                                                      // 523\n                                                                                                                       // 524\nfunction utf8Write (buf, string, offset, length) {                                                                     // 525\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)                                     // 526\n}                                                                                                                      // 527\n                                                                                                                       // 528\nfunction asciiWrite (buf, string, offset, length) {                                                                    // 529\n  return blitBuffer(asciiToBytes(string), buf, offset, length)                                                         // 530\n}                                                                                                                      // 531\n                                                                                                                       // 532\nfunction binaryWrite (buf, string, offset, length) {                                                                   // 533\n  return asciiWrite(buf, string, offset, length)                                                                       // 534\n}                                                                                                                      // 535\n                                                                                                                       // 536\nfunction base64Write (buf, string, offset, length) {                                                                   // 537\n  return blitBuffer(base64ToBytes(string), buf, offset, length)                                                        // 538\n}                                                                                                                      // 539\n                                                                                                                       // 540\nfunction ucs2Write (buf, string, offset, length) {                                                                     // 541\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)                                  // 542\n}                                                                                                                      // 543\n                                                                                                                       // 544\nBuffer.prototype.write = function write (string, offset, length, encoding) {                                           // 545\n  // Buffer#write(string)                                                                                              // 546\n  if (offset === undefined) {                                                                                          // 547\n    encoding = 'utf8'                                                                                                  // 548\n    length = this.length                                                                                               // 549\n    offset = 0                                                                                                         // 550\n  // Buffer#write(string, encoding)                                                                                    // 551\n  } else if (length === undefined && typeof offset === 'string') {                                                     // 552\n    encoding = offset                                                                                                  // 553\n    length = this.length                                                                                               // 554\n    offset = 0                                                                                                         // 555\n  // Buffer#write(string, offset[, length][, encoding])                                                                // 556\n  } else if (isFinite(offset)) {                                                                                       // 557\n    offset = offset | 0                                                                                                // 558\n    if (isFinite(length)) {                                                                                            // 559\n      length = length | 0                                                                                              // 560\n      if (encoding === undefined) encoding = 'utf8'                                                                    // 561\n    } else {                                                                                                           // 562\n      encoding = length                                                                                                // 563\n      length = undefined                                                                                               // 564\n    }                                                                                                                  // 565\n  // legacy write(string, encoding, offset, length) - remove in v0.13                                                  // 566\n  } else {                                                                                                             // 567\n    var swap = encoding                                                                                                // 568\n    encoding = offset                                                                                                  // 569\n    offset = length | 0                                                                                                // 570\n    length = swap                                                                                                      // 571\n  }                                                                                                                    // 572\n                                                                                                                       // 573\n  var remaining = this.length - offset                                                                                 // 574\n  if (length === undefined || length > remaining) length = remaining                                                   // 575\n                                                                                                                       // 576\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {                                     // 577\n    throw new RangeError('attempt to write outside buffer bounds')                                                     // 578\n  }                                                                                                                    // 579\n                                                                                                                       // 580\n  if (!encoding) encoding = 'utf8'                                                                                     // 581\n                                                                                                                       // 582\n  var loweredCase = false                                                                                              // 583\n  for (;;) {                                                                                                           // 584\n    switch (encoding) {                                                                                                // 585\n      case 'hex':                                                                                                      // 586\n        return hexWrite(this, string, offset, length)                                                                  // 587\n                                                                                                                       // 588\n      case 'utf8':                                                                                                     // 589\n      case 'utf-8':                                                                                                    // 590\n        return utf8Write(this, string, offset, length)                                                                 // 591\n                                                                                                                       // 592\n      case 'ascii':                                                                                                    // 593\n        return asciiWrite(this, string, offset, length)                                                                // 594\n                                                                                                                       // 595\n      case 'binary':                                                                                                   // 596\n        return binaryWrite(this, string, offset, length)                                                               // 597\n                                                                                                                       // 598\n      case 'base64':                                                                                                   // 599\n        // Warning: maxLength not taken into account in base64Write                                                    // 600\n        return base64Write(this, string, offset, length)                                                               // 601\n                                                                                                                       // 602\n      case 'ucs2':                                                                                                     // 603\n      case 'ucs-2':                                                                                                    // 604\n      case 'utf16le':                                                                                                  // 605\n      case 'utf-16le':                                                                                                 // 606\n        return ucs2Write(this, string, offset, length)                                                                 // 607\n                                                                                                                       // 608\n      default:                                                                                                         // 609\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                          // 610\n        encoding = ('' + encoding).toLowerCase()                                                                       // 611\n        loweredCase = true                                                                                             // 612\n    }                                                                                                                  // 613\n  }                                                                                                                    // 614\n}                                                                                                                      // 615\n                                                                                                                       // 616\nBuffer.prototype.toJSON = function toJSON () {                                                                         // 617\n  return {                                                                                                             // 618\n    type: 'Buffer',                                                                                                    // 619\n    data: Array.prototype.slice.call(this._arr || this, 0)                                                             // 620\n  }                                                                                                                    // 621\n}                                                                                                                      // 622\n                                                                                                                       // 623\nfunction base64Slice (buf, start, end) {                                                                               // 624\n  if (start === 0 && end === buf.length) {                                                                             // 625\n    return base64.fromByteArray(buf)                                                                                   // 626\n  } else {                                                                                                             // 627\n    return base64.fromByteArray(buf.slice(start, end))                                                                 // 628\n  }                                                                                                                    // 629\n}                                                                                                                      // 630\n                                                                                                                       // 631\nfunction utf8Slice (buf, start, end) {                                                                                 // 632\n  end = Math.min(buf.length, end)                                                                                      // 633\n  var res = []                                                                                                         // 634\n                                                                                                                       // 635\n  var i = start                                                                                                        // 636\n  while (i < end) {                                                                                                    // 637\n    var firstByte = buf[i]                                                                                             // 638\n    var codePoint = null                                                                                               // 639\n    var bytesPerSequence = (firstByte > 0xEF) ? 4                                                                      // 640\n      : (firstByte > 0xDF) ? 3                                                                                         // 641\n      : (firstByte > 0xBF) ? 2                                                                                         // 642\n      : 1                                                                                                              // 643\n                                                                                                                       // 644\n    if (i + bytesPerSequence <= end) {                                                                                 // 645\n      var secondByte, thirdByte, fourthByte, tempCodePoint                                                             // 646\n                                                                                                                       // 647\n      switch (bytesPerSequence) {                                                                                      // 648\n        case 1:                                                                                                        // 649\n          if (firstByte < 0x80) {                                                                                      // 650\n            codePoint = firstByte                                                                                      // 651\n          }                                                                                                            // 652\n          break                                                                                                        // 653\n        case 2:                                                                                                        // 654\n          secondByte = buf[i + 1]                                                                                      // 655\n          if ((secondByte & 0xC0) === 0x80) {                                                                          // 656\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)                                            // 657\n            if (tempCodePoint > 0x7F) {                                                                                // 658\n              codePoint = tempCodePoint                                                                                // 659\n            }                                                                                                          // 660\n          }                                                                                                            // 661\n          break                                                                                                        // 662\n        case 3:                                                                                                        // 663\n          secondByte = buf[i + 1]                                                                                      // 664\n          thirdByte = buf[i + 2]                                                                                       // 665\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {                                           // 666\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)                 // 667\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {                         // 668\n              codePoint = tempCodePoint                                                                                // 669\n            }                                                                                                          // 670\n          }                                                                                                            // 671\n          break                                                                                                        // 672\n        case 4:                                                                                                        // 673\n          secondByte = buf[i + 1]                                                                                      // 674\n          thirdByte = buf[i + 2]                                                                                       // 675\n          fourthByte = buf[i + 3]                                                                                      // 676\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {           // 677\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {                                                  // 679\n              codePoint = tempCodePoint                                                                                // 680\n            }                                                                                                          // 681\n          }                                                                                                            // 682\n      }                                                                                                                // 683\n    }                                                                                                                  // 684\n                                                                                                                       // 685\n    if (codePoint === null) {                                                                                          // 686\n      // we did not generate a valid codePoint so insert a                                                             // 687\n      // replacement char (U+FFFD) and advance only 1 byte                                                             // 688\n      codePoint = 0xFFFD                                                                                               // 689\n      bytesPerSequence = 1                                                                                             // 690\n    } else if (codePoint > 0xFFFF) {                                                                                   // 691\n      // encode to utf16 (surrogate pair dance)                                                                        // 692\n      codePoint -= 0x10000                                                                                             // 693\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)                                                                      // 694\n      codePoint = 0xDC00 | codePoint & 0x3FF                                                                           // 695\n    }                                                                                                                  // 696\n                                                                                                                       // 697\n    res.push(codePoint)                                                                                                // 698\n    i += bytesPerSequence                                                                                              // 699\n  }                                                                                                                    // 700\n                                                                                                                       // 701\n  return decodeCodePointsArray(res)                                                                                    // 702\n}                                                                                                                      // 703\n                                                                                                                       // 704\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with                                               // 705\n// the lowest limit is Chrome, with 0x10000 args.                                                                      // 706\n// We go 1 magnitude less, for safety                                                                                  // 707\nvar MAX_ARGUMENTS_LENGTH = 0x1000                                                                                      // 708\n                                                                                                                       // 709\nfunction decodeCodePointsArray (codePoints) {                                                                          // 710\n  var len = codePoints.length                                                                                          // 711\n  if (len <= MAX_ARGUMENTS_LENGTH) {                                                                                   // 712\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()                                        // 713\n  }                                                                                                                    // 714\n                                                                                                                       // 715\n  // Decode in chunks to avoid \"call stack size exceeded\".                                                             // 716\n  var res = ''                                                                                                         // 717\n  var i = 0                                                                                                            // 718\n  while (i < len) {                                                                                                    // 719\n    res += String.fromCharCode.apply(                                                                                  // 720\n      String,                                                                                                          // 721\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)                                                                   // 722\n    )                                                                                                                  // 723\n  }                                                                                                                    // 724\n  return res                                                                                                           // 725\n}                                                                                                                      // 726\n                                                                                                                       // 727\nfunction asciiSlice (buf, start, end) {                                                                                // 728\n  var ret = ''                                                                                                         // 729\n  end = Math.min(buf.length, end)                                                                                      // 730\n                                                                                                                       // 731\n  for (var i = start; i < end; i++) {                                                                                  // 732\n    ret += String.fromCharCode(buf[i] & 0x7F)                                                                          // 733\n  }                                                                                                                    // 734\n  return ret                                                                                                           // 735\n}                                                                                                                      // 736\n                                                                                                                       // 737\nfunction binarySlice (buf, start, end) {                                                                               // 738\n  var ret = ''                                                                                                         // 739\n  end = Math.min(buf.length, end)                                                                                      // 740\n                                                                                                                       // 741\n  for (var i = start; i < end; i++) {                                                                                  // 742\n    ret += String.fromCharCode(buf[i])                                                                                 // 743\n  }                                                                                                                    // 744\n  return ret                                                                                                           // 745\n}                                                                                                                      // 746\n                                                                                                                       // 747\nfunction hexSlice (buf, start, end) {                                                                                  // 748\n  var len = buf.length                                                                                                 // 749\n                                                                                                                       // 750\n  if (!start || start < 0) start = 0                                                                                   // 751\n  if (!end || end < 0 || end > len) end = len                                                                          // 752\n                                                                                                                       // 753\n  var out = ''                                                                                                         // 754\n  for (var i = start; i < end; i++) {                                                                                  // 755\n    out += toHex(buf[i])                                                                                               // 756\n  }                                                                                                                    // 757\n  return out                                                                                                           // 758\n}                                                                                                                      // 759\n                                                                                                                       // 760\nfunction utf16leSlice (buf, start, end) {                                                                              // 761\n  var bytes = buf.slice(start, end)                                                                                    // 762\n  var res = ''                                                                                                         // 763\n  for (var i = 0; i < bytes.length; i += 2) {                                                                          // 764\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)                                                          // 765\n  }                                                                                                                    // 766\n  return res                                                                                                           // 767\n}                                                                                                                      // 768\n                                                                                                                       // 769\nBuffer.prototype.slice = function slice (start, end) {                                                                 // 770\n  var len = this.length                                                                                                // 771\n  start = ~~start                                                                                                      // 772\n  end = end === undefined ? len : ~~end                                                                                // 773\n                                                                                                                       // 774\n  if (start < 0) {                                                                                                     // 775\n    start += len                                                                                                       // 776\n    if (start < 0) start = 0                                                                                           // 777\n  } else if (start > len) {                                                                                            // 778\n    start = len                                                                                                        // 779\n  }                                                                                                                    // 780\n                                                                                                                       // 781\n  if (end < 0) {                                                                                                       // 782\n    end += len                                                                                                         // 783\n    if (end < 0) end = 0                                                                                               // 784\n  } else if (end > len) {                                                                                              // 785\n    end = len                                                                                                          // 786\n  }                                                                                                                    // 787\n                                                                                                                       // 788\n  if (end < start) end = start                                                                                         // 789\n                                                                                                                       // 790\n  var newBuf                                                                                                           // 791\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 792\n    newBuf = this.subarray(start, end)                                                                                 // 793\n    newBuf.__proto__ = Buffer.prototype                                                                                // 794\n  } else {                                                                                                             // 795\n    var sliceLen = end - start                                                                                         // 796\n    newBuf = new Buffer(sliceLen, undefined)                                                                           // 797\n    for (var i = 0; i < sliceLen; i++) {                                                                               // 798\n      newBuf[i] = this[i + start]                                                                                      // 799\n    }                                                                                                                  // 800\n  }                                                                                                                    // 801\n                                                                                                                       // 802\n  if (newBuf.length) newBuf.parent = this.parent || this                                                               // 803\n                                                                                                                       // 804\n  return newBuf                                                                                                        // 805\n}                                                                                                                      // 806\n                                                                                                                       // 807\n/*                                                                                                                     // 808\n * Need to make sure that buffer isn't trying to write out of bounds.                                                  // 809\n */                                                                                                                    // 810\nfunction checkOffset (offset, ext, length) {                                                                           // 811\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')                                     // 812\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')                             // 813\n}                                                                                                                      // 814\n                                                                                                                       // 815\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {                                     // 816\n  offset = offset | 0                                                                                                  // 817\n  byteLength = byteLength | 0                                                                                          // 818\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 819\n                                                                                                                       // 820\n  var val = this[offset]                                                                                               // 821\n  var mul = 1                                                                                                          // 822\n  var i = 0                                                                                                            // 823\n  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 824\n    val += this[offset + i] * mul                                                                                      // 825\n  }                                                                                                                    // 826\n                                                                                                                       // 827\n  return val                                                                                                           // 828\n}                                                                                                                      // 829\n                                                                                                                       // 830\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {                                     // 831\n  offset = offset | 0                                                                                                  // 832\n  byteLength = byteLength | 0                                                                                          // 833\n  if (!noAssert) {                                                                                                     // 834\n    checkOffset(offset, byteLength, this.length)                                                                       // 835\n  }                                                                                                                    // 836\n                                                                                                                       // 837\n  var val = this[offset + --byteLength]                                                                                // 838\n  var mul = 1                                                                                                          // 839\n  while (byteLength > 0 && (mul *= 0x100)) {                                                                           // 840\n    val += this[offset + --byteLength] * mul                                                                           // 841\n  }                                                                                                                    // 842\n                                                                                                                       // 843\n  return val                                                                                                           // 844\n}                                                                                                                      // 845\n                                                                                                                       // 846\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {                                                   // 847\n  if (!noAssert) checkOffset(offset, 1, this.length)                                                                   // 848\n  return this[offset]                                                                                                  // 849\n}                                                                                                                      // 850\n                                                                                                                       // 851\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {                                             // 852\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 853\n  return this[offset] | (this[offset + 1] << 8)                                                                        // 854\n}                                                                                                                      // 855\n                                                                                                                       // 856\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {                                             // 857\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 858\n  return (this[offset] << 8) | this[offset + 1]                                                                        // 859\n}                                                                                                                      // 860\n                                                                                                                       // 861\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {                                             // 862\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 863\n                                                                                                                       // 864\n  return ((this[offset]) |                                                                                             // 865\n      (this[offset + 1] << 8) |                                                                                        // 866\n      (this[offset + 2] << 16)) +                                                                                      // 867\n      (this[offset + 3] * 0x1000000)                                                                                   // 868\n}                                                                                                                      // 869\n                                                                                                                       // 870\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {                                             // 871\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 872\n                                                                                                                       // 873\n  return (this[offset] * 0x1000000) +                                                                                  // 874\n    ((this[offset + 1] << 16) |                                                                                        // 875\n    (this[offset + 2] << 8) |                                                                                          // 876\n    this[offset + 3])                                                                                                  // 877\n}                                                                                                                      // 878\n                                                                                                                       // 879\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {                                       // 880\n  offset = offset | 0                                                                                                  // 881\n  byteLength = byteLength | 0                                                                                          // 882\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 883\n                                                                                                                       // 884\n  var val = this[offset]                                                                                               // 885\n  var mul = 1                                                                                                          // 886\n  var i = 0                                                                                                            // 887\n  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 888\n    val += this[offset + i] * mul                                                                                      // 889\n  }                                                                                                                    // 890\n  mul *= 0x80                                                                                                          // 891\n                                                                                                                       // 892\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                   // 893\n                                                                                                                       // 894\n  return val                                                                                                           // 895\n}                                                                                                                      // 896\n                                                                                                                       // 897\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {                                       // 898\n  offset = offset | 0                                                                                                  // 899\n  byteLength = byteLength | 0                                                                                          // 900\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 901\n                                                                                                                       // 902\n  var i = byteLength                                                                                                   // 903\n  var mul = 1                                                                                                          // 904\n  var val = this[offset + --i]                                                                                         // 905\n  while (i > 0 && (mul *= 0x100)) {                                                                                    // 906\n    val += this[offset + --i] * mul                                                                                    // 907\n  }                                                                                                                    // 908\n  mul *= 0x80                                                                                                          // 909\n                                                                                                                       // 910\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                   // 911\n                                                                                                                       // 912\n  return val                                                                                                           // 913\n}                                                                                                                      // 914\n                                                                                                                       // 915\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {                                                     // 916\n  if (!noAssert) checkOffset(offset, 1, this.length)                                                                   // 917\n  if (!(this[offset] & 0x80)) return (this[offset])                                                                    // 918\n  return ((0xff - this[offset] + 1) * -1)                                                                              // 919\n}                                                                                                                      // 920\n                                                                                                                       // 921\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {                                               // 922\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 923\n  var val = this[offset] | (this[offset + 1] << 8)                                                                     // 924\n  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                       // 925\n}                                                                                                                      // 926\n                                                                                                                       // 927\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {                                               // 928\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 929\n  var val = this[offset + 1] | (this[offset] << 8)                                                                     // 930\n  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                       // 931\n}                                                                                                                      // 932\n                                                                                                                       // 933\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {                                               // 934\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 935\n                                                                                                                       // 936\n  return (this[offset]) |                                                                                              // 937\n    (this[offset + 1] << 8) |                                                                                          // 938\n    (this[offset + 2] << 16) |                                                                                         // 939\n    (this[offset + 3] << 24)                                                                                           // 940\n}                                                                                                                      // 941\n                                                                                                                       // 942\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {                                               // 943\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 944\n                                                                                                                       // 945\n  return (this[offset] << 24) |                                                                                        // 946\n    (this[offset + 1] << 16) |                                                                                         // 947\n    (this[offset + 2] << 8) |                                                                                          // 948\n    (this[offset + 3])                                                                                                 // 949\n}                                                                                                                      // 950\n                                                                                                                       // 951\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {                                               // 952\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 953\n  return ieee754.read(this, offset, true, 23, 4)                                                                       // 954\n}                                                                                                                      // 955\n                                                                                                                       // 956\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {                                               // 957\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 958\n  return ieee754.read(this, offset, false, 23, 4)                                                                      // 959\n}                                                                                                                      // 960\n                                                                                                                       // 961\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {                                             // 962\n  if (!noAssert) checkOffset(offset, 8, this.length)                                                                   // 963\n  return ieee754.read(this, offset, true, 52, 8)                                                                       // 964\n}                                                                                                                      // 965\n                                                                                                                       // 966\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {                                             // 967\n  if (!noAssert) checkOffset(offset, 8, this.length)                                                                   // 968\n  return ieee754.read(this, offset, false, 52, 8)                                                                      // 969\n}                                                                                                                      // 970\n                                                                                                                       // 971\nfunction checkInt (buf, value, offset, ext, max, min) {                                                                // 972\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')                                   // 973\n  if (value > max || value < min) throw new RangeError('value is out of bounds')                                       // 974\n  if (offset + ext > buf.length) throw new RangeError('index out of range')                                            // 975\n}                                                                                                                      // 976\n                                                                                                                       // 977\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {                            // 978\n  value = +value                                                                                                       // 979\n  offset = offset | 0                                                                                                  // 980\n  byteLength = byteLength | 0                                                                                          // 981\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                             // 982\n                                                                                                                       // 983\n  var mul = 1                                                                                                          // 984\n  var i = 0                                                                                                            // 985\n  this[offset] = value & 0xFF                                                                                          // 986\n  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 987\n    this[offset + i] = (value / mul) & 0xFF                                                                            // 988\n  }                                                                                                                    // 989\n                                                                                                                       // 990\n  return offset + byteLength                                                                                           // 991\n}                                                                                                                      // 992\n                                                                                                                       // 993\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {                            // 994\n  value = +value                                                                                                       // 995\n  offset = offset | 0                                                                                                  // 996\n  byteLength = byteLength | 0                                                                                          // 997\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                             // 998\n                                                                                                                       // 999\n  var i = byteLength - 1                                                                                               // 1000\n  var mul = 1                                                                                                          // 1001\n  this[offset + i] = value & 0xFF                                                                                      // 1002\n  while (--i >= 0 && (mul *= 0x100)) {                                                                                 // 1003\n    this[offset + i] = (value / mul) & 0xFF                                                                            // 1004\n  }                                                                                                                    // 1005\n                                                                                                                       // 1006\n  return offset + byteLength                                                                                           // 1007\n}                                                                                                                      // 1008\n                                                                                                                       // 1009\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {                                          // 1010\n  value = +value                                                                                                       // 1011\n  offset = offset | 0                                                                                                  // 1012\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)                                                             // 1013\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                           // 1014\n  this[offset] = (value & 0xff)                                                                                        // 1015\n  return offset + 1                                                                                                    // 1016\n}                                                                                                                      // 1017\n                                                                                                                       // 1018\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {                                                        // 1019\n  if (value < 0) value = 0xffff + value + 1                                                                            // 1020\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {                                                  // 1021\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>                                         // 1022\n      (littleEndian ? i : 1 - i) * 8                                                                                   // 1023\n  }                                                                                                                    // 1024\n}                                                                                                                      // 1025\n                                                                                                                       // 1026\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {                                    // 1027\n  value = +value                                                                                                       // 1028\n  offset = offset | 0                                                                                                  // 1029\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                           // 1030\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1031\n    this[offset] = (value & 0xff)                                                                                      // 1032\n    this[offset + 1] = (value >>> 8)                                                                                   // 1033\n  } else {                                                                                                             // 1034\n    objectWriteUInt16(this, value, offset, true)                                                                       // 1035\n  }                                                                                                                    // 1036\n  return offset + 2                                                                                                    // 1037\n}                                                                                                                      // 1038\n                                                                                                                       // 1039\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {                                    // 1040\n  value = +value                                                                                                       // 1041\n  offset = offset | 0                                                                                                  // 1042\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                           // 1043\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1044\n    this[offset] = (value >>> 8)                                                                                       // 1045\n    this[offset + 1] = (value & 0xff)                                                                                  // 1046\n  } else {                                                                                                             // 1047\n    objectWriteUInt16(this, value, offset, false)                                                                      // 1048\n  }                                                                                                                    // 1049\n  return offset + 2                                                                                                    // 1050\n}                                                                                                                      // 1051\n                                                                                                                       // 1052\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {                                                        // 1053\n  if (value < 0) value = 0xffffffff + value + 1                                                                        // 1054\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {                                                  // 1055\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff                                                // 1056\n  }                                                                                                                    // 1057\n}                                                                                                                      // 1058\n                                                                                                                       // 1059\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {                                    // 1060\n  value = +value                                                                                                       // 1061\n  offset = offset | 0                                                                                                  // 1062\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                       // 1063\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1064\n    this[offset + 3] = (value >>> 24)                                                                                  // 1065\n    this[offset + 2] = (value >>> 16)                                                                                  // 1066\n    this[offset + 1] = (value >>> 8)                                                                                   // 1067\n    this[offset] = (value & 0xff)                                                                                      // 1068\n  } else {                                                                                                             // 1069\n    objectWriteUInt32(this, value, offset, true)                                                                       // 1070\n  }                                                                                                                    // 1071\n  return offset + 4                                                                                                    // 1072\n}                                                                                                                      // 1073\n                                                                                                                       // 1074\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {                                    // 1075\n  value = +value                                                                                                       // 1076\n  offset = offset | 0                                                                                                  // 1077\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                       // 1078\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1079\n    this[offset] = (value >>> 24)                                                                                      // 1080\n    this[offset + 1] = (value >>> 16)                                                                                  // 1081\n    this[offset + 2] = (value >>> 8)                                                                                   // 1082\n    this[offset + 3] = (value & 0xff)                                                                                  // 1083\n  } else {                                                                                                             // 1084\n    objectWriteUInt32(this, value, offset, false)                                                                      // 1085\n  }                                                                                                                    // 1086\n  return offset + 4                                                                                                    // 1087\n}                                                                                                                      // 1088\n                                                                                                                       // 1089\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {                              // 1090\n  value = +value                                                                                                       // 1091\n  offset = offset | 0                                                                                                  // 1092\n  if (!noAssert) {                                                                                                     // 1093\n    var limit = Math.pow(2, 8 * byteLength - 1)                                                                        // 1094\n                                                                                                                       // 1095\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                       // 1096\n  }                                                                                                                    // 1097\n                                                                                                                       // 1098\n  var i = 0                                                                                                            // 1099\n  var mul = 1                                                                                                          // 1100\n  var sub = value < 0 ? 1 : 0                                                                                          // 1101\n  this[offset] = value & 0xFF                                                                                          // 1102\n  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1103\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                               // 1104\n  }                                                                                                                    // 1105\n                                                                                                                       // 1106\n  return offset + byteLength                                                                                           // 1107\n}                                                                                                                      // 1108\n                                                                                                                       // 1109\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {                              // 1110\n  value = +value                                                                                                       // 1111\n  offset = offset | 0                                                                                                  // 1112\n  if (!noAssert) {                                                                                                     // 1113\n    var limit = Math.pow(2, 8 * byteLength - 1)                                                                        // 1114\n                                                                                                                       // 1115\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                       // 1116\n  }                                                                                                                    // 1117\n                                                                                                                       // 1118\n  var i = byteLength - 1                                                                                               // 1119\n  var mul = 1                                                                                                          // 1120\n  var sub = value < 0 ? 1 : 0                                                                                          // 1121\n  this[offset + i] = value & 0xFF                                                                                      // 1122\n  while (--i >= 0 && (mul *= 0x100)) {                                                                                 // 1123\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                               // 1124\n  }                                                                                                                    // 1125\n                                                                                                                       // 1126\n  return offset + byteLength                                                                                           // 1127\n}                                                                                                                      // 1128\n                                                                                                                       // 1129\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {                                            // 1130\n  value = +value                                                                                                       // 1131\n  offset = offset | 0                                                                                                  // 1132\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)                                                         // 1133\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                           // 1134\n  if (value < 0) value = 0xff + value + 1                                                                              // 1135\n  this[offset] = (value & 0xff)                                                                                        // 1136\n  return offset + 1                                                                                                    // 1137\n}                                                                                                                      // 1138\n                                                                                                                       // 1139\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {                                      // 1140\n  value = +value                                                                                                       // 1141\n  offset = offset | 0                                                                                                  // 1142\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                     // 1143\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1144\n    this[offset] = (value & 0xff)                                                                                      // 1145\n    this[offset + 1] = (value >>> 8)                                                                                   // 1146\n  } else {                                                                                                             // 1147\n    objectWriteUInt16(this, value, offset, true)                                                                       // 1148\n  }                                                                                                                    // 1149\n  return offset + 2                                                                                                    // 1150\n}                                                                                                                      // 1151\n                                                                                                                       // 1152\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {                                      // 1153\n  value = +value                                                                                                       // 1154\n  offset = offset | 0                                                                                                  // 1155\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                     // 1156\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1157\n    this[offset] = (value >>> 8)                                                                                       // 1158\n    this[offset + 1] = (value & 0xff)                                                                                  // 1159\n  } else {                                                                                                             // 1160\n    objectWriteUInt16(this, value, offset, false)                                                                      // 1161\n  }                                                                                                                    // 1162\n  return offset + 2                                                                                                    // 1163\n}                                                                                                                      // 1164\n                                                                                                                       // 1165\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {                                      // 1166\n  value = +value                                                                                                       // 1167\n  offset = offset | 0                                                                                                  // 1168\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                             // 1169\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1170\n    this[offset] = (value & 0xff)                                                                                      // 1171\n    this[offset + 1] = (value >>> 8)                                                                                   // 1172\n    this[offset + 2] = (value >>> 16)                                                                                  // 1173\n    this[offset + 3] = (value >>> 24)                                                                                  // 1174\n  } else {                                                                                                             // 1175\n    objectWriteUInt32(this, value, offset, true)                                                                       // 1176\n  }                                                                                                                    // 1177\n  return offset + 4                                                                                                    // 1178\n}                                                                                                                      // 1179\n                                                                                                                       // 1180\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {                                      // 1181\n  value = +value                                                                                                       // 1182\n  offset = offset | 0                                                                                                  // 1183\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                             // 1184\n  if (value < 0) value = 0xffffffff + value + 1                                                                        // 1185\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1186\n    this[offset] = (value >>> 24)                                                                                      // 1187\n    this[offset + 1] = (value >>> 16)                                                                                  // 1188\n    this[offset + 2] = (value >>> 8)                                                                                   // 1189\n    this[offset + 3] = (value & 0xff)                                                                                  // 1190\n  } else {                                                                                                             // 1191\n    objectWriteUInt32(this, value, offset, false)                                                                      // 1192\n  }                                                                                                                    // 1193\n  return offset + 4                                                                                                    // 1194\n}                                                                                                                      // 1195\n                                                                                                                       // 1196\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {                                                            // 1197\n  if (offset + ext > buf.length) throw new RangeError('index out of range')                                            // 1198\n  if (offset < 0) throw new RangeError('index out of range')                                                           // 1199\n}                                                                                                                      // 1200\n                                                                                                                       // 1201\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {                                                     // 1202\n  if (!noAssert) {                                                                                                     // 1203\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)                               // 1204\n  }                                                                                                                    // 1205\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)                                                               // 1206\n  return offset + 4                                                                                                    // 1207\n}                                                                                                                      // 1208\n                                                                                                                       // 1209\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {                                      // 1210\n  return writeFloat(this, value, offset, true, noAssert)                                                               // 1211\n}                                                                                                                      // 1212\n                                                                                                                       // 1213\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {                                      // 1214\n  return writeFloat(this, value, offset, false, noAssert)                                                              // 1215\n}                                                                                                                      // 1216\n                                                                                                                       // 1217\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {                                                    // 1218\n  if (!noAssert) {                                                                                                     // 1219\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)                             // 1220\n  }                                                                                                                    // 1221\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)                                                               // 1222\n  return offset + 8                                                                                                    // 1223\n}                                                                                                                      // 1224\n                                                                                                                       // 1225\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {                                    // 1226\n  return writeDouble(this, value, offset, true, noAssert)                                                              // 1227\n}                                                                                                                      // 1228\n                                                                                                                       // 1229\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {                                    // 1230\n  return writeDouble(this, value, offset, false, noAssert)                                                             // 1231\n}                                                                                                                      // 1232\n                                                                                                                       // 1233\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)                                           // 1234\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {                                              // 1235\n  if (!start) start = 0                                                                                                // 1236\n  if (!end && end !== 0) end = this.length                                                                             // 1237\n  if (targetStart >= target.length) targetStart = target.length                                                        // 1238\n  if (!targetStart) targetStart = 0                                                                                    // 1239\n  if (end > 0 && end < start) end = start                                                                              // 1240\n                                                                                                                       // 1241\n  // Copy 0 bytes; we're done                                                                                          // 1242\n  if (end === start) return 0                                                                                          // 1243\n  if (target.length === 0 || this.length === 0) return 0                                                               // 1244\n                                                                                                                       // 1245\n  // Fatal error conditions                                                                                            // 1246\n  if (targetStart < 0) {                                                                                               // 1247\n    throw new RangeError('targetStart out of bounds')                                                                  // 1248\n  }                                                                                                                    // 1249\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')                             // 1250\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')                                                         // 1251\n                                                                                                                       // 1252\n  // Are we oob?                                                                                                       // 1253\n  if (end > this.length) end = this.length                                                                             // 1254\n  if (target.length - targetStart < end - start) {                                                                     // 1255\n    end = target.length - targetStart + start                                                                          // 1256\n  }                                                                                                                    // 1257\n                                                                                                                       // 1258\n  var len = end - start                                                                                                // 1259\n  var i                                                                                                                // 1260\n                                                                                                                       // 1261\n  if (this === target && start < targetStart && targetStart < end) {                                                   // 1262\n    // descending copy from end                                                                                        // 1263\n    for (i = len - 1; i >= 0; i--) {                                                                                   // 1264\n      target[i + targetStart] = this[i + start]                                                                        // 1265\n    }                                                                                                                  // 1266\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {                                                              // 1267\n    // ascending copy from start                                                                                       // 1268\n    for (i = 0; i < len; i++) {                                                                                        // 1269\n      target[i + targetStart] = this[i + start]                                                                        // 1270\n    }                                                                                                                  // 1271\n  } else {                                                                                                             // 1272\n    Uint8Array.prototype.set.call(                                                                                     // 1273\n      target,                                                                                                          // 1274\n      this.subarray(start, start + len),                                                                               // 1275\n      targetStart                                                                                                      // 1276\n    )                                                                                                                  // 1277\n  }                                                                                                                    // 1278\n                                                                                                                       // 1279\n  return len                                                                                                           // 1280\n}                                                                                                                      // 1281\n                                                                                                                       // 1282\n// fill(value, start=0, end=buffer.length)                                                                             // 1283\nBuffer.prototype.fill = function fill (value, start, end) {                                                            // 1284\n  if (!value) value = 0                                                                                                // 1285\n  if (!start) start = 0                                                                                                // 1286\n  if (!end) end = this.length                                                                                          // 1287\n                                                                                                                       // 1288\n  if (end < start) throw new RangeError('end < start')                                                                 // 1289\n                                                                                                                       // 1290\n  // Fill 0 bytes; we're done                                                                                          // 1291\n  if (end === start) return                                                                                            // 1292\n  if (this.length === 0) return                                                                                        // 1293\n                                                                                                                       // 1294\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')                                   // 1295\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')                                          // 1296\n                                                                                                                       // 1297\n  var i                                                                                                                // 1298\n  if (typeof value === 'number') {                                                                                     // 1299\n    for (i = start; i < end; i++) {                                                                                    // 1300\n      this[i] = value                                                                                                  // 1301\n    }                                                                                                                  // 1302\n  } else {                                                                                                             // 1303\n    var bytes = utf8ToBytes(value.toString())                                                                          // 1304\n    var len = bytes.length                                                                                             // 1305\n    for (i = start; i < end; i++) {                                                                                    // 1306\n      this[i] = bytes[i % len]                                                                                         // 1307\n    }                                                                                                                  // 1308\n  }                                                                                                                    // 1309\n                                                                                                                       // 1310\n  return this                                                                                                          // 1311\n}                                                                                                                      // 1312\n                                                                                                                       // 1313\n// HELPER FUNCTIONS                                                                                                    // 1314\n// ================                                                                                                    // 1315\n                                                                                                                       // 1316\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g                                                                           // 1317\n                                                                                                                       // 1318\nfunction base64clean (str) {                                                                                           // 1319\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not                             // 1320\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')                                                                 // 1321\n  // Node converts strings with length < 2 to ''                                                                       // 1322\n  if (str.length < 2) return ''                                                                                        // 1323\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not                              // 1324\n  while (str.length % 4 !== 0) {                                                                                       // 1325\n    str = str + '='                                                                                                    // 1326\n  }                                                                                                                    // 1327\n  return str                                                                                                           // 1328\n}                                                                                                                      // 1329\n                                                                                                                       // 1330\nfunction stringtrim (str) {                                                                                            // 1331\n  if (str.trim) return str.trim()                                                                                      // 1332\n  return str.replace(/^\\s+|\\s+$/g, '')                                                                                 // 1333\n}                                                                                                                      // 1334\n                                                                                                                       // 1335\nfunction toHex (n) {                                                                                                   // 1336\n  if (n < 16) return '0' + n.toString(16)                                                                              // 1337\n  return n.toString(16)                                                                                                // 1338\n}                                                                                                                      // 1339\n                                                                                                                       // 1340\nfunction utf8ToBytes (string, units) {                                                                                 // 1341\n  units = units || Infinity                                                                                            // 1342\n  var codePoint                                                                                                        // 1343\n  var length = string.length                                                                                           // 1344\n  var leadSurrogate = null                                                                                             // 1345\n  var bytes = []                                                                                                       // 1346\n                                                                                                                       // 1347\n  for (var i = 0; i < length; i++) {                                                                                   // 1348\n    codePoint = string.charCodeAt(i)                                                                                   // 1349\n                                                                                                                       // 1350\n    // is surrogate component                                                                                          // 1351\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {                                                                    // 1352\n      // last char was a lead                                                                                          // 1353\n      if (!leadSurrogate) {                                                                                            // 1354\n        // no lead yet                                                                                                 // 1355\n        if (codePoint > 0xDBFF) {                                                                                      // 1356\n          // unexpected trail                                                                                          // 1357\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                          // 1358\n          continue                                                                                                     // 1359\n        } else if (i + 1 === length) {                                                                                 // 1360\n          // unpaired lead                                                                                             // 1361\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                          // 1362\n          continue                                                                                                     // 1363\n        }                                                                                                              // 1364\n                                                                                                                       // 1365\n        // valid lead                                                                                                  // 1366\n        leadSurrogate = codePoint                                                                                      // 1367\n                                                                                                                       // 1368\n        continue                                                                                                       // 1369\n      }                                                                                                                // 1370\n                                                                                                                       // 1371\n      // 2 leads in a row                                                                                              // 1372\n      if (codePoint < 0xDC00) {                                                                                        // 1373\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                            // 1374\n        leadSurrogate = codePoint                                                                                      // 1375\n        continue                                                                                                       // 1376\n      }                                                                                                                // 1377\n                                                                                                                       // 1378\n      // valid surrogate pair                                                                                          // 1379\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000                                        // 1380\n    } else if (leadSurrogate) {                                                                                        // 1381\n      // valid bmp char, but last char was a lead                                                                      // 1382\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                              // 1383\n    }                                                                                                                  // 1384\n                                                                                                                       // 1385\n    leadSurrogate = null                                                                                               // 1386\n                                                                                                                       // 1387\n    // encode utf8                                                                                                     // 1388\n    if (codePoint < 0x80) {                                                                                            // 1389\n      if ((units -= 1) < 0) break                                                                                      // 1390\n      bytes.push(codePoint)                                                                                            // 1391\n    } else if (codePoint < 0x800) {                                                                                    // 1392\n      if ((units -= 2) < 0) break                                                                                      // 1393\n      bytes.push(                                                                                                      // 1394\n        codePoint >> 0x6 | 0xC0,                                                                                       // 1395\n        codePoint & 0x3F | 0x80                                                                                        // 1396\n      )                                                                                                                // 1397\n    } else if (codePoint < 0x10000) {                                                                                  // 1398\n      if ((units -= 3) < 0) break                                                                                      // 1399\n      bytes.push(                                                                                                      // 1400\n        codePoint >> 0xC | 0xE0,                                                                                       // 1401\n        codePoint >> 0x6 & 0x3F | 0x80,                                                                                // 1402\n        codePoint & 0x3F | 0x80                                                                                        // 1403\n      )                                                                                                                // 1404\n    } else if (codePoint < 0x110000) {                                                                                 // 1405\n      if ((units -= 4) < 0) break                                                                                      // 1406\n      bytes.push(                                                                                                      // 1407\n        codePoint >> 0x12 | 0xF0,                                                                                      // 1408\n        codePoint >> 0xC & 0x3F | 0x80,                                                                                // 1409\n        codePoint >> 0x6 & 0x3F | 0x80,                                                                                // 1410\n        codePoint & 0x3F | 0x80                                                                                        // 1411\n      )                                                                                                                // 1412\n    } else {                                                                                                           // 1413\n      throw new Error('Invalid code point')                                                                            // 1414\n    }                                                                                                                  // 1415\n  }                                                                                                                    // 1416\n                                                                                                                       // 1417\n  return bytes                                                                                                         // 1418\n}                                                                                                                      // 1419\n                                                                                                                       // 1420\nfunction asciiToBytes (str) {                                                                                          // 1421\n  var byteArray = []                                                                                                   // 1422\n  for (var i = 0; i < str.length; i++) {                                                                               // 1423\n    // Node's code seems to be doing this and not & 0x7F..                                                             // 1424\n    byteArray.push(str.charCodeAt(i) & 0xFF)                                                                           // 1425\n  }                                                                                                                    // 1426\n  return byteArray                                                                                                     // 1427\n}                                                                                                                      // 1428\n                                                                                                                       // 1429\nfunction utf16leToBytes (str, units) {                                                                                 // 1430\n  var c, hi, lo                                                                                                        // 1431\n  var byteArray = []                                                                                                   // 1432\n  for (var i = 0; i < str.length; i++) {                                                                               // 1433\n    if ((units -= 2) < 0) break                                                                                        // 1434\n                                                                                                                       // 1435\n    c = str.charCodeAt(i)                                                                                              // 1436\n    hi = c >> 8                                                                                                        // 1437\n    lo = c % 256                                                                                                       // 1438\n    byteArray.push(lo)                                                                                                 // 1439\n    byteArray.push(hi)                                                                                                 // 1440\n  }                                                                                                                    // 1441\n                                                                                                                       // 1442\n  return byteArray                                                                                                     // 1443\n}                                                                                                                      // 1444\n                                                                                                                       // 1445\nfunction base64ToBytes (str) {                                                                                         // 1446\n  return base64.toByteArray(base64clean(str))                                                                          // 1447\n}                                                                                                                      // 1448\n                                                                                                                       // 1449\nfunction blitBuffer (src, dst, offset, length) {                                                                       // 1450\n  for (var i = 0; i < length; i++) {                                                                                   // 1451\n    if ((i + offset >= dst.length) || (i >= src.length)) break                                                         // 1452\n    dst[i + offset] = src[i]                                                                                           // 1453\n  }                                                                                                                    // 1454\n  return i                                                                                                             // 1455\n}                                                                                                                      // 1456\n                                                                                                                       // 1457\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"node_modules\":{\"base64-js\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/base64-js/package.json                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"base64-js\";                                                                                            // 1\nexports.version = \"1.1.2\";                                                                                             // 2\nexports.main = \"lib/b64.js\";                                                                                           // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"b64.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/base64-js/lib/b64.js                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict'                                                                                                           // 1\n                                                                                                                       // 2\nexports.toByteArray = toByteArray                                                                                      // 3\nexports.fromByteArray = fromByteArray                                                                                  // 4\n                                                                                                                       // 5\nvar lookup = []                                                                                                        // 6\nvar revLookup = []                                                                                                     // 7\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array                                                       // 8\n                                                                                                                       // 9\nfunction init () {                                                                                                     // 10\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'                                        // 11\n  for (var i = 0, len = code.length; i < len; ++i) {                                                                   // 12\n    lookup[i] = code[i]                                                                                                // 13\n    revLookup[code.charCodeAt(i)] = i                                                                                  // 14\n  }                                                                                                                    // 15\n                                                                                                                       // 16\n  revLookup['-'.charCodeAt(0)] = 62                                                                                    // 17\n  revLookup['_'.charCodeAt(0)] = 63                                                                                    // 18\n}                                                                                                                      // 19\n                                                                                                                       // 20\ninit()                                                                                                                 // 21\n                                                                                                                       // 22\nfunction toByteArray (b64) {                                                                                           // 23\n  var i, j, l, tmp, placeHolders, arr                                                                                  // 24\n  var len = b64.length                                                                                                 // 25\n                                                                                                                       // 26\n  if (len % 4 > 0) {                                                                                                   // 27\n    throw new Error('Invalid string. Length must be a multiple of 4')                                                  // 28\n  }                                                                                                                    // 29\n                                                                                                                       // 30\n  // the number of equal signs (place holders)                                                                         // 31\n  // if there are two placeholders, than the two characters before it                                                  // 32\n  // represent one byte                                                                                                // 33\n  // if there is only one, then the three characters before it represent 2 bytes                                       // 34\n  // this is just a cheap hack to not do indexOf twice                                                                 // 35\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0                                               // 36\n                                                                                                                       // 37\n  // base64 is 4/3 + up to two characters of the original data                                                         // 38\n  arr = new Arr(len * 3 / 4 - placeHolders)                                                                            // 39\n                                                                                                                       // 40\n  // if there are placeholders, only get up to the last complete 4 chars                                               // 41\n  l = placeHolders > 0 ? len - 4 : len                                                                                 // 42\n                                                                                                                       // 43\n  var L = 0                                                                                                            // 44\n                                                                                                                       // 45\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {                                                                          // 46\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF                                                                                      // 48\n    arr[L++] = (tmp >> 8) & 0xFF                                                                                       // 49\n    arr[L++] = tmp & 0xFF                                                                                              // 50\n  }                                                                                                                    // 51\n                                                                                                                       // 52\n  if (placeHolders === 2) {                                                                                            // 53\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)                                // 54\n    arr[L++] = tmp & 0xFF                                                                                              // 55\n  } else if (placeHolders === 1) {                                                                                     // 56\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF                                                                                       // 58\n    arr[L++] = tmp & 0xFF                                                                                              // 59\n  }                                                                                                                    // 60\n                                                                                                                       // 61\n  return arr                                                                                                           // 62\n}                                                                                                                      // 63\n                                                                                                                       // 64\nfunction tripletToBase64 (num) {                                                                                       // 65\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]            // 66\n}                                                                                                                      // 67\n                                                                                                                       // 68\nfunction encodeChunk (uint8, start, end) {                                                                             // 69\n  var tmp                                                                                                              // 70\n  var output = []                                                                                                      // 71\n  for (var i = start; i < end; i += 3) {                                                                               // 72\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])                                                      // 73\n    output.push(tripletToBase64(tmp))                                                                                  // 74\n  }                                                                                                                    // 75\n  return output.join('')                                                                                               // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\nfunction fromByteArray (uint8) {                                                                                       // 79\n  var tmp                                                                                                              // 80\n  var len = uint8.length                                                                                               // 81\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes                                                      // 82\n  var output = ''                                                                                                      // 83\n  var parts = []                                                                                                       // 84\n  var maxChunkLength = 16383 // must be multiple of 3                                                                  // 85\n                                                                                                                       // 86\n  // go through the array every three bytes, we'll deal with trailing stuff later                                      // 87\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {                                            // 88\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))                       // 89\n  }                                                                                                                    // 90\n                                                                                                                       // 91\n  // pad the end with zeros, but make sure to not forget the extra bytes                                               // 92\n  if (extraBytes === 1) {                                                                                              // 93\n    tmp = uint8[len - 1]                                                                                               // 94\n    output += lookup[tmp >> 2]                                                                                         // 95\n    output += lookup[(tmp << 4) & 0x3F]                                                                                // 96\n    output += '=='                                                                                                     // 97\n  } else if (extraBytes === 2) {                                                                                       // 98\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])                                                                     // 99\n    output += lookup[tmp >> 10]                                                                                        // 100\n    output += lookup[(tmp >> 4) & 0x3F]                                                                                // 101\n    output += lookup[(tmp << 2) & 0x3F]                                                                                // 102\n    output += '='                                                                                                      // 103\n  }                                                                                                                    // 104\n                                                                                                                       // 105\n  parts.push(output)                                                                                                   // 106\n                                                                                                                       // 107\n  return parts.join('')                                                                                                // 108\n}                                                                                                                      // 109\n                                                                                                                       // 110\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"ieee754\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/ieee754/package.json                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"ieee754\";                                                                                              // 1\nexports.version = \"1.1.6\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/ieee754/index.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {                                                         // 1\n  var e, m                                                                                                             // 2\n  var eLen = nBytes * 8 - mLen - 1                                                                                     // 3\n  var eMax = (1 << eLen) - 1                                                                                           // 4\n  var eBias = eMax >> 1                                                                                                // 5\n  var nBits = -7                                                                                                       // 6\n  var i = isLE ? (nBytes - 1) : 0                                                                                      // 7\n  var d = isLE ? -1 : 1                                                                                                // 8\n  var s = buffer[offset + i]                                                                                           // 9\n                                                                                                                       // 10\n  i += d                                                                                                               // 11\n                                                                                                                       // 12\n  e = s & ((1 << (-nBits)) - 1)                                                                                        // 13\n  s >>= (-nBits)                                                                                                       // 14\n  nBits += eLen                                                                                                        // 15\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 16\n                                                                                                                       // 17\n  m = e & ((1 << (-nBits)) - 1)                                                                                        // 18\n  e >>= (-nBits)                                                                                                       // 19\n  nBits += mLen                                                                                                        // 20\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 21\n                                                                                                                       // 22\n  if (e === 0) {                                                                                                       // 23\n    e = 1 - eBias                                                                                                      // 24\n  } else if (e === eMax) {                                                                                             // 25\n    return m ? NaN : ((s ? -1 : 1) * Infinity)                                                                         // 26\n  } else {                                                                                                             // 27\n    m = m + Math.pow(2, mLen)                                                                                          // 28\n    e = e - eBias                                                                                                      // 29\n  }                                                                                                                    // 30\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)                                                                      // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {                                                 // 34\n  var e, m, c                                                                                                          // 35\n  var eLen = nBytes * 8 - mLen - 1                                                                                     // 36\n  var eMax = (1 << eLen) - 1                                                                                           // 37\n  var eBias = eMax >> 1                                                                                                // 38\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)                                                     // 39\n  var i = isLE ? 0 : (nBytes - 1)                                                                                      // 40\n  var d = isLE ? 1 : -1                                                                                                // 41\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0                                                          // 42\n                                                                                                                       // 43\n  value = Math.abs(value)                                                                                              // 44\n                                                                                                                       // 45\n  if (isNaN(value) || value === Infinity) {                                                                            // 46\n    m = isNaN(value) ? 1 : 0                                                                                           // 47\n    e = eMax                                                                                                           // 48\n  } else {                                                                                                             // 49\n    e = Math.floor(Math.log(value) / Math.LN2)                                                                         // 50\n    if (value * (c = Math.pow(2, -e)) < 1) {                                                                           // 51\n      e--                                                                                                              // 52\n      c *= 2                                                                                                           // 53\n    }                                                                                                                  // 54\n    if (e + eBias >= 1) {                                                                                              // 55\n      value += rt / c                                                                                                  // 56\n    } else {                                                                                                           // 57\n      value += rt * Math.pow(2, 1 - eBias)                                                                             // 58\n    }                                                                                                                  // 59\n    if (value * c >= 2) {                                                                                              // 60\n      e++                                                                                                              // 61\n      c /= 2                                                                                                           // 62\n    }                                                                                                                  // 63\n                                                                                                                       // 64\n    if (e + eBias >= eMax) {                                                                                           // 65\n      m = 0                                                                                                            // 66\n      e = eMax                                                                                                         // 67\n    } else if (e + eBias >= 1) {                                                                                       // 68\n      m = (value * c - 1) * Math.pow(2, mLen)                                                                          // 69\n      e = e + eBias                                                                                                    // 70\n    } else {                                                                                                           // 71\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)                                                           // 72\n      e = 0                                                                                                            // 73\n    }                                                                                                                  // 74\n  }                                                                                                                    // 75\n                                                                                                                       // 76\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}                                     // 77\n                                                                                                                       // 78\n  e = (e << mLen) | m                                                                                                  // 79\n  eLen += mLen                                                                                                         // 80\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}                                      // 81\n                                                                                                                       // 82\n  buffer[offset + i - d] |= s * 128                                                                                    // 83\n}                                                                                                                      // 84\n                                                                                                                       // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"isarray\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/isarray/package.json                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"isarray\";                                                                                              // 1\nexports.version = \"1.0.0\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/isarray/index.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar toString = {}.toString;                                                                                            // 1\n                                                                                                                       // 2\nmodule.exports = Array.isArray || function (arr) {                                                                     // 3\n  return toString.call(arr) == '[object Array]';                                                                       // 4\n};                                                                                                                     // 5\n                                                                                                                       // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"process\":{\"browser.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/process/browser.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// shim for using process in browser                                                                                   // 1\n                                                                                                                       // 2\nvar process = module.exports = {};                                                                                     // 3\nvar queue = [];                                                                                                        // 4\nvar draining = false;                                                                                                  // 5\nvar currentQueue;                                                                                                      // 6\nvar queueIndex = -1;                                                                                                   // 7\n                                                                                                                       // 8\nfunction cleanUpNextTick() {                                                                                           // 9\n    draining = false;                                                                                                  // 10\n    if (currentQueue.length) {                                                                                         // 11\n        queue = currentQueue.concat(queue);                                                                            // 12\n    } else {                                                                                                           // 13\n        queueIndex = -1;                                                                                               // 14\n    }                                                                                                                  // 15\n    if (queue.length) {                                                                                                // 16\n        drainQueue();                                                                                                  // 17\n    }                                                                                                                  // 18\n}                                                                                                                      // 19\n                                                                                                                       // 20\nfunction drainQueue() {                                                                                                // 21\n    if (draining) {                                                                                                    // 22\n        return;                                                                                                        // 23\n    }                                                                                                                  // 24\n    var timeout = setTimeout(cleanUpNextTick);                                                                         // 25\n    draining = true;                                                                                                   // 26\n                                                                                                                       // 27\n    var len = queue.length;                                                                                            // 28\n    while(len) {                                                                                                       // 29\n        currentQueue = queue;                                                                                          // 30\n        queue = [];                                                                                                    // 31\n        while (++queueIndex < len) {                                                                                   // 32\n            if (currentQueue) {                                                                                        // 33\n                currentQueue[queueIndex].run();                                                                        // 34\n            }                                                                                                          // 35\n        }                                                                                                              // 36\n        queueIndex = -1;                                                                                               // 37\n        len = queue.length;                                                                                            // 38\n    }                                                                                                                  // 39\n    currentQueue = null;                                                                                               // 40\n    draining = false;                                                                                                  // 41\n    clearTimeout(timeout);                                                                                             // 42\n}                                                                                                                      // 43\n                                                                                                                       // 44\nprocess.nextTick = function (fun) {                                                                                    // 45\n    var args = new Array(arguments.length - 1);                                                                        // 46\n    if (arguments.length > 1) {                                                                                        // 47\n        for (var i = 1; i < arguments.length; i++) {                                                                   // 48\n            args[i - 1] = arguments[i];                                                                                // 49\n        }                                                                                                              // 50\n    }                                                                                                                  // 51\n    queue.push(new Item(fun, args));                                                                                   // 52\n    if (queue.length === 1 && !draining) {                                                                             // 53\n        setTimeout(drainQueue, 0);                                                                                     // 54\n    }                                                                                                                  // 55\n};                                                                                                                     // 56\n                                                                                                                       // 57\n// v8 likes predictible objects                                                                                        // 58\nfunction Item(fun, array) {                                                                                            // 59\n    this.fun = fun;                                                                                                    // 60\n    this.array = array;                                                                                                // 61\n}                                                                                                                      // 62\nItem.prototype.run = function () {                                                                                     // 63\n    this.fun.apply(null, this.array);                                                                                  // 64\n};                                                                                                                     // 65\nprocess.title = 'browser';                                                                                             // 66\nprocess.browser = true;                                                                                                // 67\nprocess.env = {};                                                                                                      // 68\nprocess.argv = [];                                                                                                     // 69\nprocess.version = ''; // empty string to avoid regexp issues                                                           // 70\nprocess.versions = {};                                                                                                 // 71\n                                                                                                                       // 72\nfunction noop() {}                                                                                                     // 73\n                                                                                                                       // 74\nprocess.on = noop;                                                                                                     // 75\nprocess.addListener = noop;                                                                                            // 76\nprocess.once = noop;                                                                                                   // 77\nprocess.off = noop;                                                                                                    // 78\nprocess.removeListener = noop;                                                                                         // 79\nprocess.removeAllListeners = noop;                                                                                     // 80\nprocess.emit = noop;                                                                                                   // 81\n                                                                                                                       // 82\nprocess.binding = function (name) {                                                                                    // 83\n    throw new Error('process.binding is not supported');                                                               // 84\n};                                                                                                                     // 85\n                                                                                                                       // 86\nprocess.cwd = function () { return '/' };                                                                              // 87\nprocess.chdir = function (dir) {                                                                                       // 88\n    throw new Error('process.chdir is not supported');                                                                 // 89\n};                                                                                                                     // 90\nprocess.umask = function() { return 0; };                                                                              // 91\n                                                                                                                       // 92\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"domain-browser\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/domain-browser/package.json                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"domain-browser\";                                                                                       // 1\nexports.version = \"1.1.7\";                                                                                             // 2\nexports.main = \"./index.js\";                                                                                           // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"events\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/domain-browser/index.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// This file should be ES5 compatible                                                                                  // 1\n/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */                                           // 2\n'use strict'                                                                                                           // 3\nmodule.exports = (function () {                                                                                        // 4\n\t// Import Events                                                                                                      // 5\n\tvar events = require('events')                                                                                        // 6\n                                                                                                                       // 7\n\t// Export Domain                                                                                                      // 8\n\tvar domain = {}                                                                                                       // 9\n\tdomain.createDomain = domain.create = function () {                                                                   // 10\n\t\tvar d = new events.EventEmitter()                                                                                    // 11\n                                                                                                                       // 12\n\t\tfunction emitError (e) {                                                                                             // 13\n\t\t\td.emit('error', e)                                                                                                  // 14\n\t\t}                                                                                                                    // 15\n                                                                                                                       // 16\n\t\td.add = function (emitter) {                                                                                         // 17\n\t\t\temitter.on('error', emitError)                                                                                      // 18\n\t\t}                                                                                                                    // 19\n\t\td.remove = function (emitter) {                                                                                      // 20\n\t\t\temitter.removeListener('error', emitError)                                                                          // 21\n\t\t}                                                                                                                    // 22\n\t\td.bind = function (fn) {                                                                                             // 23\n\t\t\treturn function () {                                                                                                // 24\n\t\t\t\tvar args = Array.prototype.slice.call(arguments)                                                                   // 25\n\t\t\t\ttry {                                                                                                              // 26\n\t\t\t\t\tfn.apply(null, args)                                                                                              // 27\n\t\t\t\t}                                                                                                                  // 28\n\t\t\t\tcatch (err) {                                                                                                      // 29\n\t\t\t\t\temitError(err)                                                                                                    // 30\n\t\t\t\t}                                                                                                                  // 31\n\t\t\t}                                                                                                                   // 32\n\t\t}                                                                                                                    // 33\n\t\td.intercept = function (fn) {                                                                                        // 34\n\t\t\treturn function (err) {                                                                                             // 35\n\t\t\t\tif ( err ) {                                                                                                       // 36\n\t\t\t\t\temitError(err)                                                                                                    // 37\n\t\t\t\t}                                                                                                                  // 38\n\t\t\t\telse {                                                                                                             // 39\n\t\t\t\t\tvar args = Array.prototype.slice.call(arguments, 1)                                                               // 40\n\t\t\t\t\ttry {                                                                                                             // 41\n\t\t\t\t\t\tfn.apply(null, args)                                                                                             // 42\n\t\t\t\t\t}                                                                                                                 // 43\n\t\t\t\t\tcatch (err) {                                                                                                     // 44\n\t\t\t\t\t\temitError(err)                                                                                                   // 45\n\t\t\t\t\t}                                                                                                                 // 46\n\t\t\t\t}                                                                                                                  // 47\n\t\t\t}                                                                                                                   // 48\n\t\t}                                                                                                                    // 49\n\t\td.run = function (fn) {                                                                                              // 50\n\t\t\ttry {                                                                                                               // 51\n\t\t\t\tfn()                                                                                                               // 52\n\t\t\t}                                                                                                                   // 53\n\t\t\tcatch (err) {                                                                                                       // 54\n\t\t\t\temitError(err)                                                                                                     // 55\n\t\t\t}                                                                                                                   // 56\n\t\t\treturn this                                                                                                         // 57\n\t\t}                                                                                                                    // 58\n\t\td.dispose = function () {                                                                                            // 59\n\t\t\tthis.removeAllListeners()                                                                                           // 60\n\t\t\treturn this                                                                                                         // 61\n\t\t}                                                                                                                    // 62\n\t\td.enter = d.exit = function () {                                                                                     // 63\n\t\t\treturn this                                                                                                         // 64\n\t\t}                                                                                                                    // 65\n\t\treturn d                                                                                                             // 66\n\t}                                                                                                                     // 67\n\treturn domain                                                                                                         // 68\n}).call(this)                                                                                                          // 69\n                                                                                                                       // 70\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"events\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/events/package.json                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"events\";                                                                                               // 1\nexports.version = \"1.1.0\";                                                                                             // 2\nexports.main = \"./events.js\";                                                                                          // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"events.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor-node-stubs/node_modules/events/events.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1\n//                                                                                                                     // 2\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3\n// copy of this software and associated documentation files (the                                                       // 4\n// \"Software\"), to deal in the Software without restriction, including                                                 // 5\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7\n// persons to whom the Software is furnished to do so, subject to the                                                  // 8\n// following conditions:                                                                                               // 9\n//                                                                                                                     // 10\n// The above copyright notice and this permission notice shall be included                                             // 11\n// in all copies or substantial portions of the Software.                                                              // 12\n//                                                                                                                     // 13\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20\n                                                                                                                       // 21\nfunction EventEmitter() {                                                                                              // 22\n  this._events = this._events || {};                                                                                   // 23\n  this._maxListeners = this._maxListeners || undefined;                                                                // 24\n}                                                                                                                      // 25\nmodule.exports = EventEmitter;                                                                                         // 26\n                                                                                                                       // 27\n// Backwards-compat with node 0.10.x                                                                                   // 28\nEventEmitter.EventEmitter = EventEmitter;                                                                              // 29\n                                                                                                                       // 30\nEventEmitter.prototype._events = undefined;                                                                            // 31\nEventEmitter.prototype._maxListeners = undefined;                                                                      // 32\n                                                                                                                       // 33\n// By default EventEmitters will print a warning if more than 10 listeners are                                         // 34\n// added to it. This is a useful default which helps finding memory leaks.                                             // 35\nEventEmitter.defaultMaxListeners = 10;                                                                                 // 36\n                                                                                                                       // 37\n// Obviously not all Emitters should be limited to 10. This function allows                                            // 38\n// that to be increased. Set to zero for unlimited.                                                                    // 39\nEventEmitter.prototype.setMaxListeners = function(n) {                                                                 // 40\n  if (!isNumber(n) || n < 0 || isNaN(n))                                                                               // 41\n    throw TypeError('n must be a positive number');                                                                    // 42\n  this._maxListeners = n;                                                                                              // 43\n  return this;                                                                                                         // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\nEventEmitter.prototype.emit = function(type) {                                                                         // 47\n  var er, handler, len, args, i, listeners;                                                                            // 48\n                                                                                                                       // 49\n  if (!this._events)                                                                                                   // 50\n    this._events = {};                                                                                                 // 51\n                                                                                                                       // 52\n  // If there is no 'error' event listener then throw.                                                                 // 53\n  if (type === 'error') {                                                                                              // 54\n    if (!this._events.error ||                                                                                         // 55\n        (isObject(this._events.error) && !this._events.error.length)) {                                                // 56\n      er = arguments[1];                                                                                               // 57\n      if (er instanceof Error) {                                                                                       // 58\n        throw er; // Unhandled 'error' event                                                                           // 59\n      }                                                                                                                // 60\n      throw TypeError('Uncaught, unspecified \"error\" event.');                                                         // 61\n    }                                                                                                                  // 62\n  }                                                                                                                    // 63\n                                                                                                                       // 64\n  handler = this._events[type];                                                                                        // 65\n                                                                                                                       // 66\n  if (isUndefined(handler))                                                                                            // 67\n    return false;                                                                                                      // 68\n                                                                                                                       // 69\n  if (isFunction(handler)) {                                                                                           // 70\n    switch (arguments.length) {                                                                                        // 71\n      // fast cases                                                                                                    // 72\n      case 1:                                                                                                          // 73\n        handler.call(this);                                                                                            // 74\n        break;                                                                                                         // 75\n      case 2:                                                                                                          // 76\n        handler.call(this, arguments[1]);                                                                              // 77\n        break;                                                                                                         // 78\n      case 3:                                                                                                          // 79\n        handler.call(this, arguments[1], arguments[2]);                                                                // 80\n        break;                                                                                                         // 81\n      // slower                                                                                                        // 82\n      default:                                                                                                         // 83\n        args = Array.prototype.slice.call(arguments, 1);                                                               // 84\n        handler.apply(this, args);                                                                                     // 85\n    }                                                                                                                  // 86\n  } else if (isObject(handler)) {                                                                                      // 87\n    args = Array.prototype.slice.call(arguments, 1);                                                                   // 88\n    listeners = handler.slice();                                                                                       // 89\n    len = listeners.length;                                                                                            // 90\n    for (i = 0; i < len; i++)                                                                                          // 91\n      listeners[i].apply(this, args);                                                                                  // 92\n  }                                                                                                                    // 93\n                                                                                                                       // 94\n  return true;                                                                                                         // 95\n};                                                                                                                     // 96\n                                                                                                                       // 97\nEventEmitter.prototype.addListener = function(type, listener) {                                                        // 98\n  var m;                                                                                                               // 99\n                                                                                                                       // 100\n  if (!isFunction(listener))                                                                                           // 101\n    throw TypeError('listener must be a function');                                                                    // 102\n                                                                                                                       // 103\n  if (!this._events)                                                                                                   // 104\n    this._events = {};                                                                                                 // 105\n                                                                                                                       // 106\n  // To avoid recursion in the case that type === \"newListener\"! Before                                                // 107\n  // adding it to the listeners, first emit \"newListener\".                                                             // 108\n  if (this._events.newListener)                                                                                        // 109\n    this.emit('newListener', type,                                                                                     // 110\n              isFunction(listener.listener) ?                                                                          // 111\n              listener.listener : listener);                                                                           // 112\n                                                                                                                       // 113\n  if (!this._events[type])                                                                                             // 114\n    // Optimize the case of one listener. Don't need the extra array object.                                           // 115\n    this._events[type] = listener;                                                                                     // 116\n  else if (isObject(this._events[type]))                                                                               // 117\n    // If we've already got an array, just append.                                                                     // 118\n    this._events[type].push(listener);                                                                                 // 119\n  else                                                                                                                 // 120\n    // Adding the second element, need to change to array.                                                             // 121\n    this._events[type] = [this._events[type], listener];                                                               // 122\n                                                                                                                       // 123\n  // Check for listener leak                                                                                           // 124\n  if (isObject(this._events[type]) && !this._events[type].warned) {                                                    // 125\n    if (!isUndefined(this._maxListeners)) {                                                                            // 126\n      m = this._maxListeners;                                                                                          // 127\n    } else {                                                                                                           // 128\n      m = EventEmitter.defaultMaxListeners;                                                                            // 129\n    }                                                                                                                  // 130\n                                                                                                                       // 131\n    if (m && m > 0 && this._events[type].length > m) {                                                                 // 132\n      this._events[type].warned = true;                                                                                // 133\n      console.error('(node) warning: possible EventEmitter memory ' +                                                  // 134\n                    'leak detected. %d listeners added. ' +                                                            // 135\n                    'Use emitter.setMaxListeners() to increase limit.',                                                // 136\n                    this._events[type].length);                                                                        // 137\n      if (typeof console.trace === 'function') {                                                                       // 138\n        // not supported in IE 10                                                                                      // 139\n        console.trace();                                                                                               // 140\n      }                                                                                                                // 141\n    }                                                                                                                  // 142\n  }                                                                                                                    // 143\n                                                                                                                       // 144\n  return this;                                                                                                         // 145\n};                                                                                                                     // 146\n                                                                                                                       // 147\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                        // 148\n                                                                                                                       // 149\nEventEmitter.prototype.once = function(type, listener) {                                                               // 150\n  if (!isFunction(listener))                                                                                           // 151\n    throw TypeError('listener must be a function');                                                                    // 152\n                                                                                                                       // 153\n  var fired = false;                                                                                                   // 154\n                                                                                                                       // 155\n  function g() {                                                                                                       // 156\n    this.removeListener(type, g);                                                                                      // 157\n                                                                                                                       // 158\n    if (!fired) {                                                                                                      // 159\n      fired = true;                                                                                                    // 160\n      listener.apply(this, arguments);                                                                                 // 161\n    }                                                                                                                  // 162\n  }                                                                                                                    // 163\n                                                                                                                       // 164\n  g.listener = listener;                                                                                               // 165\n  this.on(type, g);                                                                                                    // 166\n                                                                                                                       // 167\n  return this;                                                                                                         // 168\n};                                                                                                                     // 169\n                                                                                                                       // 170\n// emits a 'removeListener' event iff the listener was removed                                                         // 171\nEventEmitter.prototype.removeListener = function(type, listener) {                                                     // 172\n  var list, position, length, i;                                                                                       // 173\n                                                                                                                       // 174\n  if (!isFunction(listener))                                                                                           // 175\n    throw TypeError('listener must be a function');                                                                    // 176\n                                                                                                                       // 177\n  if (!this._events || !this._events[type])                                                                            // 178\n    return this;                                                                                                       // 179\n                                                                                                                       // 180\n  list = this._events[type];                                                                                           // 181\n  length = list.length;                                                                                                // 182\n  position = -1;                                                                                                       // 183\n                                                                                                                       // 184\n  if (list === listener ||                                                                                             // 185\n      (isFunction(list.listener) && list.listener === listener)) {                                                     // 186\n    delete this._events[type];                                                                                         // 187\n    if (this._events.removeListener)                                                                                   // 188\n      this.emit('removeListener', type, listener);                                                                     // 189\n                                                                                                                       // 190\n  } else if (isObject(list)) {                                                                                         // 191\n    for (i = length; i-- > 0;) {                                                                                       // 192\n      if (list[i] === listener ||                                                                                      // 193\n          (list[i].listener && list[i].listener === listener)) {                                                       // 194\n        position = i;                                                                                                  // 195\n        break;                                                                                                         // 196\n      }                                                                                                                // 197\n    }                                                                                                                  // 198\n                                                                                                                       // 199\n    if (position < 0)                                                                                                  // 200\n      return this;                                                                                                     // 201\n                                                                                                                       // 202\n    if (list.length === 1) {                                                                                           // 203\n      list.length = 0;                                                                                                 // 204\n      delete this._events[type];                                                                                       // 205\n    } else {                                                                                                           // 206\n      list.splice(position, 1);                                                                                        // 207\n    }                                                                                                                  // 208\n                                                                                                                       // 209\n    if (this._events.removeListener)                                                                                   // 210\n      this.emit('removeListener', type, listener);                                                                     // 211\n  }                                                                                                                    // 212\n                                                                                                                       // 213\n  return this;                                                                                                         // 214\n};                                                                                                                     // 215\n                                                                                                                       // 216\nEventEmitter.prototype.removeAllListeners = function(type) {                                                           // 217\n  var key, listeners;                                                                                                  // 218\n                                                                                                                       // 219\n  if (!this._events)                                                                                                   // 220\n    return this;                                                                                                       // 221\n                                                                                                                       // 222\n  // not listening for removeListener, no need to emit                                                                 // 223\n  if (!this._events.removeListener) {                                                                                  // 224\n    if (arguments.length === 0)                                                                                        // 225\n      this._events = {};                                                                                               // 226\n    else if (this._events[type])                                                                                       // 227\n      delete this._events[type];                                                                                       // 228\n    return this;                                                                                                       // 229\n  }                                                                                                                    // 230\n                                                                                                                       // 231\n  // emit removeListener for all listeners on all events                                                               // 232\n  if (arguments.length === 0) {                                                                                        // 233\n    for (key in this._events) {                                                                                        // 234\n      if (key === 'removeListener') continue;                                                                          // 235\n      this.removeAllListeners(key);                                                                                    // 236\n    }                                                                                                                  // 237\n    this.removeAllListeners('removeListener');                                                                         // 238\n    this._events = {};                                                                                                 // 239\n    return this;                                                                                                       // 240\n  }                                                                                                                    // 241\n                                                                                                                       // 242\n  listeners = this._events[type];                                                                                      // 243\n                                                                                                                       // 244\n  if (isFunction(listeners)) {                                                                                         // 245\n    this.removeListener(type, listeners);                                                                              // 246\n  } else if (listeners) {                                                                                              // 247\n    // LIFO order                                                                                                      // 248\n    while (listeners.length)                                                                                           // 249\n      this.removeListener(type, listeners[listeners.length - 1]);                                                      // 250\n  }                                                                                                                    // 251\n  delete this._events[type];                                                                                           // 252\n                                                                                                                       // 253\n  return this;                                                                                                         // 254\n};                                                                                                                     // 255\n                                                                                                                       // 256\nEventEmitter.prototype.listeners = function(type) {                                                                    // 257\n  var ret;                                                                                                             // 258\n  if (!this._events || !this._events[type])                                                                            // 259\n    ret = [];                                                                                                          // 260\n  else if (isFunction(this._events[type]))                                                                             // 261\n    ret = [this._events[type]];                                                                                        // 262\n  else                                                                                                                 // 263\n    ret = this._events[type].slice();                                                                                  // 264\n  return ret;                                                                                                          // 265\n};                                                                                                                     // 266\n                                                                                                                       // 267\nEventEmitter.prototype.listenerCount = function(type) {                                                                // 268\n  if (this._events) {                                                                                                  // 269\n    var evlistener = this._events[type];                                                                               // 270\n                                                                                                                       // 271\n    if (isFunction(evlistener))                                                                                        // 272\n      return 1;                                                                                                        // 273\n    else if (evlistener)                                                                                               // 274\n      return evlistener.length;                                                                                        // 275\n  }                                                                                                                    // 276\n  return 0;                                                                                                            // 277\n};                                                                                                                     // 278\n                                                                                                                       // 279\nEventEmitter.listenerCount = function(emitter, type) {                                                                 // 280\n  return emitter.listenerCount(type);                                                                                  // 281\n};                                                                                                                     // 282\n                                                                                                                       // 283\nfunction isFunction(arg) {                                                                                             // 284\n  return typeof arg === 'function';                                                                                    // 285\n}                                                                                                                      // 286\n                                                                                                                       // 287\nfunction isNumber(arg) {                                                                                               // 288\n  return typeof arg === 'number';                                                                                      // 289\n}                                                                                                                      // 290\n                                                                                                                       // 291\nfunction isObject(arg) {                                                                                               // 292\n  return typeof arg === 'object' && arg !== null;                                                                      // 293\n}                                                                                                                      // 294\n                                                                                                                       // 295\nfunction isUndefined(arg) {                                                                                            // 296\n  return arg === void 0;                                                                                               // 297\n}                                                                                                                      // 298\n                                                                                                                       // 299\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"apollo-client\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/package.json                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"apollo-client\";                                                                                        // 1\nexports.version = \"0.4.20\";                                                                                            // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"./networkInterface\",\"graphql-tag/printer\",\"./store\",\"./QueryManager\",\"./ObservableQuery\",\"./data/readFromStore\",\"./data/writeToStore\",\"./queries/queryTransform\",\"./data/storeUtils\",\"./queries/getFromAST\",\"./errors\",\"lodash.isundefined\",\"lodash.assign\",\"lodash.flatten\",\"lodash.isstring\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/index.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar networkInterface_1 = require('./networkInterface');                                                                // 2\nexports.createNetworkInterface = networkInterface_1.createNetworkInterface;                                            // 3\nexports.addQueryMerging = networkInterface_1.addQueryMerging;                                                          // 4\nvar printer_1 = require('graphql-tag/printer');                                                                        // 5\nexports.printAST = printer_1.print;                                                                                    // 6\nvar store_1 = require('./store');                                                                                      // 7\nexports.createApolloStore = store_1.createApolloStore;                                                                 // 8\nexports.createApolloReducer = store_1.createApolloReducer;                                                             // 9\nvar QueryManager_1 = require('./QueryManager');                                                                        // 10\nvar ObservableQuery_1 = require('./ObservableQuery');                                                                  // 11\nexports.ObservableQuery = ObservableQuery_1.ObservableQuery;                                                           // 12\nvar readFromStore_1 = require('./data/readFromStore');                                                                 // 13\nexports.readQueryFromStore = readFromStore_1.readQueryFromStore;                                                       // 14\nexports.readFragmentFromStore = readFromStore_1.readFragmentFromStore;                                                 // 15\nvar writeToStore_1 = require('./data/writeToStore');                                                                   // 16\nexports.writeQueryToStore = writeToStore_1.writeQueryToStore;                                                          // 17\nexports.writeFragmentToStore = writeToStore_1.writeFragmentToStore;                                                    // 18\nvar queryTransform_1 = require('./queries/queryTransform');                                                            // 19\nexports.addTypename = queryTransform_1.addTypenameToSelectionSet;                                                      // 20\nvar storeUtils_1 = require('./data/storeUtils');                                                                       // 21\nvar getFromAST_1 = require('./queries/getFromAST');                                                                    // 22\nexports.createFragmentMap = getFromAST_1.createFragmentMap;                                                            // 23\nvar errors_1 = require('./errors');                                                                                    // 24\nexports.ApolloError = errors_1.ApolloError;                                                                            // 25\nvar isUndefined = require('lodash.isundefined');                                                                       // 26\nvar assign = require('lodash.assign');                                                                                 // 27\nvar flatten = require('lodash.flatten');                                                                               // 28\nvar isString = require('lodash.isstring');                                                                             // 29\nvar DEFAULT_REDUX_ROOT_KEY = 'apollo';                                                                                 // 30\nexports.fragmentDefinitionsMap = {};                                                                                   // 31\nvar printFragmentWarnings = true;                                                                                      // 32\nfunction createFragment(doc, fragments) {                                                                              // 33\n    if (fragments === void 0) { fragments = []; }                                                                      // 34\n    fragments = flatten(fragments);                                                                                    // 35\n    var fragmentDefinitions = getFromAST_1.getFragmentDefinitions(doc);                                                // 36\n    fragmentDefinitions.forEach(function (fragmentDefinition) {                                                        // 37\n        var fragmentName = fragmentDefinition.name.value;                                                              // 38\n        if (exports.fragmentDefinitionsMap.hasOwnProperty(fragmentName) &&                                             // 39\n            exports.fragmentDefinitionsMap[fragmentName].indexOf(fragmentDefinition) === -1) {                         // 40\n            if (printFragmentWarnings) {                                                                               // 41\n                console.warn(\"Warning: fragment with name \" + fragmentDefinition.name.value + \" already exists.\\nApollo Client enforces all fragment names across your application to be unique; read more about\\nthis in the docs: http://docs.apollostack.com/\");\n            }                                                                                                          // 43\n            exports.fragmentDefinitionsMap[fragmentName].push(fragmentDefinition);                                     // 44\n        }                                                                                                              // 45\n        else if (!exports.fragmentDefinitionsMap.hasOwnProperty(fragmentName)) {                                       // 46\n            exports.fragmentDefinitionsMap[fragmentName] = [fragmentDefinition];                                       // 47\n        }                                                                                                              // 48\n    });                                                                                                                // 49\n    return fragments.concat(fragmentDefinitions);                                                                      // 50\n}                                                                                                                      // 51\nexports.createFragment = createFragment;                                                                               // 52\nfunction disableFragmentWarnings() {                                                                                   // 53\n    printFragmentWarnings = false;                                                                                     // 54\n}                                                                                                                      // 55\nexports.disableFragmentWarnings = disableFragmentWarnings;                                                             // 56\nfunction enableFragmentWarnings() {                                                                                    // 57\n    printFragmentWarnings = true;                                                                                      // 58\n}                                                                                                                      // 59\nexports.enableFragmentWarnings = enableFragmentWarnings;                                                               // 60\nfunction clearFragmentDefinitions() {                                                                                  // 61\n    exports.fragmentDefinitionsMap = {};                                                                               // 62\n}                                                                                                                      // 63\nexports.clearFragmentDefinitions = clearFragmentDefinitions;                                                           // 64\nfunction defaultReduxRootSelector(state) {                                                                             // 65\n    return state[DEFAULT_REDUX_ROOT_KEY];                                                                              // 66\n}                                                                                                                      // 67\nvar ApolloClient = (function () {                                                                                      // 68\n    function ApolloClient(_a) {                                                                                        // 69\n        var _this = this;                                                                                              // 70\n        var _b = _a === void 0 ? {} : _a, networkInterface = _b.networkInterface, reduxRootKey = _b.reduxRootKey, reduxRootSelector = _b.reduxRootSelector, initialState = _b.initialState, dataIdFromObject = _b.dataIdFromObject, queryTransformer = _b.queryTransformer, resultTransformer = _b.resultTransformer, resultComparator = _b.resultComparator, _c = _b.shouldBatch, shouldBatch = _c === void 0 ? false : _c, _d = _b.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _b.ssrForceFetchDelay, ssrForceFetchDelay = _e === void 0 ? 0 : _e, _f = _b.mutationBehaviorReducers, mutationBehaviorReducers = _f === void 0 ? {} : _f, batchInterval = _b.batchInterval;\n        this.middleware = function () {                                                                                // 72\n            return function (store) {                                                                                  // 73\n                _this.setStore(store);                                                                                 // 74\n                return function (next) { return function (action) {                                                    // 75\n                    var returnValue = next(action);                                                                    // 76\n                    _this.queryManager.broadcastNewStore(store.getState());                                            // 77\n                    return returnValue;                                                                                // 78\n                }; };                                                                                                  // 79\n            };                                                                                                         // 80\n        };                                                                                                             // 81\n        if (reduxRootKey && reduxRootSelector) {                                                                       // 82\n            throw new Error('Both \"reduxRootKey\" and \"reduxRootSelector\" are configured, but only one of two is allowed.');\n        }                                                                                                              // 84\n        if (reduxRootKey) {                                                                                            // 85\n            console.warn('\"reduxRootKey\" option is deprecated and might be removed in the upcoming versions, ' +       // 86\n                'please use the \"reduxRootSelector\" instead.');                                                        // 87\n            this.reduxRootKey = reduxRootKey;                                                                          // 88\n        }                                                                                                              // 89\n        if (!reduxRootSelector && reduxRootKey) {                                                                      // 90\n            this.reduxRootSelector = function (state) { return state[reduxRootKey]; };                                 // 91\n        }                                                                                                              // 92\n        else if (isString(reduxRootSelector)) {                                                                        // 93\n            this.reduxRootKey = reduxRootSelector;                                                                     // 94\n            this.reduxRootSelector = function (state) { return state[reduxRootSelector]; };                            // 95\n        }                                                                                                              // 96\n        else if (typeof reduxRootSelector === 'function') {                                                            // 97\n            this.reduxRootSelector = reduxRootSelector;                                                                // 98\n        }                                                                                                              // 99\n        else {                                                                                                         // 100\n            this.reduxRootSelector = null;                                                                             // 101\n        }                                                                                                              // 102\n        this.initialState = initialState ? initialState : {};                                                          // 103\n        this.networkInterface = networkInterface ? networkInterface :                                                  // 104\n            networkInterface_1.createNetworkInterface('/graphql');                                                     // 105\n        this.queryTransformer = queryTransformer;                                                                      // 106\n        this.resultTransformer = resultTransformer;                                                                    // 107\n        this.resultComparator = resultComparator;                                                                      // 108\n        this.shouldBatch = shouldBatch;                                                                                // 109\n        this.shouldForceFetch = !(ssrMode || ssrForceFetchDelay > 0);                                                  // 110\n        this.dataId = dataIdFromObject;                                                                                // 111\n        this.fieldWithArgs = storeUtils_1.storeKeyNameFromFieldNameAndArgs;                                            // 112\n        this.batchInterval = batchInterval;                                                                            // 113\n        if (ssrForceFetchDelay) {                                                                                      // 114\n            setTimeout(function () { return _this.shouldForceFetch = true; }, ssrForceFetchDelay);                     // 115\n        }                                                                                                              // 116\n        this.reducerConfig = {                                                                                         // 117\n            dataIdFromObject: dataIdFromObject,                                                                        // 118\n            mutationBehaviorReducers: mutationBehaviorReducers,                                                        // 119\n        };                                                                                                             // 120\n        this.watchQuery = this.watchQuery.bind(this);                                                                  // 121\n        this.query = this.query.bind(this);                                                                            // 122\n        this.mutate = this.mutate.bind(this);                                                                          // 123\n        this.setStore = this.setStore.bind(this);                                                                      // 124\n    }                                                                                                                  // 125\n    ApolloClient.prototype.watchQuery = function (options) {                                                           // 126\n        this.initStore();                                                                                              // 127\n        if (!this.shouldForceFetch && options.forceFetch) {                                                            // 128\n            options = assign({}, options, {                                                                            // 129\n                forceFetch: false,                                                                                     // 130\n            });                                                                                                        // 131\n        }                                                                                                              // 132\n        createFragment(options.query);                                                                                 // 133\n        return this.queryManager.watchQuery(options);                                                                  // 134\n    };                                                                                                                 // 135\n    ;                                                                                                                  // 136\n    ApolloClient.prototype.query = function (options) {                                                                // 137\n        this.initStore();                                                                                              // 138\n        if (!this.shouldForceFetch && options.forceFetch) {                                                            // 139\n            options = assign({}, options, {                                                                            // 140\n                forceFetch: false,                                                                                     // 141\n            });                                                                                                        // 142\n        }                                                                                                              // 143\n        createFragment(options.query);                                                                                 // 144\n        return this.queryManager.query(options);                                                                       // 145\n    };                                                                                                                 // 146\n    ;                                                                                                                  // 147\n    ApolloClient.prototype.mutate = function (options) {                                                               // 148\n        this.initStore();                                                                                              // 149\n        return this.queryManager.mutate(options);                                                                      // 150\n    };                                                                                                                 // 151\n    ;                                                                                                                  // 152\n    ApolloClient.prototype.subscribe = function (options) {                                                            // 153\n        this.initStore();                                                                                              // 154\n        return this.queryManager.startGraphQLSubscription(options);                                                    // 155\n    };                                                                                                                 // 156\n    ApolloClient.prototype.reducer = function () {                                                                     // 157\n        return store_1.createApolloReducer(this.reducerConfig);                                                        // 158\n    };                                                                                                                 // 159\n    ApolloClient.prototype.initStore = function () {                                                                   // 160\n        if (this.store) {                                                                                              // 161\n            return;                                                                                                    // 162\n        }                                                                                                              // 163\n        if (this.reduxRootSelector) {                                                                                  // 164\n            throw new Error('Cannot initialize the store because \"reduxRootSelector\" or \"reduxRootKey\" is provided. ' +\n                'They should only be used when the store is created outside of the client. ' +                         // 166\n                'This may lead to unexpected results when querying the store internally. ' +                           // 167\n                \"Please remove that option from ApolloClient constructor.\");                                           // 168\n        }                                                                                                              // 169\n        this.setStore(store_1.createApolloStore({                                                                      // 170\n            reduxRootKey: DEFAULT_REDUX_ROOT_KEY,                                                                      // 171\n            initialState: this.initialState,                                                                           // 172\n            config: this.reducerConfig,                                                                                // 173\n        }));                                                                                                           // 174\n        this.reduxRootKey = DEFAULT_REDUX_ROOT_KEY;                                                                    // 175\n    };                                                                                                                 // 176\n    ;                                                                                                                  // 177\n    ApolloClient.prototype.resetStore = function () {                                                                  // 178\n        this.queryManager.resetStore();                                                                                // 179\n    };                                                                                                                 // 180\n    ;                                                                                                                  // 181\n    ApolloClient.prototype.setStore = function (store) {                                                               // 182\n        var reduxRootSelector;                                                                                         // 183\n        if (this.reduxRootSelector) {                                                                                  // 184\n            reduxRootSelector = this.reduxRootSelector;                                                                // 185\n        }                                                                                                              // 186\n        else {                                                                                                         // 187\n            reduxRootSelector = defaultReduxRootSelector;                                                              // 188\n            this.reduxRootKey = DEFAULT_REDUX_ROOT_KEY;                                                                // 189\n        }                                                                                                              // 190\n        if (isUndefined(reduxRootSelector(store.getState()))) {                                                        // 191\n            throw new Error('Existing store does not use apolloReducer. Please make sure the store ' +                 // 192\n                'is properly configured and \"reduxRootSelector\" is correctly specified.');                             // 193\n        }                                                                                                              // 194\n        this.store = store;                                                                                            // 195\n        this.queryManager = new QueryManager_1.QueryManager({                                                          // 196\n            networkInterface: this.networkInterface,                                                                   // 197\n            reduxRootSelector: reduxRootSelector,                                                                      // 198\n            store: store,                                                                                              // 199\n            queryTransformer: this.queryTransformer,                                                                   // 200\n            resultTransformer: this.resultTransformer,                                                                 // 201\n            resultComparator: this.resultComparator,                                                                   // 202\n            shouldBatch: this.shouldBatch,                                                                             // 203\n            batchInterval: this.batchInterval,                                                                         // 204\n        });                                                                                                            // 205\n    };                                                                                                                 // 206\n    ;                                                                                                                  // 207\n    return ApolloClient;                                                                                               // 208\n}());                                                                                                                  // 209\nObject.defineProperty(exports, \"__esModule\", { value: true });                                                         // 210\nexports.default = ApolloClient;                                                                                        // 211\n//# sourceMappingURL=index.js.map                                                                                      // 212\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"networkInterface.js\":[\"lodash.isstring\",\"lodash.assign\",\"lodash.mapvalues\",\"whatwg-fetch\",\"graphql-tag/printer\",\"./batching/queryMerging\",\"./batchedNetworkInterface\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/networkInterface.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar isString = require('lodash.isstring');                                                                             // 2\nvar assign = require('lodash.assign');                                                                                 // 3\nvar mapValues = require('lodash.mapvalues');                                                                           // 4\nrequire('whatwg-fetch');                                                                                               // 5\nvar printer_1 = require('graphql-tag/printer');                                                                        // 6\nvar queryMerging_1 = require('./batching/queryMerging');                                                               // 7\nfunction addQueryMerging(networkInterface) {                                                                           // 8\n    return assign(networkInterface, {                                                                                  // 9\n        batchQuery: function (requests) {                                                                              // 10\n            if (requests.length === 1) {                                                                               // 11\n                return this.query(requests[0]).then(function (result) {                                                // 12\n                    return Promise.resolve([result]);                                                                  // 13\n                });                                                                                                    // 14\n            }                                                                                                          // 15\n            var composedRequest = queryMerging_1.mergeRequests(requests);                                              // 16\n            return this.query(composedRequest).then(function (composedResult) {                                        // 17\n                return queryMerging_1.unpackMergedResult(composedResult, requests);                                    // 18\n            });                                                                                                        // 19\n        },                                                                                                             // 20\n    });                                                                                                                // 21\n}                                                                                                                      // 22\nexports.addQueryMerging = addQueryMerging;                                                                             // 23\nfunction printRequest(request) {                                                                                       // 24\n    return mapValues(request, function (val, key) {                                                                    // 25\n        return key === 'query' ? printer_1.print(val) : val;                                                           // 26\n    });                                                                                                                // 27\n}                                                                                                                      // 28\nexports.printRequest = printRequest;                                                                                   // 29\nvar HTTPFetchNetworkInterface = (function () {                                                                         // 30\n    function HTTPFetchNetworkInterface(uri, opts) {                                                                    // 31\n        if (opts === void 0) { opts = {}; }                                                                            // 32\n        if (!uri) {                                                                                                    // 33\n            throw new Error('A remote enpdoint is required for a network layer');                                      // 34\n        }                                                                                                              // 35\n        if (!isString(uri)) {                                                                                          // 36\n            throw new Error('Remote endpoint must be a string');                                                       // 37\n        }                                                                                                              // 38\n        this._uri = uri;                                                                                               // 39\n        this._opts = assign({}, opts);                                                                                 // 40\n        this._middlewares = [];                                                                                        // 41\n        this._afterwares = [];                                                                                         // 42\n    }                                                                                                                  // 43\n    HTTPFetchNetworkInterface.prototype.applyMiddlewares = function (_a) {                                             // 44\n        var _this = this;                                                                                              // 45\n        var request = _a.request, options = _a.options;                                                                // 46\n        return new Promise(function (resolve, reject) {                                                                // 47\n            var queue = function (funcs, scope) {                                                                      // 48\n                var next = function () {                                                                               // 49\n                    if (funcs.length > 0) {                                                                            // 50\n                        var f = funcs.shift();                                                                         // 51\n                        f.applyMiddleware.apply(scope, [{ request: request, options: options }, next]);                // 52\n                    }                                                                                                  // 53\n                    else {                                                                                             // 54\n                        resolve({                                                                                      // 55\n                            request: request,                                                                          // 56\n                            options: options,                                                                          // 57\n                        });                                                                                            // 58\n                    }                                                                                                  // 59\n                };                                                                                                     // 60\n                next();                                                                                                // 61\n            };                                                                                                         // 62\n            queue(_this._middlewares.slice(), _this);                                                                  // 63\n        });                                                                                                            // 64\n    };                                                                                                                 // 65\n    HTTPFetchNetworkInterface.prototype.applyAfterwares = function (_a) {                                              // 66\n        var _this = this;                                                                                              // 67\n        var response = _a.response, options = _a.options;                                                              // 68\n        return new Promise(function (resolve, reject) {                                                                // 69\n            var queue = function (funcs, scope) {                                                                      // 70\n                var next = function () {                                                                               // 71\n                    if (funcs.length > 0) {                                                                            // 72\n                        var f = funcs.shift();                                                                         // 73\n                        f.applyAfterware.apply(scope, [{ response: response, options: options }, next]);               // 74\n                    }                                                                                                  // 75\n                    else {                                                                                             // 76\n                        resolve({                                                                                      // 77\n                            response: response,                                                                        // 78\n                            options: options,                                                                          // 79\n                        });                                                                                            // 80\n                    }                                                                                                  // 81\n                };                                                                                                     // 82\n                next();                                                                                                // 83\n            };                                                                                                         // 84\n            queue(_this._afterwares.slice(), _this);                                                                   // 85\n        });                                                                                                            // 86\n    };                                                                                                                 // 87\n    HTTPFetchNetworkInterface.prototype.fetchFromRemoteEndpoint = function (_a) {                                      // 88\n        var request = _a.request, options = _a.options;                                                                // 89\n        return fetch(this._uri, assign({}, this._opts, {                                                               // 90\n            body: JSON.stringify(printRequest(request)),                                                               // 91\n            method: 'POST',                                                                                            // 92\n        }, options, {                                                                                                  // 93\n            headers: assign({}, {                                                                                      // 94\n                Accept: '*/*',                                                                                         // 95\n                'Content-Type': 'application/json',                                                                    // 96\n            }, options.headers),                                                                                       // 97\n        }));                                                                                                           // 98\n    };                                                                                                                 // 99\n    ;                                                                                                                  // 100\n    HTTPFetchNetworkInterface.prototype.query = function (request) {                                                   // 101\n        var _this = this;                                                                                              // 102\n        var options = assign({}, this._opts);                                                                          // 103\n        return this.applyMiddlewares({                                                                                 // 104\n            request: request,                                                                                          // 105\n            options: options,                                                                                          // 106\n        }).then(this.fetchFromRemoteEndpoint.bind(this))                                                               // 107\n            .then(function (response) {                                                                                // 108\n            _this.applyAfterwares({                                                                                    // 109\n                response: response,                                                                                    // 110\n                options: options,                                                                                      // 111\n            });                                                                                                        // 112\n            return response;                                                                                           // 113\n        })                                                                                                             // 114\n            .then(function (result) { return result.json(); })                                                         // 115\n            .then(function (payload) {                                                                                 // 116\n            if (!payload.hasOwnProperty('data') && !payload.hasOwnProperty('errors')) {                                // 117\n                throw new Error(\"Server response was missing for query '\" + request.debugName + \"'.\");                 // 118\n            }                                                                                                          // 119\n            else {                                                                                                     // 120\n                return payload;                                                                                        // 121\n            }                                                                                                          // 122\n        });                                                                                                            // 123\n    };                                                                                                                 // 124\n    ;                                                                                                                  // 125\n    HTTPFetchNetworkInterface.prototype.use = function (middlewares) {                                                 // 126\n        var _this = this;                                                                                              // 127\n        middlewares.map(function (middleware) {                                                                        // 128\n            if (typeof middleware.applyMiddleware === 'function') {                                                    // 129\n                _this._middlewares.push(middleware);                                                                   // 130\n            }                                                                                                          // 131\n            else {                                                                                                     // 132\n                throw new Error('Middleware must implement the applyMiddleware function');                             // 133\n            }                                                                                                          // 134\n        });                                                                                                            // 135\n    };                                                                                                                 // 136\n    HTTPFetchNetworkInterface.prototype.useAfter = function (afterwares) {                                             // 137\n        var _this = this;                                                                                              // 138\n        afterwares.map(function (afterware) {                                                                          // 139\n            if (typeof afterware.applyAfterware === 'function') {                                                      // 140\n                _this._afterwares.push(afterware);                                                                     // 141\n            }                                                                                                          // 142\n            else {                                                                                                     // 143\n                throw new Error('Afterware must implement the applyAfterware function');                               // 144\n            }                                                                                                          // 145\n        });                                                                                                            // 146\n    };                                                                                                                 // 147\n    return HTTPFetchNetworkInterface;                                                                                  // 148\n}());                                                                                                                  // 149\nexports.HTTPFetchNetworkInterface = HTTPFetchNetworkInterface;                                                         // 150\nvar batchedNetworkInterface_1 = require('./batchedNetworkInterface');                                                  // 151\nfunction createNetworkInterface(interfaceOpts, backOpts) {                                                             // 152\n    if (backOpts === void 0) { backOpts = {}; }                                                                        // 153\n    if (isString(interfaceOpts) || !interfaceOpts) {                                                                   // 154\n        var uri = interfaceOpts;                                                                                       // 155\n        return addQueryMerging(new HTTPFetchNetworkInterface(uri, backOpts));                                          // 156\n    }                                                                                                                  // 157\n    else {                                                                                                             // 158\n        var _a = interfaceOpts, _b = _a.transportBatching, transportBatching = _b === void 0 ? false : _b, _c = _a.opts, opts = _c === void 0 ? {} : _c, uri = _a.uri;\n        if (transportBatching) {                                                                                       // 160\n            return new batchedNetworkInterface_1.HTTPBatchedNetworkInterface(uri, opts);                               // 161\n        }                                                                                                              // 162\n        else {                                                                                                         // 163\n            return addQueryMerging(new HTTPFetchNetworkInterface(uri, opts));                                          // 164\n        }                                                                                                              // 165\n    }                                                                                                                  // 166\n}                                                                                                                      // 167\nexports.createNetworkInterface = createNetworkInterface;                                                               // 168\n//# sourceMappingURL=networkInterface.js.map                                                                           // 169\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"node_modules\":{\"lodash.isstring\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.isstring/package.json                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.isstring\";                                                                                      // 1\nexports.version = \"4.0.1\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.isstring/index.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash 4.0.1 (Custom Build) <https://lodash.com/>                                                                   // 2\n * Build: `lodash modularize exports=\"npm\" -o ./`                                                                      // 3\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>                                                // 4\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 5\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                            // 6\n * Available under MIT license <https://lodash.com/license>                                                            // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/** `Object#toString` result references. */                                                                            // 10\nvar stringTag = '[object String]';                                                                                     // 11\n                                                                                                                       // 12\n/** Used for built-in method references. */                                                                            // 13\nvar objectProto = Object.prototype;                                                                                    // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)      // 17\n * of values.                                                                                                          // 18\n */                                                                                                                    // 19\nvar objectToString = objectProto.toString;                                                                             // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Checks if `value` is classified as an `Array` object.                                                               // 23\n *                                                                                                                     // 24\n * @static                                                                                                             // 25\n * @memberOf _                                                                                                         // 26\n * @type Function                                                                                                      // 27\n * @category Lang                                                                                                      // 28\n * @param {*} value The value to check.                                                                                // 29\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                                 // 30\n * @example                                                                                                            // 31\n *                                                                                                                     // 32\n * _.isArray([1, 2, 3]);                                                                                               // 33\n * // => true                                                                                                          // 34\n *                                                                                                                     // 35\n * _.isArray(document.body.children);                                                                                  // 36\n * // => false                                                                                                         // 37\n *                                                                                                                     // 38\n * _.isArray('abc');                                                                                                   // 39\n * // => false                                                                                                         // 40\n *                                                                                                                     // 41\n * _.isArray(_.noop);                                                                                                  // 42\n * // => false                                                                                                         // 43\n */                                                                                                                    // 44\nvar isArray = Array.isArray;                                                                                           // 45\n                                                                                                                       // 46\n/**                                                                                                                    // 47\n * Checks if `value` is object-like. A value is object-like if it's not `null`                                         // 48\n * and has a `typeof` result of \"object\".                                                                              // 49\n *                                                                                                                     // 50\n * @static                                                                                                             // 51\n * @memberOf _                                                                                                         // 52\n * @category Lang                                                                                                      // 53\n * @param {*} value The value to check.                                                                                // 54\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 55\n * @example                                                                                                            // 56\n *                                                                                                                     // 57\n * _.isObjectLike({});                                                                                                 // 58\n * // => true                                                                                                          // 59\n *                                                                                                                     // 60\n * _.isObjectLike([1, 2, 3]);                                                                                          // 61\n * // => true                                                                                                          // 62\n *                                                                                                                     // 63\n * _.isObjectLike(_.noop);                                                                                             // 64\n * // => false                                                                                                         // 65\n *                                                                                                                     // 66\n * _.isObjectLike(null);                                                                                               // 67\n * // => false                                                                                                         // 68\n */                                                                                                                    // 69\nfunction isObjectLike(value) {                                                                                         // 70\n  return !!value && typeof value == 'object';                                                                          // 71\n}                                                                                                                      // 72\n                                                                                                                       // 73\n/**                                                                                                                    // 74\n * Checks if `value` is classified as a `String` primitive or object.                                                  // 75\n *                                                                                                                     // 76\n * @static                                                                                                             // 77\n * @memberOf _                                                                                                         // 78\n * @category Lang                                                                                                      // 79\n * @param {*} value The value to check.                                                                                // 80\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                                 // 81\n * @example                                                                                                            // 82\n *                                                                                                                     // 83\n * _.isString('abc');                                                                                                  // 84\n * // => true                                                                                                          // 85\n *                                                                                                                     // 86\n * _.isString(1);                                                                                                      // 87\n * // => false                                                                                                         // 88\n */                                                                                                                    // 89\nfunction isString(value) {                                                                                             // 90\n  return typeof value == 'string' ||                                                                                   // 91\n    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);                               // 92\n}                                                                                                                      // 93\n                                                                                                                       // 94\nmodule.exports = isString;                                                                                             // 95\n                                                                                                                       // 96\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.assign\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.assign/package.json                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.assign\";                                                                                        // 1\nexports.version = \"4.2.0\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.assign/index.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash (Custom Build) <https://lodash.com/>                                                                         // 2\n * Build: `lodash modularize exports=\"npm\" -o ./`                                                                      // 3\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>                                            // 4\n * Released under MIT license <https://lodash.com/license>                                                             // 5\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                                      // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/** Used as references for various `Number` constants. */                                                              // 10\nvar MAX_SAFE_INTEGER = 9007199254740991;                                                                               // 11\n                                                                                                                       // 12\n/** `Object#toString` result references. */                                                                            // 13\nvar argsTag = '[object Arguments]',                                                                                    // 14\n    funcTag = '[object Function]',                                                                                     // 15\n    genTag = '[object GeneratorFunction]';                                                                             // 16\n                                                                                                                       // 17\n/** Used to detect unsigned integer values. */                                                                         // 18\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;                                                                                     // 19\n                                                                                                                       // 20\n/**                                                                                                                    // 21\n * A faster alternative to `Function#apply`, this function invokes `func`                                              // 22\n * with the `this` binding of `thisArg` and the arguments of `args`.                                                   // 23\n *                                                                                                                     // 24\n * @private                                                                                                            // 25\n * @param {Function} func The function to invoke.                                                                      // 26\n * @param {*} thisArg The `this` binding of `func`.                                                                    // 27\n * @param {Array} args The arguments to invoke `func` with.                                                            // 28\n * @returns {*} Returns the result of `func`.                                                                          // 29\n */                                                                                                                    // 30\nfunction apply(func, thisArg, args) {                                                                                  // 31\n  switch (args.length) {                                                                                               // 32\n    case 0: return func.call(thisArg);                                                                                 // 33\n    case 1: return func.call(thisArg, args[0]);                                                                        // 34\n    case 2: return func.call(thisArg, args[0], args[1]);                                                               // 35\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);                                                      // 36\n  }                                                                                                                    // 37\n  return func.apply(thisArg, args);                                                                                    // 38\n}                                                                                                                      // 39\n                                                                                                                       // 40\n/**                                                                                                                    // 41\n * The base implementation of `_.times` without support for iteratee shorthands                                        // 42\n * or max array length checks.                                                                                         // 43\n *                                                                                                                     // 44\n * @private                                                                                                            // 45\n * @param {number} n The number of times to invoke `iteratee`.                                                         // 46\n * @param {Function} iteratee The function invoked per iteration.                                                      // 47\n * @returns {Array} Returns the array of results.                                                                      // 48\n */                                                                                                                    // 49\nfunction baseTimes(n, iteratee) {                                                                                      // 50\n  var index = -1,                                                                                                      // 51\n      result = Array(n);                                                                                               // 52\n                                                                                                                       // 53\n  while (++index < n) {                                                                                                // 54\n    result[index] = iteratee(index);                                                                                   // 55\n  }                                                                                                                    // 56\n  return result;                                                                                                       // 57\n}                                                                                                                      // 58\n                                                                                                                       // 59\n/**                                                                                                                    // 60\n * Creates a unary function that invokes `func` with its argument transformed.                                         // 61\n *                                                                                                                     // 62\n * @private                                                                                                            // 63\n * @param {Function} func The function to wrap.                                                                        // 64\n * @param {Function} transform The argument transform.                                                                 // 65\n * @returns {Function} Returns the new function.                                                                       // 66\n */                                                                                                                    // 67\nfunction overArg(func, transform) {                                                                                    // 68\n  return function(arg) {                                                                                               // 69\n    return func(transform(arg));                                                                                       // 70\n  };                                                                                                                   // 71\n}                                                                                                                      // 72\n                                                                                                                       // 73\n/** Used for built-in method references. */                                                                            // 74\nvar objectProto = Object.prototype;                                                                                    // 75\n                                                                                                                       // 76\n/** Used to check objects for own properties. */                                                                       // 77\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 78\n                                                                                                                       // 79\n/**                                                                                                                    // 80\n * Used to resolve the                                                                                                 // 81\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)                          // 82\n * of values.                                                                                                          // 83\n */                                                                                                                    // 84\nvar objectToString = objectProto.toString;                                                                             // 85\n                                                                                                                       // 86\n/** Built-in value references. */                                                                                      // 87\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;                                                           // 88\n                                                                                                                       // 89\n/* Built-in method references for those with the same name as other `lodash` methods. */                               // 90\nvar nativeKeys = overArg(Object.keys, Object),                                                                         // 91\n    nativeMax = Math.max;                                                                                              // 92\n                                                                                                                       // 93\n/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */                                  // 94\nvar nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');                                          // 95\n                                                                                                                       // 96\n/**                                                                                                                    // 97\n * Creates an array of the enumerable property names of the array-like `value`.                                        // 98\n *                                                                                                                     // 99\n * @private                                                                                                            // 100\n * @param {*} value The value to query.                                                                                // 101\n * @param {boolean} inherited Specify returning inherited property names.                                              // 102\n * @returns {Array} Returns the array of property names.                                                               // 103\n */                                                                                                                    // 104\nfunction arrayLikeKeys(value, inherited) {                                                                             // 105\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 106\n  // Safari 9 makes `arguments.length` enumerable in strict mode.                                                      // 107\n  var result = (isArray(value) || isArguments(value))                                                                  // 108\n    ? baseTimes(value.length, String)                                                                                  // 109\n    : [];                                                                                                              // 110\n                                                                                                                       // 111\n  var length = result.length,                                                                                          // 112\n      skipIndexes = !!length;                                                                                          // 113\n                                                                                                                       // 114\n  for (var key in value) {                                                                                             // 115\n    if ((inherited || hasOwnProperty.call(value, key)) &&                                                              // 116\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {                                                 // 117\n      result.push(key);                                                                                                // 118\n    }                                                                                                                  // 119\n  }                                                                                                                    // 120\n  return result;                                                                                                       // 121\n}                                                                                                                      // 122\n                                                                                                                       // 123\n/**                                                                                                                    // 124\n * Assigns `value` to `key` of `object` if the existing value is not equivalent                                        // 125\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)                              // 126\n * for equality comparisons.                                                                                           // 127\n *                                                                                                                     // 128\n * @private                                                                                                            // 129\n * @param {Object} object The object to modify.                                                                        // 130\n * @param {string} key The key of the property to assign.                                                              // 131\n * @param {*} value The value to assign.                                                                               // 132\n */                                                                                                                    // 133\nfunction assignValue(object, key, value) {                                                                             // 134\n  var objValue = object[key];                                                                                          // 135\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||                                                    // 136\n      (value === undefined && !(key in object))) {                                                                     // 137\n    object[key] = value;                                                                                               // 138\n  }                                                                                                                    // 139\n}                                                                                                                      // 140\n                                                                                                                       // 141\n/**                                                                                                                    // 142\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.                                     // 143\n *                                                                                                                     // 144\n * @private                                                                                                            // 145\n * @param {Object} object The object to query.                                                                         // 146\n * @returns {Array} Returns the array of property names.                                                               // 147\n */                                                                                                                    // 148\nfunction baseKeys(object) {                                                                                            // 149\n  if (!isPrototype(object)) {                                                                                          // 150\n    return nativeKeys(object);                                                                                         // 151\n  }                                                                                                                    // 152\n  var result = [];                                                                                                     // 153\n  for (var key in Object(object)) {                                                                                    // 154\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {                                                    // 155\n      result.push(key);                                                                                                // 156\n    }                                                                                                                  // 157\n  }                                                                                                                    // 158\n  return result;                                                                                                       // 159\n}                                                                                                                      // 160\n                                                                                                                       // 161\n/**                                                                                                                    // 162\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.                                     // 163\n *                                                                                                                     // 164\n * @private                                                                                                            // 165\n * @param {Function} func The function to apply a rest parameter to.                                                   // 166\n * @param {number} [start=func.length-1] The start position of the rest parameter.                                     // 167\n * @returns {Function} Returns the new function.                                                                       // 168\n */                                                                                                                    // 169\nfunction baseRest(func, start) {                                                                                       // 170\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);                                               // 171\n  return function() {                                                                                                  // 172\n    var args = arguments,                                                                                              // 173\n        index = -1,                                                                                                    // 174\n        length = nativeMax(args.length - start, 0),                                                                    // 175\n        array = Array(length);                                                                                         // 176\n                                                                                                                       // 177\n    while (++index < length) {                                                                                         // 178\n      array[index] = args[start + index];                                                                              // 179\n    }                                                                                                                  // 180\n    index = -1;                                                                                                        // 181\n    var otherArgs = Array(start + 1);                                                                                  // 182\n    while (++index < start) {                                                                                          // 183\n      otherArgs[index] = args[index];                                                                                  // 184\n    }                                                                                                                  // 185\n    otherArgs[start] = array;                                                                                          // 186\n    return apply(func, this, otherArgs);                                                                               // 187\n  };                                                                                                                   // 188\n}                                                                                                                      // 189\n                                                                                                                       // 190\n/**                                                                                                                    // 191\n * Copies properties of `source` to `object`.                                                                          // 192\n *                                                                                                                     // 193\n * @private                                                                                                            // 194\n * @param {Object} source The object to copy properties from.                                                          // 195\n * @param {Array} props The property identifiers to copy.                                                              // 196\n * @param {Object} [object={}] The object to copy properties to.                                                       // 197\n * @param {Function} [customizer] The function to customize copied values.                                             // 198\n * @returns {Object} Returns `object`.                                                                                 // 199\n */                                                                                                                    // 200\nfunction copyObject(source, props, object, customizer) {                                                               // 201\n  object || (object = {});                                                                                             // 202\n                                                                                                                       // 203\n  var index = -1,                                                                                                      // 204\n      length = props.length;                                                                                           // 205\n                                                                                                                       // 206\n  while (++index < length) {                                                                                           // 207\n    var key = props[index];                                                                                            // 208\n                                                                                                                       // 209\n    var newValue = customizer                                                                                          // 210\n      ? customizer(object[key], source[key], key, object, source)                                                      // 211\n      : undefined;                                                                                                     // 212\n                                                                                                                       // 213\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);                                         // 214\n  }                                                                                                                    // 215\n  return object;                                                                                                       // 216\n}                                                                                                                      // 217\n                                                                                                                       // 218\n/**                                                                                                                    // 219\n * Creates a function like `_.assign`.                                                                                 // 220\n *                                                                                                                     // 221\n * @private                                                                                                            // 222\n * @param {Function} assigner The function to assign values.                                                           // 223\n * @returns {Function} Returns the new assigner function.                                                              // 224\n */                                                                                                                    // 225\nfunction createAssigner(assigner) {                                                                                    // 226\n  return baseRest(function(object, sources) {                                                                          // 227\n    var index = -1,                                                                                                    // 228\n        length = sources.length,                                                                                       // 229\n        customizer = length > 1 ? sources[length - 1] : undefined,                                                     // 230\n        guard = length > 2 ? sources[2] : undefined;                                                                   // 231\n                                                                                                                       // 232\n    customizer = (assigner.length > 3 && typeof customizer == 'function')                                              // 233\n      ? (length--, customizer)                                                                                         // 234\n      : undefined;                                                                                                     // 235\n                                                                                                                       // 236\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {                                                      // 237\n      customizer = length < 3 ? undefined : customizer;                                                                // 238\n      length = 1;                                                                                                      // 239\n    }                                                                                                                  // 240\n    object = Object(object);                                                                                           // 241\n    while (++index < length) {                                                                                         // 242\n      var source = sources[index];                                                                                     // 243\n      if (source) {                                                                                                    // 244\n        assigner(object, source, index, customizer);                                                                   // 245\n      }                                                                                                                // 246\n    }                                                                                                                  // 247\n    return object;                                                                                                     // 248\n  });                                                                                                                  // 249\n}                                                                                                                      // 250\n                                                                                                                       // 251\n/**                                                                                                                    // 252\n * Checks if `value` is a valid array-like index.                                                                      // 253\n *                                                                                                                     // 254\n * @private                                                                                                            // 255\n * @param {*} value The value to check.                                                                                // 256\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                        // 257\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                        // 258\n */                                                                                                                    // 259\nfunction isIndex(value, length) {                                                                                      // 260\n  length = length == null ? MAX_SAFE_INTEGER : length;                                                                 // 261\n  return !!length &&                                                                                                   // 262\n    (typeof value == 'number' || reIsUint.test(value)) &&                                                              // 263\n    (value > -1 && value % 1 == 0 && value < length);                                                                  // 264\n}                                                                                                                      // 265\n                                                                                                                       // 266\n/**                                                                                                                    // 267\n * Checks if the given arguments are from an iteratee call.                                                            // 268\n *                                                                                                                     // 269\n * @private                                                                                                            // 270\n * @param {*} value The potential iteratee value argument.                                                             // 271\n * @param {*} index The potential iteratee index or key argument.                                                      // 272\n * @param {*} object The potential iteratee object argument.                                                           // 273\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,                                       // 274\n *  else `false`.                                                                                                      // 275\n */                                                                                                                    // 276\nfunction isIterateeCall(value, index, object) {                                                                        // 277\n  if (!isObject(object)) {                                                                                             // 278\n    return false;                                                                                                      // 279\n  }                                                                                                                    // 280\n  var type = typeof index;                                                                                             // 281\n  if (type == 'number'                                                                                                 // 282\n        ? (isArrayLike(object) && isIndex(index, object.length))                                                       // 283\n        : (type == 'string' && index in object)                                                                        // 284\n      ) {                                                                                                              // 285\n    return eq(object[index], value);                                                                                   // 286\n  }                                                                                                                    // 287\n  return false;                                                                                                        // 288\n}                                                                                                                      // 289\n                                                                                                                       // 290\n/**                                                                                                                    // 291\n * Checks if `value` is likely a prototype object.                                                                     // 292\n *                                                                                                                     // 293\n * @private                                                                                                            // 294\n * @param {*} value The value to check.                                                                                // 295\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.                                          // 296\n */                                                                                                                    // 297\nfunction isPrototype(value) {                                                                                          // 298\n  var Ctor = value && value.constructor,                                                                               // 299\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;                                            // 300\n                                                                                                                       // 301\n  return value === proto;                                                                                              // 302\n}                                                                                                                      // 303\n                                                                                                                       // 304\n/**                                                                                                                    // 305\n * Performs a                                                                                                          // 306\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)                                    // 307\n * comparison between two values to determine if they are equivalent.                                                  // 308\n *                                                                                                                     // 309\n * @static                                                                                                             // 310\n * @memberOf _                                                                                                         // 311\n * @since 4.0.0                                                                                                        // 312\n * @category Lang                                                                                                      // 313\n * @param {*} value The value to compare.                                                                              // 314\n * @param {*} other The other value to compare.                                                                        // 315\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                       // 316\n * @example                                                                                                            // 317\n *                                                                                                                     // 318\n * var object = { 'a': 1 };                                                                                            // 319\n * var other = { 'a': 1 };                                                                                             // 320\n *                                                                                                                     // 321\n * _.eq(object, object);                                                                                               // 322\n * // => true                                                                                                          // 323\n *                                                                                                                     // 324\n * _.eq(object, other);                                                                                                // 325\n * // => false                                                                                                         // 326\n *                                                                                                                     // 327\n * _.eq('a', 'a');                                                                                                     // 328\n * // => true                                                                                                          // 329\n *                                                                                                                     // 330\n * _.eq('a', Object('a'));                                                                                             // 331\n * // => false                                                                                                         // 332\n *                                                                                                                     // 333\n * _.eq(NaN, NaN);                                                                                                     // 334\n * // => true                                                                                                          // 335\n */                                                                                                                    // 336\nfunction eq(value, other) {                                                                                            // 337\n  return value === other || (value !== value && other !== other);                                                      // 338\n}                                                                                                                      // 339\n                                                                                                                       // 340\n/**                                                                                                                    // 341\n * Checks if `value` is likely an `arguments` object.                                                                  // 342\n *                                                                                                                     // 343\n * @static                                                                                                             // 344\n * @memberOf _                                                                                                         // 345\n * @since 0.1.0                                                                                                        // 346\n * @category Lang                                                                                                      // 347\n * @param {*} value The value to check.                                                                                // 348\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,                                              // 349\n *  else `false`.                                                                                                      // 350\n * @example                                                                                                            // 351\n *                                                                                                                     // 352\n * _.isArguments(function() { return arguments; }());                                                                  // 353\n * // => true                                                                                                          // 354\n *                                                                                                                     // 355\n * _.isArguments([1, 2, 3]);                                                                                           // 356\n * // => false                                                                                                         // 357\n */                                                                                                                    // 358\nfunction isArguments(value) {                                                                                          // 359\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 360\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&                                           // 361\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);                            // 362\n}                                                                                                                      // 363\n                                                                                                                       // 364\n/**                                                                                                                    // 365\n * Checks if `value` is classified as an `Array` object.                                                               // 366\n *                                                                                                                     // 367\n * @static                                                                                                             // 368\n * @memberOf _                                                                                                         // 369\n * @since 0.1.0                                                                                                        // 370\n * @category Lang                                                                                                      // 371\n * @param {*} value The value to check.                                                                                // 372\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.                                             // 373\n * @example                                                                                                            // 374\n *                                                                                                                     // 375\n * _.isArray([1, 2, 3]);                                                                                               // 376\n * // => true                                                                                                          // 377\n *                                                                                                                     // 378\n * _.isArray(document.body.children);                                                                                  // 379\n * // => false                                                                                                         // 380\n *                                                                                                                     // 381\n * _.isArray('abc');                                                                                                   // 382\n * // => false                                                                                                         // 383\n *                                                                                                                     // 384\n * _.isArray(_.noop);                                                                                                  // 385\n * // => false                                                                                                         // 386\n */                                                                                                                    // 387\nvar isArray = Array.isArray;                                                                                           // 388\n                                                                                                                       // 389\n/**                                                                                                                    // 390\n * Checks if `value` is array-like. A value is considered array-like if it's                                           // 391\n * not a function and has a `value.length` that's an integer greater than or                                           // 392\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.                                                   // 393\n *                                                                                                                     // 394\n * @static                                                                                                             // 395\n * @memberOf _                                                                                                         // 396\n * @since 4.0.0                                                                                                        // 397\n * @category Lang                                                                                                      // 398\n * @param {*} value The value to check.                                                                                // 399\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                           // 400\n * @example                                                                                                            // 401\n *                                                                                                                     // 402\n * _.isArrayLike([1, 2, 3]);                                                                                           // 403\n * // => true                                                                                                          // 404\n *                                                                                                                     // 405\n * _.isArrayLike(document.body.children);                                                                              // 406\n * // => true                                                                                                          // 407\n *                                                                                                                     // 408\n * _.isArrayLike('abc');                                                                                               // 409\n * // => true                                                                                                          // 410\n *                                                                                                                     // 411\n * _.isArrayLike(_.noop);                                                                                              // 412\n * // => false                                                                                                         // 413\n */                                                                                                                    // 414\nfunction isArrayLike(value) {                                                                                          // 415\n  return value != null && isLength(value.length) && !isFunction(value);                                                // 416\n}                                                                                                                      // 417\n                                                                                                                       // 418\n/**                                                                                                                    // 419\n * This method is like `_.isArrayLike` except that it also checks if `value`                                           // 420\n * is an object.                                                                                                       // 421\n *                                                                                                                     // 422\n * @static                                                                                                             // 423\n * @memberOf _                                                                                                         // 424\n * @since 4.0.0                                                                                                        // 425\n * @category Lang                                                                                                      // 426\n * @param {*} value The value to check.                                                                                // 427\n * @returns {boolean} Returns `true` if `value` is an array-like object,                                               // 428\n *  else `false`.                                                                                                      // 429\n * @example                                                                                                            // 430\n *                                                                                                                     // 431\n * _.isArrayLikeObject([1, 2, 3]);                                                                                     // 432\n * // => true                                                                                                          // 433\n *                                                                                                                     // 434\n * _.isArrayLikeObject(document.body.children);                                                                        // 435\n * // => true                                                                                                          // 436\n *                                                                                                                     // 437\n * _.isArrayLikeObject('abc');                                                                                         // 438\n * // => false                                                                                                         // 439\n *                                                                                                                     // 440\n * _.isArrayLikeObject(_.noop);                                                                                        // 441\n * // => false                                                                                                         // 442\n */                                                                                                                    // 443\nfunction isArrayLikeObject(value) {                                                                                    // 444\n  return isObjectLike(value) && isArrayLike(value);                                                                    // 445\n}                                                                                                                      // 446\n                                                                                                                       // 447\n/**                                                                                                                    // 448\n * Checks if `value` is classified as a `Function` object.                                                             // 449\n *                                                                                                                     // 450\n * @static                                                                                                             // 451\n * @memberOf _                                                                                                         // 452\n * @since 0.1.0                                                                                                        // 453\n * @category Lang                                                                                                      // 454\n * @param {*} value The value to check.                                                                                // 455\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.                                           // 456\n * @example                                                                                                            // 457\n *                                                                                                                     // 458\n * _.isFunction(_);                                                                                                    // 459\n * // => true                                                                                                          // 460\n *                                                                                                                     // 461\n * _.isFunction(/abc/);                                                                                                // 462\n * // => false                                                                                                         // 463\n */                                                                                                                    // 464\nfunction isFunction(value) {                                                                                           // 465\n  // The use of `Object#toString` avoids issues with the `typeof` operator                                             // 466\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.                                      // 467\n  var tag = isObject(value) ? objectToString.call(value) : '';                                                         // 468\n  return tag == funcTag || tag == genTag;                                                                              // 469\n}                                                                                                                      // 470\n                                                                                                                       // 471\n/**                                                                                                                    // 472\n * Checks if `value` is a valid array-like length.                                                                     // 473\n *                                                                                                                     // 474\n * **Note:** This method is loosely based on                                                                           // 475\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).                                             // 476\n *                                                                                                                     // 477\n * @static                                                                                                             // 478\n * @memberOf _                                                                                                         // 479\n * @since 4.0.0                                                                                                        // 480\n * @category Lang                                                                                                      // 481\n * @param {*} value The value to check.                                                                                // 482\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                       // 483\n * @example                                                                                                            // 484\n *                                                                                                                     // 485\n * _.isLength(3);                                                                                                      // 486\n * // => true                                                                                                          // 487\n *                                                                                                                     // 488\n * _.isLength(Number.MIN_VALUE);                                                                                       // 489\n * // => false                                                                                                         // 490\n *                                                                                                                     // 491\n * _.isLength(Infinity);                                                                                               // 492\n * // => false                                                                                                         // 493\n *                                                                                                                     // 494\n * _.isLength('3');                                                                                                    // 495\n * // => false                                                                                                         // 496\n */                                                                                                                    // 497\nfunction isLength(value) {                                                                                             // 498\n  return typeof value == 'number' &&                                                                                   // 499\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                                                         // 500\n}                                                                                                                      // 501\n                                                                                                                       // 502\n/**                                                                                                                    // 503\n * Checks if `value` is the                                                                                            // 504\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)                      // 505\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                      // 506\n *                                                                                                                     // 507\n * @static                                                                                                             // 508\n * @memberOf _                                                                                                         // 509\n * @since 0.1.0                                                                                                        // 510\n * @category Lang                                                                                                      // 511\n * @param {*} value The value to check.                                                                                // 512\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                            // 513\n * @example                                                                                                            // 514\n *                                                                                                                     // 515\n * _.isObject({});                                                                                                     // 516\n * // => true                                                                                                          // 517\n *                                                                                                                     // 518\n * _.isObject([1, 2, 3]);                                                                                              // 519\n * // => true                                                                                                          // 520\n *                                                                                                                     // 521\n * _.isObject(_.noop);                                                                                                 // 522\n * // => true                                                                                                          // 523\n *                                                                                                                     // 524\n * _.isObject(null);                                                                                                   // 525\n * // => false                                                                                                         // 526\n */                                                                                                                    // 527\nfunction isObject(value) {                                                                                             // 528\n  var type = typeof value;                                                                                             // 529\n  return !!value && (type == 'object' || type == 'function');                                                          // 530\n}                                                                                                                      // 531\n                                                                                                                       // 532\n/**                                                                                                                    // 533\n * Checks if `value` is object-like. A value is object-like if it's not `null`                                         // 534\n * and has a `typeof` result of \"object\".                                                                              // 535\n *                                                                                                                     // 536\n * @static                                                                                                             // 537\n * @memberOf _                                                                                                         // 538\n * @since 4.0.0                                                                                                        // 539\n * @category Lang                                                                                                      // 540\n * @param {*} value The value to check.                                                                                // 541\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 542\n * @example                                                                                                            // 543\n *                                                                                                                     // 544\n * _.isObjectLike({});                                                                                                 // 545\n * // => true                                                                                                          // 546\n *                                                                                                                     // 547\n * _.isObjectLike([1, 2, 3]);                                                                                          // 548\n * // => true                                                                                                          // 549\n *                                                                                                                     // 550\n * _.isObjectLike(_.noop);                                                                                             // 551\n * // => false                                                                                                         // 552\n *                                                                                                                     // 553\n * _.isObjectLike(null);                                                                                               // 554\n * // => false                                                                                                         // 555\n */                                                                                                                    // 556\nfunction isObjectLike(value) {                                                                                         // 557\n  return !!value && typeof value == 'object';                                                                          // 558\n}                                                                                                                      // 559\n                                                                                                                       // 560\n/**                                                                                                                    // 561\n * Assigns own enumerable string keyed properties of source objects to the                                             // 562\n * destination object. Source objects are applied from left to right.                                                  // 563\n * Subsequent sources overwrite property assignments of previous sources.                                              // 564\n *                                                                                                                     // 565\n * **Note:** This method mutates `object` and is loosely based on                                                      // 566\n * [`Object.assign`](https://mdn.io/Object/assign).                                                                    // 567\n *                                                                                                                     // 568\n * @static                                                                                                             // 569\n * @memberOf _                                                                                                         // 570\n * @since 0.10.0                                                                                                       // 571\n * @category Object                                                                                                    // 572\n * @param {Object} object The destination object.                                                                      // 573\n * @param {...Object} [sources] The source objects.                                                                    // 574\n * @returns {Object} Returns `object`.                                                                                 // 575\n * @see _.assignIn                                                                                                     // 576\n * @example                                                                                                            // 577\n *                                                                                                                     // 578\n * function Foo() {                                                                                                    // 579\n *   this.a = 1;                                                                                                       // 580\n * }                                                                                                                   // 581\n *                                                                                                                     // 582\n * function Bar() {                                                                                                    // 583\n *   this.c = 3;                                                                                                       // 584\n * }                                                                                                                   // 585\n *                                                                                                                     // 586\n * Foo.prototype.b = 2;                                                                                                // 587\n * Bar.prototype.d = 4;                                                                                                // 588\n *                                                                                                                     // 589\n * _.assign({ 'a': 0 }, new Foo, new Bar);                                                                             // 590\n * // => { 'a': 1, 'c': 3 }                                                                                            // 591\n */                                                                                                                    // 592\nvar assign = createAssigner(function(object, source) {                                                                 // 593\n  if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {                                                  // 594\n    copyObject(source, keys(source), object);                                                                          // 595\n    return;                                                                                                            // 596\n  }                                                                                                                    // 597\n  for (var key in source) {                                                                                            // 598\n    if (hasOwnProperty.call(source, key)) {                                                                            // 599\n      assignValue(object, key, source[key]);                                                                           // 600\n    }                                                                                                                  // 601\n  }                                                                                                                    // 602\n});                                                                                                                    // 603\n                                                                                                                       // 604\n/**                                                                                                                    // 605\n * Creates an array of the own enumerable property names of `object`.                                                  // 606\n *                                                                                                                     // 607\n * **Note:** Non-object values are coerced to objects. See the                                                         // 608\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)                                              // 609\n * for more details.                                                                                                   // 610\n *                                                                                                                     // 611\n * @static                                                                                                             // 612\n * @since 0.1.0                                                                                                        // 613\n * @memberOf _                                                                                                         // 614\n * @category Object                                                                                                    // 615\n * @param {Object} object The object to query.                                                                         // 616\n * @returns {Array} Returns the array of property names.                                                               // 617\n * @example                                                                                                            // 618\n *                                                                                                                     // 619\n * function Foo() {                                                                                                    // 620\n *   this.a = 1;                                                                                                       // 621\n *   this.b = 2;                                                                                                       // 622\n * }                                                                                                                   // 623\n *                                                                                                                     // 624\n * Foo.prototype.c = 3;                                                                                                // 625\n *                                                                                                                     // 626\n * _.keys(new Foo);                                                                                                    // 627\n * // => ['a', 'b'] (iteration order is not guaranteed)                                                                // 628\n *                                                                                                                     // 629\n * _.keys('hi');                                                                                                       // 630\n * // => ['0', '1']                                                                                                    // 631\n */                                                                                                                    // 632\nfunction keys(object) {                                                                                                // 633\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);                                               // 634\n}                                                                                                                      // 635\n                                                                                                                       // 636\nmodule.exports = assign;                                                                                               // 637\n                                                                                                                       // 638\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.mapvalues\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.mapvalues/package.json                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.mapvalues\";                                                                                     // 1\nexports.version = \"4.6.0\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.mapvalues/index.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash (Custom Build) <https://lodash.com/>                                                                         // 2\n * Build: `lodash modularize exports=\"npm\" -o ./`                                                                      // 3\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>                                            // 4\n * Released under MIT license <https://lodash.com/license>                                                             // 5\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                                      // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/** Used as the size to enable large array optimizations. */                                                           // 10\nvar LARGE_ARRAY_SIZE = 200;                                                                                            // 11\n                                                                                                                       // 12\n/** Used as the `TypeError` message for \"Functions\" methods. */                                                        // 13\nvar FUNC_ERROR_TEXT = 'Expected a function';                                                                           // 14\n                                                                                                                       // 15\n/** Used to stand-in for `undefined` hash values. */                                                                   // 16\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';                                                                      // 17\n                                                                                                                       // 18\n/** Used to compose bitmasks for comparison styles. */                                                                 // 19\nvar UNORDERED_COMPARE_FLAG = 1,                                                                                        // 20\n    PARTIAL_COMPARE_FLAG = 2;                                                                                          // 21\n                                                                                                                       // 22\n/** Used as references for various `Number` constants. */                                                              // 23\nvar INFINITY = 1 / 0,                                                                                                  // 24\n    MAX_SAFE_INTEGER = 9007199254740991;                                                                               // 25\n                                                                                                                       // 26\n/** `Object#toString` result references. */                                                                            // 27\nvar argsTag = '[object Arguments]',                                                                                    // 28\n    arrayTag = '[object Array]',                                                                                       // 29\n    boolTag = '[object Boolean]',                                                                                      // 30\n    dateTag = '[object Date]',                                                                                         // 31\n    errorTag = '[object Error]',                                                                                       // 32\n    funcTag = '[object Function]',                                                                                     // 33\n    genTag = '[object GeneratorFunction]',                                                                             // 34\n    mapTag = '[object Map]',                                                                                           // 35\n    numberTag = '[object Number]',                                                                                     // 36\n    objectTag = '[object Object]',                                                                                     // 37\n    promiseTag = '[object Promise]',                                                                                   // 38\n    regexpTag = '[object RegExp]',                                                                                     // 39\n    setTag = '[object Set]',                                                                                           // 40\n    stringTag = '[object String]',                                                                                     // 41\n    symbolTag = '[object Symbol]',                                                                                     // 42\n    weakMapTag = '[object WeakMap]';                                                                                   // 43\n                                                                                                                       // 44\nvar arrayBufferTag = '[object ArrayBuffer]',                                                                           // 45\n    dataViewTag = '[object DataView]',                                                                                 // 46\n    float32Tag = '[object Float32Array]',                                                                              // 47\n    float64Tag = '[object Float64Array]',                                                                              // 48\n    int8Tag = '[object Int8Array]',                                                                                    // 49\n    int16Tag = '[object Int16Array]',                                                                                  // 50\n    int32Tag = '[object Int32Array]',                                                                                  // 51\n    uint8Tag = '[object Uint8Array]',                                                                                  // 52\n    uint8ClampedTag = '[object Uint8ClampedArray]',                                                                    // 53\n    uint16Tag = '[object Uint16Array]',                                                                                // 54\n    uint32Tag = '[object Uint32Array]';                                                                                // 55\n                                                                                                                       // 56\n/** Used to match property names within property paths. */                                                             // 57\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,                                                 // 58\n    reIsPlainProp = /^\\w*$/,                                                                                           // 59\n    reLeadingDot = /^\\./,                                                                                              // 60\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;   // 61\n                                                                                                                       // 62\n/**                                                                                                                    // 63\n * Used to match `RegExp`                                                                                              // 64\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).                                      // 65\n */                                                                                                                    // 66\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;                                                                              // 67\n                                                                                                                       // 68\n/** Used to match backslashes in property paths. */                                                                    // 69\nvar reEscapeChar = /\\\\(\\\\)?/g;                                                                                         // 70\n                                                                                                                       // 71\n/** Used to detect host constructors (Safari). */                                                                      // 72\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;                                                                      // 73\n                                                                                                                       // 74\n/** Used to detect unsigned integer values. */                                                                         // 75\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;                                                                                     // 76\n                                                                                                                       // 77\n/** Used to identify `toStringTag` values of typed arrays. */                                                          // 78\nvar typedArrayTags = {};                                                                                               // 79\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =                                                              // 80\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =                                                                   // 81\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =                                                                  // 82\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =                                                          // 83\ntypedArrayTags[uint32Tag] = true;                                                                                      // 84\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =                                                                   // 85\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =                                                             // 86\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =                                                                // 87\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =                                                                   // 88\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =                                                                   // 89\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =                                                                // 90\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =                                                                   // 91\ntypedArrayTags[weakMapTag] = false;                                                                                    // 92\n                                                                                                                       // 93\n/** Detect free variable `global` from Node.js. */                                                                     // 94\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;                            // 95\n                                                                                                                       // 96\n/** Detect free variable `self`. */                                                                                    // 97\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;                                      // 98\n                                                                                                                       // 99\n/** Used as a reference to the global object. */                                                                       // 100\nvar root = freeGlobal || freeSelf || Function('return this')();                                                        // 101\n                                                                                                                       // 102\n/** Detect free variable `exports`. */                                                                                 // 103\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;                               // 104\n                                                                                                                       // 105\n/** Detect free variable `module`. */                                                                                  // 106\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;                     // 107\n                                                                                                                       // 108\n/** Detect the popular CommonJS extension `module.exports`. */                                                         // 109\nvar moduleExports = freeModule && freeModule.exports === freeExports;                                                  // 110\n                                                                                                                       // 111\n/** Detect free variable `process` from Node.js. */                                                                    // 112\nvar freeProcess = moduleExports && freeGlobal.process;                                                                 // 113\n                                                                                                                       // 114\n/** Used to access faster Node.js helpers. */                                                                          // 115\nvar nodeUtil = (function() {                                                                                           // 116\n  try {                                                                                                                // 117\n    return freeProcess && freeProcess.binding('util');                                                                 // 118\n  } catch (e) {}                                                                                                       // 119\n}());                                                                                                                  // 120\n                                                                                                                       // 121\n/* Node.js helper references. */                                                                                       // 122\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;                                                              // 123\n                                                                                                                       // 124\n/**                                                                                                                    // 125\n * A specialized version of `_.some` for arrays without support for iteratee                                           // 126\n * shorthands.                                                                                                         // 127\n *                                                                                                                     // 128\n * @private                                                                                                            // 129\n * @param {Array} [array] The array to iterate over.                                                                   // 130\n * @param {Function} predicate The function invoked per iteration.                                                     // 131\n * @returns {boolean} Returns `true` if any element passes the predicate check,                                        // 132\n *  else `false`.                                                                                                      // 133\n */                                                                                                                    // 134\nfunction arraySome(array, predicate) {                                                                                 // 135\n  var index = -1,                                                                                                      // 136\n      length = array ? array.length : 0;                                                                               // 137\n                                                                                                                       // 138\n  while (++index < length) {                                                                                           // 139\n    if (predicate(array[index], index, array)) {                                                                       // 140\n      return true;                                                                                                     // 141\n    }                                                                                                                  // 142\n  }                                                                                                                    // 143\n  return false;                                                                                                        // 144\n}                                                                                                                      // 145\n                                                                                                                       // 146\n/**                                                                                                                    // 147\n * The base implementation of `_.property` without support for deep paths.                                             // 148\n *                                                                                                                     // 149\n * @private                                                                                                            // 150\n * @param {string} key The key of the property to get.                                                                 // 151\n * @returns {Function} Returns the new accessor function.                                                              // 152\n */                                                                                                                    // 153\nfunction baseProperty(key) {                                                                                           // 154\n  return function(object) {                                                                                            // 155\n    return object == null ? undefined : object[key];                                                                   // 156\n  };                                                                                                                   // 157\n}                                                                                                                      // 158\n                                                                                                                       // 159\n/**                                                                                                                    // 160\n * The base implementation of `_.times` without support for iteratee shorthands                                        // 161\n * or max array length checks.                                                                                         // 162\n *                                                                                                                     // 163\n * @private                                                                                                            // 164\n * @param {number} n The number of times to invoke `iteratee`.                                                         // 165\n * @param {Function} iteratee The function invoked per iteration.                                                      // 166\n * @returns {Array} Returns the array of results.                                                                      // 167\n */                                                                                                                    // 168\nfunction baseTimes(n, iteratee) {                                                                                      // 169\n  var index = -1,                                                                                                      // 170\n      result = Array(n);                                                                                               // 171\n                                                                                                                       // 172\n  while (++index < n) {                                                                                                // 173\n    result[index] = iteratee(index);                                                                                   // 174\n  }                                                                                                                    // 175\n  return result;                                                                                                       // 176\n}                                                                                                                      // 177\n                                                                                                                       // 178\n/**                                                                                                                    // 179\n * The base implementation of `_.unary` without support for storing metadata.                                          // 180\n *                                                                                                                     // 181\n * @private                                                                                                            // 182\n * @param {Function} func The function to cap arguments for.                                                           // 183\n * @returns {Function} Returns the new capped function.                                                                // 184\n */                                                                                                                    // 185\nfunction baseUnary(func) {                                                                                             // 186\n  return function(value) {                                                                                             // 187\n    return func(value);                                                                                                // 188\n  };                                                                                                                   // 189\n}                                                                                                                      // 190\n                                                                                                                       // 191\n/**                                                                                                                    // 192\n * Gets the value at `key` of `object`.                                                                                // 193\n *                                                                                                                     // 194\n * @private                                                                                                            // 195\n * @param {Object} [object] The object to query.                                                                       // 196\n * @param {string} key The key of the property to get.                                                                 // 197\n * @returns {*} Returns the property value.                                                                            // 198\n */                                                                                                                    // 199\nfunction getValue(object, key) {                                                                                       // 200\n  return object == null ? undefined : object[key];                                                                     // 201\n}                                                                                                                      // 202\n                                                                                                                       // 203\n/**                                                                                                                    // 204\n * Checks if `value` is a host object in IE < 9.                                                                       // 205\n *                                                                                                                     // 206\n * @private                                                                                                            // 207\n * @param {*} value The value to check.                                                                                // 208\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.                                        // 209\n */                                                                                                                    // 210\nfunction isHostObject(value) {                                                                                         // 211\n  // Many host objects are `Object` objects that can coerce to strings                                                 // 212\n  // despite having improperly defined `toString` methods.                                                             // 213\n  var result = false;                                                                                                  // 214\n  if (value != null && typeof value.toString != 'function') {                                                          // 215\n    try {                                                                                                              // 216\n      result = !!(value + '');                                                                                         // 217\n    } catch (e) {}                                                                                                     // 218\n  }                                                                                                                    // 219\n  return result;                                                                                                       // 220\n}                                                                                                                      // 221\n                                                                                                                       // 222\n/**                                                                                                                    // 223\n * Converts `map` to its key-value pairs.                                                                              // 224\n *                                                                                                                     // 225\n * @private                                                                                                            // 226\n * @param {Object} map The map to convert.                                                                             // 227\n * @returns {Array} Returns the key-value pairs.                                                                       // 228\n */                                                                                                                    // 229\nfunction mapToArray(map) {                                                                                             // 230\n  var index = -1,                                                                                                      // 231\n      result = Array(map.size);                                                                                        // 232\n                                                                                                                       // 233\n  map.forEach(function(value, key) {                                                                                   // 234\n    result[++index] = [key, value];                                                                                    // 235\n  });                                                                                                                  // 236\n  return result;                                                                                                       // 237\n}                                                                                                                      // 238\n                                                                                                                       // 239\n/**                                                                                                                    // 240\n * Creates a unary function that invokes `func` with its argument transformed.                                         // 241\n *                                                                                                                     // 242\n * @private                                                                                                            // 243\n * @param {Function} func The function to wrap.                                                                        // 244\n * @param {Function} transform The argument transform.                                                                 // 245\n * @returns {Function} Returns the new function.                                                                       // 246\n */                                                                                                                    // 247\nfunction overArg(func, transform) {                                                                                    // 248\n  return function(arg) {                                                                                               // 249\n    return func(transform(arg));                                                                                       // 250\n  };                                                                                                                   // 251\n}                                                                                                                      // 252\n                                                                                                                       // 253\n/**                                                                                                                    // 254\n * Converts `set` to an array of its values.                                                                           // 255\n *                                                                                                                     // 256\n * @private                                                                                                            // 257\n * @param {Object} set The set to convert.                                                                             // 258\n * @returns {Array} Returns the values.                                                                                // 259\n */                                                                                                                    // 260\nfunction setToArray(set) {                                                                                             // 261\n  var index = -1,                                                                                                      // 262\n      result = Array(set.size);                                                                                        // 263\n                                                                                                                       // 264\n  set.forEach(function(value) {                                                                                        // 265\n    result[++index] = value;                                                                                           // 266\n  });                                                                                                                  // 267\n  return result;                                                                                                       // 268\n}                                                                                                                      // 269\n                                                                                                                       // 270\n/** Used for built-in method references. */                                                                            // 271\nvar arrayProto = Array.prototype,                                                                                      // 272\n    funcProto = Function.prototype,                                                                                    // 273\n    objectProto = Object.prototype;                                                                                    // 274\n                                                                                                                       // 275\n/** Used to detect overreaching core-js shims. */                                                                      // 276\nvar coreJsData = root['__core-js_shared__'];                                                                           // 277\n                                                                                                                       // 278\n/** Used to detect methods masquerading as native. */                                                                  // 279\nvar maskSrcKey = (function() {                                                                                         // 280\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');                            // 281\n  return uid ? ('Symbol(src)_1.' + uid) : '';                                                                          // 282\n}());                                                                                                                  // 283\n                                                                                                                       // 284\n/** Used to resolve the decompiled source of functions. */                                                             // 285\nvar funcToString = funcProto.toString;                                                                                 // 286\n                                                                                                                       // 287\n/** Used to check objects for own properties. */                                                                       // 288\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 289\n                                                                                                                       // 290\n/**                                                                                                                    // 291\n * Used to resolve the                                                                                                 // 292\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)                          // 293\n * of values.                                                                                                          // 294\n */                                                                                                                    // 295\nvar objectToString = objectProto.toString;                                                                             // 296\n                                                                                                                       // 297\n/** Used to detect if a method is native. */                                                                           // 298\nvar reIsNative = RegExp('^' +                                                                                          // 299\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')                                                      // 300\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'                                    // 301\n);                                                                                                                     // 302\n                                                                                                                       // 303\n/** Built-in value references. */                                                                                      // 304\nvar Symbol = root.Symbol,                                                                                              // 305\n    Uint8Array = root.Uint8Array,                                                                                      // 306\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,                                                           // 307\n    splice = arrayProto.splice;                                                                                        // 308\n                                                                                                                       // 309\n/* Built-in method references for those with the same name as other `lodash` methods. */                               // 310\nvar nativeKeys = overArg(Object.keys, Object);                                                                         // 311\n                                                                                                                       // 312\n/* Built-in method references that are verified to be native. */                                                       // 313\nvar DataView = getNative(root, 'DataView'),                                                                            // 314\n    Map = getNative(root, 'Map'),                                                                                      // 315\n    Promise = getNative(root, 'Promise'),                                                                              // 316\n    Set = getNative(root, 'Set'),                                                                                      // 317\n    WeakMap = getNative(root, 'WeakMap'),                                                                              // 318\n    nativeCreate = getNative(Object, 'create');                                                                        // 319\n                                                                                                                       // 320\n/** Used to detect maps, sets, and weakmaps. */                                                                        // 321\nvar dataViewCtorString = toSource(DataView),                                                                           // 322\n    mapCtorString = toSource(Map),                                                                                     // 323\n    promiseCtorString = toSource(Promise),                                                                             // 324\n    setCtorString = toSource(Set),                                                                                     // 325\n    weakMapCtorString = toSource(WeakMap);                                                                             // 326\n                                                                                                                       // 327\n/** Used to convert symbols to primitives and strings. */                                                              // 328\nvar symbolProto = Symbol ? Symbol.prototype : undefined,                                                               // 329\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,                                                     // 330\n    symbolToString = symbolProto ? symbolProto.toString : undefined;                                                   // 331\n                                                                                                                       // 332\n/**                                                                                                                    // 333\n * Creates a hash object.                                                                                              // 334\n *                                                                                                                     // 335\n * @private                                                                                                            // 336\n * @constructor                                                                                                        // 337\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 338\n */                                                                                                                    // 339\nfunction Hash(entries) {                                                                                               // 340\n  var index = -1,                                                                                                      // 341\n      length = entries ? entries.length : 0;                                                                           // 342\n                                                                                                                       // 343\n  this.clear();                                                                                                        // 344\n  while (++index < length) {                                                                                           // 345\n    var entry = entries[index];                                                                                        // 346\n    this.set(entry[0], entry[1]);                                                                                      // 347\n  }                                                                                                                    // 348\n}                                                                                                                      // 349\n                                                                                                                       // 350\n/**                                                                                                                    // 351\n * Removes all key-value entries from the hash.                                                                        // 352\n *                                                                                                                     // 353\n * @private                                                                                                            // 354\n * @name clear                                                                                                         // 355\n * @memberOf Hash                                                                                                      // 356\n */                                                                                                                    // 357\nfunction hashClear() {                                                                                                 // 358\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};                                                              // 359\n}                                                                                                                      // 360\n                                                                                                                       // 361\n/**                                                                                                                    // 362\n * Removes `key` and its value from the hash.                                                                          // 363\n *                                                                                                                     // 364\n * @private                                                                                                            // 365\n * @name delete                                                                                                        // 366\n * @memberOf Hash                                                                                                      // 367\n * @param {Object} hash The hash to modify.                                                                            // 368\n * @param {string} key The key of the value to remove.                                                                 // 369\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 370\n */                                                                                                                    // 371\nfunction hashDelete(key) {                                                                                             // 372\n  return this.has(key) && delete this.__data__[key];                                                                   // 373\n}                                                                                                                      // 374\n                                                                                                                       // 375\n/**                                                                                                                    // 376\n * Gets the hash value for `key`.                                                                                      // 377\n *                                                                                                                     // 378\n * @private                                                                                                            // 379\n * @name get                                                                                                           // 380\n * @memberOf Hash                                                                                                      // 381\n * @param {string} key The key of the value to get.                                                                    // 382\n * @returns {*} Returns the entry value.                                                                               // 383\n */                                                                                                                    // 384\nfunction hashGet(key) {                                                                                                // 385\n  var data = this.__data__;                                                                                            // 386\n  if (nativeCreate) {                                                                                                  // 387\n    var result = data[key];                                                                                            // 388\n    return result === HASH_UNDEFINED ? undefined : result;                                                             // 389\n  }                                                                                                                    // 390\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;                                                       // 391\n}                                                                                                                      // 392\n                                                                                                                       // 393\n/**                                                                                                                    // 394\n * Checks if a hash value for `key` exists.                                                                            // 395\n *                                                                                                                     // 396\n * @private                                                                                                            // 397\n * @name has                                                                                                           // 398\n * @memberOf Hash                                                                                                      // 399\n * @param {string} key The key of the entry to check.                                                                  // 400\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 401\n */                                                                                                                    // 402\nfunction hashHas(key) {                                                                                                // 403\n  var data = this.__data__;                                                                                            // 404\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);                                      // 405\n}                                                                                                                      // 406\n                                                                                                                       // 407\n/**                                                                                                                    // 408\n * Sets the hash `key` to `value`.                                                                                     // 409\n *                                                                                                                     // 410\n * @private                                                                                                            // 411\n * @name set                                                                                                           // 412\n * @memberOf Hash                                                                                                      // 413\n * @param {string} key The key of the value to set.                                                                    // 414\n * @param {*} value The value to set.                                                                                  // 415\n * @returns {Object} Returns the hash instance.                                                                        // 416\n */                                                                                                                    // 417\nfunction hashSet(key, value) {                                                                                         // 418\n  var data = this.__data__;                                                                                            // 419\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;                                          // 420\n  return this;                                                                                                         // 421\n}                                                                                                                      // 422\n                                                                                                                       // 423\n// Add methods to `Hash`.                                                                                              // 424\nHash.prototype.clear = hashClear;                                                                                      // 425\nHash.prototype['delete'] = hashDelete;                                                                                 // 426\nHash.prototype.get = hashGet;                                                                                          // 427\nHash.prototype.has = hashHas;                                                                                          // 428\nHash.prototype.set = hashSet;                                                                                          // 429\n                                                                                                                       // 430\n/**                                                                                                                    // 431\n * Creates an list cache object.                                                                                       // 432\n *                                                                                                                     // 433\n * @private                                                                                                            // 434\n * @constructor                                                                                                        // 435\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 436\n */                                                                                                                    // 437\nfunction ListCache(entries) {                                                                                          // 438\n  var index = -1,                                                                                                      // 439\n      length = entries ? entries.length : 0;                                                                           // 440\n                                                                                                                       // 441\n  this.clear();                                                                                                        // 442\n  while (++index < length) {                                                                                           // 443\n    var entry = entries[index];                                                                                        // 444\n    this.set(entry[0], entry[1]);                                                                                      // 445\n  }                                                                                                                    // 446\n}                                                                                                                      // 447\n                                                                                                                       // 448\n/**                                                                                                                    // 449\n * Removes all key-value entries from the list cache.                                                                  // 450\n *                                                                                                                     // 451\n * @private                                                                                                            // 452\n * @name clear                                                                                                         // 453\n * @memberOf ListCache                                                                                                 // 454\n */                                                                                                                    // 455\nfunction listCacheClear() {                                                                                            // 456\n  this.__data__ = [];                                                                                                  // 457\n}                                                                                                                      // 458\n                                                                                                                       // 459\n/**                                                                                                                    // 460\n * Removes `key` and its value from the list cache.                                                                    // 461\n *                                                                                                                     // 462\n * @private                                                                                                            // 463\n * @name delete                                                                                                        // 464\n * @memberOf ListCache                                                                                                 // 465\n * @param {string} key The key of the value to remove.                                                                 // 466\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 467\n */                                                                                                                    // 468\nfunction listCacheDelete(key) {                                                                                        // 469\n  var data = this.__data__,                                                                                            // 470\n      index = assocIndexOf(data, key);                                                                                 // 471\n                                                                                                                       // 472\n  if (index < 0) {                                                                                                     // 473\n    return false;                                                                                                      // 474\n  }                                                                                                                    // 475\n  var lastIndex = data.length - 1;                                                                                     // 476\n  if (index == lastIndex) {                                                                                            // 477\n    data.pop();                                                                                                        // 478\n  } else {                                                                                                             // 479\n    splice.call(data, index, 1);                                                                                       // 480\n  }                                                                                                                    // 481\n  return true;                                                                                                         // 482\n}                                                                                                                      // 483\n                                                                                                                       // 484\n/**                                                                                                                    // 485\n * Gets the list cache value for `key`.                                                                                // 486\n *                                                                                                                     // 487\n * @private                                                                                                            // 488\n * @name get                                                                                                           // 489\n * @memberOf ListCache                                                                                                 // 490\n * @param {string} key The key of the value to get.                                                                    // 491\n * @returns {*} Returns the entry value.                                                                               // 492\n */                                                                                                                    // 493\nfunction listCacheGet(key) {                                                                                           // 494\n  var data = this.__data__,                                                                                            // 495\n      index = assocIndexOf(data, key);                                                                                 // 496\n                                                                                                                       // 497\n  return index < 0 ? undefined : data[index][1];                                                                       // 498\n}                                                                                                                      // 499\n                                                                                                                       // 500\n/**                                                                                                                    // 501\n * Checks if a list cache value for `key` exists.                                                                      // 502\n *                                                                                                                     // 503\n * @private                                                                                                            // 504\n * @name has                                                                                                           // 505\n * @memberOf ListCache                                                                                                 // 506\n * @param {string} key The key of the entry to check.                                                                  // 507\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 508\n */                                                                                                                    // 509\nfunction listCacheHas(key) {                                                                                           // 510\n  return assocIndexOf(this.__data__, key) > -1;                                                                        // 511\n}                                                                                                                      // 512\n                                                                                                                       // 513\n/**                                                                                                                    // 514\n * Sets the list cache `key` to `value`.                                                                               // 515\n *                                                                                                                     // 516\n * @private                                                                                                            // 517\n * @name set                                                                                                           // 518\n * @memberOf ListCache                                                                                                 // 519\n * @param {string} key The key of the value to set.                                                                    // 520\n * @param {*} value The value to set.                                                                                  // 521\n * @returns {Object} Returns the list cache instance.                                                                  // 522\n */                                                                                                                    // 523\nfunction listCacheSet(key, value) {                                                                                    // 524\n  var data = this.__data__,                                                                                            // 525\n      index = assocIndexOf(data, key);                                                                                 // 526\n                                                                                                                       // 527\n  if (index < 0) {                                                                                                     // 528\n    data.push([key, value]);                                                                                           // 529\n  } else {                                                                                                             // 530\n    data[index][1] = value;                                                                                            // 531\n  }                                                                                                                    // 532\n  return this;                                                                                                         // 533\n}                                                                                                                      // 534\n                                                                                                                       // 535\n// Add methods to `ListCache`.                                                                                         // 536\nListCache.prototype.clear = listCacheClear;                                                                            // 537\nListCache.prototype['delete'] = listCacheDelete;                                                                       // 538\nListCache.prototype.get = listCacheGet;                                                                                // 539\nListCache.prototype.has = listCacheHas;                                                                                // 540\nListCache.prototype.set = listCacheSet;                                                                                // 541\n                                                                                                                       // 542\n/**                                                                                                                    // 543\n * Creates a map cache object to store key-value pairs.                                                                // 544\n *                                                                                                                     // 545\n * @private                                                                                                            // 546\n * @constructor                                                                                                        // 547\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 548\n */                                                                                                                    // 549\nfunction MapCache(entries) {                                                                                           // 550\n  var index = -1,                                                                                                      // 551\n      length = entries ? entries.length : 0;                                                                           // 552\n                                                                                                                       // 553\n  this.clear();                                                                                                        // 554\n  while (++index < length) {                                                                                           // 555\n    var entry = entries[index];                                                                                        // 556\n    this.set(entry[0], entry[1]);                                                                                      // 557\n  }                                                                                                                    // 558\n}                                                                                                                      // 559\n                                                                                                                       // 560\n/**                                                                                                                    // 561\n * Removes all key-value entries from the map.                                                                         // 562\n *                                                                                                                     // 563\n * @private                                                                                                            // 564\n * @name clear                                                                                                         // 565\n * @memberOf MapCache                                                                                                  // 566\n */                                                                                                                    // 567\nfunction mapCacheClear() {                                                                                             // 568\n  this.__data__ = {                                                                                                    // 569\n    'hash': new Hash,                                                                                                  // 570\n    'map': new (Map || ListCache),                                                                                     // 571\n    'string': new Hash                                                                                                 // 572\n  };                                                                                                                   // 573\n}                                                                                                                      // 574\n                                                                                                                       // 575\n/**                                                                                                                    // 576\n * Removes `key` and its value from the map.                                                                           // 577\n *                                                                                                                     // 578\n * @private                                                                                                            // 579\n * @name delete                                                                                                        // 580\n * @memberOf MapCache                                                                                                  // 581\n * @param {string} key The key of the value to remove.                                                                 // 582\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 583\n */                                                                                                                    // 584\nfunction mapCacheDelete(key) {                                                                                         // 585\n  return getMapData(this, key)['delete'](key);                                                                         // 586\n}                                                                                                                      // 587\n                                                                                                                       // 588\n/**                                                                                                                    // 589\n * Gets the map value for `key`.                                                                                       // 590\n *                                                                                                                     // 591\n * @private                                                                                                            // 592\n * @name get                                                                                                           // 593\n * @memberOf MapCache                                                                                                  // 594\n * @param {string} key The key of the value to get.                                                                    // 595\n * @returns {*} Returns the entry value.                                                                               // 596\n */                                                                                                                    // 597\nfunction mapCacheGet(key) {                                                                                            // 598\n  return getMapData(this, key).get(key);                                                                               // 599\n}                                                                                                                      // 600\n                                                                                                                       // 601\n/**                                                                                                                    // 602\n * Checks if a map value for `key` exists.                                                                             // 603\n *                                                                                                                     // 604\n * @private                                                                                                            // 605\n * @name has                                                                                                           // 606\n * @memberOf MapCache                                                                                                  // 607\n * @param {string} key The key of the entry to check.                                                                  // 608\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 609\n */                                                                                                                    // 610\nfunction mapCacheHas(key) {                                                                                            // 611\n  return getMapData(this, key).has(key);                                                                               // 612\n}                                                                                                                      // 613\n                                                                                                                       // 614\n/**                                                                                                                    // 615\n * Sets the map `key` to `value`.                                                                                      // 616\n *                                                                                                                     // 617\n * @private                                                                                                            // 618\n * @name set                                                                                                           // 619\n * @memberOf MapCache                                                                                                  // 620\n * @param {string} key The key of the value to set.                                                                    // 621\n * @param {*} value The value to set.                                                                                  // 622\n * @returns {Object} Returns the map cache instance.                                                                   // 623\n */                                                                                                                    // 624\nfunction mapCacheSet(key, value) {                                                                                     // 625\n  getMapData(this, key).set(key, value);                                                                               // 626\n  return this;                                                                                                         // 627\n}                                                                                                                      // 628\n                                                                                                                       // 629\n// Add methods to `MapCache`.                                                                                          // 630\nMapCache.prototype.clear = mapCacheClear;                                                                              // 631\nMapCache.prototype['delete'] = mapCacheDelete;                                                                         // 632\nMapCache.prototype.get = mapCacheGet;                                                                                  // 633\nMapCache.prototype.has = mapCacheHas;                                                                                  // 634\nMapCache.prototype.set = mapCacheSet;                                                                                  // 635\n                                                                                                                       // 636\n/**                                                                                                                    // 637\n *                                                                                                                     // 638\n * Creates an array cache object to store unique values.                                                               // 639\n *                                                                                                                     // 640\n * @private                                                                                                            // 641\n * @constructor                                                                                                        // 642\n * @param {Array} [values] The values to cache.                                                                        // 643\n */                                                                                                                    // 644\nfunction SetCache(values) {                                                                                            // 645\n  var index = -1,                                                                                                      // 646\n      length = values ? values.length : 0;                                                                             // 647\n                                                                                                                       // 648\n  this.__data__ = new MapCache;                                                                                        // 649\n  while (++index < length) {                                                                                           // 650\n    this.add(values[index]);                                                                                           // 651\n  }                                                                                                                    // 652\n}                                                                                                                      // 653\n                                                                                                                       // 654\n/**                                                                                                                    // 655\n * Adds `value` to the array cache.                                                                                    // 656\n *                                                                                                                     // 657\n * @private                                                                                                            // 658\n * @name add                                                                                                           // 659\n * @memberOf SetCache                                                                                                  // 660\n * @alias push                                                                                                         // 661\n * @param {*} value The value to cache.                                                                                // 662\n * @returns {Object} Returns the cache instance.                                                                       // 663\n */                                                                                                                    // 664\nfunction setCacheAdd(value) {                                                                                          // 665\n  this.__data__.set(value, HASH_UNDEFINED);                                                                            // 666\n  return this;                                                                                                         // 667\n}                                                                                                                      // 668\n                                                                                                                       // 669\n/**                                                                                                                    // 670\n * Checks if `value` is in the array cache.                                                                            // 671\n *                                                                                                                     // 672\n * @private                                                                                                            // 673\n * @name has                                                                                                           // 674\n * @memberOf SetCache                                                                                                  // 675\n * @param {*} value The value to search for.                                                                           // 676\n * @returns {number} Returns `true` if `value` is found, else `false`.                                                 // 677\n */                                                                                                                    // 678\nfunction setCacheHas(value) {                                                                                          // 679\n  return this.__data__.has(value);                                                                                     // 680\n}                                                                                                                      // 681\n                                                                                                                       // 682\n// Add methods to `SetCache`.                                                                                          // 683\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;                                                        // 684\nSetCache.prototype.has = setCacheHas;                                                                                  // 685\n                                                                                                                       // 686\n/**                                                                                                                    // 687\n * Creates a stack cache object to store key-value pairs.                                                              // 688\n *                                                                                                                     // 689\n * @private                                                                                                            // 690\n * @constructor                                                                                                        // 691\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 692\n */                                                                                                                    // 693\nfunction Stack(entries) {                                                                                              // 694\n  this.__data__ = new ListCache(entries);                                                                              // 695\n}                                                                                                                      // 696\n                                                                                                                       // 697\n/**                                                                                                                    // 698\n * Removes all key-value entries from the stack.                                                                       // 699\n *                                                                                                                     // 700\n * @private                                                                                                            // 701\n * @name clear                                                                                                         // 702\n * @memberOf Stack                                                                                                     // 703\n */                                                                                                                    // 704\nfunction stackClear() {                                                                                                // 705\n  this.__data__ = new ListCache;                                                                                       // 706\n}                                                                                                                      // 707\n                                                                                                                       // 708\n/**                                                                                                                    // 709\n * Removes `key` and its value from the stack.                                                                         // 710\n *                                                                                                                     // 711\n * @private                                                                                                            // 712\n * @name delete                                                                                                        // 713\n * @memberOf Stack                                                                                                     // 714\n * @param {string} key The key of the value to remove.                                                                 // 715\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 716\n */                                                                                                                    // 717\nfunction stackDelete(key) {                                                                                            // 718\n  return this.__data__['delete'](key);                                                                                 // 719\n}                                                                                                                      // 720\n                                                                                                                       // 721\n/**                                                                                                                    // 722\n * Gets the stack value for `key`.                                                                                     // 723\n *                                                                                                                     // 724\n * @private                                                                                                            // 725\n * @name get                                                                                                           // 726\n * @memberOf Stack                                                                                                     // 727\n * @param {string} key The key of the value to get.                                                                    // 728\n * @returns {*} Returns the entry value.                                                                               // 729\n */                                                                                                                    // 730\nfunction stackGet(key) {                                                                                               // 731\n  return this.__data__.get(key);                                                                                       // 732\n}                                                                                                                      // 733\n                                                                                                                       // 734\n/**                                                                                                                    // 735\n * Checks if a stack value for `key` exists.                                                                           // 736\n *                                                                                                                     // 737\n * @private                                                                                                            // 738\n * @name has                                                                                                           // 739\n * @memberOf Stack                                                                                                     // 740\n * @param {string} key The key of the entry to check.                                                                  // 741\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 742\n */                                                                                                                    // 743\nfunction stackHas(key) {                                                                                               // 744\n  return this.__data__.has(key);                                                                                       // 745\n}                                                                                                                      // 746\n                                                                                                                       // 747\n/**                                                                                                                    // 748\n * Sets the stack `key` to `value`.                                                                                    // 749\n *                                                                                                                     // 750\n * @private                                                                                                            // 751\n * @name set                                                                                                           // 752\n * @memberOf Stack                                                                                                     // 753\n * @param {string} key The key of the value to set.                                                                    // 754\n * @param {*} value The value to set.                                                                                  // 755\n * @returns {Object} Returns the stack cache instance.                                                                 // 756\n */                                                                                                                    // 757\nfunction stackSet(key, value) {                                                                                        // 758\n  var cache = this.__data__;                                                                                           // 759\n  if (cache instanceof ListCache) {                                                                                    // 760\n    var pairs = cache.__data__;                                                                                        // 761\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {                                                               // 762\n      pairs.push([key, value]);                                                                                        // 763\n      return this;                                                                                                     // 764\n    }                                                                                                                  // 765\n    cache = this.__data__ = new MapCache(pairs);                                                                       // 766\n  }                                                                                                                    // 767\n  cache.set(key, value);                                                                                               // 768\n  return this;                                                                                                         // 769\n}                                                                                                                      // 770\n                                                                                                                       // 771\n// Add methods to `Stack`.                                                                                             // 772\nStack.prototype.clear = stackClear;                                                                                    // 773\nStack.prototype['delete'] = stackDelete;                                                                               // 774\nStack.prototype.get = stackGet;                                                                                        // 775\nStack.prototype.has = stackHas;                                                                                        // 776\nStack.prototype.set = stackSet;                                                                                        // 777\n                                                                                                                       // 778\n/**                                                                                                                    // 779\n * Creates an array of the enumerable property names of the array-like `value`.                                        // 780\n *                                                                                                                     // 781\n * @private                                                                                                            // 782\n * @param {*} value The value to query.                                                                                // 783\n * @param {boolean} inherited Specify returning inherited property names.                                              // 784\n * @returns {Array} Returns the array of property names.                                                               // 785\n */                                                                                                                    // 786\nfunction arrayLikeKeys(value, inherited) {                                                                             // 787\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 788\n  // Safari 9 makes `arguments.length` enumerable in strict mode.                                                      // 789\n  var result = (isArray(value) || isArguments(value))                                                                  // 790\n    ? baseTimes(value.length, String)                                                                                  // 791\n    : [];                                                                                                              // 792\n                                                                                                                       // 793\n  var length = result.length,                                                                                          // 794\n      skipIndexes = !!length;                                                                                          // 795\n                                                                                                                       // 796\n  for (var key in value) {                                                                                             // 797\n    if ((inherited || hasOwnProperty.call(value, key)) &&                                                              // 798\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {                                                 // 799\n      result.push(key);                                                                                                // 800\n    }                                                                                                                  // 801\n  }                                                                                                                    // 802\n  return result;                                                                                                       // 803\n}                                                                                                                      // 804\n                                                                                                                       // 805\n/**                                                                                                                    // 806\n * Gets the index at which the `key` is found in `array` of key-value pairs.                                           // 807\n *                                                                                                                     // 808\n * @private                                                                                                            // 809\n * @param {Array} array The array to inspect.                                                                          // 810\n * @param {*} key The key to search for.                                                                               // 811\n * @returns {number} Returns the index of the matched value, else `-1`.                                                // 812\n */                                                                                                                    // 813\nfunction assocIndexOf(array, key) {                                                                                    // 814\n  var length = array.length;                                                                                           // 815\n  while (length--) {                                                                                                   // 816\n    if (eq(array[length][0], key)) {                                                                                   // 817\n      return length;                                                                                                   // 818\n    }                                                                                                                  // 819\n  }                                                                                                                    // 820\n  return -1;                                                                                                           // 821\n}                                                                                                                      // 822\n                                                                                                                       // 823\n/**                                                                                                                    // 824\n * The base implementation of `baseForOwn` which iterates over `object`                                                // 825\n * properties returned by `keysFunc` and invokes `iteratee` for each property.                                         // 826\n * Iteratee functions may exit iteration early by explicitly returning `false`.                                        // 827\n *                                                                                                                     // 828\n * @private                                                                                                            // 829\n * @param {Object} object The object to iterate over.                                                                  // 830\n * @param {Function} iteratee The function invoked per iteration.                                                      // 831\n * @param {Function} keysFunc The function to get the keys of `object`.                                                // 832\n * @returns {Object} Returns `object`.                                                                                 // 833\n */                                                                                                                    // 834\nvar baseFor = createBaseFor();                                                                                         // 835\n                                                                                                                       // 836\n/**                                                                                                                    // 837\n * The base implementation of `_.forOwn` without support for iteratee shorthands.                                      // 838\n *                                                                                                                     // 839\n * @private                                                                                                            // 840\n * @param {Object} object The object to iterate over.                                                                  // 841\n * @param {Function} iteratee The function invoked per iteration.                                                      // 842\n * @returns {Object} Returns `object`.                                                                                 // 843\n */                                                                                                                    // 844\nfunction baseForOwn(object, iteratee) {                                                                                // 845\n  return object && baseFor(object, iteratee, keys);                                                                    // 846\n}                                                                                                                      // 847\n                                                                                                                       // 848\n/**                                                                                                                    // 849\n * The base implementation of `_.get` without support for default values.                                              // 850\n *                                                                                                                     // 851\n * @private                                                                                                            // 852\n * @param {Object} object The object to query.                                                                         // 853\n * @param {Array|string} path The path of the property to get.                                                         // 854\n * @returns {*} Returns the resolved value.                                                                            // 855\n */                                                                                                                    // 856\nfunction baseGet(object, path) {                                                                                       // 857\n  path = isKey(path, object) ? [path] : castPath(path);                                                                // 858\n                                                                                                                       // 859\n  var index = 0,                                                                                                       // 860\n      length = path.length;                                                                                            // 861\n                                                                                                                       // 862\n  while (object != null && index < length) {                                                                           // 863\n    object = object[toKey(path[index++])];                                                                             // 864\n  }                                                                                                                    // 865\n  return (index && index == length) ? object : undefined;                                                              // 866\n}                                                                                                                      // 867\n                                                                                                                       // 868\n/**                                                                                                                    // 869\n * The base implementation of `getTag`.                                                                                // 870\n *                                                                                                                     // 871\n * @private                                                                                                            // 872\n * @param {*} value The value to query.                                                                                // 873\n * @returns {string} Returns the `toStringTag`.                                                                        // 874\n */                                                                                                                    // 875\nfunction baseGetTag(value) {                                                                                           // 876\n  return objectToString.call(value);                                                                                   // 877\n}                                                                                                                      // 878\n                                                                                                                       // 879\n/**                                                                                                                    // 880\n * The base implementation of `_.hasIn` without support for deep paths.                                                // 881\n *                                                                                                                     // 882\n * @private                                                                                                            // 883\n * @param {Object} [object] The object to query.                                                                       // 884\n * @param {Array|string} key The key to check.                                                                         // 885\n * @returns {boolean} Returns `true` if `key` exists, else `false`.                                                    // 886\n */                                                                                                                    // 887\nfunction baseHasIn(object, key) {                                                                                      // 888\n  return object != null && key in Object(object);                                                                      // 889\n}                                                                                                                      // 890\n                                                                                                                       // 891\n/**                                                                                                                    // 892\n * The base implementation of `_.isEqual` which supports partial comparisons                                           // 893\n * and tracks traversed objects.                                                                                       // 894\n *                                                                                                                     // 895\n * @private                                                                                                            // 896\n * @param {*} value The value to compare.                                                                              // 897\n * @param {*} other The other value to compare.                                                                        // 898\n * @param {Function} [customizer] The function to customize comparisons.                                               // 899\n * @param {boolean} [bitmask] The bitmask of comparison flags.                                                         // 900\n *  The bitmask may be composed of the following flags:                                                                // 901\n *     1 - Unordered comparison                                                                                        // 902\n *     2 - Partial comparison                                                                                          // 903\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.                                               // 904\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                       // 905\n */                                                                                                                    // 906\nfunction baseIsEqual(value, other, customizer, bitmask, stack) {                                                       // 907\n  if (value === other) {                                                                                               // 908\n    return true;                                                                                                       // 909\n  }                                                                                                                    // 910\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {                                  // 911\n    return value !== value && other !== other;                                                                         // 912\n  }                                                                                                                    // 913\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);                                       // 914\n}                                                                                                                      // 915\n                                                                                                                       // 916\n/**                                                                                                                    // 917\n * A specialized version of `baseIsEqual` for arrays and objects which performs                                        // 918\n * deep comparisons and tracks traversed objects enabling objects with circular                                        // 919\n * references to be compared.                                                                                          // 920\n *                                                                                                                     // 921\n * @private                                                                                                            // 922\n * @param {Object} object The object to compare.                                                                       // 923\n * @param {Object} other The other object to compare.                                                                  // 924\n * @param {Function} equalFunc The function to determine equivalents of values.                                        // 925\n * @param {Function} [customizer] The function to customize comparisons.                                               // 926\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`                                        // 927\n *  for more details.                                                                                                  // 928\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.                                              // 929\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                      // 930\n */                                                                                                                    // 931\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {                                       // 932\n  var objIsArr = isArray(object),                                                                                      // 933\n      othIsArr = isArray(other),                                                                                       // 934\n      objTag = arrayTag,                                                                                               // 935\n      othTag = arrayTag;                                                                                               // 936\n                                                                                                                       // 937\n  if (!objIsArr) {                                                                                                     // 938\n    objTag = getTag(object);                                                                                           // 939\n    objTag = objTag == argsTag ? objectTag : objTag;                                                                   // 940\n  }                                                                                                                    // 941\n  if (!othIsArr) {                                                                                                     // 942\n    othTag = getTag(other);                                                                                            // 943\n    othTag = othTag == argsTag ? objectTag : othTag;                                                                   // 944\n  }                                                                                                                    // 945\n  var objIsObj = objTag == objectTag && !isHostObject(object),                                                         // 946\n      othIsObj = othTag == objectTag && !isHostObject(other),                                                          // 947\n      isSameTag = objTag == othTag;                                                                                    // 948\n                                                                                                                       // 949\n  if (isSameTag && !objIsObj) {                                                                                        // 950\n    stack || (stack = new Stack);                                                                                      // 951\n    return (objIsArr || isTypedArray(object))                                                                          // 952\n      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)                                              // 953\n      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);                                      // 954\n  }                                                                                                                    // 955\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {                                                                             // 956\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),                                         // 957\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');                                          // 958\n                                                                                                                       // 959\n    if (objIsWrapped || othIsWrapped) {                                                                                // 960\n      var objUnwrapped = objIsWrapped ? object.value() : object,                                                       // 961\n          othUnwrapped = othIsWrapped ? other.value() : other;                                                         // 962\n                                                                                                                       // 963\n      stack || (stack = new Stack);                                                                                    // 964\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);                                        // 965\n    }                                                                                                                  // 966\n  }                                                                                                                    // 967\n  if (!isSameTag) {                                                                                                    // 968\n    return false;                                                                                                      // 969\n  }                                                                                                                    // 970\n  stack || (stack = new Stack);                                                                                        // 971\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);                                           // 972\n}                                                                                                                      // 973\n                                                                                                                       // 974\n/**                                                                                                                    // 975\n * The base implementation of `_.isMatch` without support for iteratee shorthands.                                     // 976\n *                                                                                                                     // 977\n * @private                                                                                                            // 978\n * @param {Object} object The object to inspect.                                                                       // 979\n * @param {Object} source The object of property values to match.                                                      // 980\n * @param {Array} matchData The property names, values, and compare flags to match.                                    // 981\n * @param {Function} [customizer] The function to customize comparisons.                                               // 982\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.                                             // 983\n */                                                                                                                    // 984\nfunction baseIsMatch(object, source, matchData, customizer) {                                                          // 985\n  var index = matchData.length,                                                                                        // 986\n      length = index,                                                                                                  // 987\n      noCustomizer = !customizer;                                                                                      // 988\n                                                                                                                       // 989\n  if (object == null) {                                                                                                // 990\n    return !length;                                                                                                    // 991\n  }                                                                                                                    // 992\n  object = Object(object);                                                                                             // 993\n  while (index--) {                                                                                                    // 994\n    var data = matchData[index];                                                                                       // 995\n    if ((noCustomizer && data[2])                                                                                      // 996\n          ? data[1] !== object[data[0]]                                                                                // 997\n          : !(data[0] in object)                                                                                       // 998\n        ) {                                                                                                            // 999\n      return false;                                                                                                    // 1000\n    }                                                                                                                  // 1001\n  }                                                                                                                    // 1002\n  while (++index < length) {                                                                                           // 1003\n    data = matchData[index];                                                                                           // 1004\n    var key = data[0],                                                                                                 // 1005\n        objValue = object[key],                                                                                        // 1006\n        srcValue = data[1];                                                                                            // 1007\n                                                                                                                       // 1008\n    if (noCustomizer && data[2]) {                                                                                     // 1009\n      if (objValue === undefined && !(key in object)) {                                                                // 1010\n        return false;                                                                                                  // 1011\n      }                                                                                                                // 1012\n    } else {                                                                                                           // 1013\n      var stack = new Stack;                                                                                           // 1014\n      if (customizer) {                                                                                                // 1015\n        var result = customizer(objValue, srcValue, key, object, source, stack);                                       // 1016\n      }                                                                                                                // 1017\n      if (!(result === undefined                                                                                       // 1018\n            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)        // 1019\n            : result                                                                                                   // 1020\n          )) {                                                                                                         // 1021\n        return false;                                                                                                  // 1022\n      }                                                                                                                // 1023\n    }                                                                                                                  // 1024\n  }                                                                                                                    // 1025\n  return true;                                                                                                         // 1026\n}                                                                                                                      // 1027\n                                                                                                                       // 1028\n/**                                                                                                                    // 1029\n * The base implementation of `_.isNative` without bad shim checks.                                                    // 1030\n *                                                                                                                     // 1031\n * @private                                                                                                            // 1032\n * @param {*} value The value to check.                                                                                // 1033\n * @returns {boolean} Returns `true` if `value` is a native function,                                                  // 1034\n *  else `false`.                                                                                                      // 1035\n */                                                                                                                    // 1036\nfunction baseIsNative(value) {                                                                                         // 1037\n  if (!isObject(value) || isMasked(value)) {                                                                           // 1038\n    return false;                                                                                                      // 1039\n  }                                                                                                                    // 1040\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;                                // 1041\n  return pattern.test(toSource(value));                                                                                // 1042\n}                                                                                                                      // 1043\n                                                                                                                       // 1044\n/**                                                                                                                    // 1045\n * The base implementation of `_.isTypedArray` without Node.js optimizations.                                          // 1046\n *                                                                                                                     // 1047\n * @private                                                                                                            // 1048\n * @param {*} value The value to check.                                                                                // 1049\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.                                        // 1050\n */                                                                                                                    // 1051\nfunction baseIsTypedArray(value) {                                                                                     // 1052\n  return isObjectLike(value) &&                                                                                        // 1053\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];                                            // 1054\n}                                                                                                                      // 1055\n                                                                                                                       // 1056\n/**                                                                                                                    // 1057\n * The base implementation of `_.iteratee`.                                                                            // 1058\n *                                                                                                                     // 1059\n * @private                                                                                                            // 1060\n * @param {*} [value=_.identity] The value to convert to an iteratee.                                                  // 1061\n * @returns {Function} Returns the iteratee.                                                                           // 1062\n */                                                                                                                    // 1063\nfunction baseIteratee(value) {                                                                                         // 1064\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.                                     // 1065\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.                                              // 1066\n  if (typeof value == 'function') {                                                                                    // 1067\n    return value;                                                                                                      // 1068\n  }                                                                                                                    // 1069\n  if (value == null) {                                                                                                 // 1070\n    return identity;                                                                                                   // 1071\n  }                                                                                                                    // 1072\n  if (typeof value == 'object') {                                                                                      // 1073\n    return isArray(value)                                                                                              // 1074\n      ? baseMatchesProperty(value[0], value[1])                                                                        // 1075\n      : baseMatches(value);                                                                                            // 1076\n  }                                                                                                                    // 1077\n  return property(value);                                                                                              // 1078\n}                                                                                                                      // 1079\n                                                                                                                       // 1080\n/**                                                                                                                    // 1081\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.                                     // 1082\n *                                                                                                                     // 1083\n * @private                                                                                                            // 1084\n * @param {Object} object The object to query.                                                                         // 1085\n * @returns {Array} Returns the array of property names.                                                               // 1086\n */                                                                                                                    // 1087\nfunction baseKeys(object) {                                                                                            // 1088\n  if (!isPrototype(object)) {                                                                                          // 1089\n    return nativeKeys(object);                                                                                         // 1090\n  }                                                                                                                    // 1091\n  var result = [];                                                                                                     // 1092\n  for (var key in Object(object)) {                                                                                    // 1093\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {                                                    // 1094\n      result.push(key);                                                                                                // 1095\n    }                                                                                                                  // 1096\n  }                                                                                                                    // 1097\n  return result;                                                                                                       // 1098\n}                                                                                                                      // 1099\n                                                                                                                       // 1100\n/**                                                                                                                    // 1101\n * The base implementation of `_.matches` which doesn't clone `source`.                                                // 1102\n *                                                                                                                     // 1103\n * @private                                                                                                            // 1104\n * @param {Object} source The object of property values to match.                                                      // 1105\n * @returns {Function} Returns the new spec function.                                                                  // 1106\n */                                                                                                                    // 1107\nfunction baseMatches(source) {                                                                                         // 1108\n  var matchData = getMatchData(source);                                                                                // 1109\n  if (matchData.length == 1 && matchData[0][2]) {                                                                      // 1110\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);                                                  // 1111\n  }                                                                                                                    // 1112\n  return function(object) {                                                                                            // 1113\n    return object === source || baseIsMatch(object, source, matchData);                                                // 1114\n  };                                                                                                                   // 1115\n}                                                                                                                      // 1116\n                                                                                                                       // 1117\n/**                                                                                                                    // 1118\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.                                      // 1119\n *                                                                                                                     // 1120\n * @private                                                                                                            // 1121\n * @param {string} path The path of the property to get.                                                               // 1122\n * @param {*} srcValue The value to match.                                                                             // 1123\n * @returns {Function} Returns the new spec function.                                                                  // 1124\n */                                                                                                                    // 1125\nfunction baseMatchesProperty(path, srcValue) {                                                                         // 1126\n  if (isKey(path) && isStrictComparable(srcValue)) {                                                                   // 1127\n    return matchesStrictComparable(toKey(path), srcValue);                                                             // 1128\n  }                                                                                                                    // 1129\n  return function(object) {                                                                                            // 1130\n    var objValue = get(object, path);                                                                                  // 1131\n    return (objValue === undefined && objValue === srcValue)                                                           // 1132\n      ? hasIn(object, path)                                                                                            // 1133\n      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);                     // 1134\n  };                                                                                                                   // 1135\n}                                                                                                                      // 1136\n                                                                                                                       // 1137\n/**                                                                                                                    // 1138\n * A specialized version of `baseProperty` which supports deep paths.                                                  // 1139\n *                                                                                                                     // 1140\n * @private                                                                                                            // 1141\n * @param {Array|string} path The path of the property to get.                                                         // 1142\n * @returns {Function} Returns the new accessor function.                                                              // 1143\n */                                                                                                                    // 1144\nfunction basePropertyDeep(path) {                                                                                      // 1145\n  return function(object) {                                                                                            // 1146\n    return baseGet(object, path);                                                                                      // 1147\n  };                                                                                                                   // 1148\n}                                                                                                                      // 1149\n                                                                                                                       // 1150\n/**                                                                                                                    // 1151\n * The base implementation of `_.toString` which doesn't convert nullish                                               // 1152\n * values to empty strings.                                                                                            // 1153\n *                                                                                                                     // 1154\n * @private                                                                                                            // 1155\n * @param {*} value The value to process.                                                                              // 1156\n * @returns {string} Returns the string.                                                                               // 1157\n */                                                                                                                    // 1158\nfunction baseToString(value) {                                                                                         // 1159\n  // Exit early for strings to avoid a performance hit in some environments.                                           // 1160\n  if (typeof value == 'string') {                                                                                      // 1161\n    return value;                                                                                                      // 1162\n  }                                                                                                                    // 1163\n  if (isSymbol(value)) {                                                                                               // 1164\n    return symbolToString ? symbolToString.call(value) : '';                                                           // 1165\n  }                                                                                                                    // 1166\n  var result = (value + '');                                                                                           // 1167\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;                                                  // 1168\n}                                                                                                                      // 1169\n                                                                                                                       // 1170\n/**                                                                                                                    // 1171\n * Casts `value` to a path array if it's not one.                                                                      // 1172\n *                                                                                                                     // 1173\n * @private                                                                                                            // 1174\n * @param {*} value The value to inspect.                                                                              // 1175\n * @returns {Array} Returns the cast property path array.                                                              // 1176\n */                                                                                                                    // 1177\nfunction castPath(value) {                                                                                             // 1178\n  return isArray(value) ? value : stringToPath(value);                                                                 // 1179\n}                                                                                                                      // 1180\n                                                                                                                       // 1181\n/**                                                                                                                    // 1182\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.                                                  // 1183\n *                                                                                                                     // 1184\n * @private                                                                                                            // 1185\n * @param {boolean} [fromRight] Specify iterating from right to left.                                                  // 1186\n * @returns {Function} Returns the new base function.                                                                  // 1187\n */                                                                                                                    // 1188\nfunction createBaseFor(fromRight) {                                                                                    // 1189\n  return function(object, iteratee, keysFunc) {                                                                        // 1190\n    var index = -1,                                                                                                    // 1191\n        iterable = Object(object),                                                                                     // 1192\n        props = keysFunc(object),                                                                                      // 1193\n        length = props.length;                                                                                         // 1194\n                                                                                                                       // 1195\n    while (length--) {                                                                                                 // 1196\n      var key = props[fromRight ? length : ++index];                                                                   // 1197\n      if (iteratee(iterable[key], key, iterable) === false) {                                                          // 1198\n        break;                                                                                                         // 1199\n      }                                                                                                                // 1200\n    }                                                                                                                  // 1201\n    return object;                                                                                                     // 1202\n  };                                                                                                                   // 1203\n}                                                                                                                      // 1204\n                                                                                                                       // 1205\n/**                                                                                                                    // 1206\n * A specialized version of `baseIsEqualDeep` for arrays with support for                                              // 1207\n * partial deep comparisons.                                                                                           // 1208\n *                                                                                                                     // 1209\n * @private                                                                                                            // 1210\n * @param {Array} array The array to compare.                                                                          // 1211\n * @param {Array} other The other array to compare.                                                                    // 1212\n * @param {Function} equalFunc The function to determine equivalents of values.                                        // 1213\n * @param {Function} customizer The function to customize comparisons.                                                 // 1214\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`                                          // 1215\n *  for more details.                                                                                                  // 1216\n * @param {Object} stack Tracks traversed `array` and `other` objects.                                                 // 1217\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.                                       // 1218\n */                                                                                                                    // 1219\nfunction equalArrays(array, other, equalFunc, customizer, bitmask, stack) {                                            // 1220\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,                                                                      // 1221\n      arrLength = array.length,                                                                                        // 1222\n      othLength = other.length;                                                                                        // 1223\n                                                                                                                       // 1224\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {                                               // 1225\n    return false;                                                                                                      // 1226\n  }                                                                                                                    // 1227\n  // Assume cyclic values are equal.                                                                                   // 1228\n  var stacked = stack.get(array);                                                                                      // 1229\n  if (stacked && stack.get(other)) {                                                                                   // 1230\n    return stacked == other;                                                                                           // 1231\n  }                                                                                                                    // 1232\n  var index = -1,                                                                                                      // 1233\n      result = true,                                                                                                   // 1234\n      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;                                            // 1235\n                                                                                                                       // 1236\n  stack.set(array, other);                                                                                             // 1237\n  stack.set(other, array);                                                                                             // 1238\n                                                                                                                       // 1239\n  // Ignore non-index properties.                                                                                      // 1240\n  while (++index < arrLength) {                                                                                        // 1241\n    var arrValue = array[index],                                                                                       // 1242\n        othValue = other[index];                                                                                       // 1243\n                                                                                                                       // 1244\n    if (customizer) {                                                                                                  // 1245\n      var compared = isPartial                                                                                         // 1246\n        ? customizer(othValue, arrValue, index, other, array, stack)                                                   // 1247\n        : customizer(arrValue, othValue, index, array, other, stack);                                                  // 1248\n    }                                                                                                                  // 1249\n    if (compared !== undefined) {                                                                                      // 1250\n      if (compared) {                                                                                                  // 1251\n        continue;                                                                                                      // 1252\n      }                                                                                                                // 1253\n      result = false;                                                                                                  // 1254\n      break;                                                                                                           // 1255\n    }                                                                                                                  // 1256\n    // Recursively compare arrays (susceptible to call stack limits).                                                  // 1257\n    if (seen) {                                                                                                        // 1258\n      if (!arraySome(other, function(othValue, othIndex) {                                                             // 1259\n            if (!seen.has(othIndex) &&                                                                                 // 1260\n                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {                // 1261\n              return seen.add(othIndex);                                                                               // 1262\n            }                                                                                                          // 1263\n          })) {                                                                                                        // 1264\n        result = false;                                                                                                // 1265\n        break;                                                                                                         // 1266\n      }                                                                                                                // 1267\n    } else if (!(                                                                                                      // 1268\n          arrValue === othValue ||                                                                                     // 1269\n            equalFunc(arrValue, othValue, customizer, bitmask, stack)                                                  // 1270\n        )) {                                                                                                           // 1271\n      result = false;                                                                                                  // 1272\n      break;                                                                                                           // 1273\n    }                                                                                                                  // 1274\n  }                                                                                                                    // 1275\n  stack['delete'](array);                                                                                              // 1276\n  stack['delete'](other);                                                                                              // 1277\n  return result;                                                                                                       // 1278\n}                                                                                                                      // 1279\n                                                                                                                       // 1280\n/**                                                                                                                    // 1281\n * A specialized version of `baseIsEqualDeep` for comparing objects of                                                 // 1282\n * the same `toStringTag`.                                                                                             // 1283\n *                                                                                                                     // 1284\n * **Note:** This function only supports comparing values with tags of                                                 // 1285\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                        // 1286\n *                                                                                                                     // 1287\n * @private                                                                                                            // 1288\n * @param {Object} object The object to compare.                                                                       // 1289\n * @param {Object} other The other object to compare.                                                                  // 1290\n * @param {string} tag The `toStringTag` of the objects to compare.                                                    // 1291\n * @param {Function} equalFunc The function to determine equivalents of values.                                        // 1292\n * @param {Function} customizer The function to customize comparisons.                                                 // 1293\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`                                          // 1294\n *  for more details.                                                                                                  // 1295\n * @param {Object} stack Tracks traversed `object` and `other` objects.                                                // 1296\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                      // 1297\n */                                                                                                                    // 1298\nfunction equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {                                       // 1299\n  switch (tag) {                                                                                                       // 1300\n    case dataViewTag:                                                                                                  // 1301\n      if ((object.byteLength != other.byteLength) ||                                                                   // 1302\n          (object.byteOffset != other.byteOffset)) {                                                                   // 1303\n        return false;                                                                                                  // 1304\n      }                                                                                                                // 1305\n      object = object.buffer;                                                                                          // 1306\n      other = other.buffer;                                                                                            // 1307\n                                                                                                                       // 1308\n    case arrayBufferTag:                                                                                               // 1309\n      if ((object.byteLength != other.byteLength) ||                                                                   // 1310\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {                                                 // 1311\n        return false;                                                                                                  // 1312\n      }                                                                                                                // 1313\n      return true;                                                                                                     // 1314\n                                                                                                                       // 1315\n    case boolTag:                                                                                                      // 1316\n    case dateTag:                                                                                                      // 1317\n    case numberTag:                                                                                                    // 1318\n      // Coerce booleans to `1` or `0` and dates to milliseconds.                                                      // 1319\n      // Invalid dates are coerced to `NaN`.                                                                           // 1320\n      return eq(+object, +other);                                                                                      // 1321\n                                                                                                                       // 1322\n    case errorTag:                                                                                                     // 1323\n      return object.name == other.name && object.message == other.message;                                             // 1324\n                                                                                                                       // 1325\n    case regexpTag:                                                                                                    // 1326\n    case stringTag:                                                                                                    // 1327\n      // Coerce regexes to strings and treat strings, primitives and objects,                                          // 1328\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring                   // 1329\n      // for more details.                                                                                             // 1330\n      return object == (other + '');                                                                                   // 1331\n                                                                                                                       // 1332\n    case mapTag:                                                                                                       // 1333\n      var convert = mapToArray;                                                                                        // 1334\n                                                                                                                       // 1335\n    case setTag:                                                                                                       // 1336\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;                                                                  // 1337\n      convert || (convert = setToArray);                                                                               // 1338\n                                                                                                                       // 1339\n      if (object.size != other.size && !isPartial) {                                                                   // 1340\n        return false;                                                                                                  // 1341\n      }                                                                                                                // 1342\n      // Assume cyclic values are equal.                                                                               // 1343\n      var stacked = stack.get(object);                                                                                 // 1344\n      if (stacked) {                                                                                                   // 1345\n        return stacked == other;                                                                                       // 1346\n      }                                                                                                                // 1347\n      bitmask |= UNORDERED_COMPARE_FLAG;                                                                               // 1348\n                                                                                                                       // 1349\n      // Recursively compare objects (susceptible to call stack limits).                                               // 1350\n      stack.set(object, other);                                                                                        // 1351\n      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);                // 1352\n      stack['delete'](object);                                                                                         // 1353\n      return result;                                                                                                   // 1354\n                                                                                                                       // 1355\n    case symbolTag:                                                                                                    // 1356\n      if (symbolValueOf) {                                                                                             // 1357\n        return symbolValueOf.call(object) == symbolValueOf.call(other);                                                // 1358\n      }                                                                                                                // 1359\n  }                                                                                                                    // 1360\n  return false;                                                                                                        // 1361\n}                                                                                                                      // 1362\n                                                                                                                       // 1363\n/**                                                                                                                    // 1364\n * A specialized version of `baseIsEqualDeep` for objects with support for                                             // 1365\n * partial deep comparisons.                                                                                           // 1366\n *                                                                                                                     // 1367\n * @private                                                                                                            // 1368\n * @param {Object} object The object to compare.                                                                       // 1369\n * @param {Object} other The other object to compare.                                                                  // 1370\n * @param {Function} equalFunc The function to determine equivalents of values.                                        // 1371\n * @param {Function} customizer The function to customize comparisons.                                                 // 1372\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`                                          // 1373\n *  for more details.                                                                                                  // 1374\n * @param {Object} stack Tracks traversed `object` and `other` objects.                                                // 1375\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                      // 1376\n */                                                                                                                    // 1377\nfunction equalObjects(object, other, equalFunc, customizer, bitmask, stack) {                                          // 1378\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,                                                                      // 1379\n      objProps = keys(object),                                                                                         // 1380\n      objLength = objProps.length,                                                                                     // 1381\n      othProps = keys(other),                                                                                          // 1382\n      othLength = othProps.length;                                                                                     // 1383\n                                                                                                                       // 1384\n  if (objLength != othLength && !isPartial) {                                                                          // 1385\n    return false;                                                                                                      // 1386\n  }                                                                                                                    // 1387\n  var index = objLength;                                                                                               // 1388\n  while (index--) {                                                                                                    // 1389\n    var key = objProps[index];                                                                                         // 1390\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {                                               // 1391\n      return false;                                                                                                    // 1392\n    }                                                                                                                  // 1393\n  }                                                                                                                    // 1394\n  // Assume cyclic values are equal.                                                                                   // 1395\n  var stacked = stack.get(object);                                                                                     // 1396\n  if (stacked && stack.get(other)) {                                                                                   // 1397\n    return stacked == other;                                                                                           // 1398\n  }                                                                                                                    // 1399\n  var result = true;                                                                                                   // 1400\n  stack.set(object, other);                                                                                            // 1401\n  stack.set(other, object);                                                                                            // 1402\n                                                                                                                       // 1403\n  var skipCtor = isPartial;                                                                                            // 1404\n  while (++index < objLength) {                                                                                        // 1405\n    key = objProps[index];                                                                                             // 1406\n    var objValue = object[key],                                                                                        // 1407\n        othValue = other[key];                                                                                         // 1408\n                                                                                                                       // 1409\n    if (customizer) {                                                                                                  // 1410\n      var compared = isPartial                                                                                         // 1411\n        ? customizer(othValue, objValue, key, other, object, stack)                                                    // 1412\n        : customizer(objValue, othValue, key, object, other, stack);                                                   // 1413\n    }                                                                                                                  // 1414\n    // Recursively compare objects (susceptible to call stack limits).                                                 // 1415\n    if (!(compared === undefined                                                                                       // 1416\n          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))                       // 1417\n          : compared                                                                                                   // 1418\n        )) {                                                                                                           // 1419\n      result = false;                                                                                                  // 1420\n      break;                                                                                                           // 1421\n    }                                                                                                                  // 1422\n    skipCtor || (skipCtor = key == 'constructor');                                                                     // 1423\n  }                                                                                                                    // 1424\n  if (result && !skipCtor) {                                                                                           // 1425\n    var objCtor = object.constructor,                                                                                  // 1426\n        othCtor = other.constructor;                                                                                   // 1427\n                                                                                                                       // 1428\n    // Non `Object` object instances with different constructors are not equal.                                        // 1429\n    if (objCtor != othCtor &&                                                                                          // 1430\n        ('constructor' in object && 'constructor' in other) &&                                                         // 1431\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&                                                // 1432\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {                                               // 1433\n      result = false;                                                                                                  // 1434\n    }                                                                                                                  // 1435\n  }                                                                                                                    // 1436\n  stack['delete'](object);                                                                                             // 1437\n  stack['delete'](other);                                                                                              // 1438\n  return result;                                                                                                       // 1439\n}                                                                                                                      // 1440\n                                                                                                                       // 1441\n/**                                                                                                                    // 1442\n * Gets the data for `map`.                                                                                            // 1443\n *                                                                                                                     // 1444\n * @private                                                                                                            // 1445\n * @param {Object} map The map to query.                                                                               // 1446\n * @param {string} key The reference key.                                                                              // 1447\n * @returns {*} Returns the map data.                                                                                  // 1448\n */                                                                                                                    // 1449\nfunction getMapData(map, key) {                                                                                        // 1450\n  var data = map.__data__;                                                                                             // 1451\n  return isKeyable(key)                                                                                                // 1452\n    ? data[typeof key == 'string' ? 'string' : 'hash']                                                                 // 1453\n    : data.map;                                                                                                        // 1454\n}                                                                                                                      // 1455\n                                                                                                                       // 1456\n/**                                                                                                                    // 1457\n * Gets the property names, values, and compare flags of `object`.                                                     // 1458\n *                                                                                                                     // 1459\n * @private                                                                                                            // 1460\n * @param {Object} object The object to query.                                                                         // 1461\n * @returns {Array} Returns the match data of `object`.                                                                // 1462\n */                                                                                                                    // 1463\nfunction getMatchData(object) {                                                                                        // 1464\n  var result = keys(object),                                                                                           // 1465\n      length = result.length;                                                                                          // 1466\n                                                                                                                       // 1467\n  while (length--) {                                                                                                   // 1468\n    var key = result[length],                                                                                          // 1469\n        value = object[key];                                                                                           // 1470\n                                                                                                                       // 1471\n    result[length] = [key, value, isStrictComparable(value)];                                                          // 1472\n  }                                                                                                                    // 1473\n  return result;                                                                                                       // 1474\n}                                                                                                                      // 1475\n                                                                                                                       // 1476\n/**                                                                                                                    // 1477\n * Gets the native function at `key` of `object`.                                                                      // 1478\n *                                                                                                                     // 1479\n * @private                                                                                                            // 1480\n * @param {Object} object The object to query.                                                                         // 1481\n * @param {string} key The key of the method to get.                                                                   // 1482\n * @returns {*} Returns the function if it's native, else `undefined`.                                                 // 1483\n */                                                                                                                    // 1484\nfunction getNative(object, key) {                                                                                      // 1485\n  var value = getValue(object, key);                                                                                   // 1486\n  return baseIsNative(value) ? value : undefined;                                                                      // 1487\n}                                                                                                                      // 1488\n                                                                                                                       // 1489\n/**                                                                                                                    // 1490\n * Gets the `toStringTag` of `value`.                                                                                  // 1491\n *                                                                                                                     // 1492\n * @private                                                                                                            // 1493\n * @param {*} value The value to query.                                                                                // 1494\n * @returns {string} Returns the `toStringTag`.                                                                        // 1495\n */                                                                                                                    // 1496\nvar getTag = baseGetTag;                                                                                               // 1497\n                                                                                                                       // 1498\n// Fallback for data views, maps, sets, and weak maps in IE 11,                                                        // 1499\n// for data views in Edge < 14, and promises in Node.js.                                                               // 1500\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||                                           // 1501\n    (Map && getTag(new Map) != mapTag) ||                                                                              // 1502\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||                                                            // 1503\n    (Set && getTag(new Set) != setTag) ||                                                                              // 1504\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {                                                                  // 1505\n  getTag = function(value) {                                                                                           // 1506\n    var result = objectToString.call(value),                                                                           // 1507\n        Ctor = result == objectTag ? value.constructor : undefined,                                                    // 1508\n        ctorString = Ctor ? toSource(Ctor) : undefined;                                                                // 1509\n                                                                                                                       // 1510\n    if (ctorString) {                                                                                                  // 1511\n      switch (ctorString) {                                                                                            // 1512\n        case dataViewCtorString: return dataViewTag;                                                                   // 1513\n        case mapCtorString: return mapTag;                                                                             // 1514\n        case promiseCtorString: return promiseTag;                                                                     // 1515\n        case setCtorString: return setTag;                                                                             // 1516\n        case weakMapCtorString: return weakMapTag;                                                                     // 1517\n      }                                                                                                                // 1518\n    }                                                                                                                  // 1519\n    return result;                                                                                                     // 1520\n  };                                                                                                                   // 1521\n}                                                                                                                      // 1522\n                                                                                                                       // 1523\n/**                                                                                                                    // 1524\n * Checks if `path` exists on `object`.                                                                                // 1525\n *                                                                                                                     // 1526\n * @private                                                                                                            // 1527\n * @param {Object} object The object to query.                                                                         // 1528\n * @param {Array|string} path The path to check.                                                                       // 1529\n * @param {Function} hasFunc The function to check properties.                                                         // 1530\n * @returns {boolean} Returns `true` if `path` exists, else `false`.                                                   // 1531\n */                                                                                                                    // 1532\nfunction hasPath(object, path, hasFunc) {                                                                              // 1533\n  path = isKey(path, object) ? [path] : castPath(path);                                                                // 1534\n                                                                                                                       // 1535\n  var result,                                                                                                          // 1536\n      index = -1,                                                                                                      // 1537\n      length = path.length;                                                                                            // 1538\n                                                                                                                       // 1539\n  while (++index < length) {                                                                                           // 1540\n    var key = toKey(path[index]);                                                                                      // 1541\n    if (!(result = object != null && hasFunc(object, key))) {                                                          // 1542\n      break;                                                                                                           // 1543\n    }                                                                                                                  // 1544\n    object = object[key];                                                                                              // 1545\n  }                                                                                                                    // 1546\n  if (result) {                                                                                                        // 1547\n    return result;                                                                                                     // 1548\n  }                                                                                                                    // 1549\n  var length = object ? object.length : 0;                                                                             // 1550\n  return !!length && isLength(length) && isIndex(key, length) &&                                                       // 1551\n    (isArray(object) || isArguments(object));                                                                          // 1552\n}                                                                                                                      // 1553\n                                                                                                                       // 1554\n/**                                                                                                                    // 1555\n * Checks if `value` is a valid array-like index.                                                                      // 1556\n *                                                                                                                     // 1557\n * @private                                                                                                            // 1558\n * @param {*} value The value to check.                                                                                // 1559\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                        // 1560\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                        // 1561\n */                                                                                                                    // 1562\nfunction isIndex(value, length) {                                                                                      // 1563\n  length = length == null ? MAX_SAFE_INTEGER : length;                                                                 // 1564\n  return !!length &&                                                                                                   // 1565\n    (typeof value == 'number' || reIsUint.test(value)) &&                                                              // 1566\n    (value > -1 && value % 1 == 0 && value < length);                                                                  // 1567\n}                                                                                                                      // 1568\n                                                                                                                       // 1569\n/**                                                                                                                    // 1570\n * Checks if `value` is a property name and not a property path.                                                       // 1571\n *                                                                                                                     // 1572\n * @private                                                                                                            // 1573\n * @param {*} value The value to check.                                                                                // 1574\n * @param {Object} [object] The object to query keys on.                                                               // 1575\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.                                      // 1576\n */                                                                                                                    // 1577\nfunction isKey(value, object) {                                                                                        // 1578\n  if (isArray(value)) {                                                                                                // 1579\n    return false;                                                                                                      // 1580\n  }                                                                                                                    // 1581\n  var type = typeof value;                                                                                             // 1582\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||                                                     // 1583\n      value == null || isSymbol(value)) {                                                                              // 1584\n    return true;                                                                                                       // 1585\n  }                                                                                                                    // 1586\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||                                                     // 1587\n    (object != null && value in Object(object));                                                                       // 1588\n}                                                                                                                      // 1589\n                                                                                                                       // 1590\n/**                                                                                                                    // 1591\n * Checks if `value` is suitable for use as unique object key.                                                         // 1592\n *                                                                                                                     // 1593\n * @private                                                                                                            // 1594\n * @param {*} value The value to check.                                                                                // 1595\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.                                             // 1596\n */                                                                                                                    // 1597\nfunction isKeyable(value) {                                                                                            // 1598\n  var type = typeof value;                                                                                             // 1599\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')                               // 1600\n    ? (value !== '__proto__')                                                                                          // 1601\n    : (value === null);                                                                                                // 1602\n}                                                                                                                      // 1603\n                                                                                                                       // 1604\n/**                                                                                                                    // 1605\n * Checks if `func` has its source masked.                                                                             // 1606\n *                                                                                                                     // 1607\n * @private                                                                                                            // 1608\n * @param {Function} func The function to check.                                                                       // 1609\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.                                                // 1610\n */                                                                                                                    // 1611\nfunction isMasked(func) {                                                                                              // 1612\n  return !!maskSrcKey && (maskSrcKey in func);                                                                         // 1613\n}                                                                                                                      // 1614\n                                                                                                                       // 1615\n/**                                                                                                                    // 1616\n * Checks if `value` is likely a prototype object.                                                                     // 1617\n *                                                                                                                     // 1618\n * @private                                                                                                            // 1619\n * @param {*} value The value to check.                                                                                // 1620\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.                                          // 1621\n */                                                                                                                    // 1622\nfunction isPrototype(value) {                                                                                          // 1623\n  var Ctor = value && value.constructor,                                                                               // 1624\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;                                            // 1625\n                                                                                                                       // 1626\n  return value === proto;                                                                                              // 1627\n}                                                                                                                      // 1628\n                                                                                                                       // 1629\n/**                                                                                                                    // 1630\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.                                          // 1631\n *                                                                                                                     // 1632\n * @private                                                                                                            // 1633\n * @param {*} value The value to check.                                                                                // 1634\n * @returns {boolean} Returns `true` if `value` if suitable for strict                                                 // 1635\n *  equality comparisons, else `false`.                                                                                // 1636\n */                                                                                                                    // 1637\nfunction isStrictComparable(value) {                                                                                   // 1638\n  return value === value && !isObject(value);                                                                          // 1639\n}                                                                                                                      // 1640\n                                                                                                                       // 1641\n/**                                                                                                                    // 1642\n * A specialized version of `matchesProperty` for source values suitable                                               // 1643\n * for strict equality comparisons, i.e. `===`.                                                                        // 1644\n *                                                                                                                     // 1645\n * @private                                                                                                            // 1646\n * @param {string} key The key of the property to get.                                                                 // 1647\n * @param {*} srcValue The value to match.                                                                             // 1648\n * @returns {Function} Returns the new spec function.                                                                  // 1649\n */                                                                                                                    // 1650\nfunction matchesStrictComparable(key, srcValue) {                                                                      // 1651\n  return function(object) {                                                                                            // 1652\n    if (object == null) {                                                                                              // 1653\n      return false;                                                                                                    // 1654\n    }                                                                                                                  // 1655\n    return object[key] === srcValue &&                                                                                 // 1656\n      (srcValue !== undefined || (key in Object(object)));                                                             // 1657\n  };                                                                                                                   // 1658\n}                                                                                                                      // 1659\n                                                                                                                       // 1660\n/**                                                                                                                    // 1661\n * Converts `string` to a property path array.                                                                         // 1662\n *                                                                                                                     // 1663\n * @private                                                                                                            // 1664\n * @param {string} string The string to convert.                                                                       // 1665\n * @returns {Array} Returns the property path array.                                                                   // 1666\n */                                                                                                                    // 1667\nvar stringToPath = memoize(function(string) {                                                                          // 1668\n  string = toString(string);                                                                                           // 1669\n                                                                                                                       // 1670\n  var result = [];                                                                                                     // 1671\n  if (reLeadingDot.test(string)) {                                                                                     // 1672\n    result.push('');                                                                                                   // 1673\n  }                                                                                                                    // 1674\n  string.replace(rePropName, function(match, number, quote, string) {                                                  // 1675\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));                                       // 1676\n  });                                                                                                                  // 1677\n  return result;                                                                                                       // 1678\n});                                                                                                                    // 1679\n                                                                                                                       // 1680\n/**                                                                                                                    // 1681\n * Converts `value` to a string key if it's not a string or symbol.                                                    // 1682\n *                                                                                                                     // 1683\n * @private                                                                                                            // 1684\n * @param {*} value The value to inspect.                                                                              // 1685\n * @returns {string|symbol} Returns the key.                                                                           // 1686\n */                                                                                                                    // 1687\nfunction toKey(value) {                                                                                                // 1688\n  if (typeof value == 'string' || isSymbol(value)) {                                                                   // 1689\n    return value;                                                                                                      // 1690\n  }                                                                                                                    // 1691\n  var result = (value + '');                                                                                           // 1692\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;                                                  // 1693\n}                                                                                                                      // 1694\n                                                                                                                       // 1695\n/**                                                                                                                    // 1696\n * Converts `func` to its source code.                                                                                 // 1697\n *                                                                                                                     // 1698\n * @private                                                                                                            // 1699\n * @param {Function} func The function to process.                                                                     // 1700\n * @returns {string} Returns the source code.                                                                          // 1701\n */                                                                                                                    // 1702\nfunction toSource(func) {                                                                                              // 1703\n  if (func != null) {                                                                                                  // 1704\n    try {                                                                                                              // 1705\n      return funcToString.call(func);                                                                                  // 1706\n    } catch (e) {}                                                                                                     // 1707\n    try {                                                                                                              // 1708\n      return (func + '');                                                                                              // 1709\n    } catch (e) {}                                                                                                     // 1710\n  }                                                                                                                    // 1711\n  return '';                                                                                                           // 1712\n}                                                                                                                      // 1713\n                                                                                                                       // 1714\n/**                                                                                                                    // 1715\n * Creates a function that memoizes the result of `func`. If `resolver` is                                             // 1716\n * provided, it determines the cache key for storing the result based on the                                           // 1717\n * arguments provided to the memoized function. By default, the first argument                                         // 1718\n * provided to the memoized function is used as the map cache key. The `func`                                          // 1719\n * is invoked with the `this` binding of the memoized function.                                                        // 1720\n *                                                                                                                     // 1721\n * **Note:** The cache is exposed as the `cache` property on the memoized                                              // 1722\n * function. Its creation may be customized by replacing the `_.memoize.Cache`                                         // 1723\n * constructor with one whose instances implement the                                                                  // 1724\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)                     // 1725\n * method interface of `delete`, `get`, `has`, and `set`.                                                              // 1726\n *                                                                                                                     // 1727\n * @static                                                                                                             // 1728\n * @memberOf _                                                                                                         // 1729\n * @since 0.1.0                                                                                                        // 1730\n * @category Function                                                                                                  // 1731\n * @param {Function} func The function to have its output memoized.                                                    // 1732\n * @param {Function} [resolver] The function to resolve the cache key.                                                 // 1733\n * @returns {Function} Returns the new memoized function.                                                              // 1734\n * @example                                                                                                            // 1735\n *                                                                                                                     // 1736\n * var object = { 'a': 1, 'b': 2 };                                                                                    // 1737\n * var other = { 'c': 3, 'd': 4 };                                                                                     // 1738\n *                                                                                                                     // 1739\n * var values = _.memoize(_.values);                                                                                   // 1740\n * values(object);                                                                                                     // 1741\n * // => [1, 2]                                                                                                        // 1742\n *                                                                                                                     // 1743\n * values(other);                                                                                                      // 1744\n * // => [3, 4]                                                                                                        // 1745\n *                                                                                                                     // 1746\n * object.a = 2;                                                                                                       // 1747\n * values(object);                                                                                                     // 1748\n * // => [1, 2]                                                                                                        // 1749\n *                                                                                                                     // 1750\n * // Modify the result cache.                                                                                         // 1751\n * values.cache.set(object, ['a', 'b']);                                                                               // 1752\n * values(object);                                                                                                     // 1753\n * // => ['a', 'b']                                                                                                    // 1754\n *                                                                                                                     // 1755\n * // Replace `_.memoize.Cache`.                                                                                       // 1756\n * _.memoize.Cache = WeakMap;                                                                                          // 1757\n */                                                                                                                    // 1758\nfunction memoize(func, resolver) {                                                                                     // 1759\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {                                      // 1760\n    throw new TypeError(FUNC_ERROR_TEXT);                                                                              // 1761\n  }                                                                                                                    // 1762\n  var memoized = function() {                                                                                          // 1763\n    var args = arguments,                                                                                              // 1764\n        key = resolver ? resolver.apply(this, args) : args[0],                                                         // 1765\n        cache = memoized.cache;                                                                                        // 1766\n                                                                                                                       // 1767\n    if (cache.has(key)) {                                                                                              // 1768\n      return cache.get(key);                                                                                           // 1769\n    }                                                                                                                  // 1770\n    var result = func.apply(this, args);                                                                               // 1771\n    memoized.cache = cache.set(key, result);                                                                           // 1772\n    return result;                                                                                                     // 1773\n  };                                                                                                                   // 1774\n  memoized.cache = new (memoize.Cache || MapCache);                                                                    // 1775\n  return memoized;                                                                                                     // 1776\n}                                                                                                                      // 1777\n                                                                                                                       // 1778\n// Assign cache to `_.memoize`.                                                                                        // 1779\nmemoize.Cache = MapCache;                                                                                              // 1780\n                                                                                                                       // 1781\n/**                                                                                                                    // 1782\n * Performs a                                                                                                          // 1783\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)                                    // 1784\n * comparison between two values to determine if they are equivalent.                                                  // 1785\n *                                                                                                                     // 1786\n * @static                                                                                                             // 1787\n * @memberOf _                                                                                                         // 1788\n * @since 4.0.0                                                                                                        // 1789\n * @category Lang                                                                                                      // 1790\n * @param {*} value The value to compare.                                                                              // 1791\n * @param {*} other The other value to compare.                                                                        // 1792\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                       // 1793\n * @example                                                                                                            // 1794\n *                                                                                                                     // 1795\n * var object = { 'a': 1 };                                                                                            // 1796\n * var other = { 'a': 1 };                                                                                             // 1797\n *                                                                                                                     // 1798\n * _.eq(object, object);                                                                                               // 1799\n * // => true                                                                                                          // 1800\n *                                                                                                                     // 1801\n * _.eq(object, other);                                                                                                // 1802\n * // => false                                                                                                         // 1803\n *                                                                                                                     // 1804\n * _.eq('a', 'a');                                                                                                     // 1805\n * // => true                                                                                                          // 1806\n *                                                                                                                     // 1807\n * _.eq('a', Object('a'));                                                                                             // 1808\n * // => false                                                                                                         // 1809\n *                                                                                                                     // 1810\n * _.eq(NaN, NaN);                                                                                                     // 1811\n * // => true                                                                                                          // 1812\n */                                                                                                                    // 1813\nfunction eq(value, other) {                                                                                            // 1814\n  return value === other || (value !== value && other !== other);                                                      // 1815\n}                                                                                                                      // 1816\n                                                                                                                       // 1817\n/**                                                                                                                    // 1818\n * Checks if `value` is likely an `arguments` object.                                                                  // 1819\n *                                                                                                                     // 1820\n * @static                                                                                                             // 1821\n * @memberOf _                                                                                                         // 1822\n * @since 0.1.0                                                                                                        // 1823\n * @category Lang                                                                                                      // 1824\n * @param {*} value The value to check.                                                                                // 1825\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,                                              // 1826\n *  else `false`.                                                                                                      // 1827\n * @example                                                                                                            // 1828\n *                                                                                                                     // 1829\n * _.isArguments(function() { return arguments; }());                                                                  // 1830\n * // => true                                                                                                          // 1831\n *                                                                                                                     // 1832\n * _.isArguments([1, 2, 3]);                                                                                           // 1833\n * // => false                                                                                                         // 1834\n */                                                                                                                    // 1835\nfunction isArguments(value) {                                                                                          // 1836\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 1837\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&                                           // 1838\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);                            // 1839\n}                                                                                                                      // 1840\n                                                                                                                       // 1841\n/**                                                                                                                    // 1842\n * Checks if `value` is classified as an `Array` object.                                                               // 1843\n *                                                                                                                     // 1844\n * @static                                                                                                             // 1845\n * @memberOf _                                                                                                         // 1846\n * @since 0.1.0                                                                                                        // 1847\n * @category Lang                                                                                                      // 1848\n * @param {*} value The value to check.                                                                                // 1849\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.                                             // 1850\n * @example                                                                                                            // 1851\n *                                                                                                                     // 1852\n * _.isArray([1, 2, 3]);                                                                                               // 1853\n * // => true                                                                                                          // 1854\n *                                                                                                                     // 1855\n * _.isArray(document.body.children);                                                                                  // 1856\n * // => false                                                                                                         // 1857\n *                                                                                                                     // 1858\n * _.isArray('abc');                                                                                                   // 1859\n * // => false                                                                                                         // 1860\n *                                                                                                                     // 1861\n * _.isArray(_.noop);                                                                                                  // 1862\n * // => false                                                                                                         // 1863\n */                                                                                                                    // 1864\nvar isArray = Array.isArray;                                                                                           // 1865\n                                                                                                                       // 1866\n/**                                                                                                                    // 1867\n * Checks if `value` is array-like. A value is considered array-like if it's                                           // 1868\n * not a function and has a `value.length` that's an integer greater than or                                           // 1869\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.                                                   // 1870\n *                                                                                                                     // 1871\n * @static                                                                                                             // 1872\n * @memberOf _                                                                                                         // 1873\n * @since 4.0.0                                                                                                        // 1874\n * @category Lang                                                                                                      // 1875\n * @param {*} value The value to check.                                                                                // 1876\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                           // 1877\n * @example                                                                                                            // 1878\n *                                                                                                                     // 1879\n * _.isArrayLike([1, 2, 3]);                                                                                           // 1880\n * // => true                                                                                                          // 1881\n *                                                                                                                     // 1882\n * _.isArrayLike(document.body.children);                                                                              // 1883\n * // => true                                                                                                          // 1884\n *                                                                                                                     // 1885\n * _.isArrayLike('abc');                                                                                               // 1886\n * // => true                                                                                                          // 1887\n *                                                                                                                     // 1888\n * _.isArrayLike(_.noop);                                                                                              // 1889\n * // => false                                                                                                         // 1890\n */                                                                                                                    // 1891\nfunction isArrayLike(value) {                                                                                          // 1892\n  return value != null && isLength(value.length) && !isFunction(value);                                                // 1893\n}                                                                                                                      // 1894\n                                                                                                                       // 1895\n/**                                                                                                                    // 1896\n * This method is like `_.isArrayLike` except that it also checks if `value`                                           // 1897\n * is an object.                                                                                                       // 1898\n *                                                                                                                     // 1899\n * @static                                                                                                             // 1900\n * @memberOf _                                                                                                         // 1901\n * @since 4.0.0                                                                                                        // 1902\n * @category Lang                                                                                                      // 1903\n * @param {*} value The value to check.                                                                                // 1904\n * @returns {boolean} Returns `true` if `value` is an array-like object,                                               // 1905\n *  else `false`.                                                                                                      // 1906\n * @example                                                                                                            // 1907\n *                                                                                                                     // 1908\n * _.isArrayLikeObject([1, 2, 3]);                                                                                     // 1909\n * // => true                                                                                                          // 1910\n *                                                                                                                     // 1911\n * _.isArrayLikeObject(document.body.children);                                                                        // 1912\n * // => true                                                                                                          // 1913\n *                                                                                                                     // 1914\n * _.isArrayLikeObject('abc');                                                                                         // 1915\n * // => false                                                                                                         // 1916\n *                                                                                                                     // 1917\n * _.isArrayLikeObject(_.noop);                                                                                        // 1918\n * // => false                                                                                                         // 1919\n */                                                                                                                    // 1920\nfunction isArrayLikeObject(value) {                                                                                    // 1921\n  return isObjectLike(value) && isArrayLike(value);                                                                    // 1922\n}                                                                                                                      // 1923\n                                                                                                                       // 1924\n/**                                                                                                                    // 1925\n * Checks if `value` is classified as a `Function` object.                                                             // 1926\n *                                                                                                                     // 1927\n * @static                                                                                                             // 1928\n * @memberOf _                                                                                                         // 1929\n * @since 0.1.0                                                                                                        // 1930\n * @category Lang                                                                                                      // 1931\n * @param {*} value The value to check.                                                                                // 1932\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.                                           // 1933\n * @example                                                                                                            // 1934\n *                                                                                                                     // 1935\n * _.isFunction(_);                                                                                                    // 1936\n * // => true                                                                                                          // 1937\n *                                                                                                                     // 1938\n * _.isFunction(/abc/);                                                                                                // 1939\n * // => false                                                                                                         // 1940\n */                                                                                                                    // 1941\nfunction isFunction(value) {                                                                                           // 1942\n  // The use of `Object#toString` avoids issues with the `typeof` operator                                             // 1943\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.                                      // 1944\n  var tag = isObject(value) ? objectToString.call(value) : '';                                                         // 1945\n  return tag == funcTag || tag == genTag;                                                                              // 1946\n}                                                                                                                      // 1947\n                                                                                                                       // 1948\n/**                                                                                                                    // 1949\n * Checks if `value` is a valid array-like length.                                                                     // 1950\n *                                                                                                                     // 1951\n * **Note:** This method is loosely based on                                                                           // 1952\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).                                             // 1953\n *                                                                                                                     // 1954\n * @static                                                                                                             // 1955\n * @memberOf _                                                                                                         // 1956\n * @since 4.0.0                                                                                                        // 1957\n * @category Lang                                                                                                      // 1958\n * @param {*} value The value to check.                                                                                // 1959\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                       // 1960\n * @example                                                                                                            // 1961\n *                                                                                                                     // 1962\n * _.isLength(3);                                                                                                      // 1963\n * // => true                                                                                                          // 1964\n *                                                                                                                     // 1965\n * _.isLength(Number.MIN_VALUE);                                                                                       // 1966\n * // => false                                                                                                         // 1967\n *                                                                                                                     // 1968\n * _.isLength(Infinity);                                                                                               // 1969\n * // => false                                                                                                         // 1970\n *                                                                                                                     // 1971\n * _.isLength('3');                                                                                                    // 1972\n * // => false                                                                                                         // 1973\n */                                                                                                                    // 1974\nfunction isLength(value) {                                                                                             // 1975\n  return typeof value == 'number' &&                                                                                   // 1976\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                                                         // 1977\n}                                                                                                                      // 1978\n                                                                                                                       // 1979\n/**                                                                                                                    // 1980\n * Checks if `value` is the                                                                                            // 1981\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)                      // 1982\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                      // 1983\n *                                                                                                                     // 1984\n * @static                                                                                                             // 1985\n * @memberOf _                                                                                                         // 1986\n * @since 0.1.0                                                                                                        // 1987\n * @category Lang                                                                                                      // 1988\n * @param {*} value The value to check.                                                                                // 1989\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                            // 1990\n * @example                                                                                                            // 1991\n *                                                                                                                     // 1992\n * _.isObject({});                                                                                                     // 1993\n * // => true                                                                                                          // 1994\n *                                                                                                                     // 1995\n * _.isObject([1, 2, 3]);                                                                                              // 1996\n * // => true                                                                                                          // 1997\n *                                                                                                                     // 1998\n * _.isObject(_.noop);                                                                                                 // 1999\n * // => true                                                                                                          // 2000\n *                                                                                                                     // 2001\n * _.isObject(null);                                                                                                   // 2002\n * // => false                                                                                                         // 2003\n */                                                                                                                    // 2004\nfunction isObject(value) {                                                                                             // 2005\n  var type = typeof value;                                                                                             // 2006\n  return !!value && (type == 'object' || type == 'function');                                                          // 2007\n}                                                                                                                      // 2008\n                                                                                                                       // 2009\n/**                                                                                                                    // 2010\n * Checks if `value` is object-like. A value is object-like if it's not `null`                                         // 2011\n * and has a `typeof` result of \"object\".                                                                              // 2012\n *                                                                                                                     // 2013\n * @static                                                                                                             // 2014\n * @memberOf _                                                                                                         // 2015\n * @since 4.0.0                                                                                                        // 2016\n * @category Lang                                                                                                      // 2017\n * @param {*} value The value to check.                                                                                // 2018\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 2019\n * @example                                                                                                            // 2020\n *                                                                                                                     // 2021\n * _.isObjectLike({});                                                                                                 // 2022\n * // => true                                                                                                          // 2023\n *                                                                                                                     // 2024\n * _.isObjectLike([1, 2, 3]);                                                                                          // 2025\n * // => true                                                                                                          // 2026\n *                                                                                                                     // 2027\n * _.isObjectLike(_.noop);                                                                                             // 2028\n * // => false                                                                                                         // 2029\n *                                                                                                                     // 2030\n * _.isObjectLike(null);                                                                                               // 2031\n * // => false                                                                                                         // 2032\n */                                                                                                                    // 2033\nfunction isObjectLike(value) {                                                                                         // 2034\n  return !!value && typeof value == 'object';                                                                          // 2035\n}                                                                                                                      // 2036\n                                                                                                                       // 2037\n/**                                                                                                                    // 2038\n * Checks if `value` is classified as a `Symbol` primitive or object.                                                  // 2039\n *                                                                                                                     // 2040\n * @static                                                                                                             // 2041\n * @memberOf _                                                                                                         // 2042\n * @since 4.0.0                                                                                                        // 2043\n * @category Lang                                                                                                      // 2044\n * @param {*} value The value to check.                                                                                // 2045\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.                                             // 2046\n * @example                                                                                                            // 2047\n *                                                                                                                     // 2048\n * _.isSymbol(Symbol.iterator);                                                                                        // 2049\n * // => true                                                                                                          // 2050\n *                                                                                                                     // 2051\n * _.isSymbol('abc');                                                                                                  // 2052\n * // => false                                                                                                         // 2053\n */                                                                                                                    // 2054\nfunction isSymbol(value) {                                                                                             // 2055\n  return typeof value == 'symbol' ||                                                                                   // 2056\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);                                                  // 2057\n}                                                                                                                      // 2058\n                                                                                                                       // 2059\n/**                                                                                                                    // 2060\n * Checks if `value` is classified as a typed array.                                                                   // 2061\n *                                                                                                                     // 2062\n * @static                                                                                                             // 2063\n * @memberOf _                                                                                                         // 2064\n * @since 3.0.0                                                                                                        // 2065\n * @category Lang                                                                                                      // 2066\n * @param {*} value The value to check.                                                                                // 2067\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.                                        // 2068\n * @example                                                                                                            // 2069\n *                                                                                                                     // 2070\n * _.isTypedArray(new Uint8Array);                                                                                     // 2071\n * // => true                                                                                                          // 2072\n *                                                                                                                     // 2073\n * _.isTypedArray([]);                                                                                                 // 2074\n * // => false                                                                                                         // 2075\n */                                                                                                                    // 2076\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;                                  // 2077\n                                                                                                                       // 2078\n/**                                                                                                                    // 2079\n * Converts `value` to a string. An empty string is returned for `null`                                                // 2080\n * and `undefined` values. The sign of `-0` is preserved.                                                              // 2081\n *                                                                                                                     // 2082\n * @static                                                                                                             // 2083\n * @memberOf _                                                                                                         // 2084\n * @since 4.0.0                                                                                                        // 2085\n * @category Lang                                                                                                      // 2086\n * @param {*} value The value to process.                                                                              // 2087\n * @returns {string} Returns the string.                                                                               // 2088\n * @example                                                                                                            // 2089\n *                                                                                                                     // 2090\n * _.toString(null);                                                                                                   // 2091\n * // => ''                                                                                                            // 2092\n *                                                                                                                     // 2093\n * _.toString(-0);                                                                                                     // 2094\n * // => '-0'                                                                                                          // 2095\n *                                                                                                                     // 2096\n * _.toString([1, 2, 3]);                                                                                              // 2097\n * // => '1,2,3'                                                                                                       // 2098\n */                                                                                                                    // 2099\nfunction toString(value) {                                                                                             // 2100\n  return value == null ? '' : baseToString(value);                                                                     // 2101\n}                                                                                                                      // 2102\n                                                                                                                       // 2103\n/**                                                                                                                    // 2104\n * Gets the value at `path` of `object`. If the resolved value is                                                      // 2105\n * `undefined`, the `defaultValue` is returned in its place.                                                           // 2106\n *                                                                                                                     // 2107\n * @static                                                                                                             // 2108\n * @memberOf _                                                                                                         // 2109\n * @since 3.7.0                                                                                                        // 2110\n * @category Object                                                                                                    // 2111\n * @param {Object} object The object to query.                                                                         // 2112\n * @param {Array|string} path The path of the property to get.                                                         // 2113\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.                                       // 2114\n * @returns {*} Returns the resolved value.                                                                            // 2115\n * @example                                                                                                            // 2116\n *                                                                                                                     // 2117\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };                                                                        // 2118\n *                                                                                                                     // 2119\n * _.get(object, 'a[0].b.c');                                                                                          // 2120\n * // => 3                                                                                                             // 2121\n *                                                                                                                     // 2122\n * _.get(object, ['a', '0', 'b', 'c']);                                                                                // 2123\n * // => 3                                                                                                             // 2124\n *                                                                                                                     // 2125\n * _.get(object, 'a.b.c', 'default');                                                                                  // 2126\n * // => 'default'                                                                                                     // 2127\n */                                                                                                                    // 2128\nfunction get(object, path, defaultValue) {                                                                             // 2129\n  var result = object == null ? undefined : baseGet(object, path);                                                     // 2130\n  return result === undefined ? defaultValue : result;                                                                 // 2131\n}                                                                                                                      // 2132\n                                                                                                                       // 2133\n/**                                                                                                                    // 2134\n * Checks if `path` is a direct or inherited property of `object`.                                                     // 2135\n *                                                                                                                     // 2136\n * @static                                                                                                             // 2137\n * @memberOf _                                                                                                         // 2138\n * @since 4.0.0                                                                                                        // 2139\n * @category Object                                                                                                    // 2140\n * @param {Object} object The object to query.                                                                         // 2141\n * @param {Array|string} path The path to check.                                                                       // 2142\n * @returns {boolean} Returns `true` if `path` exists, else `false`.                                                   // 2143\n * @example                                                                                                            // 2144\n *                                                                                                                     // 2145\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });                                                               // 2146\n *                                                                                                                     // 2147\n * _.hasIn(object, 'a');                                                                                               // 2148\n * // => true                                                                                                          // 2149\n *                                                                                                                     // 2150\n * _.hasIn(object, 'a.b');                                                                                             // 2151\n * // => true                                                                                                          // 2152\n *                                                                                                                     // 2153\n * _.hasIn(object, ['a', 'b']);                                                                                        // 2154\n * // => true                                                                                                          // 2155\n *                                                                                                                     // 2156\n * _.hasIn(object, 'b');                                                                                               // 2157\n * // => false                                                                                                         // 2158\n */                                                                                                                    // 2159\nfunction hasIn(object, path) {                                                                                         // 2160\n  return object != null && hasPath(object, path, baseHasIn);                                                           // 2161\n}                                                                                                                      // 2162\n                                                                                                                       // 2163\n/**                                                                                                                    // 2164\n * Creates an array of the own enumerable property names of `object`.                                                  // 2165\n *                                                                                                                     // 2166\n * **Note:** Non-object values are coerced to objects. See the                                                         // 2167\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)                                              // 2168\n * for more details.                                                                                                   // 2169\n *                                                                                                                     // 2170\n * @static                                                                                                             // 2171\n * @since 0.1.0                                                                                                        // 2172\n * @memberOf _                                                                                                         // 2173\n * @category Object                                                                                                    // 2174\n * @param {Object} object The object to query.                                                                         // 2175\n * @returns {Array} Returns the array of property names.                                                               // 2176\n * @example                                                                                                            // 2177\n *                                                                                                                     // 2178\n * function Foo() {                                                                                                    // 2179\n *   this.a = 1;                                                                                                       // 2180\n *   this.b = 2;                                                                                                       // 2181\n * }                                                                                                                   // 2182\n *                                                                                                                     // 2183\n * Foo.prototype.c = 3;                                                                                                // 2184\n *                                                                                                                     // 2185\n * _.keys(new Foo);                                                                                                    // 2186\n * // => ['a', 'b'] (iteration order is not guaranteed)                                                                // 2187\n *                                                                                                                     // 2188\n * _.keys('hi');                                                                                                       // 2189\n * // => ['0', '1']                                                                                                    // 2190\n */                                                                                                                    // 2191\nfunction keys(object) {                                                                                                // 2192\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);                                               // 2193\n}                                                                                                                      // 2194\n                                                                                                                       // 2195\n/**                                                                                                                    // 2196\n * Creates an object with the same keys as `object` and values generated                                               // 2197\n * by running each own enumerable string keyed property of `object` thru                                               // 2198\n * `iteratee`. The iteratee is invoked with three arguments:                                                           // 2199\n * (value, key, object).                                                                                               // 2200\n *                                                                                                                     // 2201\n * @static                                                                                                             // 2202\n * @memberOf _                                                                                                         // 2203\n * @since 2.4.0                                                                                                        // 2204\n * @category Object                                                                                                    // 2205\n * @param {Object} object The object to iterate over.                                                                  // 2206\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                         // 2207\n * @returns {Object} Returns the new mapped object.                                                                    // 2208\n * @see _.mapKeys                                                                                                      // 2209\n * @example                                                                                                            // 2210\n *                                                                                                                     // 2211\n * var users = {                                                                                                       // 2212\n *   'fred':    { 'user': 'fred',    'age': 40 },                                                                      // 2213\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }                                                                        // 2214\n * };                                                                                                                  // 2215\n *                                                                                                                     // 2216\n * _.mapValues(users, function(o) { return o.age; });                                                                  // 2217\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)                                              // 2218\n *                                                                                                                     // 2219\n * // The `_.property` iteratee shorthand.                                                                             // 2220\n * _.mapValues(users, 'age');                                                                                          // 2221\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)                                              // 2222\n */                                                                                                                    // 2223\nfunction mapValues(object, iteratee) {                                                                                 // 2224\n  var result = {};                                                                                                     // 2225\n  iteratee = baseIteratee(iteratee, 3);                                                                                // 2226\n                                                                                                                       // 2227\n  baseForOwn(object, function(value, key, object) {                                                                    // 2228\n    result[key] = iteratee(value, key, object);                                                                        // 2229\n  });                                                                                                                  // 2230\n  return result;                                                                                                       // 2231\n}                                                                                                                      // 2232\n                                                                                                                       // 2233\n/**                                                                                                                    // 2234\n * This method returns the first argument it receives.                                                                 // 2235\n *                                                                                                                     // 2236\n * @static                                                                                                             // 2237\n * @since 0.1.0                                                                                                        // 2238\n * @memberOf _                                                                                                         // 2239\n * @category Util                                                                                                      // 2240\n * @param {*} value Any value.                                                                                         // 2241\n * @returns {*} Returns `value`.                                                                                       // 2242\n * @example                                                                                                            // 2243\n *                                                                                                                     // 2244\n * var object = { 'a': 1 };                                                                                            // 2245\n *                                                                                                                     // 2246\n * console.log(_.identity(object) === object);                                                                         // 2247\n * // => true                                                                                                          // 2248\n */                                                                                                                    // 2249\nfunction identity(value) {                                                                                             // 2250\n  return value;                                                                                                        // 2251\n}                                                                                                                      // 2252\n                                                                                                                       // 2253\n/**                                                                                                                    // 2254\n * Creates a function that returns the value at `path` of a given object.                                              // 2255\n *                                                                                                                     // 2256\n * @static                                                                                                             // 2257\n * @memberOf _                                                                                                         // 2258\n * @since 2.4.0                                                                                                        // 2259\n * @category Util                                                                                                      // 2260\n * @param {Array|string} path The path of the property to get.                                                         // 2261\n * @returns {Function} Returns the new accessor function.                                                              // 2262\n * @example                                                                                                            // 2263\n *                                                                                                                     // 2264\n * var objects = [                                                                                                     // 2265\n *   { 'a': { 'b': 2 } },                                                                                              // 2266\n *   { 'a': { 'b': 1 } }                                                                                               // 2267\n * ];                                                                                                                  // 2268\n *                                                                                                                     // 2269\n * _.map(objects, _.property('a.b'));                                                                                  // 2270\n * // => [2, 1]                                                                                                        // 2271\n *                                                                                                                     // 2272\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');                                                            // 2273\n * // => [1, 2]                                                                                                        // 2274\n */                                                                                                                    // 2275\nfunction property(path) {                                                                                              // 2276\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);                                             // 2277\n}                                                                                                                      // 2278\n                                                                                                                       // 2279\nmodule.exports = mapValues;                                                                                            // 2280\n                                                                                                                       // 2281\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"whatwg-fetch\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/whatwg-fetch/package.json                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"whatwg-fetch\";                                                                                         // 1\nexports.version = \"1.0.0\";                                                                                             // 2\nexports.main = \"fetch.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"fetch.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/whatwg-fetch/fetch.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n(function(self) {                                                                                                      // 1\n  'use strict';                                                                                                        // 2\n                                                                                                                       // 3\n  if (self.fetch) {                                                                                                    // 4\n    return                                                                                                             // 5\n  }                                                                                                                    // 6\n                                                                                                                       // 7\n  var support = {                                                                                                      // 8\n    searchParams: 'URLSearchParams' in self,                                                                           // 9\n    iterable: 'Symbol' in self && 'iterator' in Symbol,                                                                // 10\n    blob: 'FileReader' in self && 'Blob' in self && (function() {                                                      // 11\n      try {                                                                                                            // 12\n        new Blob()                                                                                                     // 13\n        return true                                                                                                    // 14\n      } catch(e) {                                                                                                     // 15\n        return false                                                                                                   // 16\n      }                                                                                                                // 17\n    })(),                                                                                                              // 18\n    formData: 'FormData' in self,                                                                                      // 19\n    arrayBuffer: 'ArrayBuffer' in self                                                                                 // 20\n  }                                                                                                                    // 21\n                                                                                                                       // 22\n  function normalizeName(name) {                                                                                       // 23\n    if (typeof name !== 'string') {                                                                                    // 24\n      name = String(name)                                                                                              // 25\n    }                                                                                                                  // 26\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {                                                                     // 27\n      throw new TypeError('Invalid character in header field name')                                                    // 28\n    }                                                                                                                  // 29\n    return name.toLowerCase()                                                                                          // 30\n  }                                                                                                                    // 31\n                                                                                                                       // 32\n  function normalizeValue(value) {                                                                                     // 33\n    if (typeof value !== 'string') {                                                                                   // 34\n      value = String(value)                                                                                            // 35\n    }                                                                                                                  // 36\n    return value                                                                                                       // 37\n  }                                                                                                                    // 38\n                                                                                                                       // 39\n  // Build a destructive iterator for the value list                                                                   // 40\n  function iteratorFor(items) {                                                                                        // 41\n    var iterator = {                                                                                                   // 42\n      next: function() {                                                                                               // 43\n        var value = items.shift()                                                                                      // 44\n        return {done: value === undefined, value: value}                                                               // 45\n      }                                                                                                                // 46\n    }                                                                                                                  // 47\n                                                                                                                       // 48\n    if (support.iterable) {                                                                                            // 49\n      iterator[Symbol.iterator] = function() {                                                                         // 50\n        return iterator                                                                                                // 51\n      }                                                                                                                // 52\n    }                                                                                                                  // 53\n                                                                                                                       // 54\n    return iterator                                                                                                    // 55\n  }                                                                                                                    // 56\n                                                                                                                       // 57\n  function Headers(headers) {                                                                                          // 58\n    this.map = {}                                                                                                      // 59\n                                                                                                                       // 60\n    if (headers instanceof Headers) {                                                                                  // 61\n      headers.forEach(function(value, name) {                                                                          // 62\n        this.append(name, value)                                                                                       // 63\n      }, this)                                                                                                         // 64\n                                                                                                                       // 65\n    } else if (headers) {                                                                                              // 66\n      Object.getOwnPropertyNames(headers).forEach(function(name) {                                                     // 67\n        this.append(name, headers[name])                                                                               // 68\n      }, this)                                                                                                         // 69\n    }                                                                                                                  // 70\n  }                                                                                                                    // 71\n                                                                                                                       // 72\n  Headers.prototype.append = function(name, value) {                                                                   // 73\n    name = normalizeName(name)                                                                                         // 74\n    value = normalizeValue(value)                                                                                      // 75\n    var list = this.map[name]                                                                                          // 76\n    if (!list) {                                                                                                       // 77\n      list = []                                                                                                        // 78\n      this.map[name] = list                                                                                            // 79\n    }                                                                                                                  // 80\n    list.push(value)                                                                                                   // 81\n  }                                                                                                                    // 82\n                                                                                                                       // 83\n  Headers.prototype['delete'] = function(name) {                                                                       // 84\n    delete this.map[normalizeName(name)]                                                                               // 85\n  }                                                                                                                    // 86\n                                                                                                                       // 87\n  Headers.prototype.get = function(name) {                                                                             // 88\n    var values = this.map[normalizeName(name)]                                                                         // 89\n    return values ? values[0] : null                                                                                   // 90\n  }                                                                                                                    // 91\n                                                                                                                       // 92\n  Headers.prototype.getAll = function(name) {                                                                          // 93\n    return this.map[normalizeName(name)] || []                                                                         // 94\n  }                                                                                                                    // 95\n                                                                                                                       // 96\n  Headers.prototype.has = function(name) {                                                                             // 97\n    return this.map.hasOwnProperty(normalizeName(name))                                                                // 98\n  }                                                                                                                    // 99\n                                                                                                                       // 100\n  Headers.prototype.set = function(name, value) {                                                                      // 101\n    this.map[normalizeName(name)] = [normalizeValue(value)]                                                            // 102\n  }                                                                                                                    // 103\n                                                                                                                       // 104\n  Headers.prototype.forEach = function(callback, thisArg) {                                                            // 105\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {                                                      // 106\n      this.map[name].forEach(function(value) {                                                                         // 107\n        callback.call(thisArg, value, name, this)                                                                      // 108\n      }, this)                                                                                                         // 109\n    }, this)                                                                                                           // 110\n  }                                                                                                                    // 111\n                                                                                                                       // 112\n  Headers.prototype.keys = function() {                                                                                // 113\n    var items = []                                                                                                     // 114\n    this.forEach(function(value, name) { items.push(name) })                                                           // 115\n    return iteratorFor(items)                                                                                          // 116\n  }                                                                                                                    // 117\n                                                                                                                       // 118\n  Headers.prototype.values = function() {                                                                              // 119\n    var items = []                                                                                                     // 120\n    this.forEach(function(value) { items.push(value) })                                                                // 121\n    return iteratorFor(items)                                                                                          // 122\n  }                                                                                                                    // 123\n                                                                                                                       // 124\n  Headers.prototype.entries = function() {                                                                             // 125\n    var items = []                                                                                                     // 126\n    this.forEach(function(value, name) { items.push([name, value]) })                                                  // 127\n    return iteratorFor(items)                                                                                          // 128\n  }                                                                                                                    // 129\n                                                                                                                       // 130\n  if (support.iterable) {                                                                                              // 131\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries                                                     // 132\n  }                                                                                                                    // 133\n                                                                                                                       // 134\n  function consumed(body) {                                                                                            // 135\n    if (body.bodyUsed) {                                                                                               // 136\n      return Promise.reject(new TypeError('Already read'))                                                             // 137\n    }                                                                                                                  // 138\n    body.bodyUsed = true                                                                                               // 139\n  }                                                                                                                    // 140\n                                                                                                                       // 141\n  function fileReaderReady(reader) {                                                                                   // 142\n    return new Promise(function(resolve, reject) {                                                                     // 143\n      reader.onload = function() {                                                                                     // 144\n        resolve(reader.result)                                                                                         // 145\n      }                                                                                                                // 146\n      reader.onerror = function() {                                                                                    // 147\n        reject(reader.error)                                                                                           // 148\n      }                                                                                                                // 149\n    })                                                                                                                 // 150\n  }                                                                                                                    // 151\n                                                                                                                       // 152\n  function readBlobAsArrayBuffer(blob) {                                                                               // 153\n    var reader = new FileReader()                                                                                      // 154\n    reader.readAsArrayBuffer(blob)                                                                                     // 155\n    return fileReaderReady(reader)                                                                                     // 156\n  }                                                                                                                    // 157\n                                                                                                                       // 158\n  function readBlobAsText(blob) {                                                                                      // 159\n    var reader = new FileReader()                                                                                      // 160\n    reader.readAsText(blob)                                                                                            // 161\n    return fileReaderReady(reader)                                                                                     // 162\n  }                                                                                                                    // 163\n                                                                                                                       // 164\n  function Body() {                                                                                                    // 165\n    this.bodyUsed = false                                                                                              // 166\n                                                                                                                       // 167\n    this._initBody = function(body) {                                                                                  // 168\n      this._bodyInit = body                                                                                            // 169\n      if (typeof body === 'string') {                                                                                  // 170\n        this._bodyText = body                                                                                          // 171\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {                                                 // 172\n        this._bodyBlob = body                                                                                          // 173\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {                                         // 174\n        this._bodyFormData = body                                                                                      // 175\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {                              // 176\n        this._bodyText = body.toString()                                                                               // 177\n      } else if (!body) {                                                                                              // 178\n        this._bodyText = ''                                                                                            // 179\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {                                   // 180\n        // Only support ArrayBuffers for POST method.                                                                  // 181\n        // Receiving ArrayBuffers happens via Blobs, instead.                                                          // 182\n      } else {                                                                                                         // 183\n        throw new Error('unsupported BodyInit type')                                                                   // 184\n      }                                                                                                                // 185\n                                                                                                                       // 186\n      if (!this.headers.get('content-type')) {                                                                         // 187\n        if (typeof body === 'string') {                                                                                // 188\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')                                                 // 189\n        } else if (this._bodyBlob && this._bodyBlob.type) {                                                            // 190\n          this.headers.set('content-type', this._bodyBlob.type)                                                        // 191\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {                            // 192\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')                          // 193\n        }                                                                                                              // 194\n      }                                                                                                                // 195\n    }                                                                                                                  // 196\n                                                                                                                       // 197\n    if (support.blob) {                                                                                                // 198\n      this.blob = function() {                                                                                         // 199\n        var rejected = consumed(this)                                                                                  // 200\n        if (rejected) {                                                                                                // 201\n          return rejected                                                                                              // 202\n        }                                                                                                              // 203\n                                                                                                                       // 204\n        if (this._bodyBlob) {                                                                                          // 205\n          return Promise.resolve(this._bodyBlob)                                                                       // 206\n        } else if (this._bodyFormData) {                                                                               // 207\n          throw new Error('could not read FormData body as blob')                                                      // 208\n        } else {                                                                                                       // 209\n          return Promise.resolve(new Blob([this._bodyText]))                                                           // 210\n        }                                                                                                              // 211\n      }                                                                                                                // 212\n                                                                                                                       // 213\n      this.arrayBuffer = function() {                                                                                  // 214\n        return this.blob().then(readBlobAsArrayBuffer)                                                                 // 215\n      }                                                                                                                // 216\n                                                                                                                       // 217\n      this.text = function() {                                                                                         // 218\n        var rejected = consumed(this)                                                                                  // 219\n        if (rejected) {                                                                                                // 220\n          return rejected                                                                                              // 221\n        }                                                                                                              // 222\n                                                                                                                       // 223\n        if (this._bodyBlob) {                                                                                          // 224\n          return readBlobAsText(this._bodyBlob)                                                                        // 225\n        } else if (this._bodyFormData) {                                                                               // 226\n          throw new Error('could not read FormData body as text')                                                      // 227\n        } else {                                                                                                       // 228\n          return Promise.resolve(this._bodyText)                                                                       // 229\n        }                                                                                                              // 230\n      }                                                                                                                // 231\n    } else {                                                                                                           // 232\n      this.text = function() {                                                                                         // 233\n        var rejected = consumed(this)                                                                                  // 234\n        return rejected ? rejected : Promise.resolve(this._bodyText)                                                   // 235\n      }                                                                                                                // 236\n    }                                                                                                                  // 237\n                                                                                                                       // 238\n    if (support.formData) {                                                                                            // 239\n      this.formData = function() {                                                                                     // 240\n        return this.text().then(decode)                                                                                // 241\n      }                                                                                                                // 242\n    }                                                                                                                  // 243\n                                                                                                                       // 244\n    this.json = function() {                                                                                           // 245\n      return this.text().then(JSON.parse)                                                                              // 246\n    }                                                                                                                  // 247\n                                                                                                                       // 248\n    return this                                                                                                        // 249\n  }                                                                                                                    // 250\n                                                                                                                       // 251\n  // HTTP methods whose capitalization should be normalized                                                            // 252\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']                                                    // 253\n                                                                                                                       // 254\n  function normalizeMethod(method) {                                                                                   // 255\n    var upcased = method.toUpperCase()                                                                                 // 256\n    return (methods.indexOf(upcased) > -1) ? upcased : method                                                          // 257\n  }                                                                                                                    // 258\n                                                                                                                       // 259\n  function Request(input, options) {                                                                                   // 260\n    options = options || {}                                                                                            // 261\n    var body = options.body                                                                                            // 262\n    if (Request.prototype.isPrototypeOf(input)) {                                                                      // 263\n      if (input.bodyUsed) {                                                                                            // 264\n        throw new TypeError('Already read')                                                                            // 265\n      }                                                                                                                // 266\n      this.url = input.url                                                                                             // 267\n      this.credentials = input.credentials                                                                             // 268\n      if (!options.headers) {                                                                                          // 269\n        this.headers = new Headers(input.headers)                                                                      // 270\n      }                                                                                                                // 271\n      this.method = input.method                                                                                       // 272\n      this.mode = input.mode                                                                                           // 273\n      if (!body) {                                                                                                     // 274\n        body = input._bodyInit                                                                                         // 275\n        input.bodyUsed = true                                                                                          // 276\n      }                                                                                                                // 277\n    } else {                                                                                                           // 278\n      this.url = input                                                                                                 // 279\n    }                                                                                                                  // 280\n                                                                                                                       // 281\n    this.credentials = options.credentials || this.credentials || 'omit'                                               // 282\n    if (options.headers || !this.headers) {                                                                            // 283\n      this.headers = new Headers(options.headers)                                                                      // 284\n    }                                                                                                                  // 285\n    this.method = normalizeMethod(options.method || this.method || 'GET')                                              // 286\n    this.mode = options.mode || this.mode || null                                                                      // 287\n    this.referrer = null                                                                                               // 288\n                                                                                                                       // 289\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {                                                   // 290\n      throw new TypeError('Body not allowed for GET or HEAD requests')                                                 // 291\n    }                                                                                                                  // 292\n    this._initBody(body)                                                                                               // 293\n  }                                                                                                                    // 294\n                                                                                                                       // 295\n  Request.prototype.clone = function() {                                                                               // 296\n    return new Request(this)                                                                                           // 297\n  }                                                                                                                    // 298\n                                                                                                                       // 299\n  function decode(body) {                                                                                              // 300\n    var form = new FormData()                                                                                          // 301\n    body.trim().split('&').forEach(function(bytes) {                                                                   // 302\n      if (bytes) {                                                                                                     // 303\n        var split = bytes.split('=')                                                                                   // 304\n        var name = split.shift().replace(/\\+/g, ' ')                                                                   // 305\n        var value = split.join('=').replace(/\\+/g, ' ')                                                                // 306\n        form.append(decodeURIComponent(name), decodeURIComponent(value))                                               // 307\n      }                                                                                                                // 308\n    })                                                                                                                 // 309\n    return form                                                                                                        // 310\n  }                                                                                                                    // 311\n                                                                                                                       // 312\n  function headers(xhr) {                                                                                              // 313\n    var head = new Headers()                                                                                           // 314\n    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')                                                 // 315\n    pairs.forEach(function(header) {                                                                                   // 316\n      var split = header.trim().split(':')                                                                             // 317\n      var key = split.shift().trim()                                                                                   // 318\n      var value = split.join(':').trim()                                                                               // 319\n      head.append(key, value)                                                                                          // 320\n    })                                                                                                                 // 321\n    return head                                                                                                        // 322\n  }                                                                                                                    // 323\n                                                                                                                       // 324\n  Body.call(Request.prototype)                                                                                         // 325\n                                                                                                                       // 326\n  function Response(bodyInit, options) {                                                                               // 327\n    if (!options) {                                                                                                    // 328\n      options = {}                                                                                                     // 329\n    }                                                                                                                  // 330\n                                                                                                                       // 331\n    this.type = 'default'                                                                                              // 332\n    this.status = options.status                                                                                       // 333\n    this.ok = this.status >= 200 && this.status < 300                                                                  // 334\n    this.statusText = options.statusText                                                                               // 335\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)                 // 336\n    this.url = options.url || ''                                                                                       // 337\n    this._initBody(bodyInit)                                                                                           // 338\n  }                                                                                                                    // 339\n                                                                                                                       // 340\n  Body.call(Response.prototype)                                                                                        // 341\n                                                                                                                       // 342\n  Response.prototype.clone = function() {                                                                              // 343\n    return new Response(this._bodyInit, {                                                                              // 344\n      status: this.status,                                                                                             // 345\n      statusText: this.statusText,                                                                                     // 346\n      headers: new Headers(this.headers),                                                                              // 347\n      url: this.url                                                                                                    // 348\n    })                                                                                                                 // 349\n  }                                                                                                                    // 350\n                                                                                                                       // 351\n  Response.error = function() {                                                                                        // 352\n    var response = new Response(null, {status: 0, statusText: ''})                                                     // 353\n    response.type = 'error'                                                                                            // 354\n    return response                                                                                                    // 355\n  }                                                                                                                    // 356\n                                                                                                                       // 357\n  var redirectStatuses = [301, 302, 303, 307, 308]                                                                     // 358\n                                                                                                                       // 359\n  Response.redirect = function(url, status) {                                                                          // 360\n    if (redirectStatuses.indexOf(status) === -1) {                                                                     // 361\n      throw new RangeError('Invalid status code')                                                                      // 362\n    }                                                                                                                  // 363\n                                                                                                                       // 364\n    return new Response(null, {status: status, headers: {location: url}})                                              // 365\n  }                                                                                                                    // 366\n                                                                                                                       // 367\n  self.Headers = Headers                                                                                               // 368\n  self.Request = Request                                                                                               // 369\n  self.Response = Response                                                                                             // 370\n                                                                                                                       // 371\n  self.fetch = function(input, init) {                                                                                 // 372\n    return new Promise(function(resolve, reject) {                                                                     // 373\n      var request                                                                                                      // 374\n      if (Request.prototype.isPrototypeOf(input) && !init) {                                                           // 375\n        request = input                                                                                                // 376\n      } else {                                                                                                         // 377\n        request = new Request(input, init)                                                                             // 378\n      }                                                                                                                // 379\n                                                                                                                       // 380\n      var xhr = new XMLHttpRequest()                                                                                   // 381\n                                                                                                                       // 382\n      function responseURL() {                                                                                         // 383\n        if ('responseURL' in xhr) {                                                                                    // 384\n          return xhr.responseURL                                                                                       // 385\n        }                                                                                                              // 386\n                                                                                                                       // 387\n        // Avoid security warnings on getResponseHeader when not allowed by CORS                                       // 388\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {                                                    // 389\n          return xhr.getResponseHeader('X-Request-URL')                                                                // 390\n        }                                                                                                              // 391\n                                                                                                                       // 392\n        return                                                                                                         // 393\n      }                                                                                                                // 394\n                                                                                                                       // 395\n      xhr.onload = function() {                                                                                        // 396\n        var options = {                                                                                                // 397\n          status: xhr.status,                                                                                          // 398\n          statusText: xhr.statusText,                                                                                  // 399\n          headers: headers(xhr),                                                                                       // 400\n          url: responseURL()                                                                                           // 401\n        }                                                                                                              // 402\n        var body = 'response' in xhr ? xhr.response : xhr.responseText                                                 // 403\n        resolve(new Response(body, options))                                                                           // 404\n      }                                                                                                                // 405\n                                                                                                                       // 406\n      xhr.onerror = function() {                                                                                       // 407\n        reject(new TypeError('Network request failed'))                                                                // 408\n      }                                                                                                                // 409\n                                                                                                                       // 410\n      xhr.ontimeout = function() {                                                                                     // 411\n        reject(new TypeError('Network request failed'))                                                                // 412\n      }                                                                                                                // 413\n                                                                                                                       // 414\n      xhr.open(request.method, request.url, true)                                                                      // 415\n                                                                                                                       // 416\n      if (request.credentials === 'include') {                                                                         // 417\n        xhr.withCredentials = true                                                                                     // 418\n      }                                                                                                                // 419\n                                                                                                                       // 420\n      if ('responseType' in xhr && support.blob) {                                                                     // 421\n        xhr.responseType = 'blob'                                                                                      // 422\n      }                                                                                                                // 423\n                                                                                                                       // 424\n      request.headers.forEach(function(value, name) {                                                                  // 425\n        xhr.setRequestHeader(name, value)                                                                              // 426\n      })                                                                                                               // 427\n                                                                                                                       // 428\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)                                    // 429\n    })                                                                                                                 // 430\n  }                                                                                                                    // 431\n  self.fetch.polyfill = true                                                                                           // 432\n})(typeof self !== 'undefined' ? self : this);                                                                         // 433\n                                                                                                                       // 434\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.countby\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.countby/package.json                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.countby\";                                                                                       // 1\nexports.version = \"4.6.0\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.countby/index.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash (Custom Build) <https://lodash.com/>                                                                         // 2\n * Build: `lodash modularize exports=\"npm\" -o ./`                                                                      // 3\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>                                            // 4\n * Released under MIT license <https://lodash.com/license>                                                             // 5\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                                      // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/** Used as the size to enable large array optimizations. */                                                           // 10\nvar LARGE_ARRAY_SIZE = 200;                                                                                            // 11\n                                                                                                                       // 12\n/** Used as the `TypeError` message for \"Functions\" methods. */                                                        // 13\nvar FUNC_ERROR_TEXT = 'Expected a function';                                                                           // 14\n                                                                                                                       // 15\n/** Used to stand-in for `undefined` hash values. */                                                                   // 16\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';                                                                      // 17\n                                                                                                                       // 18\n/** Used to compose bitmasks for comparison styles. */                                                                 // 19\nvar UNORDERED_COMPARE_FLAG = 1,                                                                                        // 20\n    PARTIAL_COMPARE_FLAG = 2;                                                                                          // 21\n                                                                                                                       // 22\n/** Used as references for various `Number` constants. */                                                              // 23\nvar INFINITY = 1 / 0,                                                                                                  // 24\n    MAX_SAFE_INTEGER = 9007199254740991;                                                                               // 25\n                                                                                                                       // 26\n/** `Object#toString` result references. */                                                                            // 27\nvar argsTag = '[object Arguments]',                                                                                    // 28\n    arrayTag = '[object Array]',                                                                                       // 29\n    boolTag = '[object Boolean]',                                                                                      // 30\n    dateTag = '[object Date]',                                                                                         // 31\n    errorTag = '[object Error]',                                                                                       // 32\n    funcTag = '[object Function]',                                                                                     // 33\n    genTag = '[object GeneratorFunction]',                                                                             // 34\n    mapTag = '[object Map]',                                                                                           // 35\n    numberTag = '[object Number]',                                                                                     // 36\n    objectTag = '[object Object]',                                                                                     // 37\n    promiseTag = '[object Promise]',                                                                                   // 38\n    regexpTag = '[object RegExp]',                                                                                     // 39\n    setTag = '[object Set]',                                                                                           // 40\n    stringTag = '[object String]',                                                                                     // 41\n    symbolTag = '[object Symbol]',                                                                                     // 42\n    weakMapTag = '[object WeakMap]';                                                                                   // 43\n                                                                                                                       // 44\nvar arrayBufferTag = '[object ArrayBuffer]',                                                                           // 45\n    dataViewTag = '[object DataView]',                                                                                 // 46\n    float32Tag = '[object Float32Array]',                                                                              // 47\n    float64Tag = '[object Float64Array]',                                                                              // 48\n    int8Tag = '[object Int8Array]',                                                                                    // 49\n    int16Tag = '[object Int16Array]',                                                                                  // 50\n    int32Tag = '[object Int32Array]',                                                                                  // 51\n    uint8Tag = '[object Uint8Array]',                                                                                  // 52\n    uint8ClampedTag = '[object Uint8ClampedArray]',                                                                    // 53\n    uint16Tag = '[object Uint16Array]',                                                                                // 54\n    uint32Tag = '[object Uint32Array]';                                                                                // 55\n                                                                                                                       // 56\n/** Used to match property names within property paths. */                                                             // 57\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,                                                 // 58\n    reIsPlainProp = /^\\w*$/,                                                                                           // 59\n    reLeadingDot = /^\\./,                                                                                              // 60\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;   // 61\n                                                                                                                       // 62\n/**                                                                                                                    // 63\n * Used to match `RegExp`                                                                                              // 64\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).                                      // 65\n */                                                                                                                    // 66\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;                                                                              // 67\n                                                                                                                       // 68\n/** Used to match backslashes in property paths. */                                                                    // 69\nvar reEscapeChar = /\\\\(\\\\)?/g;                                                                                         // 70\n                                                                                                                       // 71\n/** Used to detect host constructors (Safari). */                                                                      // 72\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;                                                                      // 73\n                                                                                                                       // 74\n/** Used to detect unsigned integer values. */                                                                         // 75\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;                                                                                     // 76\n                                                                                                                       // 77\n/** Used to identify `toStringTag` values of typed arrays. */                                                          // 78\nvar typedArrayTags = {};                                                                                               // 79\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =                                                              // 80\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =                                                                   // 81\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =                                                                  // 82\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =                                                          // 83\ntypedArrayTags[uint32Tag] = true;                                                                                      // 84\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =                                                                   // 85\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =                                                             // 86\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =                                                                // 87\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =                                                                   // 88\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =                                                                   // 89\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =                                                                // 90\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =                                                                   // 91\ntypedArrayTags[weakMapTag] = false;                                                                                    // 92\n                                                                                                                       // 93\n/** Detect free variable `global` from Node.js. */                                                                     // 94\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;                            // 95\n                                                                                                                       // 96\n/** Detect free variable `self`. */                                                                                    // 97\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;                                      // 98\n                                                                                                                       // 99\n/** Used as a reference to the global object. */                                                                       // 100\nvar root = freeGlobal || freeSelf || Function('return this')();                                                        // 101\n                                                                                                                       // 102\n/** Detect free variable `exports`. */                                                                                 // 103\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;                               // 104\n                                                                                                                       // 105\n/** Detect free variable `module`. */                                                                                  // 106\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;                     // 107\n                                                                                                                       // 108\n/** Detect the popular CommonJS extension `module.exports`. */                                                         // 109\nvar moduleExports = freeModule && freeModule.exports === freeExports;                                                  // 110\n                                                                                                                       // 111\n/** Detect free variable `process` from Node.js. */                                                                    // 112\nvar freeProcess = moduleExports && freeGlobal.process;                                                                 // 113\n                                                                                                                       // 114\n/** Used to access faster Node.js helpers. */                                                                          // 115\nvar nodeUtil = (function() {                                                                                           // 116\n  try {                                                                                                                // 117\n    return freeProcess && freeProcess.binding('util');                                                                 // 118\n  } catch (e) {}                                                                                                       // 119\n}());                                                                                                                  // 120\n                                                                                                                       // 121\n/* Node.js helper references. */                                                                                       // 122\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;                                                              // 123\n                                                                                                                       // 124\n/**                                                                                                                    // 125\n * A specialized version of `baseAggregator` for arrays.                                                               // 126\n *                                                                                                                     // 127\n * @private                                                                                                            // 128\n * @param {Array} [array] The array to iterate over.                                                                   // 129\n * @param {Function} setter The function to set `accumulator` values.                                                  // 130\n * @param {Function} iteratee The iteratee to transform keys.                                                          // 131\n * @param {Object} accumulator The initial aggregated object.                                                          // 132\n * @returns {Function} Returns `accumulator`.                                                                          // 133\n */                                                                                                                    // 134\nfunction arrayAggregator(array, setter, iteratee, accumulator) {                                                       // 135\n  var index = -1,                                                                                                      // 136\n      length = array ? array.length : 0;                                                                               // 137\n                                                                                                                       // 138\n  while (++index < length) {                                                                                           // 139\n    var value = array[index];                                                                                          // 140\n    setter(accumulator, value, iteratee(value), array);                                                                // 141\n  }                                                                                                                    // 142\n  return accumulator;                                                                                                  // 143\n}                                                                                                                      // 144\n                                                                                                                       // 145\n/**                                                                                                                    // 146\n * A specialized version of `_.some` for arrays without support for iteratee                                           // 147\n * shorthands.                                                                                                         // 148\n *                                                                                                                     // 149\n * @private                                                                                                            // 150\n * @param {Array} [array] The array to iterate over.                                                                   // 151\n * @param {Function} predicate The function invoked per iteration.                                                     // 152\n * @returns {boolean} Returns `true` if any element passes the predicate check,                                        // 153\n *  else `false`.                                                                                                      // 154\n */                                                                                                                    // 155\nfunction arraySome(array, predicate) {                                                                                 // 156\n  var index = -1,                                                                                                      // 157\n      length = array ? array.length : 0;                                                                               // 158\n                                                                                                                       // 159\n  while (++index < length) {                                                                                           // 160\n    if (predicate(array[index], index, array)) {                                                                       // 161\n      return true;                                                                                                     // 162\n    }                                                                                                                  // 163\n  }                                                                                                                    // 164\n  return false;                                                                                                        // 165\n}                                                                                                                      // 166\n                                                                                                                       // 167\n/**                                                                                                                    // 168\n * The base implementation of `_.property` without support for deep paths.                                             // 169\n *                                                                                                                     // 170\n * @private                                                                                                            // 171\n * @param {string} key The key of the property to get.                                                                 // 172\n * @returns {Function} Returns the new accessor function.                                                              // 173\n */                                                                                                                    // 174\nfunction baseProperty(key) {                                                                                           // 175\n  return function(object) {                                                                                            // 176\n    return object == null ? undefined : object[key];                                                                   // 177\n  };                                                                                                                   // 178\n}                                                                                                                      // 179\n                                                                                                                       // 180\n/**                                                                                                                    // 181\n * The base implementation of `_.times` without support for iteratee shorthands                                        // 182\n * or max array length checks.                                                                                         // 183\n *                                                                                                                     // 184\n * @private                                                                                                            // 185\n * @param {number} n The number of times to invoke `iteratee`.                                                         // 186\n * @param {Function} iteratee The function invoked per iteration.                                                      // 187\n * @returns {Array} Returns the array of results.                                                                      // 188\n */                                                                                                                    // 189\nfunction baseTimes(n, iteratee) {                                                                                      // 190\n  var index = -1,                                                                                                      // 191\n      result = Array(n);                                                                                               // 192\n                                                                                                                       // 193\n  while (++index < n) {                                                                                                // 194\n    result[index] = iteratee(index);                                                                                   // 195\n  }                                                                                                                    // 196\n  return result;                                                                                                       // 197\n}                                                                                                                      // 198\n                                                                                                                       // 199\n/**                                                                                                                    // 200\n * The base implementation of `_.unary` without support for storing metadata.                                          // 201\n *                                                                                                                     // 202\n * @private                                                                                                            // 203\n * @param {Function} func The function to cap arguments for.                                                           // 204\n * @returns {Function} Returns the new capped function.                                                                // 205\n */                                                                                                                    // 206\nfunction baseUnary(func) {                                                                                             // 207\n  return function(value) {                                                                                             // 208\n    return func(value);                                                                                                // 209\n  };                                                                                                                   // 210\n}                                                                                                                      // 211\n                                                                                                                       // 212\n/**                                                                                                                    // 213\n * Gets the value at `key` of `object`.                                                                                // 214\n *                                                                                                                     // 215\n * @private                                                                                                            // 216\n * @param {Object} [object] The object to query.                                                                       // 217\n * @param {string} key The key of the property to get.                                                                 // 218\n * @returns {*} Returns the property value.                                                                            // 219\n */                                                                                                                    // 220\nfunction getValue(object, key) {                                                                                       // 221\n  return object == null ? undefined : object[key];                                                                     // 222\n}                                                                                                                      // 223\n                                                                                                                       // 224\n/**                                                                                                                    // 225\n * Checks if `value` is a host object in IE < 9.                                                                       // 226\n *                                                                                                                     // 227\n * @private                                                                                                            // 228\n * @param {*} value The value to check.                                                                                // 229\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.                                        // 230\n */                                                                                                                    // 231\nfunction isHostObject(value) {                                                                                         // 232\n  // Many host objects are `Object` objects that can coerce to strings                                                 // 233\n  // despite having improperly defined `toString` methods.                                                             // 234\n  var result = false;                                                                                                  // 235\n  if (value != null && typeof value.toString != 'function') {                                                          // 236\n    try {                                                                                                              // 237\n      result = !!(value + '');                                                                                         // 238\n    } catch (e) {}                                                                                                     // 239\n  }                                                                                                                    // 240\n  return result;                                                                                                       // 241\n}                                                                                                                      // 242\n                                                                                                                       // 243\n/**                                                                                                                    // 244\n * Converts `map` to its key-value pairs.                                                                              // 245\n *                                                                                                                     // 246\n * @private                                                                                                            // 247\n * @param {Object} map The map to convert.                                                                             // 248\n * @returns {Array} Returns the key-value pairs.                                                                       // 249\n */                                                                                                                    // 250\nfunction mapToArray(map) {                                                                                             // 251\n  var index = -1,                                                                                                      // 252\n      result = Array(map.size);                                                                                        // 253\n                                                                                                                       // 254\n  map.forEach(function(value, key) {                                                                                   // 255\n    result[++index] = [key, value];                                                                                    // 256\n  });                                                                                                                  // 257\n  return result;                                                                                                       // 258\n}                                                                                                                      // 259\n                                                                                                                       // 260\n/**                                                                                                                    // 261\n * Creates a unary function that invokes `func` with its argument transformed.                                         // 262\n *                                                                                                                     // 263\n * @private                                                                                                            // 264\n * @param {Function} func The function to wrap.                                                                        // 265\n * @param {Function} transform The argument transform.                                                                 // 266\n * @returns {Function} Returns the new function.                                                                       // 267\n */                                                                                                                    // 268\nfunction overArg(func, transform) {                                                                                    // 269\n  return function(arg) {                                                                                               // 270\n    return func(transform(arg));                                                                                       // 271\n  };                                                                                                                   // 272\n}                                                                                                                      // 273\n                                                                                                                       // 274\n/**                                                                                                                    // 275\n * Converts `set` to an array of its values.                                                                           // 276\n *                                                                                                                     // 277\n * @private                                                                                                            // 278\n * @param {Object} set The set to convert.                                                                             // 279\n * @returns {Array} Returns the values.                                                                                // 280\n */                                                                                                                    // 281\nfunction setToArray(set) {                                                                                             // 282\n  var index = -1,                                                                                                      // 283\n      result = Array(set.size);                                                                                        // 284\n                                                                                                                       // 285\n  set.forEach(function(value) {                                                                                        // 286\n    result[++index] = value;                                                                                           // 287\n  });                                                                                                                  // 288\n  return result;                                                                                                       // 289\n}                                                                                                                      // 290\n                                                                                                                       // 291\n/** Used for built-in method references. */                                                                            // 292\nvar arrayProto = Array.prototype,                                                                                      // 293\n    funcProto = Function.prototype,                                                                                    // 294\n    objectProto = Object.prototype;                                                                                    // 295\n                                                                                                                       // 296\n/** Used to detect overreaching core-js shims. */                                                                      // 297\nvar coreJsData = root['__core-js_shared__'];                                                                           // 298\n                                                                                                                       // 299\n/** Used to detect methods masquerading as native. */                                                                  // 300\nvar maskSrcKey = (function() {                                                                                         // 301\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');                            // 302\n  return uid ? ('Symbol(src)_1.' + uid) : '';                                                                          // 303\n}());                                                                                                                  // 304\n                                                                                                                       // 305\n/** Used to resolve the decompiled source of functions. */                                                             // 306\nvar funcToString = funcProto.toString;                                                                                 // 307\n                                                                                                                       // 308\n/** Used to check objects for own properties. */                                                                       // 309\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 310\n                                                                                                                       // 311\n/**                                                                                                                    // 312\n * Used to resolve the                                                                                                 // 313\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)                          // 314\n * of values.                                                                                                          // 315\n */                                                                                                                    // 316\nvar objectToString = objectProto.toString;                                                                             // 317\n                                                                                                                       // 318\n/** Used to detect if a method is native. */                                                                           // 319\nvar reIsNative = RegExp('^' +                                                                                          // 320\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')                                                      // 321\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'                                    // 322\n);                                                                                                                     // 323\n                                                                                                                       // 324\n/** Built-in value references. */                                                                                      // 325\nvar Symbol = root.Symbol,                                                                                              // 326\n    Uint8Array = root.Uint8Array,                                                                                      // 327\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,                                                           // 328\n    splice = arrayProto.splice;                                                                                        // 329\n                                                                                                                       // 330\n/* Built-in method references for those with the same name as other `lodash` methods. */                               // 331\nvar nativeKeys = overArg(Object.keys, Object);                                                                         // 332\n                                                                                                                       // 333\n/* Built-in method references that are verified to be native. */                                                       // 334\nvar DataView = getNative(root, 'DataView'),                                                                            // 335\n    Map = getNative(root, 'Map'),                                                                                      // 336\n    Promise = getNative(root, 'Promise'),                                                                              // 337\n    Set = getNative(root, 'Set'),                                                                                      // 338\n    WeakMap = getNative(root, 'WeakMap'),                                                                              // 339\n    nativeCreate = getNative(Object, 'create');                                                                        // 340\n                                                                                                                       // 341\n/** Used to detect maps, sets, and weakmaps. */                                                                        // 342\nvar dataViewCtorString = toSource(DataView),                                                                           // 343\n    mapCtorString = toSource(Map),                                                                                     // 344\n    promiseCtorString = toSource(Promise),                                                                             // 345\n    setCtorString = toSource(Set),                                                                                     // 346\n    weakMapCtorString = toSource(WeakMap);                                                                             // 347\n                                                                                                                       // 348\n/** Used to convert symbols to primitives and strings. */                                                              // 349\nvar symbolProto = Symbol ? Symbol.prototype : undefined,                                                               // 350\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,                                                     // 351\n    symbolToString = symbolProto ? symbolProto.toString : undefined;                                                   // 352\n                                                                                                                       // 353\n/**                                                                                                                    // 354\n * Creates a hash object.                                                                                              // 355\n *                                                                                                                     // 356\n * @private                                                                                                            // 357\n * @constructor                                                                                                        // 358\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 359\n */                                                                                                                    // 360\nfunction Hash(entries) {                                                                                               // 361\n  var index = -1,                                                                                                      // 362\n      length = entries ? entries.length : 0;                                                                           // 363\n                                                                                                                       // 364\n  this.clear();                                                                                                        // 365\n  while (++index < length) {                                                                                           // 366\n    var entry = entries[index];                                                                                        // 367\n    this.set(entry[0], entry[1]);                                                                                      // 368\n  }                                                                                                                    // 369\n}                                                                                                                      // 370\n                                                                                                                       // 371\n/**                                                                                                                    // 372\n * Removes all key-value entries from the hash.                                                                        // 373\n *                                                                                                                     // 374\n * @private                                                                                                            // 375\n * @name clear                                                                                                         // 376\n * @memberOf Hash                                                                                                      // 377\n */                                                                                                                    // 378\nfunction hashClear() {                                                                                                 // 379\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};                                                              // 380\n}                                                                                                                      // 381\n                                                                                                                       // 382\n/**                                                                                                                    // 383\n * Removes `key` and its value from the hash.                                                                          // 384\n *                                                                                                                     // 385\n * @private                                                                                                            // 386\n * @name delete                                                                                                        // 387\n * @memberOf Hash                                                                                                      // 388\n * @param {Object} hash The hash to modify.                                                                            // 389\n * @param {string} key The key of the value to remove.                                                                 // 390\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 391\n */                                                                                                                    // 392\nfunction hashDelete(key) {                                                                                             // 393\n  return this.has(key) && delete this.__data__[key];                                                                   // 394\n}                                                                                                                      // 395\n                                                                                                                       // 396\n/**                                                                                                                    // 397\n * Gets the hash value for `key`.                                                                                      // 398\n *                                                                                                                     // 399\n * @private                                                                                                            // 400\n * @name get                                                                                                           // 401\n * @memberOf Hash                                                                                                      // 402\n * @param {string} key The key of the value to get.                                                                    // 403\n * @returns {*} Returns the entry value.                                                                               // 404\n */                                                                                                                    // 405\nfunction hashGet(key) {                                                                                                // 406\n  var data = this.__data__;                                                                                            // 407\n  if (nativeCreate) {                                                                                                  // 408\n    var result = data[key];                                                                                            // 409\n    return result === HASH_UNDEFINED ? undefined : result;                                                             // 410\n  }                                                                                                                    // 411\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;                                                       // 412\n}                                                                                                                      // 413\n                                                                                                                       // 414\n/**                                                                                                                    // 415\n * Checks if a hash value for `key` exists.                                                                            // 416\n *                                                                                                                     // 417\n * @private                                                                                                            // 418\n * @name has                                                                                                           // 419\n * @memberOf Hash                                                                                                      // 420\n * @param {string} key The key of the entry to check.                                                                  // 421\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 422\n */                                                                                                                    // 423\nfunction hashHas(key) {                                                                                                // 424\n  var data = this.__data__;                                                                                            // 425\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);                                      // 426\n}                                                                                                                      // 427\n                                                                                                                       // 428\n/**                                                                                                                    // 429\n * Sets the hash `key` to `value`.                                                                                     // 430\n *                                                                                                                     // 431\n * @private                                                                                                            // 432\n * @name set                                                                                                           // 433\n * @memberOf Hash                                                                                                      // 434\n * @param {string} key The key of the value to set.                                                                    // 435\n * @param {*} value The value to set.                                                                                  // 436\n * @returns {Object} Returns the hash instance.                                                                        // 437\n */                                                                                                                    // 438\nfunction hashSet(key, value) {                                                                                         // 439\n  var data = this.__data__;                                                                                            // 440\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;                                          // 441\n  return this;                                                                                                         // 442\n}                                                                                                                      // 443\n                                                                                                                       // 444\n// Add methods to `Hash`.                                                                                              // 445\nHash.prototype.clear = hashClear;                                                                                      // 446\nHash.prototype['delete'] = hashDelete;                                                                                 // 447\nHash.prototype.get = hashGet;                                                                                          // 448\nHash.prototype.has = hashHas;                                                                                          // 449\nHash.prototype.set = hashSet;                                                                                          // 450\n                                                                                                                       // 451\n/**                                                                                                                    // 452\n * Creates an list cache object.                                                                                       // 453\n *                                                                                                                     // 454\n * @private                                                                                                            // 455\n * @constructor                                                                                                        // 456\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 457\n */                                                                                                                    // 458\nfunction ListCache(entries) {                                                                                          // 459\n  var index = -1,                                                                                                      // 460\n      length = entries ? entries.length : 0;                                                                           // 461\n                                                                                                                       // 462\n  this.clear();                                                                                                        // 463\n  while (++index < length) {                                                                                           // 464\n    var entry = entries[index];                                                                                        // 465\n    this.set(entry[0], entry[1]);                                                                                      // 466\n  }                                                                                                                    // 467\n}                                                                                                                      // 468\n                                                                                                                       // 469\n/**                                                                                                                    // 470\n * Removes all key-value entries from the list cache.                                                                  // 471\n *                                                                                                                     // 472\n * @private                                                                                                            // 473\n * @name clear                                                                                                         // 474\n * @memberOf ListCache                                                                                                 // 475\n */                                                                                                                    // 476\nfunction listCacheClear() {                                                                                            // 477\n  this.__data__ = [];                                                                                                  // 478\n}                                                                                                                      // 479\n                                                                                                                       // 480\n/**                                                                                                                    // 481\n * Removes `key` and its value from the list cache.                                                                    // 482\n *                                                                                                                     // 483\n * @private                                                                                                            // 484\n * @name delete                                                                                                        // 485\n * @memberOf ListCache                                                                                                 // 486\n * @param {string} key The key of the value to remove.                                                                 // 487\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 488\n */                                                                                                                    // 489\nfunction listCacheDelete(key) {                                                                                        // 490\n  var data = this.__data__,                                                                                            // 491\n      index = assocIndexOf(data, key);                                                                                 // 492\n                                                                                                                       // 493\n  if (index < 0) {                                                                                                     // 494\n    return false;                                                                                                      // 495\n  }                                                                                                                    // 496\n  var lastIndex = data.length - 1;                                                                                     // 497\n  if (index == lastIndex) {                                                                                            // 498\n    data.pop();                                                                                                        // 499\n  } else {                                                                                                             // 500\n    splice.call(data, index, 1);                                                                                       // 501\n  }                                                                                                                    // 502\n  return true;                                                                                                         // 503\n}                                                                                                                      // 504\n                                                                                                                       // 505\n/**                                                                                                                    // 506\n * Gets the list cache value for `key`.                                                                                // 507\n *                                                                                                                     // 508\n * @private                                                                                                            // 509\n * @name get                                                                                                           // 510\n * @memberOf ListCache                                                                                                 // 511\n * @param {string} key The key of the value to get.                                                                    // 512\n * @returns {*} Returns the entry value.                                                                               // 513\n */                                                                                                                    // 514\nfunction listCacheGet(key) {                                                                                           // 515\n  var data = this.__data__,                                                                                            // 516\n      index = assocIndexOf(data, key);                                                                                 // 517\n                                                                                                                       // 518\n  return index < 0 ? undefined : data[index][1];                                                                       // 519\n}                                                                                                                      // 520\n                                                                                                                       // 521\n/**                                                                                                                    // 522\n * Checks if a list cache value for `key` exists.                                                                      // 523\n *                                                                                                                     // 524\n * @private                                                                                                            // 525\n * @name has                                                                                                           // 526\n * @memberOf ListCache                                                                                                 // 527\n * @param {string} key The key of the entry to check.                                                                  // 528\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 529\n */                                                                                                                    // 530\nfunction listCacheHas(key) {                                                                                           // 531\n  return assocIndexOf(this.__data__, key) > -1;                                                                        // 532\n}                                                                                                                      // 533\n                                                                                                                       // 534\n/**                                                                                                                    // 535\n * Sets the list cache `key` to `value`.                                                                               // 536\n *                                                                                                                     // 537\n * @private                                                                                                            // 538\n * @name set                                                                                                           // 539\n * @memberOf ListCache                                                                                                 // 540\n * @param {string} key The key of the value to set.                                                                    // 541\n * @param {*} value The value to set.                                                                                  // 542\n * @returns {Object} Returns the list cache instance.                                                                  // 543\n */                                                                                                                    // 544\nfunction listCacheSet(key, value) {                                                                                    // 545\n  var data = this.__data__,                                                                                            // 546\n      index = assocIndexOf(data, key);                                                                                 // 547\n                                                                                                                       // 548\n  if (index < 0) {                                                                                                     // 549\n    data.push([key, value]);                                                                                           // 550\n  } else {                                                                                                             // 551\n    data[index][1] = value;                                                                                            // 552\n  }                                                                                                                    // 553\n  return this;                                                                                                         // 554\n}                                                                                                                      // 555\n                                                                                                                       // 556\n// Add methods to `ListCache`.                                                                                         // 557\nListCache.prototype.clear = listCacheClear;                                                                            // 558\nListCache.prototype['delete'] = listCacheDelete;                                                                       // 559\nListCache.prototype.get = listCacheGet;                                                                                // 560\nListCache.prototype.has = listCacheHas;                                                                                // 561\nListCache.prototype.set = listCacheSet;                                                                                // 562\n                                                                                                                       // 563\n/**                                                                                                                    // 564\n * Creates a map cache object to store key-value pairs.                                                                // 565\n *                                                                                                                     // 566\n * @private                                                                                                            // 567\n * @constructor                                                                                                        // 568\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 569\n */                                                                                                                    // 570\nfunction MapCache(entries) {                                                                                           // 571\n  var index = -1,                                                                                                      // 572\n      length = entries ? entries.length : 0;                                                                           // 573\n                                                                                                                       // 574\n  this.clear();                                                                                                        // 575\n  while (++index < length) {                                                                                           // 576\n    var entry = entries[index];                                                                                        // 577\n    this.set(entry[0], entry[1]);                                                                                      // 578\n  }                                                                                                                    // 579\n}                                                                                                                      // 580\n                                                                                                                       // 581\n/**                                                                                                                    // 582\n * Removes all key-value entries from the map.                                                                         // 583\n *                                                                                                                     // 584\n * @private                                                                                                            // 585\n * @name clear                                                                                                         // 586\n * @memberOf MapCache                                                                                                  // 587\n */                                                                                                                    // 588\nfunction mapCacheClear() {                                                                                             // 589\n  this.__data__ = {                                                                                                    // 590\n    'hash': new Hash,                                                                                                  // 591\n    'map': new (Map || ListCache),                                                                                     // 592\n    'string': new Hash                                                                                                 // 593\n  };                                                                                                                   // 594\n}                                                                                                                      // 595\n                                                                                                                       // 596\n/**                                                                                                                    // 597\n * Removes `key` and its value from the map.                                                                           // 598\n *                                                                                                                     // 599\n * @private                                                                                                            // 600\n * @name delete                                                                                                        // 601\n * @memberOf MapCache                                                                                                  // 602\n * @param {string} key The key of the value to remove.                                                                 // 603\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 604\n */                                                                                                                    // 605\nfunction mapCacheDelete(key) {                                                                                         // 606\n  return getMapData(this, key)['delete'](key);                                                                         // 607\n}                                                                                                                      // 608\n                                                                                                                       // 609\n/**                                                                                                                    // 610\n * Gets the map value for `key`.                                                                                       // 611\n *                                                                                                                     // 612\n * @private                                                                                                            // 613\n * @name get                                                                                                           // 614\n * @memberOf MapCache                                                                                                  // 615\n * @param {string} key The key of the value to get.                                                                    // 616\n * @returns {*} Returns the entry value.                                                                               // 617\n */                                                                                                                    // 618\nfunction mapCacheGet(key) {                                                                                            // 619\n  return getMapData(this, key).get(key);                                                                               // 620\n}                                                                                                                      // 621\n                                                                                                                       // 622\n/**                                                                                                                    // 623\n * Checks if a map value for `key` exists.                                                                             // 624\n *                                                                                                                     // 625\n * @private                                                                                                            // 626\n * @name has                                                                                                           // 627\n * @memberOf MapCache                                                                                                  // 628\n * @param {string} key The key of the entry to check.                                                                  // 629\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 630\n */                                                                                                                    // 631\nfunction mapCacheHas(key) {                                                                                            // 632\n  return getMapData(this, key).has(key);                                                                               // 633\n}                                                                                                                      // 634\n                                                                                                                       // 635\n/**                                                                                                                    // 636\n * Sets the map `key` to `value`.                                                                                      // 637\n *                                                                                                                     // 638\n * @private                                                                                                            // 639\n * @name set                                                                                                           // 640\n * @memberOf MapCache                                                                                                  // 641\n * @param {string} key The key of the value to set.                                                                    // 642\n * @param {*} value The value to set.                                                                                  // 643\n * @returns {Object} Returns the map cache instance.                                                                   // 644\n */                                                                                                                    // 645\nfunction mapCacheSet(key, value) {                                                                                     // 646\n  getMapData(this, key).set(key, value);                                                                               // 647\n  return this;                                                                                                         // 648\n}                                                                                                                      // 649\n                                                                                                                       // 650\n// Add methods to `MapCache`.                                                                                          // 651\nMapCache.prototype.clear = mapCacheClear;                                                                              // 652\nMapCache.prototype['delete'] = mapCacheDelete;                                                                         // 653\nMapCache.prototype.get = mapCacheGet;                                                                                  // 654\nMapCache.prototype.has = mapCacheHas;                                                                                  // 655\nMapCache.prototype.set = mapCacheSet;                                                                                  // 656\n                                                                                                                       // 657\n/**                                                                                                                    // 658\n *                                                                                                                     // 659\n * Creates an array cache object to store unique values.                                                               // 660\n *                                                                                                                     // 661\n * @private                                                                                                            // 662\n * @constructor                                                                                                        // 663\n * @param {Array} [values] The values to cache.                                                                        // 664\n */                                                                                                                    // 665\nfunction SetCache(values) {                                                                                            // 666\n  var index = -1,                                                                                                      // 667\n      length = values ? values.length : 0;                                                                             // 668\n                                                                                                                       // 669\n  this.__data__ = new MapCache;                                                                                        // 670\n  while (++index < length) {                                                                                           // 671\n    this.add(values[index]);                                                                                           // 672\n  }                                                                                                                    // 673\n}                                                                                                                      // 674\n                                                                                                                       // 675\n/**                                                                                                                    // 676\n * Adds `value` to the array cache.                                                                                    // 677\n *                                                                                                                     // 678\n * @private                                                                                                            // 679\n * @name add                                                                                                           // 680\n * @memberOf SetCache                                                                                                  // 681\n * @alias push                                                                                                         // 682\n * @param {*} value The value to cache.                                                                                // 683\n * @returns {Object} Returns the cache instance.                                                                       // 684\n */                                                                                                                    // 685\nfunction setCacheAdd(value) {                                                                                          // 686\n  this.__data__.set(value, HASH_UNDEFINED);                                                                            // 687\n  return this;                                                                                                         // 688\n}                                                                                                                      // 689\n                                                                                                                       // 690\n/**                                                                                                                    // 691\n * Checks if `value` is in the array cache.                                                                            // 692\n *                                                                                                                     // 693\n * @private                                                                                                            // 694\n * @name has                                                                                                           // 695\n * @memberOf SetCache                                                                                                  // 696\n * @param {*} value The value to search for.                                                                           // 697\n * @returns {number} Returns `true` if `value` is found, else `false`.                                                 // 698\n */                                                                                                                    // 699\nfunction setCacheHas(value) {                                                                                          // 700\n  return this.__data__.has(value);                                                                                     // 701\n}                                                                                                                      // 702\n                                                                                                                       // 703\n// Add methods to `SetCache`.                                                                                          // 704\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;                                                        // 705\nSetCache.prototype.has = setCacheHas;                                                                                  // 706\n                                                                                                                       // 707\n/**                                                                                                                    // 708\n * Creates a stack cache object to store key-value pairs.                                                              // 709\n *                                                                                                                     // 710\n * @private                                                                                                            // 711\n * @constructor                                                                                                        // 712\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 713\n */                                                                                                                    // 714\nfunction Stack(entries) {                                                                                              // 715\n  this.__data__ = new ListCache(entries);                                                                              // 716\n}                                                                                                                      // 717\n                                                                                                                       // 718\n/**                                                                                                                    // 719\n * Removes all key-value entries from the stack.                                                                       // 720\n *                                                                                                                     // 721\n * @private                                                                                                            // 722\n * @name clear                                                                                                         // 723\n * @memberOf Stack                                                                                                     // 724\n */                                                                                                                    // 725\nfunction stackClear() {                                                                                                // 726\n  this.__data__ = new ListCache;                                                                                       // 727\n}                                                                                                                      // 728\n                                                                                                                       // 729\n/**                                                                                                                    // 730\n * Removes `key` and its value from the stack.                                                                         // 731\n *                                                                                                                     // 732\n * @private                                                                                                            // 733\n * @name delete                                                                                                        // 734\n * @memberOf Stack                                                                                                     // 735\n * @param {string} key The key of the value to remove.                                                                 // 736\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 737\n */                                                                                                                    // 738\nfunction stackDelete(key) {                                                                                            // 739\n  return this.__data__['delete'](key);                                                                                 // 740\n}                                                                                                                      // 741\n                                                                                                                       // 742\n/**                                                                                                                    // 743\n * Gets the stack value for `key`.                                                                                     // 744\n *                                                                                                                     // 745\n * @private                                                                                                            // 746\n * @name get                                                                                                           // 747\n * @memberOf Stack                                                                                                     // 748\n * @param {string} key The key of the value to get.                                                                    // 749\n * @returns {*} Returns the entry value.                                                                               // 750\n */                                                                                                                    // 751\nfunction stackGet(key) {                                                                                               // 752\n  return this.__data__.get(key);                                                                                       // 753\n}                                                                                                                      // 754\n                                                                                                                       // 755\n/**                                                                                                                    // 756\n * Checks if a stack value for `key` exists.                                                                           // 757\n *                                                                                                                     // 758\n * @private                                                                                                            // 759\n * @name has                                                                                                           // 760\n * @memberOf Stack                                                                                                     // 761\n * @param {string} key The key of the entry to check.                                                                  // 762\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 763\n */                                                                                                                    // 764\nfunction stackHas(key) {                                                                                               // 765\n  return this.__data__.has(key);                                                                                       // 766\n}                                                                                                                      // 767\n                                                                                                                       // 768\n/**                                                                                                                    // 769\n * Sets the stack `key` to `value`.                                                                                    // 770\n *                                                                                                                     // 771\n * @private                                                                                                            // 772\n * @name set                                                                                                           // 773\n * @memberOf Stack                                                                                                     // 774\n * @param {string} key The key of the value to set.                                                                    // 775\n * @param {*} value The value to set.                                                                                  // 776\n * @returns {Object} Returns the stack cache instance.                                                                 // 777\n */                                                                                                                    // 778\nfunction stackSet(key, value) {                                                                                        // 779\n  var cache = this.__data__;                                                                                           // 780\n  if (cache instanceof ListCache) {                                                                                    // 781\n    var pairs = cache.__data__;                                                                                        // 782\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {                                                               // 783\n      pairs.push([key, value]);                                                                                        // 784\n      return this;                                                                                                     // 785\n    }                                                                                                                  // 786\n    cache = this.__data__ = new MapCache(pairs);                                                                       // 787\n  }                                                                                                                    // 788\n  cache.set(key, value);                                                                                               // 789\n  return this;                                                                                                         // 790\n}                                                                                                                      // 791\n                                                                                                                       // 792\n// Add methods to `Stack`.                                                                                             // 793\nStack.prototype.clear = stackClear;                                                                                    // 794\nStack.prototype['delete'] = stackDelete;                                                                               // 795\nStack.prototype.get = stackGet;                                                                                        // 796\nStack.prototype.has = stackHas;                                                                                        // 797\nStack.prototype.set = stackSet;                                                                                        // 798\n                                                                                                                       // 799\n/**                                                                                                                    // 800\n * Creates an array of the enumerable property names of the array-like `value`.                                        // 801\n *                                                                                                                     // 802\n * @private                                                                                                            // 803\n * @param {*} value The value to query.                                                                                // 804\n * @param {boolean} inherited Specify returning inherited property names.                                              // 805\n * @returns {Array} Returns the array of property names.                                                               // 806\n */                                                                                                                    // 807\nfunction arrayLikeKeys(value, inherited) {                                                                             // 808\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 809\n  // Safari 9 makes `arguments.length` enumerable in strict mode.                                                      // 810\n  var result = (isArray(value) || isArguments(value))                                                                  // 811\n    ? baseTimes(value.length, String)                                                                                  // 812\n    : [];                                                                                                              // 813\n                                                                                                                       // 814\n  var length = result.length,                                                                                          // 815\n      skipIndexes = !!length;                                                                                          // 816\n                                                                                                                       // 817\n  for (var key in value) {                                                                                             // 818\n    if ((inherited || hasOwnProperty.call(value, key)) &&                                                              // 819\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {                                                 // 820\n      result.push(key);                                                                                                // 821\n    }                                                                                                                  // 822\n  }                                                                                                                    // 823\n  return result;                                                                                                       // 824\n}                                                                                                                      // 825\n                                                                                                                       // 826\n/**                                                                                                                    // 827\n * Gets the index at which the `key` is found in `array` of key-value pairs.                                           // 828\n *                                                                                                                     // 829\n * @private                                                                                                            // 830\n * @param {Array} array The array to inspect.                                                                          // 831\n * @param {*} key The key to search for.                                                                               // 832\n * @returns {number} Returns the index of the matched value, else `-1`.                                                // 833\n */                                                                                                                    // 834\nfunction assocIndexOf(array, key) {                                                                                    // 835\n  var length = array.length;                                                                                           // 836\n  while (length--) {                                                                                                   // 837\n    if (eq(array[length][0], key)) {                                                                                   // 838\n      return length;                                                                                                   // 839\n    }                                                                                                                  // 840\n  }                                                                                                                    // 841\n  return -1;                                                                                                           // 842\n}                                                                                                                      // 843\n                                                                                                                       // 844\n/**                                                                                                                    // 845\n * Aggregates elements of `collection` on `accumulator` with keys transformed                                          // 846\n * by `iteratee` and values set by `setter`.                                                                           // 847\n *                                                                                                                     // 848\n * @private                                                                                                            // 849\n * @param {Array|Object} collection The collection to iterate over.                                                    // 850\n * @param {Function} setter The function to set `accumulator` values.                                                  // 851\n * @param {Function} iteratee The iteratee to transform keys.                                                          // 852\n * @param {Object} accumulator The initial aggregated object.                                                          // 853\n * @returns {Function} Returns `accumulator`.                                                                          // 854\n */                                                                                                                    // 855\nfunction baseAggregator(collection, setter, iteratee, accumulator) {                                                   // 856\n  baseEach(collection, function(value, key, collection) {                                                              // 857\n    setter(accumulator, value, iteratee(value), collection);                                                           // 858\n  });                                                                                                                  // 859\n  return accumulator;                                                                                                  // 860\n}                                                                                                                      // 861\n                                                                                                                       // 862\n/**                                                                                                                    // 863\n * The base implementation of `_.forEach` without support for iteratee shorthands.                                     // 864\n *                                                                                                                     // 865\n * @private                                                                                                            // 866\n * @param {Array|Object} collection The collection to iterate over.                                                    // 867\n * @param {Function} iteratee The function invoked per iteration.                                                      // 868\n * @returns {Array|Object} Returns `collection`.                                                                       // 869\n */                                                                                                                    // 870\nvar baseEach = createBaseEach(baseForOwn);                                                                             // 871\n                                                                                                                       // 872\n/**                                                                                                                    // 873\n * The base implementation of `baseForOwn` which iterates over `object`                                                // 874\n * properties returned by `keysFunc` and invokes `iteratee` for each property.                                         // 875\n * Iteratee functions may exit iteration early by explicitly returning `false`.                                        // 876\n *                                                                                                                     // 877\n * @private                                                                                                            // 878\n * @param {Object} object The object to iterate over.                                                                  // 879\n * @param {Function} iteratee The function invoked per iteration.                                                      // 880\n * @param {Function} keysFunc The function to get the keys of `object`.                                                // 881\n * @returns {Object} Returns `object`.                                                                                 // 882\n */                                                                                                                    // 883\nvar baseFor = createBaseFor();                                                                                         // 884\n                                                                                                                       // 885\n/**                                                                                                                    // 886\n * The base implementation of `_.forOwn` without support for iteratee shorthands.                                      // 887\n *                                                                                                                     // 888\n * @private                                                                                                            // 889\n * @param {Object} object The object to iterate over.                                                                  // 890\n * @param {Function} iteratee The function invoked per iteration.                                                      // 891\n * @returns {Object} Returns `object`.                                                                                 // 892\n */                                                                                                                    // 893\nfunction baseForOwn(object, iteratee) {                                                                                // 894\n  return object && baseFor(object, iteratee, keys);                                                                    // 895\n}                                                                                                                      // 896\n                                                                                                                       // 897\n/**                                                                                                                    // 898\n * The base implementation of `_.get` without support for default values.                                              // 899\n *                                                                                                                     // 900\n * @private                                                                                                            // 901\n * @param {Object} object The object to query.                                                                         // 902\n * @param {Array|string} path The path of the property to get.                                                         // 903\n * @returns {*} Returns the resolved value.                                                                            // 904\n */                                                                                                                    // 905\nfunction baseGet(object, path) {                                                                                       // 906\n  path = isKey(path, object) ? [path] : castPath(path);                                                                // 907\n                                                                                                                       // 908\n  var index = 0,                                                                                                       // 909\n      length = path.length;                                                                                            // 910\n                                                                                                                       // 911\n  while (object != null && index < length) {                                                                           // 912\n    object = object[toKey(path[index++])];                                                                             // 913\n  }                                                                                                                    // 914\n  return (index && index == length) ? object : undefined;                                                              // 915\n}                                                                                                                      // 916\n                                                                                                                       // 917\n/**                                                                                                                    // 918\n * The base implementation of `getTag`.                                                                                // 919\n *                                                                                                                     // 920\n * @private                                                                                                            // 921\n * @param {*} value The value to query.                                                                                // 922\n * @returns {string} Returns the `toStringTag`.                                                                        // 923\n */                                                                                                                    // 924\nfunction baseGetTag(value) {                                                                                           // 925\n  return objectToString.call(value);                                                                                   // 926\n}                                                                                                                      // 927\n                                                                                                                       // 928\n/**                                                                                                                    // 929\n * The base implementation of `_.hasIn` without support for deep paths.                                                // 930\n *                                                                                                                     // 931\n * @private                                                                                                            // 932\n * @param {Object} [object] The object to query.                                                                       // 933\n * @param {Array|string} key The key to check.                                                                         // 934\n * @returns {boolean} Returns `true` if `key` exists, else `false`.                                                    // 935\n */                                                                                                                    // 936\nfunction baseHasIn(object, key) {                                                                                      // 937\n  return object != null && key in Object(object);                                                                      // 938\n}                                                                                                                      // 939\n                                                                                                                       // 940\n/**                                                                                                                    // 941\n * The base implementation of `_.isEqual` which supports partial comparisons                                           // 942\n * and tracks traversed objects.                                                                                       // 943\n *                                                                                                                     // 944\n * @private                                                                                                            // 945\n * @param {*} value The value to compare.                                                                              // 946\n * @param {*} other The other value to compare.                                                                        // 947\n * @param {Function} [customizer] The function to customize comparisons.                                               // 948\n * @param {boolean} [bitmask] The bitmask of comparison flags.                                                         // 949\n *  The bitmask may be composed of the following flags:                                                                // 950\n *     1 - Unordered comparison                                                                                        // 951\n *     2 - Partial comparison                                                                                          // 952\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.                                               // 953\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                       // 954\n */                                                                                                                    // 955\nfunction baseIsEqual(value, other, customizer, bitmask, stack) {                                                       // 956\n  if (value === other) {                                                                                               // 957\n    return true;                                                                                                       // 958\n  }                                                                                                                    // 959\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {                                  // 960\n    return value !== value && other !== other;                                                                         // 961\n  }                                                                                                                    // 962\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);                                       // 963\n}                                                                                                                      // 964\n                                                                                                                       // 965\n/**                                                                                                                    // 966\n * A specialized version of `baseIsEqual` for arrays and objects which performs                                        // 967\n * deep comparisons and tracks traversed objects enabling objects with circular                                        // 968\n * references to be compared.                                                                                          // 969\n *                                                                                                                     // 970\n * @private                                                                                                            // 971\n * @param {Object} object The object to compare.                                                                       // 972\n * @param {Object} other The other object to compare.                                                                  // 973\n * @param {Function} equalFunc The function to determine equivalents of values.                                        // 974\n * @param {Function} [customizer] The function to customize comparisons.                                               // 975\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`                                        // 976\n *  for more details.                                                                                                  // 977\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.                                              // 978\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                      // 979\n */                                                                                                                    // 980\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {                                       // 981\n  var objIsArr = isArray(object),                                                                                      // 982\n      othIsArr = isArray(other),                                                                                       // 983\n      objTag = arrayTag,                                                                                               // 984\n      othTag = arrayTag;                                                                                               // 985\n                                                                                                                       // 986\n  if (!objIsArr) {                                                                                                     // 987\n    objTag = getTag(object);                                                                                           // 988\n    objTag = objTag == argsTag ? objectTag : objTag;                                                                   // 989\n  }                                                                                                                    // 990\n  if (!othIsArr) {                                                                                                     // 991\n    othTag = getTag(other);                                                                                            // 992\n    othTag = othTag == argsTag ? objectTag : othTag;                                                                   // 993\n  }                                                                                                                    // 994\n  var objIsObj = objTag == objectTag && !isHostObject(object),                                                         // 995\n      othIsObj = othTag == objectTag && !isHostObject(other),                                                          // 996\n      isSameTag = objTag == othTag;                                                                                    // 997\n                                                                                                                       // 998\n  if (isSameTag && !objIsObj) {                                                                                        // 999\n    stack || (stack = new Stack);                                                                                      // 1000\n    return (objIsArr || isTypedArray(object))                                                                          // 1001\n      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)                                              // 1002\n      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);                                      // 1003\n  }                                                                                                                    // 1004\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {                                                                             // 1005\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),                                         // 1006\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');                                          // 1007\n                                                                                                                       // 1008\n    if (objIsWrapped || othIsWrapped) {                                                                                // 1009\n      var objUnwrapped = objIsWrapped ? object.value() : object,                                                       // 1010\n          othUnwrapped = othIsWrapped ? other.value() : other;                                                         // 1011\n                                                                                                                       // 1012\n      stack || (stack = new Stack);                                                                                    // 1013\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);                                        // 1014\n    }                                                                                                                  // 1015\n  }                                                                                                                    // 1016\n  if (!isSameTag) {                                                                                                    // 1017\n    return false;                                                                                                      // 1018\n  }                                                                                                                    // 1019\n  stack || (stack = new Stack);                                                                                        // 1020\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);                                           // 1021\n}                                                                                                                      // 1022\n                                                                                                                       // 1023\n/**                                                                                                                    // 1024\n * The base implementation of `_.isMatch` without support for iteratee shorthands.                                     // 1025\n *                                                                                                                     // 1026\n * @private                                                                                                            // 1027\n * @param {Object} object The object to inspect.                                                                       // 1028\n * @param {Object} source The object of property values to match.                                                      // 1029\n * @param {Array} matchData The property names, values, and compare flags to match.                                    // 1030\n * @param {Function} [customizer] The function to customize comparisons.                                               // 1031\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.                                             // 1032\n */                                                                                                                    // 1033\nfunction baseIsMatch(object, source, matchData, customizer) {                                                          // 1034\n  var index = matchData.length,                                                                                        // 1035\n      length = index,                                                                                                  // 1036\n      noCustomizer = !customizer;                                                                                      // 1037\n                                                                                                                       // 1038\n  if (object == null) {                                                                                                // 1039\n    return !length;                                                                                                    // 1040\n  }                                                                                                                    // 1041\n  object = Object(object);                                                                                             // 1042\n  while (index--) {                                                                                                    // 1043\n    var data = matchData[index];                                                                                       // 1044\n    if ((noCustomizer && data[2])                                                                                      // 1045\n          ? data[1] !== object[data[0]]                                                                                // 1046\n          : !(data[0] in object)                                                                                       // 1047\n        ) {                                                                                                            // 1048\n      return false;                                                                                                    // 1049\n    }                                                                                                                  // 1050\n  }                                                                                                                    // 1051\n  while (++index < length) {                                                                                           // 1052\n    data = matchData[index];                                                                                           // 1053\n    var key = data[0],                                                                                                 // 1054\n        objValue = object[key],                                                                                        // 1055\n        srcValue = data[1];                                                                                            // 1056\n                                                                                                                       // 1057\n    if (noCustomizer && data[2]) {                                                                                     // 1058\n      if (objValue === undefined && !(key in object)) {                                                                // 1059\n        return false;                                                                                                  // 1060\n      }                                                                                                                // 1061\n    } else {                                                                                                           // 1062\n      var stack = new Stack;                                                                                           // 1063\n      if (customizer) {                                                                                                // 1064\n        var result = customizer(objValue, srcValue, key, object, source, stack);                                       // 1065\n      }                                                                                                                // 1066\n      if (!(result === undefined                                                                                       // 1067\n            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)        // 1068\n            : result                                                                                                   // 1069\n          )) {                                                                                                         // 1070\n        return false;                                                                                                  // 1071\n      }                                                                                                                // 1072\n    }                                                                                                                  // 1073\n  }                                                                                                                    // 1074\n  return true;                                                                                                         // 1075\n}                                                                                                                      // 1076\n                                                                                                                       // 1077\n/**                                                                                                                    // 1078\n * The base implementation of `_.isNative` without bad shim checks.                                                    // 1079\n *                                                                                                                     // 1080\n * @private                                                                                                            // 1081\n * @param {*} value The value to check.                                                                                // 1082\n * @returns {boolean} Returns `true` if `value` is a native function,                                                  // 1083\n *  else `false`.                                                                                                      // 1084\n */                                                                                                                    // 1085\nfunction baseIsNative(value) {                                                                                         // 1086\n  if (!isObject(value) || isMasked(value)) {                                                                           // 1087\n    return false;                                                                                                      // 1088\n  }                                                                                                                    // 1089\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;                                // 1090\n  return pattern.test(toSource(value));                                                                                // 1091\n}                                                                                                                      // 1092\n                                                                                                                       // 1093\n/**                                                                                                                    // 1094\n * The base implementation of `_.isTypedArray` without Node.js optimizations.                                          // 1095\n *                                                                                                                     // 1096\n * @private                                                                                                            // 1097\n * @param {*} value The value to check.                                                                                // 1098\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.                                        // 1099\n */                                                                                                                    // 1100\nfunction baseIsTypedArray(value) {                                                                                     // 1101\n  return isObjectLike(value) &&                                                                                        // 1102\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];                                            // 1103\n}                                                                                                                      // 1104\n                                                                                                                       // 1105\n/**                                                                                                                    // 1106\n * The base implementation of `_.iteratee`.                                                                            // 1107\n *                                                                                                                     // 1108\n * @private                                                                                                            // 1109\n * @param {*} [value=_.identity] The value to convert to an iteratee.                                                  // 1110\n * @returns {Function} Returns the iteratee.                                                                           // 1111\n */                                                                                                                    // 1112\nfunction baseIteratee(value) {                                                                                         // 1113\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.                                     // 1114\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.                                              // 1115\n  if (typeof value == 'function') {                                                                                    // 1116\n    return value;                                                                                                      // 1117\n  }                                                                                                                    // 1118\n  if (value == null) {                                                                                                 // 1119\n    return identity;                                                                                                   // 1120\n  }                                                                                                                    // 1121\n  if (typeof value == 'object') {                                                                                      // 1122\n    return isArray(value)                                                                                              // 1123\n      ? baseMatchesProperty(value[0], value[1])                                                                        // 1124\n      : baseMatches(value);                                                                                            // 1125\n  }                                                                                                                    // 1126\n  return property(value);                                                                                              // 1127\n}                                                                                                                      // 1128\n                                                                                                                       // 1129\n/**                                                                                                                    // 1130\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.                                     // 1131\n *                                                                                                                     // 1132\n * @private                                                                                                            // 1133\n * @param {Object} object The object to query.                                                                         // 1134\n * @returns {Array} Returns the array of property names.                                                               // 1135\n */                                                                                                                    // 1136\nfunction baseKeys(object) {                                                                                            // 1137\n  if (!isPrototype(object)) {                                                                                          // 1138\n    return nativeKeys(object);                                                                                         // 1139\n  }                                                                                                                    // 1140\n  var result = [];                                                                                                     // 1141\n  for (var key in Object(object)) {                                                                                    // 1142\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {                                                    // 1143\n      result.push(key);                                                                                                // 1144\n    }                                                                                                                  // 1145\n  }                                                                                                                    // 1146\n  return result;                                                                                                       // 1147\n}                                                                                                                      // 1148\n                                                                                                                       // 1149\n/**                                                                                                                    // 1150\n * The base implementation of `_.matches` which doesn't clone `source`.                                                // 1151\n *                                                                                                                     // 1152\n * @private                                                                                                            // 1153\n * @param {Object} source The object of property values to match.                                                      // 1154\n * @returns {Function} Returns the new spec function.                                                                  // 1155\n */                                                                                                                    // 1156\nfunction baseMatches(source) {                                                                                         // 1157\n  var matchData = getMatchData(source);                                                                                // 1158\n  if (matchData.length == 1 && matchData[0][2]) {                                                                      // 1159\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);                                                  // 1160\n  }                                                                                                                    // 1161\n  return function(object) {                                                                                            // 1162\n    return object === source || baseIsMatch(object, source, matchData);                                                // 1163\n  };                                                                                                                   // 1164\n}                                                                                                                      // 1165\n                                                                                                                       // 1166\n/**                                                                                                                    // 1167\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.                                      // 1168\n *                                                                                                                     // 1169\n * @private                                                                                                            // 1170\n * @param {string} path The path of the property to get.                                                               // 1171\n * @param {*} srcValue The value to match.                                                                             // 1172\n * @returns {Function} Returns the new spec function.                                                                  // 1173\n */                                                                                                                    // 1174\nfunction baseMatchesProperty(path, srcValue) {                                                                         // 1175\n  if (isKey(path) && isStrictComparable(srcValue)) {                                                                   // 1176\n    return matchesStrictComparable(toKey(path), srcValue);                                                             // 1177\n  }                                                                                                                    // 1178\n  return function(object) {                                                                                            // 1179\n    var objValue = get(object, path);                                                                                  // 1180\n    return (objValue === undefined && objValue === srcValue)                                                           // 1181\n      ? hasIn(object, path)                                                                                            // 1182\n      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);                     // 1183\n  };                                                                                                                   // 1184\n}                                                                                                                      // 1185\n                                                                                                                       // 1186\n/**                                                                                                                    // 1187\n * A specialized version of `baseProperty` which supports deep paths.                                                  // 1188\n *                                                                                                                     // 1189\n * @private                                                                                                            // 1190\n * @param {Array|string} path The path of the property to get.                                                         // 1191\n * @returns {Function} Returns the new accessor function.                                                              // 1192\n */                                                                                                                    // 1193\nfunction basePropertyDeep(path) {                                                                                      // 1194\n  return function(object) {                                                                                            // 1195\n    return baseGet(object, path);                                                                                      // 1196\n  };                                                                                                                   // 1197\n}                                                                                                                      // 1198\n                                                                                                                       // 1199\n/**                                                                                                                    // 1200\n * The base implementation of `_.toString` which doesn't convert nullish                                               // 1201\n * values to empty strings.                                                                                            // 1202\n *                                                                                                                     // 1203\n * @private                                                                                                            // 1204\n * @param {*} value The value to process.                                                                              // 1205\n * @returns {string} Returns the string.                                                                               // 1206\n */                                                                                                                    // 1207\nfunction baseToString(value) {                                                                                         // 1208\n  // Exit early for strings to avoid a performance hit in some environments.                                           // 1209\n  if (typeof value == 'string') {                                                                                      // 1210\n    return value;                                                                                                      // 1211\n  }                                                                                                                    // 1212\n  if (isSymbol(value)) {                                                                                               // 1213\n    return symbolToString ? symbolToString.call(value) : '';                                                           // 1214\n  }                                                                                                                    // 1215\n  var result = (value + '');                                                                                           // 1216\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;                                                  // 1217\n}                                                                                                                      // 1218\n                                                                                                                       // 1219\n/**                                                                                                                    // 1220\n * Casts `value` to a path array if it's not one.                                                                      // 1221\n *                                                                                                                     // 1222\n * @private                                                                                                            // 1223\n * @param {*} value The value to inspect.                                                                              // 1224\n * @returns {Array} Returns the cast property path array.                                                              // 1225\n */                                                                                                                    // 1226\nfunction castPath(value) {                                                                                             // 1227\n  return isArray(value) ? value : stringToPath(value);                                                                 // 1228\n}                                                                                                                      // 1229\n                                                                                                                       // 1230\n/**                                                                                                                    // 1231\n * Creates a function like `_.groupBy`.                                                                                // 1232\n *                                                                                                                     // 1233\n * @private                                                                                                            // 1234\n * @param {Function} setter The function to set accumulator values.                                                    // 1235\n * @param {Function} [initializer] The accumulator object initializer.                                                 // 1236\n * @returns {Function} Returns the new aggregator function.                                                            // 1237\n */                                                                                                                    // 1238\nfunction createAggregator(setter, initializer) {                                                                       // 1239\n  return function(collection, iteratee) {                                                                              // 1240\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,                                                 // 1241\n        accumulator = initializer ? initializer() : {};                                                                // 1242\n                                                                                                                       // 1243\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);                                           // 1244\n  };                                                                                                                   // 1245\n}                                                                                                                      // 1246\n                                                                                                                       // 1247\n/**                                                                                                                    // 1248\n * Creates a `baseEach` or `baseEachRight` function.                                                                   // 1249\n *                                                                                                                     // 1250\n * @private                                                                                                            // 1251\n * @param {Function} eachFunc The function to iterate over a collection.                                               // 1252\n * @param {boolean} [fromRight] Specify iterating from right to left.                                                  // 1253\n * @returns {Function} Returns the new base function.                                                                  // 1254\n */                                                                                                                    // 1255\nfunction createBaseEach(eachFunc, fromRight) {                                                                         // 1256\n  return function(collection, iteratee) {                                                                              // 1257\n    if (collection == null) {                                                                                          // 1258\n      return collection;                                                                                               // 1259\n    }                                                                                                                  // 1260\n    if (!isArrayLike(collection)) {                                                                                    // 1261\n      return eachFunc(collection, iteratee);                                                                           // 1262\n    }                                                                                                                  // 1263\n    var length = collection.length,                                                                                    // 1264\n        index = fromRight ? length : -1,                                                                               // 1265\n        iterable = Object(collection);                                                                                 // 1266\n                                                                                                                       // 1267\n    while ((fromRight ? index-- : ++index < length)) {                                                                 // 1268\n      if (iteratee(iterable[index], index, iterable) === false) {                                                      // 1269\n        break;                                                                                                         // 1270\n      }                                                                                                                // 1271\n    }                                                                                                                  // 1272\n    return collection;                                                                                                 // 1273\n  };                                                                                                                   // 1274\n}                                                                                                                      // 1275\n                                                                                                                       // 1276\n/**                                                                                                                    // 1277\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.                                                  // 1278\n *                                                                                                                     // 1279\n * @private                                                                                                            // 1280\n * @param {boolean} [fromRight] Specify iterating from right to left.                                                  // 1281\n * @returns {Function} Returns the new base function.                                                                  // 1282\n */                                                                                                                    // 1283\nfunction createBaseFor(fromRight) {                                                                                    // 1284\n  return function(object, iteratee, keysFunc) {                                                                        // 1285\n    var index = -1,                                                                                                    // 1286\n        iterable = Object(object),                                                                                     // 1287\n        props = keysFunc(object),                                                                                      // 1288\n        length = props.length;                                                                                         // 1289\n                                                                                                                       // 1290\n    while (length--) {                                                                                                 // 1291\n      var key = props[fromRight ? length : ++index];                                                                   // 1292\n      if (iteratee(iterable[key], key, iterable) === false) {                                                          // 1293\n        break;                                                                                                         // 1294\n      }                                                                                                                // 1295\n    }                                                                                                                  // 1296\n    return object;                                                                                                     // 1297\n  };                                                                                                                   // 1298\n}                                                                                                                      // 1299\n                                                                                                                       // 1300\n/**                                                                                                                    // 1301\n * A specialized version of `baseIsEqualDeep` for arrays with support for                                              // 1302\n * partial deep comparisons.                                                                                           // 1303\n *                                                                                                                     // 1304\n * @private                                                                                                            // 1305\n * @param {Array} array The array to compare.                                                                          // 1306\n * @param {Array} other The other array to compare.                                                                    // 1307\n * @param {Function} equalFunc The function to determine equivalents of values.                                        // 1308\n * @param {Function} customizer The function to customize comparisons.                                                 // 1309\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`                                          // 1310\n *  for more details.                                                                                                  // 1311\n * @param {Object} stack Tracks traversed `array` and `other` objects.                                                 // 1312\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.                                       // 1313\n */                                                                                                                    // 1314\nfunction equalArrays(array, other, equalFunc, customizer, bitmask, stack) {                                            // 1315\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,                                                                      // 1316\n      arrLength = array.length,                                                                                        // 1317\n      othLength = other.length;                                                                                        // 1318\n                                                                                                                       // 1319\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {                                               // 1320\n    return false;                                                                                                      // 1321\n  }                                                                                                                    // 1322\n  // Assume cyclic values are equal.                                                                                   // 1323\n  var stacked = stack.get(array);                                                                                      // 1324\n  if (stacked && stack.get(other)) {                                                                                   // 1325\n    return stacked == other;                                                                                           // 1326\n  }                                                                                                                    // 1327\n  var index = -1,                                                                                                      // 1328\n      result = true,                                                                                                   // 1329\n      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;                                            // 1330\n                                                                                                                       // 1331\n  stack.set(array, other);                                                                                             // 1332\n  stack.set(other, array);                                                                                             // 1333\n                                                                                                                       // 1334\n  // Ignore non-index properties.                                                                                      // 1335\n  while (++index < arrLength) {                                                                                        // 1336\n    var arrValue = array[index],                                                                                       // 1337\n        othValue = other[index];                                                                                       // 1338\n                                                                                                                       // 1339\n    if (customizer) {                                                                                                  // 1340\n      var compared = isPartial                                                                                         // 1341\n        ? customizer(othValue, arrValue, index, other, array, stack)                                                   // 1342\n        : customizer(arrValue, othValue, index, array, other, stack);                                                  // 1343\n    }                                                                                                                  // 1344\n    if (compared !== undefined) {                                                                                      // 1345\n      if (compared) {                                                                                                  // 1346\n        continue;                                                                                                      // 1347\n      }                                                                                                                // 1348\n      result = false;                                                                                                  // 1349\n      break;                                                                                                           // 1350\n    }                                                                                                                  // 1351\n    // Recursively compare arrays (susceptible to call stack limits).                                                  // 1352\n    if (seen) {                                                                                                        // 1353\n      if (!arraySome(other, function(othValue, othIndex) {                                                             // 1354\n            if (!seen.has(othIndex) &&                                                                                 // 1355\n                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {                // 1356\n              return seen.add(othIndex);                                                                               // 1357\n            }                                                                                                          // 1358\n          })) {                                                                                                        // 1359\n        result = false;                                                                                                // 1360\n        break;                                                                                                         // 1361\n      }                                                                                                                // 1362\n    } else if (!(                                                                                                      // 1363\n          arrValue === othValue ||                                                                                     // 1364\n            equalFunc(arrValue, othValue, customizer, bitmask, stack)                                                  // 1365\n        )) {                                                                                                           // 1366\n      result = false;                                                                                                  // 1367\n      break;                                                                                                           // 1368\n    }                                                                                                                  // 1369\n  }                                                                                                                    // 1370\n  stack['delete'](array);                                                                                              // 1371\n  stack['delete'](other);                                                                                              // 1372\n  return result;                                                                                                       // 1373\n}                                                                                                                      // 1374\n                                                                                                                       // 1375\n/**                                                                                                                    // 1376\n * A specialized version of `baseIsEqualDeep` for comparing objects of                                                 // 1377\n * the same `toStringTag`.                                                                                             // 1378\n *                                                                                                                     // 1379\n * **Note:** This function only supports comparing values with tags of                                                 // 1380\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                        // 1381\n *                                                                                                                     // 1382\n * @private                                                                                                            // 1383\n * @param {Object} object The object to compare.                                                                       // 1384\n * @param {Object} other The other object to compare.                                                                  // 1385\n * @param {string} tag The `toStringTag` of the objects to compare.                                                    // 1386\n * @param {Function} equalFunc The function to determine equivalents of values.                                        // 1387\n * @param {Function} customizer The function to customize comparisons.                                                 // 1388\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`                                          // 1389\n *  for more details.                                                                                                  // 1390\n * @param {Object} stack Tracks traversed `object` and `other` objects.                                                // 1391\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                      // 1392\n */                                                                                                                    // 1393\nfunction equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {                                       // 1394\n  switch (tag) {                                                                                                       // 1395\n    case dataViewTag:                                                                                                  // 1396\n      if ((object.byteLength != other.byteLength) ||                                                                   // 1397\n          (object.byteOffset != other.byteOffset)) {                                                                   // 1398\n        return false;                                                                                                  // 1399\n      }                                                                                                                // 1400\n      object = object.buffer;                                                                                          // 1401\n      other = other.buffer;                                                                                            // 1402\n                                                                                                                       // 1403\n    case arrayBufferTag:                                                                                               // 1404\n      if ((object.byteLength != other.byteLength) ||                                                                   // 1405\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {                                                 // 1406\n        return false;                                                                                                  // 1407\n      }                                                                                                                // 1408\n      return true;                                                                                                     // 1409\n                                                                                                                       // 1410\n    case boolTag:                                                                                                      // 1411\n    case dateTag:                                                                                                      // 1412\n    case numberTag:                                                                                                    // 1413\n      // Coerce booleans to `1` or `0` and dates to milliseconds.                                                      // 1414\n      // Invalid dates are coerced to `NaN`.                                                                           // 1415\n      return eq(+object, +other);                                                                                      // 1416\n                                                                                                                       // 1417\n    case errorTag:                                                                                                     // 1418\n      return object.name == other.name && object.message == other.message;                                             // 1419\n                                                                                                                       // 1420\n    case regexpTag:                                                                                                    // 1421\n    case stringTag:                                                                                                    // 1422\n      // Coerce regexes to strings and treat strings, primitives and objects,                                          // 1423\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring                   // 1424\n      // for more details.                                                                                             // 1425\n      return object == (other + '');                                                                                   // 1426\n                                                                                                                       // 1427\n    case mapTag:                                                                                                       // 1428\n      var convert = mapToArray;                                                                                        // 1429\n                                                                                                                       // 1430\n    case setTag:                                                                                                       // 1431\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;                                                                  // 1432\n      convert || (convert = setToArray);                                                                               // 1433\n                                                                                                                       // 1434\n      if (object.size != other.size && !isPartial) {                                                                   // 1435\n        return false;                                                                                                  // 1436\n      }                                                                                                                // 1437\n      // Assume cyclic values are equal.                                                                               // 1438\n      var stacked = stack.get(object);                                                                                 // 1439\n      if (stacked) {                                                                                                   // 1440\n        return stacked == other;                                                                                       // 1441\n      }                                                                                                                // 1442\n      bitmask |= UNORDERED_COMPARE_FLAG;                                                                               // 1443\n                                                                                                                       // 1444\n      // Recursively compare objects (susceptible to call stack limits).                                               // 1445\n      stack.set(object, other);                                                                                        // 1446\n      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);                // 1447\n      stack['delete'](object);                                                                                         // 1448\n      return result;                                                                                                   // 1449\n                                                                                                                       // 1450\n    case symbolTag:                                                                                                    // 1451\n      if (symbolValueOf) {                                                                                             // 1452\n        return symbolValueOf.call(object) == symbolValueOf.call(other);                                                // 1453\n      }                                                                                                                // 1454\n  }                                                                                                                    // 1455\n  return false;                                                                                                        // 1456\n}                                                                                                                      // 1457\n                                                                                                                       // 1458\n/**                                                                                                                    // 1459\n * A specialized version of `baseIsEqualDeep` for objects with support for                                             // 1460\n * partial deep comparisons.                                                                                           // 1461\n *                                                                                                                     // 1462\n * @private                                                                                                            // 1463\n * @param {Object} object The object to compare.                                                                       // 1464\n * @param {Object} other The other object to compare.                                                                  // 1465\n * @param {Function} equalFunc The function to determine equivalents of values.                                        // 1466\n * @param {Function} customizer The function to customize comparisons.                                                 // 1467\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`                                          // 1468\n *  for more details.                                                                                                  // 1469\n * @param {Object} stack Tracks traversed `object` and `other` objects.                                                // 1470\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                      // 1471\n */                                                                                                                    // 1472\nfunction equalObjects(object, other, equalFunc, customizer, bitmask, stack) {                                          // 1473\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,                                                                      // 1474\n      objProps = keys(object),                                                                                         // 1475\n      objLength = objProps.length,                                                                                     // 1476\n      othProps = keys(other),                                                                                          // 1477\n      othLength = othProps.length;                                                                                     // 1478\n                                                                                                                       // 1479\n  if (objLength != othLength && !isPartial) {                                                                          // 1480\n    return false;                                                                                                      // 1481\n  }                                                                                                                    // 1482\n  var index = objLength;                                                                                               // 1483\n  while (index--) {                                                                                                    // 1484\n    var key = objProps[index];                                                                                         // 1485\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {                                               // 1486\n      return false;                                                                                                    // 1487\n    }                                                                                                                  // 1488\n  }                                                                                                                    // 1489\n  // Assume cyclic values are equal.                                                                                   // 1490\n  var stacked = stack.get(object);                                                                                     // 1491\n  if (stacked && stack.get(other)) {                                                                                   // 1492\n    return stacked == other;                                                                                           // 1493\n  }                                                                                                                    // 1494\n  var result = true;                                                                                                   // 1495\n  stack.set(object, other);                                                                                            // 1496\n  stack.set(other, object);                                                                                            // 1497\n                                                                                                                       // 1498\n  var skipCtor = isPartial;                                                                                            // 1499\n  while (++index < objLength) {                                                                                        // 1500\n    key = objProps[index];                                                                                             // 1501\n    var objValue = object[key],                                                                                        // 1502\n        othValue = other[key];                                                                                         // 1503\n                                                                                                                       // 1504\n    if (customizer) {                                                                                                  // 1505\n      var compared = isPartial                                                                                         // 1506\n        ? customizer(othValue, objValue, key, other, object, stack)                                                    // 1507\n        : customizer(objValue, othValue, key, object, other, stack);                                                   // 1508\n    }                                                                                                                  // 1509\n    // Recursively compare objects (susceptible to call stack limits).                                                 // 1510\n    if (!(compared === undefined                                                                                       // 1511\n          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))                       // 1512\n          : compared                                                                                                   // 1513\n        )) {                                                                                                           // 1514\n      result = false;                                                                                                  // 1515\n      break;                                                                                                           // 1516\n    }                                                                                                                  // 1517\n    skipCtor || (skipCtor = key == 'constructor');                                                                     // 1518\n  }                                                                                                                    // 1519\n  if (result && !skipCtor) {                                                                                           // 1520\n    var objCtor = object.constructor,                                                                                  // 1521\n        othCtor = other.constructor;                                                                                   // 1522\n                                                                                                                       // 1523\n    // Non `Object` object instances with different constructors are not equal.                                        // 1524\n    if (objCtor != othCtor &&                                                                                          // 1525\n        ('constructor' in object && 'constructor' in other) &&                                                         // 1526\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&                                                // 1527\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {                                               // 1528\n      result = false;                                                                                                  // 1529\n    }                                                                                                                  // 1530\n  }                                                                                                                    // 1531\n  stack['delete'](object);                                                                                             // 1532\n  stack['delete'](other);                                                                                              // 1533\n  return result;                                                                                                       // 1534\n}                                                                                                                      // 1535\n                                                                                                                       // 1536\n/**                                                                                                                    // 1537\n * Gets the data for `map`.                                                                                            // 1538\n *                                                                                                                     // 1539\n * @private                                                                                                            // 1540\n * @param {Object} map The map to query.                                                                               // 1541\n * @param {string} key The reference key.                                                                              // 1542\n * @returns {*} Returns the map data.                                                                                  // 1543\n */                                                                                                                    // 1544\nfunction getMapData(map, key) {                                                                                        // 1545\n  var data = map.__data__;                                                                                             // 1546\n  return isKeyable(key)                                                                                                // 1547\n    ? data[typeof key == 'string' ? 'string' : 'hash']                                                                 // 1548\n    : data.map;                                                                                                        // 1549\n}                                                                                                                      // 1550\n                                                                                                                       // 1551\n/**                                                                                                                    // 1552\n * Gets the property names, values, and compare flags of `object`.                                                     // 1553\n *                                                                                                                     // 1554\n * @private                                                                                                            // 1555\n * @param {Object} object The object to query.                                                                         // 1556\n * @returns {Array} Returns the match data of `object`.                                                                // 1557\n */                                                                                                                    // 1558\nfunction getMatchData(object) {                                                                                        // 1559\n  var result = keys(object),                                                                                           // 1560\n      length = result.length;                                                                                          // 1561\n                                                                                                                       // 1562\n  while (length--) {                                                                                                   // 1563\n    var key = result[length],                                                                                          // 1564\n        value = object[key];                                                                                           // 1565\n                                                                                                                       // 1566\n    result[length] = [key, value, isStrictComparable(value)];                                                          // 1567\n  }                                                                                                                    // 1568\n  return result;                                                                                                       // 1569\n}                                                                                                                      // 1570\n                                                                                                                       // 1571\n/**                                                                                                                    // 1572\n * Gets the native function at `key` of `object`.                                                                      // 1573\n *                                                                                                                     // 1574\n * @private                                                                                                            // 1575\n * @param {Object} object The object to query.                                                                         // 1576\n * @param {string} key The key of the method to get.                                                                   // 1577\n * @returns {*} Returns the function if it's native, else `undefined`.                                                 // 1578\n */                                                                                                                    // 1579\nfunction getNative(object, key) {                                                                                      // 1580\n  var value = getValue(object, key);                                                                                   // 1581\n  return baseIsNative(value) ? value : undefined;                                                                      // 1582\n}                                                                                                                      // 1583\n                                                                                                                       // 1584\n/**                                                                                                                    // 1585\n * Gets the `toStringTag` of `value`.                                                                                  // 1586\n *                                                                                                                     // 1587\n * @private                                                                                                            // 1588\n * @param {*} value The value to query.                                                                                // 1589\n * @returns {string} Returns the `toStringTag`.                                                                        // 1590\n */                                                                                                                    // 1591\nvar getTag = baseGetTag;                                                                                               // 1592\n                                                                                                                       // 1593\n// Fallback for data views, maps, sets, and weak maps in IE 11,                                                        // 1594\n// for data views in Edge < 14, and promises in Node.js.                                                               // 1595\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||                                           // 1596\n    (Map && getTag(new Map) != mapTag) ||                                                                              // 1597\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||                                                            // 1598\n    (Set && getTag(new Set) != setTag) ||                                                                              // 1599\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {                                                                  // 1600\n  getTag = function(value) {                                                                                           // 1601\n    var result = objectToString.call(value),                                                                           // 1602\n        Ctor = result == objectTag ? value.constructor : undefined,                                                    // 1603\n        ctorString = Ctor ? toSource(Ctor) : undefined;                                                                // 1604\n                                                                                                                       // 1605\n    if (ctorString) {                                                                                                  // 1606\n      switch (ctorString) {                                                                                            // 1607\n        case dataViewCtorString: return dataViewTag;                                                                   // 1608\n        case mapCtorString: return mapTag;                                                                             // 1609\n        case promiseCtorString: return promiseTag;                                                                     // 1610\n        case setCtorString: return setTag;                                                                             // 1611\n        case weakMapCtorString: return weakMapTag;                                                                     // 1612\n      }                                                                                                                // 1613\n    }                                                                                                                  // 1614\n    return result;                                                                                                     // 1615\n  };                                                                                                                   // 1616\n}                                                                                                                      // 1617\n                                                                                                                       // 1618\n/**                                                                                                                    // 1619\n * Checks if `path` exists on `object`.                                                                                // 1620\n *                                                                                                                     // 1621\n * @private                                                                                                            // 1622\n * @param {Object} object The object to query.                                                                         // 1623\n * @param {Array|string} path The path to check.                                                                       // 1624\n * @param {Function} hasFunc The function to check properties.                                                         // 1625\n * @returns {boolean} Returns `true` if `path` exists, else `false`.                                                   // 1626\n */                                                                                                                    // 1627\nfunction hasPath(object, path, hasFunc) {                                                                              // 1628\n  path = isKey(path, object) ? [path] : castPath(path);                                                                // 1629\n                                                                                                                       // 1630\n  var result,                                                                                                          // 1631\n      index = -1,                                                                                                      // 1632\n      length = path.length;                                                                                            // 1633\n                                                                                                                       // 1634\n  while (++index < length) {                                                                                           // 1635\n    var key = toKey(path[index]);                                                                                      // 1636\n    if (!(result = object != null && hasFunc(object, key))) {                                                          // 1637\n      break;                                                                                                           // 1638\n    }                                                                                                                  // 1639\n    object = object[key];                                                                                              // 1640\n  }                                                                                                                    // 1641\n  if (result) {                                                                                                        // 1642\n    return result;                                                                                                     // 1643\n  }                                                                                                                    // 1644\n  var length = object ? object.length : 0;                                                                             // 1645\n  return !!length && isLength(length) && isIndex(key, length) &&                                                       // 1646\n    (isArray(object) || isArguments(object));                                                                          // 1647\n}                                                                                                                      // 1648\n                                                                                                                       // 1649\n/**                                                                                                                    // 1650\n * Checks if `value` is a valid array-like index.                                                                      // 1651\n *                                                                                                                     // 1652\n * @private                                                                                                            // 1653\n * @param {*} value The value to check.                                                                                // 1654\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                        // 1655\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                        // 1656\n */                                                                                                                    // 1657\nfunction isIndex(value, length) {                                                                                      // 1658\n  length = length == null ? MAX_SAFE_INTEGER : length;                                                                 // 1659\n  return !!length &&                                                                                                   // 1660\n    (typeof value == 'number' || reIsUint.test(value)) &&                                                              // 1661\n    (value > -1 && value % 1 == 0 && value < length);                                                                  // 1662\n}                                                                                                                      // 1663\n                                                                                                                       // 1664\n/**                                                                                                                    // 1665\n * Checks if `value` is a property name and not a property path.                                                       // 1666\n *                                                                                                                     // 1667\n * @private                                                                                                            // 1668\n * @param {*} value The value to check.                                                                                // 1669\n * @param {Object} [object] The object to query keys on.                                                               // 1670\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.                                      // 1671\n */                                                                                                                    // 1672\nfunction isKey(value, object) {                                                                                        // 1673\n  if (isArray(value)) {                                                                                                // 1674\n    return false;                                                                                                      // 1675\n  }                                                                                                                    // 1676\n  var type = typeof value;                                                                                             // 1677\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||                                                     // 1678\n      value == null || isSymbol(value)) {                                                                              // 1679\n    return true;                                                                                                       // 1680\n  }                                                                                                                    // 1681\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||                                                     // 1682\n    (object != null && value in Object(object));                                                                       // 1683\n}                                                                                                                      // 1684\n                                                                                                                       // 1685\n/**                                                                                                                    // 1686\n * Checks if `value` is suitable for use as unique object key.                                                         // 1687\n *                                                                                                                     // 1688\n * @private                                                                                                            // 1689\n * @param {*} value The value to check.                                                                                // 1690\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.                                             // 1691\n */                                                                                                                    // 1692\nfunction isKeyable(value) {                                                                                            // 1693\n  var type = typeof value;                                                                                             // 1694\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')                               // 1695\n    ? (value !== '__proto__')                                                                                          // 1696\n    : (value === null);                                                                                                // 1697\n}                                                                                                                      // 1698\n                                                                                                                       // 1699\n/**                                                                                                                    // 1700\n * Checks if `func` has its source masked.                                                                             // 1701\n *                                                                                                                     // 1702\n * @private                                                                                                            // 1703\n * @param {Function} func The function to check.                                                                       // 1704\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.                                                // 1705\n */                                                                                                                    // 1706\nfunction isMasked(func) {                                                                                              // 1707\n  return !!maskSrcKey && (maskSrcKey in func);                                                                         // 1708\n}                                                                                                                      // 1709\n                                                                                                                       // 1710\n/**                                                                                                                    // 1711\n * Checks if `value` is likely a prototype object.                                                                     // 1712\n *                                                                                                                     // 1713\n * @private                                                                                                            // 1714\n * @param {*} value The value to check.                                                                                // 1715\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.                                          // 1716\n */                                                                                                                    // 1717\nfunction isPrototype(value) {                                                                                          // 1718\n  var Ctor = value && value.constructor,                                                                               // 1719\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;                                            // 1720\n                                                                                                                       // 1721\n  return value === proto;                                                                                              // 1722\n}                                                                                                                      // 1723\n                                                                                                                       // 1724\n/**                                                                                                                    // 1725\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.                                          // 1726\n *                                                                                                                     // 1727\n * @private                                                                                                            // 1728\n * @param {*} value The value to check.                                                                                // 1729\n * @returns {boolean} Returns `true` if `value` if suitable for strict                                                 // 1730\n *  equality comparisons, else `false`.                                                                                // 1731\n */                                                                                                                    // 1732\nfunction isStrictComparable(value) {                                                                                   // 1733\n  return value === value && !isObject(value);                                                                          // 1734\n}                                                                                                                      // 1735\n                                                                                                                       // 1736\n/**                                                                                                                    // 1737\n * A specialized version of `matchesProperty` for source values suitable                                               // 1738\n * for strict equality comparisons, i.e. `===`.                                                                        // 1739\n *                                                                                                                     // 1740\n * @private                                                                                                            // 1741\n * @param {string} key The key of the property to get.                                                                 // 1742\n * @param {*} srcValue The value to match.                                                                             // 1743\n * @returns {Function} Returns the new spec function.                                                                  // 1744\n */                                                                                                                    // 1745\nfunction matchesStrictComparable(key, srcValue) {                                                                      // 1746\n  return function(object) {                                                                                            // 1747\n    if (object == null) {                                                                                              // 1748\n      return false;                                                                                                    // 1749\n    }                                                                                                                  // 1750\n    return object[key] === srcValue &&                                                                                 // 1751\n      (srcValue !== undefined || (key in Object(object)));                                                             // 1752\n  };                                                                                                                   // 1753\n}                                                                                                                      // 1754\n                                                                                                                       // 1755\n/**                                                                                                                    // 1756\n * Converts `string` to a property path array.                                                                         // 1757\n *                                                                                                                     // 1758\n * @private                                                                                                            // 1759\n * @param {string} string The string to convert.                                                                       // 1760\n * @returns {Array} Returns the property path array.                                                                   // 1761\n */                                                                                                                    // 1762\nvar stringToPath = memoize(function(string) {                                                                          // 1763\n  string = toString(string);                                                                                           // 1764\n                                                                                                                       // 1765\n  var result = [];                                                                                                     // 1766\n  if (reLeadingDot.test(string)) {                                                                                     // 1767\n    result.push('');                                                                                                   // 1768\n  }                                                                                                                    // 1769\n  string.replace(rePropName, function(match, number, quote, string) {                                                  // 1770\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));                                       // 1771\n  });                                                                                                                  // 1772\n  return result;                                                                                                       // 1773\n});                                                                                                                    // 1774\n                                                                                                                       // 1775\n/**                                                                                                                    // 1776\n * Converts `value` to a string key if it's not a string or symbol.                                                    // 1777\n *                                                                                                                     // 1778\n * @private                                                                                                            // 1779\n * @param {*} value The value to inspect.                                                                              // 1780\n * @returns {string|symbol} Returns the key.                                                                           // 1781\n */                                                                                                                    // 1782\nfunction toKey(value) {                                                                                                // 1783\n  if (typeof value == 'string' || isSymbol(value)) {                                                                   // 1784\n    return value;                                                                                                      // 1785\n  }                                                                                                                    // 1786\n  var result = (value + '');                                                                                           // 1787\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;                                                  // 1788\n}                                                                                                                      // 1789\n                                                                                                                       // 1790\n/**                                                                                                                    // 1791\n * Converts `func` to its source code.                                                                                 // 1792\n *                                                                                                                     // 1793\n * @private                                                                                                            // 1794\n * @param {Function} func The function to process.                                                                     // 1795\n * @returns {string} Returns the source code.                                                                          // 1796\n */                                                                                                                    // 1797\nfunction toSource(func) {                                                                                              // 1798\n  if (func != null) {                                                                                                  // 1799\n    try {                                                                                                              // 1800\n      return funcToString.call(func);                                                                                  // 1801\n    } catch (e) {}                                                                                                     // 1802\n    try {                                                                                                              // 1803\n      return (func + '');                                                                                              // 1804\n    } catch (e) {}                                                                                                     // 1805\n  }                                                                                                                    // 1806\n  return '';                                                                                                           // 1807\n}                                                                                                                      // 1808\n                                                                                                                       // 1809\n/**                                                                                                                    // 1810\n * Creates an object composed of keys generated from the results of running                                            // 1811\n * each element of `collection` thru `iteratee`. The corresponding value of                                            // 1812\n * each key is the number of times the key was returned by `iteratee`. The                                             // 1813\n * iteratee is invoked with one argument: (value).                                                                     // 1814\n *                                                                                                                     // 1815\n * @static                                                                                                             // 1816\n * @memberOf _                                                                                                         // 1817\n * @since 0.5.0                                                                                                        // 1818\n * @category Collection                                                                                                // 1819\n * @param {Array|Object} collection The collection to iterate over.                                                    // 1820\n * @param {Function} [iteratee=_.identity]                                                                             // 1821\n *  The iteratee to transform keys.                                                                                    // 1822\n * @returns {Object} Returns the composed aggregate object.                                                            // 1823\n * @example                                                                                                            // 1824\n *                                                                                                                     // 1825\n * _.countBy([6.1, 4.2, 6.3], Math.floor);                                                                             // 1826\n * // => { '4': 1, '6': 2 }                                                                                            // 1827\n *                                                                                                                     // 1828\n * // The `_.property` iteratee shorthand.                                                                             // 1829\n * _.countBy(['one', 'two', 'three'], 'length');                                                                       // 1830\n * // => { '3': 2, '5': 1 }                                                                                            // 1831\n */                                                                                                                    // 1832\nvar countBy = createAggregator(function(result, value, key) {                                                          // 1833\n  hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);                                                // 1834\n});                                                                                                                    // 1835\n                                                                                                                       // 1836\n/**                                                                                                                    // 1837\n * Creates a function that memoizes the result of `func`. If `resolver` is                                             // 1838\n * provided, it determines the cache key for storing the result based on the                                           // 1839\n * arguments provided to the memoized function. By default, the first argument                                         // 1840\n * provided to the memoized function is used as the map cache key. The `func`                                          // 1841\n * is invoked with the `this` binding of the memoized function.                                                        // 1842\n *                                                                                                                     // 1843\n * **Note:** The cache is exposed as the `cache` property on the memoized                                              // 1844\n * function. Its creation may be customized by replacing the `_.memoize.Cache`                                         // 1845\n * constructor with one whose instances implement the                                                                  // 1846\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)                     // 1847\n * method interface of `delete`, `get`, `has`, and `set`.                                                              // 1848\n *                                                                                                                     // 1849\n * @static                                                                                                             // 1850\n * @memberOf _                                                                                                         // 1851\n * @since 0.1.0                                                                                                        // 1852\n * @category Function                                                                                                  // 1853\n * @param {Function} func The function to have its output memoized.                                                    // 1854\n * @param {Function} [resolver] The function to resolve the cache key.                                                 // 1855\n * @returns {Function} Returns the new memoized function.                                                              // 1856\n * @example                                                                                                            // 1857\n *                                                                                                                     // 1858\n * var object = { 'a': 1, 'b': 2 };                                                                                    // 1859\n * var other = { 'c': 3, 'd': 4 };                                                                                     // 1860\n *                                                                                                                     // 1861\n * var values = _.memoize(_.values);                                                                                   // 1862\n * values(object);                                                                                                     // 1863\n * // => [1, 2]                                                                                                        // 1864\n *                                                                                                                     // 1865\n * values(other);                                                                                                      // 1866\n * // => [3, 4]                                                                                                        // 1867\n *                                                                                                                     // 1868\n * object.a = 2;                                                                                                       // 1869\n * values(object);                                                                                                     // 1870\n * // => [1, 2]                                                                                                        // 1871\n *                                                                                                                     // 1872\n * // Modify the result cache.                                                                                         // 1873\n * values.cache.set(object, ['a', 'b']);                                                                               // 1874\n * values(object);                                                                                                     // 1875\n * // => ['a', 'b']                                                                                                    // 1876\n *                                                                                                                     // 1877\n * // Replace `_.memoize.Cache`.                                                                                       // 1878\n * _.memoize.Cache = WeakMap;                                                                                          // 1879\n */                                                                                                                    // 1880\nfunction memoize(func, resolver) {                                                                                     // 1881\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {                                      // 1882\n    throw new TypeError(FUNC_ERROR_TEXT);                                                                              // 1883\n  }                                                                                                                    // 1884\n  var memoized = function() {                                                                                          // 1885\n    var args = arguments,                                                                                              // 1886\n        key = resolver ? resolver.apply(this, args) : args[0],                                                         // 1887\n        cache = memoized.cache;                                                                                        // 1888\n                                                                                                                       // 1889\n    if (cache.has(key)) {                                                                                              // 1890\n      return cache.get(key);                                                                                           // 1891\n    }                                                                                                                  // 1892\n    var result = func.apply(this, args);                                                                               // 1893\n    memoized.cache = cache.set(key, result);                                                                           // 1894\n    return result;                                                                                                     // 1895\n  };                                                                                                                   // 1896\n  memoized.cache = new (memoize.Cache || MapCache);                                                                    // 1897\n  return memoized;                                                                                                     // 1898\n}                                                                                                                      // 1899\n                                                                                                                       // 1900\n// Assign cache to `_.memoize`.                                                                                        // 1901\nmemoize.Cache = MapCache;                                                                                              // 1902\n                                                                                                                       // 1903\n/**                                                                                                                    // 1904\n * Performs a                                                                                                          // 1905\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)                                    // 1906\n * comparison between two values to determine if they are equivalent.                                                  // 1907\n *                                                                                                                     // 1908\n * @static                                                                                                             // 1909\n * @memberOf _                                                                                                         // 1910\n * @since 4.0.0                                                                                                        // 1911\n * @category Lang                                                                                                      // 1912\n * @param {*} value The value to compare.                                                                              // 1913\n * @param {*} other The other value to compare.                                                                        // 1914\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                       // 1915\n * @example                                                                                                            // 1916\n *                                                                                                                     // 1917\n * var object = { 'a': 1 };                                                                                            // 1918\n * var other = { 'a': 1 };                                                                                             // 1919\n *                                                                                                                     // 1920\n * _.eq(object, object);                                                                                               // 1921\n * // => true                                                                                                          // 1922\n *                                                                                                                     // 1923\n * _.eq(object, other);                                                                                                // 1924\n * // => false                                                                                                         // 1925\n *                                                                                                                     // 1926\n * _.eq('a', 'a');                                                                                                     // 1927\n * // => true                                                                                                          // 1928\n *                                                                                                                     // 1929\n * _.eq('a', Object('a'));                                                                                             // 1930\n * // => false                                                                                                         // 1931\n *                                                                                                                     // 1932\n * _.eq(NaN, NaN);                                                                                                     // 1933\n * // => true                                                                                                          // 1934\n */                                                                                                                    // 1935\nfunction eq(value, other) {                                                                                            // 1936\n  return value === other || (value !== value && other !== other);                                                      // 1937\n}                                                                                                                      // 1938\n                                                                                                                       // 1939\n/**                                                                                                                    // 1940\n * Checks if `value` is likely an `arguments` object.                                                                  // 1941\n *                                                                                                                     // 1942\n * @static                                                                                                             // 1943\n * @memberOf _                                                                                                         // 1944\n * @since 0.1.0                                                                                                        // 1945\n * @category Lang                                                                                                      // 1946\n * @param {*} value The value to check.                                                                                // 1947\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,                                              // 1948\n *  else `false`.                                                                                                      // 1949\n * @example                                                                                                            // 1950\n *                                                                                                                     // 1951\n * _.isArguments(function() { return arguments; }());                                                                  // 1952\n * // => true                                                                                                          // 1953\n *                                                                                                                     // 1954\n * _.isArguments([1, 2, 3]);                                                                                           // 1955\n * // => false                                                                                                         // 1956\n */                                                                                                                    // 1957\nfunction isArguments(value) {                                                                                          // 1958\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 1959\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&                                           // 1960\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);                            // 1961\n}                                                                                                                      // 1962\n                                                                                                                       // 1963\n/**                                                                                                                    // 1964\n * Checks if `value` is classified as an `Array` object.                                                               // 1965\n *                                                                                                                     // 1966\n * @static                                                                                                             // 1967\n * @memberOf _                                                                                                         // 1968\n * @since 0.1.0                                                                                                        // 1969\n * @category Lang                                                                                                      // 1970\n * @param {*} value The value to check.                                                                                // 1971\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.                                             // 1972\n * @example                                                                                                            // 1973\n *                                                                                                                     // 1974\n * _.isArray([1, 2, 3]);                                                                                               // 1975\n * // => true                                                                                                          // 1976\n *                                                                                                                     // 1977\n * _.isArray(document.body.children);                                                                                  // 1978\n * // => false                                                                                                         // 1979\n *                                                                                                                     // 1980\n * _.isArray('abc');                                                                                                   // 1981\n * // => false                                                                                                         // 1982\n *                                                                                                                     // 1983\n * _.isArray(_.noop);                                                                                                  // 1984\n * // => false                                                                                                         // 1985\n */                                                                                                                    // 1986\nvar isArray = Array.isArray;                                                                                           // 1987\n                                                                                                                       // 1988\n/**                                                                                                                    // 1989\n * Checks if `value` is array-like. A value is considered array-like if it's                                           // 1990\n * not a function and has a `value.length` that's an integer greater than or                                           // 1991\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.                                                   // 1992\n *                                                                                                                     // 1993\n * @static                                                                                                             // 1994\n * @memberOf _                                                                                                         // 1995\n * @since 4.0.0                                                                                                        // 1996\n * @category Lang                                                                                                      // 1997\n * @param {*} value The value to check.                                                                                // 1998\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                           // 1999\n * @example                                                                                                            // 2000\n *                                                                                                                     // 2001\n * _.isArrayLike([1, 2, 3]);                                                                                           // 2002\n * // => true                                                                                                          // 2003\n *                                                                                                                     // 2004\n * _.isArrayLike(document.body.children);                                                                              // 2005\n * // => true                                                                                                          // 2006\n *                                                                                                                     // 2007\n * _.isArrayLike('abc');                                                                                               // 2008\n * // => true                                                                                                          // 2009\n *                                                                                                                     // 2010\n * _.isArrayLike(_.noop);                                                                                              // 2011\n * // => false                                                                                                         // 2012\n */                                                                                                                    // 2013\nfunction isArrayLike(value) {                                                                                          // 2014\n  return value != null && isLength(value.length) && !isFunction(value);                                                // 2015\n}                                                                                                                      // 2016\n                                                                                                                       // 2017\n/**                                                                                                                    // 2018\n * This method is like `_.isArrayLike` except that it also checks if `value`                                           // 2019\n * is an object.                                                                                                       // 2020\n *                                                                                                                     // 2021\n * @static                                                                                                             // 2022\n * @memberOf _                                                                                                         // 2023\n * @since 4.0.0                                                                                                        // 2024\n * @category Lang                                                                                                      // 2025\n * @param {*} value The value to check.                                                                                // 2026\n * @returns {boolean} Returns `true` if `value` is an array-like object,                                               // 2027\n *  else `false`.                                                                                                      // 2028\n * @example                                                                                                            // 2029\n *                                                                                                                     // 2030\n * _.isArrayLikeObject([1, 2, 3]);                                                                                     // 2031\n * // => true                                                                                                          // 2032\n *                                                                                                                     // 2033\n * _.isArrayLikeObject(document.body.children);                                                                        // 2034\n * // => true                                                                                                          // 2035\n *                                                                                                                     // 2036\n * _.isArrayLikeObject('abc');                                                                                         // 2037\n * // => false                                                                                                         // 2038\n *                                                                                                                     // 2039\n * _.isArrayLikeObject(_.noop);                                                                                        // 2040\n * // => false                                                                                                         // 2041\n */                                                                                                                    // 2042\nfunction isArrayLikeObject(value) {                                                                                    // 2043\n  return isObjectLike(value) && isArrayLike(value);                                                                    // 2044\n}                                                                                                                      // 2045\n                                                                                                                       // 2046\n/**                                                                                                                    // 2047\n * Checks if `value` is classified as a `Function` object.                                                             // 2048\n *                                                                                                                     // 2049\n * @static                                                                                                             // 2050\n * @memberOf _                                                                                                         // 2051\n * @since 0.1.0                                                                                                        // 2052\n * @category Lang                                                                                                      // 2053\n * @param {*} value The value to check.                                                                                // 2054\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.                                           // 2055\n * @example                                                                                                            // 2056\n *                                                                                                                     // 2057\n * _.isFunction(_);                                                                                                    // 2058\n * // => true                                                                                                          // 2059\n *                                                                                                                     // 2060\n * _.isFunction(/abc/);                                                                                                // 2061\n * // => false                                                                                                         // 2062\n */                                                                                                                    // 2063\nfunction isFunction(value) {                                                                                           // 2064\n  // The use of `Object#toString` avoids issues with the `typeof` operator                                             // 2065\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.                                      // 2066\n  var tag = isObject(value) ? objectToString.call(value) : '';                                                         // 2067\n  return tag == funcTag || tag == genTag;                                                                              // 2068\n}                                                                                                                      // 2069\n                                                                                                                       // 2070\n/**                                                                                                                    // 2071\n * Checks if `value` is a valid array-like length.                                                                     // 2072\n *                                                                                                                     // 2073\n * **Note:** This method is loosely based on                                                                           // 2074\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).                                             // 2075\n *                                                                                                                     // 2076\n * @static                                                                                                             // 2077\n * @memberOf _                                                                                                         // 2078\n * @since 4.0.0                                                                                                        // 2079\n * @category Lang                                                                                                      // 2080\n * @param {*} value The value to check.                                                                                // 2081\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                       // 2082\n * @example                                                                                                            // 2083\n *                                                                                                                     // 2084\n * _.isLength(3);                                                                                                      // 2085\n * // => true                                                                                                          // 2086\n *                                                                                                                     // 2087\n * _.isLength(Number.MIN_VALUE);                                                                                       // 2088\n * // => false                                                                                                         // 2089\n *                                                                                                                     // 2090\n * _.isLength(Infinity);                                                                                               // 2091\n * // => false                                                                                                         // 2092\n *                                                                                                                     // 2093\n * _.isLength('3');                                                                                                    // 2094\n * // => false                                                                                                         // 2095\n */                                                                                                                    // 2096\nfunction isLength(value) {                                                                                             // 2097\n  return typeof value == 'number' &&                                                                                   // 2098\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                                                         // 2099\n}                                                                                                                      // 2100\n                                                                                                                       // 2101\n/**                                                                                                                    // 2102\n * Checks if `value` is the                                                                                            // 2103\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)                      // 2104\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                      // 2105\n *                                                                                                                     // 2106\n * @static                                                                                                             // 2107\n * @memberOf _                                                                                                         // 2108\n * @since 0.1.0                                                                                                        // 2109\n * @category Lang                                                                                                      // 2110\n * @param {*} value The value to check.                                                                                // 2111\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                            // 2112\n * @example                                                                                                            // 2113\n *                                                                                                                     // 2114\n * _.isObject({});                                                                                                     // 2115\n * // => true                                                                                                          // 2116\n *                                                                                                                     // 2117\n * _.isObject([1, 2, 3]);                                                                                              // 2118\n * // => true                                                                                                          // 2119\n *                                                                                                                     // 2120\n * _.isObject(_.noop);                                                                                                 // 2121\n * // => true                                                                                                          // 2122\n *                                                                                                                     // 2123\n * _.isObject(null);                                                                                                   // 2124\n * // => false                                                                                                         // 2125\n */                                                                                                                    // 2126\nfunction isObject(value) {                                                                                             // 2127\n  var type = typeof value;                                                                                             // 2128\n  return !!value && (type == 'object' || type == 'function');                                                          // 2129\n}                                                                                                                      // 2130\n                                                                                                                       // 2131\n/**                                                                                                                    // 2132\n * Checks if `value` is object-like. A value is object-like if it's not `null`                                         // 2133\n * and has a `typeof` result of \"object\".                                                                              // 2134\n *                                                                                                                     // 2135\n * @static                                                                                                             // 2136\n * @memberOf _                                                                                                         // 2137\n * @since 4.0.0                                                                                                        // 2138\n * @category Lang                                                                                                      // 2139\n * @param {*} value The value to check.                                                                                // 2140\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 2141\n * @example                                                                                                            // 2142\n *                                                                                                                     // 2143\n * _.isObjectLike({});                                                                                                 // 2144\n * // => true                                                                                                          // 2145\n *                                                                                                                     // 2146\n * _.isObjectLike([1, 2, 3]);                                                                                          // 2147\n * // => true                                                                                                          // 2148\n *                                                                                                                     // 2149\n * _.isObjectLike(_.noop);                                                                                             // 2150\n * // => false                                                                                                         // 2151\n *                                                                                                                     // 2152\n * _.isObjectLike(null);                                                                                               // 2153\n * // => false                                                                                                         // 2154\n */                                                                                                                    // 2155\nfunction isObjectLike(value) {                                                                                         // 2156\n  return !!value && typeof value == 'object';                                                                          // 2157\n}                                                                                                                      // 2158\n                                                                                                                       // 2159\n/**                                                                                                                    // 2160\n * Checks if `value` is classified as a `Symbol` primitive or object.                                                  // 2161\n *                                                                                                                     // 2162\n * @static                                                                                                             // 2163\n * @memberOf _                                                                                                         // 2164\n * @since 4.0.0                                                                                                        // 2165\n * @category Lang                                                                                                      // 2166\n * @param {*} value The value to check.                                                                                // 2167\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.                                             // 2168\n * @example                                                                                                            // 2169\n *                                                                                                                     // 2170\n * _.isSymbol(Symbol.iterator);                                                                                        // 2171\n * // => true                                                                                                          // 2172\n *                                                                                                                     // 2173\n * _.isSymbol('abc');                                                                                                  // 2174\n * // => false                                                                                                         // 2175\n */                                                                                                                    // 2176\nfunction isSymbol(value) {                                                                                             // 2177\n  return typeof value == 'symbol' ||                                                                                   // 2178\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);                                                  // 2179\n}                                                                                                                      // 2180\n                                                                                                                       // 2181\n/**                                                                                                                    // 2182\n * Checks if `value` is classified as a typed array.                                                                   // 2183\n *                                                                                                                     // 2184\n * @static                                                                                                             // 2185\n * @memberOf _                                                                                                         // 2186\n * @since 3.0.0                                                                                                        // 2187\n * @category Lang                                                                                                      // 2188\n * @param {*} value The value to check.                                                                                // 2189\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.                                        // 2190\n * @example                                                                                                            // 2191\n *                                                                                                                     // 2192\n * _.isTypedArray(new Uint8Array);                                                                                     // 2193\n * // => true                                                                                                          // 2194\n *                                                                                                                     // 2195\n * _.isTypedArray([]);                                                                                                 // 2196\n * // => false                                                                                                         // 2197\n */                                                                                                                    // 2198\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;                                  // 2199\n                                                                                                                       // 2200\n/**                                                                                                                    // 2201\n * Converts `value` to a string. An empty string is returned for `null`                                                // 2202\n * and `undefined` values. The sign of `-0` is preserved.                                                              // 2203\n *                                                                                                                     // 2204\n * @static                                                                                                             // 2205\n * @memberOf _                                                                                                         // 2206\n * @since 4.0.0                                                                                                        // 2207\n * @category Lang                                                                                                      // 2208\n * @param {*} value The value to process.                                                                              // 2209\n * @returns {string} Returns the string.                                                                               // 2210\n * @example                                                                                                            // 2211\n *                                                                                                                     // 2212\n * _.toString(null);                                                                                                   // 2213\n * // => ''                                                                                                            // 2214\n *                                                                                                                     // 2215\n * _.toString(-0);                                                                                                     // 2216\n * // => '-0'                                                                                                          // 2217\n *                                                                                                                     // 2218\n * _.toString([1, 2, 3]);                                                                                              // 2219\n * // => '1,2,3'                                                                                                       // 2220\n */                                                                                                                    // 2221\nfunction toString(value) {                                                                                             // 2222\n  return value == null ? '' : baseToString(value);                                                                     // 2223\n}                                                                                                                      // 2224\n                                                                                                                       // 2225\n/**                                                                                                                    // 2226\n * Gets the value at `path` of `object`. If the resolved value is                                                      // 2227\n * `undefined`, the `defaultValue` is returned in its place.                                                           // 2228\n *                                                                                                                     // 2229\n * @static                                                                                                             // 2230\n * @memberOf _                                                                                                         // 2231\n * @since 3.7.0                                                                                                        // 2232\n * @category Object                                                                                                    // 2233\n * @param {Object} object The object to query.                                                                         // 2234\n * @param {Array|string} path The path of the property to get.                                                         // 2235\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.                                       // 2236\n * @returns {*} Returns the resolved value.                                                                            // 2237\n * @example                                                                                                            // 2238\n *                                                                                                                     // 2239\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };                                                                        // 2240\n *                                                                                                                     // 2241\n * _.get(object, 'a[0].b.c');                                                                                          // 2242\n * // => 3                                                                                                             // 2243\n *                                                                                                                     // 2244\n * _.get(object, ['a', '0', 'b', 'c']);                                                                                // 2245\n * // => 3                                                                                                             // 2246\n *                                                                                                                     // 2247\n * _.get(object, 'a.b.c', 'default');                                                                                  // 2248\n * // => 'default'                                                                                                     // 2249\n */                                                                                                                    // 2250\nfunction get(object, path, defaultValue) {                                                                             // 2251\n  var result = object == null ? undefined : baseGet(object, path);                                                     // 2252\n  return result === undefined ? defaultValue : result;                                                                 // 2253\n}                                                                                                                      // 2254\n                                                                                                                       // 2255\n/**                                                                                                                    // 2256\n * Checks if `path` is a direct or inherited property of `object`.                                                     // 2257\n *                                                                                                                     // 2258\n * @static                                                                                                             // 2259\n * @memberOf _                                                                                                         // 2260\n * @since 4.0.0                                                                                                        // 2261\n * @category Object                                                                                                    // 2262\n * @param {Object} object The object to query.                                                                         // 2263\n * @param {Array|string} path The path to check.                                                                       // 2264\n * @returns {boolean} Returns `true` if `path` exists, else `false`.                                                   // 2265\n * @example                                                                                                            // 2266\n *                                                                                                                     // 2267\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });                                                               // 2268\n *                                                                                                                     // 2269\n * _.hasIn(object, 'a');                                                                                               // 2270\n * // => true                                                                                                          // 2271\n *                                                                                                                     // 2272\n * _.hasIn(object, 'a.b');                                                                                             // 2273\n * // => true                                                                                                          // 2274\n *                                                                                                                     // 2275\n * _.hasIn(object, ['a', 'b']);                                                                                        // 2276\n * // => true                                                                                                          // 2277\n *                                                                                                                     // 2278\n * _.hasIn(object, 'b');                                                                                               // 2279\n * // => false                                                                                                         // 2280\n */                                                                                                                    // 2281\nfunction hasIn(object, path) {                                                                                         // 2282\n  return object != null && hasPath(object, path, baseHasIn);                                                           // 2283\n}                                                                                                                      // 2284\n                                                                                                                       // 2285\n/**                                                                                                                    // 2286\n * Creates an array of the own enumerable property names of `object`.                                                  // 2287\n *                                                                                                                     // 2288\n * **Note:** Non-object values are coerced to objects. See the                                                         // 2289\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)                                              // 2290\n * for more details.                                                                                                   // 2291\n *                                                                                                                     // 2292\n * @static                                                                                                             // 2293\n * @since 0.1.0                                                                                                        // 2294\n * @memberOf _                                                                                                         // 2295\n * @category Object                                                                                                    // 2296\n * @param {Object} object The object to query.                                                                         // 2297\n * @returns {Array} Returns the array of property names.                                                               // 2298\n * @example                                                                                                            // 2299\n *                                                                                                                     // 2300\n * function Foo() {                                                                                                    // 2301\n *   this.a = 1;                                                                                                       // 2302\n *   this.b = 2;                                                                                                       // 2303\n * }                                                                                                                   // 2304\n *                                                                                                                     // 2305\n * Foo.prototype.c = 3;                                                                                                // 2306\n *                                                                                                                     // 2307\n * _.keys(new Foo);                                                                                                    // 2308\n * // => ['a', 'b'] (iteration order is not guaranteed)                                                                // 2309\n *                                                                                                                     // 2310\n * _.keys('hi');                                                                                                       // 2311\n * // => ['0', '1']                                                                                                    // 2312\n */                                                                                                                    // 2313\nfunction keys(object) {                                                                                                // 2314\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);                                               // 2315\n}                                                                                                                      // 2316\n                                                                                                                       // 2317\n/**                                                                                                                    // 2318\n * This method returns the first argument it receives.                                                                 // 2319\n *                                                                                                                     // 2320\n * @static                                                                                                             // 2321\n * @since 0.1.0                                                                                                        // 2322\n * @memberOf _                                                                                                         // 2323\n * @category Util                                                                                                      // 2324\n * @param {*} value Any value.                                                                                         // 2325\n * @returns {*} Returns `value`.                                                                                       // 2326\n * @example                                                                                                            // 2327\n *                                                                                                                     // 2328\n * var object = { 'a': 1 };                                                                                            // 2329\n *                                                                                                                     // 2330\n * console.log(_.identity(object) === object);                                                                         // 2331\n * // => true                                                                                                          // 2332\n */                                                                                                                    // 2333\nfunction identity(value) {                                                                                             // 2334\n  return value;                                                                                                        // 2335\n}                                                                                                                      // 2336\n                                                                                                                       // 2337\n/**                                                                                                                    // 2338\n * Creates a function that returns the value at `path` of a given object.                                              // 2339\n *                                                                                                                     // 2340\n * @static                                                                                                             // 2341\n * @memberOf _                                                                                                         // 2342\n * @since 2.4.0                                                                                                        // 2343\n * @category Util                                                                                                      // 2344\n * @param {Array|string} path The path of the property to get.                                                         // 2345\n * @returns {Function} Returns the new accessor function.                                                              // 2346\n * @example                                                                                                            // 2347\n *                                                                                                                     // 2348\n * var objects = [                                                                                                     // 2349\n *   { 'a': { 'b': 2 } },                                                                                              // 2350\n *   { 'a': { 'b': 1 } }                                                                                               // 2351\n * ];                                                                                                                  // 2352\n *                                                                                                                     // 2353\n * _.map(objects, _.property('a.b'));                                                                                  // 2354\n * // => [2, 1]                                                                                                        // 2355\n *                                                                                                                     // 2356\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');                                                            // 2357\n * // => [1, 2]                                                                                                        // 2358\n */                                                                                                                    // 2359\nfunction property(path) {                                                                                              // 2360\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);                                             // 2361\n}                                                                                                                      // 2362\n                                                                                                                       // 2363\nmodule.exports = countBy;                                                                                              // 2364\n                                                                                                                       // 2365\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.identity\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.identity/package.json                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.identity\";                                                                                      // 1\nexports.version = \"3.0.0\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.identity/index.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash 3.0.0 (Custom Build) <https://lodash.com/>                                                                   // 2\n * Build: `lodash modern modularize exports=\"npm\" -o ./`                                                               // 3\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>                                                // 4\n * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>                                                      // 5\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                            // 6\n * Available under MIT license <https://lodash.com/license>                                                            // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/**                                                                                                                    // 10\n * This method returns the first argument provided to it.                                                              // 11\n *                                                                                                                     // 12\n * @static                                                                                                             // 13\n * @memberOf _                                                                                                         // 14\n * @category Utility                                                                                                   // 15\n * @param {*} value Any value.                                                                                         // 16\n * @returns {*} Returns `value`.                                                                                       // 17\n * @example                                                                                                            // 18\n *                                                                                                                     // 19\n * var object = { 'user': 'fred' };                                                                                    // 20\n * _.identity(object) === object;                                                                                      // 21\n * // => true                                                                                                          // 22\n */                                                                                                                    // 23\nfunction identity(value) {                                                                                             // 24\n  return value;                                                                                                        // 25\n}                                                                                                                      // 26\n                                                                                                                       // 27\nmodule.exports = identity;                                                                                             // 28\n                                                                                                                       // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.clonedeep\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.clonedeep/package.json                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.clonedeep\";                                                                                     // 1\nexports.version = \"4.5.0\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.clonedeep/index.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash (Custom Build) <https://lodash.com/>                                                                         // 2\n * Build: `lodash modularize exports=\"npm\" -o ./`                                                                      // 3\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>                                            // 4\n * Released under MIT license <https://lodash.com/license>                                                             // 5\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                                      // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/** Used as the size to enable large array optimizations. */                                                           // 10\nvar LARGE_ARRAY_SIZE = 200;                                                                                            // 11\n                                                                                                                       // 12\n/** Used to stand-in for `undefined` hash values. */                                                                   // 13\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';                                                                      // 14\n                                                                                                                       // 15\n/** Used as references for various `Number` constants. */                                                              // 16\nvar MAX_SAFE_INTEGER = 9007199254740991;                                                                               // 17\n                                                                                                                       // 18\n/** `Object#toString` result references. */                                                                            // 19\nvar argsTag = '[object Arguments]',                                                                                    // 20\n    arrayTag = '[object Array]',                                                                                       // 21\n    boolTag = '[object Boolean]',                                                                                      // 22\n    dateTag = '[object Date]',                                                                                         // 23\n    errorTag = '[object Error]',                                                                                       // 24\n    funcTag = '[object Function]',                                                                                     // 25\n    genTag = '[object GeneratorFunction]',                                                                             // 26\n    mapTag = '[object Map]',                                                                                           // 27\n    numberTag = '[object Number]',                                                                                     // 28\n    objectTag = '[object Object]',                                                                                     // 29\n    promiseTag = '[object Promise]',                                                                                   // 30\n    regexpTag = '[object RegExp]',                                                                                     // 31\n    setTag = '[object Set]',                                                                                           // 32\n    stringTag = '[object String]',                                                                                     // 33\n    symbolTag = '[object Symbol]',                                                                                     // 34\n    weakMapTag = '[object WeakMap]';                                                                                   // 35\n                                                                                                                       // 36\nvar arrayBufferTag = '[object ArrayBuffer]',                                                                           // 37\n    dataViewTag = '[object DataView]',                                                                                 // 38\n    float32Tag = '[object Float32Array]',                                                                              // 39\n    float64Tag = '[object Float64Array]',                                                                              // 40\n    int8Tag = '[object Int8Array]',                                                                                    // 41\n    int16Tag = '[object Int16Array]',                                                                                  // 42\n    int32Tag = '[object Int32Array]',                                                                                  // 43\n    uint8Tag = '[object Uint8Array]',                                                                                  // 44\n    uint8ClampedTag = '[object Uint8ClampedArray]',                                                                    // 45\n    uint16Tag = '[object Uint16Array]',                                                                                // 46\n    uint32Tag = '[object Uint32Array]';                                                                                // 47\n                                                                                                                       // 48\n/**                                                                                                                    // 49\n * Used to match `RegExp`                                                                                              // 50\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).                                      // 51\n */                                                                                                                    // 52\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;                                                                              // 53\n                                                                                                                       // 54\n/** Used to match `RegExp` flags from their coerced string values. */                                                  // 55\nvar reFlags = /\\w*$/;                                                                                                  // 56\n                                                                                                                       // 57\n/** Used to detect host constructors (Safari). */                                                                      // 58\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;                                                                      // 59\n                                                                                                                       // 60\n/** Used to detect unsigned integer values. */                                                                         // 61\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;                                                                                     // 62\n                                                                                                                       // 63\n/** Used to identify `toStringTag` values supported by `_.clone`. */                                                   // 64\nvar cloneableTags = {};                                                                                                // 65\ncloneableTags[argsTag] = cloneableTags[arrayTag] =                                                                     // 66\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =                                                           // 67\ncloneableTags[boolTag] = cloneableTags[dateTag] =                                                                      // 68\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =                                                                // 69\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =                                                                     // 70\ncloneableTags[int32Tag] = cloneableTags[mapTag] =                                                                      // 71\ncloneableTags[numberTag] = cloneableTags[objectTag] =                                                                  // 72\ncloneableTags[regexpTag] = cloneableTags[setTag] =                                                                     // 73\ncloneableTags[stringTag] = cloneableTags[symbolTag] =                                                                  // 74\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =                                                             // 75\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;                                                            // 76\ncloneableTags[errorTag] = cloneableTags[funcTag] =                                                                     // 77\ncloneableTags[weakMapTag] = false;                                                                                     // 78\n                                                                                                                       // 79\n/** Detect free variable `global` from Node.js. */                                                                     // 80\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;                            // 81\n                                                                                                                       // 82\n/** Detect free variable `self`. */                                                                                    // 83\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;                                      // 84\n                                                                                                                       // 85\n/** Used as a reference to the global object. */                                                                       // 86\nvar root = freeGlobal || freeSelf || Function('return this')();                                                        // 87\n                                                                                                                       // 88\n/** Detect free variable `exports`. */                                                                                 // 89\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;                               // 90\n                                                                                                                       // 91\n/** Detect free variable `module`. */                                                                                  // 92\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;                     // 93\n                                                                                                                       // 94\n/** Detect the popular CommonJS extension `module.exports`. */                                                         // 95\nvar moduleExports = freeModule && freeModule.exports === freeExports;                                                  // 96\n                                                                                                                       // 97\n/**                                                                                                                    // 98\n * Adds the key-value `pair` to `map`.                                                                                 // 99\n *                                                                                                                     // 100\n * @private                                                                                                            // 101\n * @param {Object} map The map to modify.                                                                              // 102\n * @param {Array} pair The key-value pair to add.                                                                      // 103\n * @returns {Object} Returns `map`.                                                                                    // 104\n */                                                                                                                    // 105\nfunction addMapEntry(map, pair) {                                                                                      // 106\n  // Don't return `map.set` because it's not chainable in IE 11.                                                       // 107\n  map.set(pair[0], pair[1]);                                                                                           // 108\n  return map;                                                                                                          // 109\n}                                                                                                                      // 110\n                                                                                                                       // 111\n/**                                                                                                                    // 112\n * Adds `value` to `set`.                                                                                              // 113\n *                                                                                                                     // 114\n * @private                                                                                                            // 115\n * @param {Object} set The set to modify.                                                                              // 116\n * @param {*} value The value to add.                                                                                  // 117\n * @returns {Object} Returns `set`.                                                                                    // 118\n */                                                                                                                    // 119\nfunction addSetEntry(set, value) {                                                                                     // 120\n  // Don't return `set.add` because it's not chainable in IE 11.                                                       // 121\n  set.add(value);                                                                                                      // 122\n  return set;                                                                                                          // 123\n}                                                                                                                      // 124\n                                                                                                                       // 125\n/**                                                                                                                    // 126\n * A specialized version of `_.forEach` for arrays without support for                                                 // 127\n * iteratee shorthands.                                                                                                // 128\n *                                                                                                                     // 129\n * @private                                                                                                            // 130\n * @param {Array} [array] The array to iterate over.                                                                   // 131\n * @param {Function} iteratee The function invoked per iteration.                                                      // 132\n * @returns {Array} Returns `array`.                                                                                   // 133\n */                                                                                                                    // 134\nfunction arrayEach(array, iteratee) {                                                                                  // 135\n  var index = -1,                                                                                                      // 136\n      length = array ? array.length : 0;                                                                               // 137\n                                                                                                                       // 138\n  while (++index < length) {                                                                                           // 139\n    if (iteratee(array[index], index, array) === false) {                                                              // 140\n      break;                                                                                                           // 141\n    }                                                                                                                  // 142\n  }                                                                                                                    // 143\n  return array;                                                                                                        // 144\n}                                                                                                                      // 145\n                                                                                                                       // 146\n/**                                                                                                                    // 147\n * Appends the elements of `values` to `array`.                                                                        // 148\n *                                                                                                                     // 149\n * @private                                                                                                            // 150\n * @param {Array} array The array to modify.                                                                           // 151\n * @param {Array} values The values to append.                                                                         // 152\n * @returns {Array} Returns `array`.                                                                                   // 153\n */                                                                                                                    // 154\nfunction arrayPush(array, values) {                                                                                    // 155\n  var index = -1,                                                                                                      // 156\n      length = values.length,                                                                                          // 157\n      offset = array.length;                                                                                           // 158\n                                                                                                                       // 159\n  while (++index < length) {                                                                                           // 160\n    array[offset + index] = values[index];                                                                             // 161\n  }                                                                                                                    // 162\n  return array;                                                                                                        // 163\n}                                                                                                                      // 164\n                                                                                                                       // 165\n/**                                                                                                                    // 166\n * A specialized version of `_.reduce` for arrays without support for                                                  // 167\n * iteratee shorthands.                                                                                                // 168\n *                                                                                                                     // 169\n * @private                                                                                                            // 170\n * @param {Array} [array] The array to iterate over.                                                                   // 171\n * @param {Function} iteratee The function invoked per iteration.                                                      // 172\n * @param {*} [accumulator] The initial value.                                                                         // 173\n * @param {boolean} [initAccum] Specify using the first element of `array` as                                          // 174\n *  the initial value.                                                                                                 // 175\n * @returns {*} Returns the accumulated value.                                                                         // 176\n */                                                                                                                    // 177\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {                                                        // 178\n  var index = -1,                                                                                                      // 179\n      length = array ? array.length : 0;                                                                               // 180\n                                                                                                                       // 181\n  if (initAccum && length) {                                                                                           // 182\n    accumulator = array[++index];                                                                                      // 183\n  }                                                                                                                    // 184\n  while (++index < length) {                                                                                           // 185\n    accumulator = iteratee(accumulator, array[index], index, array);                                                   // 186\n  }                                                                                                                    // 187\n  return accumulator;                                                                                                  // 188\n}                                                                                                                      // 189\n                                                                                                                       // 190\n/**                                                                                                                    // 191\n * The base implementation of `_.times` without support for iteratee shorthands                                        // 192\n * or max array length checks.                                                                                         // 193\n *                                                                                                                     // 194\n * @private                                                                                                            // 195\n * @param {number} n The number of times to invoke `iteratee`.                                                         // 196\n * @param {Function} iteratee The function invoked per iteration.                                                      // 197\n * @returns {Array} Returns the array of results.                                                                      // 198\n */                                                                                                                    // 199\nfunction baseTimes(n, iteratee) {                                                                                      // 200\n  var index = -1,                                                                                                      // 201\n      result = Array(n);                                                                                               // 202\n                                                                                                                       // 203\n  while (++index < n) {                                                                                                // 204\n    result[index] = iteratee(index);                                                                                   // 205\n  }                                                                                                                    // 206\n  return result;                                                                                                       // 207\n}                                                                                                                      // 208\n                                                                                                                       // 209\n/**                                                                                                                    // 210\n * Gets the value at `key` of `object`.                                                                                // 211\n *                                                                                                                     // 212\n * @private                                                                                                            // 213\n * @param {Object} [object] The object to query.                                                                       // 214\n * @param {string} key The key of the property to get.                                                                 // 215\n * @returns {*} Returns the property value.                                                                            // 216\n */                                                                                                                    // 217\nfunction getValue(object, key) {                                                                                       // 218\n  return object == null ? undefined : object[key];                                                                     // 219\n}                                                                                                                      // 220\n                                                                                                                       // 221\n/**                                                                                                                    // 222\n * Checks if `value` is a host object in IE < 9.                                                                       // 223\n *                                                                                                                     // 224\n * @private                                                                                                            // 225\n * @param {*} value The value to check.                                                                                // 226\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.                                        // 227\n */                                                                                                                    // 228\nfunction isHostObject(value) {                                                                                         // 229\n  // Many host objects are `Object` objects that can coerce to strings                                                 // 230\n  // despite having improperly defined `toString` methods.                                                             // 231\n  var result = false;                                                                                                  // 232\n  if (value != null && typeof value.toString != 'function') {                                                          // 233\n    try {                                                                                                              // 234\n      result = !!(value + '');                                                                                         // 235\n    } catch (e) {}                                                                                                     // 236\n  }                                                                                                                    // 237\n  return result;                                                                                                       // 238\n}                                                                                                                      // 239\n                                                                                                                       // 240\n/**                                                                                                                    // 241\n * Converts `map` to its key-value pairs.                                                                              // 242\n *                                                                                                                     // 243\n * @private                                                                                                            // 244\n * @param {Object} map The map to convert.                                                                             // 245\n * @returns {Array} Returns the key-value pairs.                                                                       // 246\n */                                                                                                                    // 247\nfunction mapToArray(map) {                                                                                             // 248\n  var index = -1,                                                                                                      // 249\n      result = Array(map.size);                                                                                        // 250\n                                                                                                                       // 251\n  map.forEach(function(value, key) {                                                                                   // 252\n    result[++index] = [key, value];                                                                                    // 253\n  });                                                                                                                  // 254\n  return result;                                                                                                       // 255\n}                                                                                                                      // 256\n                                                                                                                       // 257\n/**                                                                                                                    // 258\n * Creates a unary function that invokes `func` with its argument transformed.                                         // 259\n *                                                                                                                     // 260\n * @private                                                                                                            // 261\n * @param {Function} func The function to wrap.                                                                        // 262\n * @param {Function} transform The argument transform.                                                                 // 263\n * @returns {Function} Returns the new function.                                                                       // 264\n */                                                                                                                    // 265\nfunction overArg(func, transform) {                                                                                    // 266\n  return function(arg) {                                                                                               // 267\n    return func(transform(arg));                                                                                       // 268\n  };                                                                                                                   // 269\n}                                                                                                                      // 270\n                                                                                                                       // 271\n/**                                                                                                                    // 272\n * Converts `set` to an array of its values.                                                                           // 273\n *                                                                                                                     // 274\n * @private                                                                                                            // 275\n * @param {Object} set The set to convert.                                                                             // 276\n * @returns {Array} Returns the values.                                                                                // 277\n */                                                                                                                    // 278\nfunction setToArray(set) {                                                                                             // 279\n  var index = -1,                                                                                                      // 280\n      result = Array(set.size);                                                                                        // 281\n                                                                                                                       // 282\n  set.forEach(function(value) {                                                                                        // 283\n    result[++index] = value;                                                                                           // 284\n  });                                                                                                                  // 285\n  return result;                                                                                                       // 286\n}                                                                                                                      // 287\n                                                                                                                       // 288\n/** Used for built-in method references. */                                                                            // 289\nvar arrayProto = Array.prototype,                                                                                      // 290\n    funcProto = Function.prototype,                                                                                    // 291\n    objectProto = Object.prototype;                                                                                    // 292\n                                                                                                                       // 293\n/** Used to detect overreaching core-js shims. */                                                                      // 294\nvar coreJsData = root['__core-js_shared__'];                                                                           // 295\n                                                                                                                       // 296\n/** Used to detect methods masquerading as native. */                                                                  // 297\nvar maskSrcKey = (function() {                                                                                         // 298\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');                            // 299\n  return uid ? ('Symbol(src)_1.' + uid) : '';                                                                          // 300\n}());                                                                                                                  // 301\n                                                                                                                       // 302\n/** Used to resolve the decompiled source of functions. */                                                             // 303\nvar funcToString = funcProto.toString;                                                                                 // 304\n                                                                                                                       // 305\n/** Used to check objects for own properties. */                                                                       // 306\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 307\n                                                                                                                       // 308\n/**                                                                                                                    // 309\n * Used to resolve the                                                                                                 // 310\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)                          // 311\n * of values.                                                                                                          // 312\n */                                                                                                                    // 313\nvar objectToString = objectProto.toString;                                                                             // 314\n                                                                                                                       // 315\n/** Used to detect if a method is native. */                                                                           // 316\nvar reIsNative = RegExp('^' +                                                                                          // 317\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')                                                      // 318\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'                                    // 319\n);                                                                                                                     // 320\n                                                                                                                       // 321\n/** Built-in value references. */                                                                                      // 322\nvar Buffer = moduleExports ? root.Buffer : undefined,                                                                  // 323\n    Symbol = root.Symbol,                                                                                              // 324\n    Uint8Array = root.Uint8Array,                                                                                      // 325\n    getPrototype = overArg(Object.getPrototypeOf, Object),                                                             // 326\n    objectCreate = Object.create,                                                                                      // 327\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,                                                           // 328\n    splice = arrayProto.splice;                                                                                        // 329\n                                                                                                                       // 330\n/* Built-in method references for those with the same name as other `lodash` methods. */                               // 331\nvar nativeGetSymbols = Object.getOwnPropertySymbols,                                                                   // 332\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,                                                             // 333\n    nativeKeys = overArg(Object.keys, Object);                                                                         // 334\n                                                                                                                       // 335\n/* Built-in method references that are verified to be native. */                                                       // 336\nvar DataView = getNative(root, 'DataView'),                                                                            // 337\n    Map = getNative(root, 'Map'),                                                                                      // 338\n    Promise = getNative(root, 'Promise'),                                                                              // 339\n    Set = getNative(root, 'Set'),                                                                                      // 340\n    WeakMap = getNative(root, 'WeakMap'),                                                                              // 341\n    nativeCreate = getNative(Object, 'create');                                                                        // 342\n                                                                                                                       // 343\n/** Used to detect maps, sets, and weakmaps. */                                                                        // 344\nvar dataViewCtorString = toSource(DataView),                                                                           // 345\n    mapCtorString = toSource(Map),                                                                                     // 346\n    promiseCtorString = toSource(Promise),                                                                             // 347\n    setCtorString = toSource(Set),                                                                                     // 348\n    weakMapCtorString = toSource(WeakMap);                                                                             // 349\n                                                                                                                       // 350\n/** Used to convert symbols to primitives and strings. */                                                              // 351\nvar symbolProto = Symbol ? Symbol.prototype : undefined,                                                               // 352\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;                                                     // 353\n                                                                                                                       // 354\n/**                                                                                                                    // 355\n * Creates a hash object.                                                                                              // 356\n *                                                                                                                     // 357\n * @private                                                                                                            // 358\n * @constructor                                                                                                        // 359\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 360\n */                                                                                                                    // 361\nfunction Hash(entries) {                                                                                               // 362\n  var index = -1,                                                                                                      // 363\n      length = entries ? entries.length : 0;                                                                           // 364\n                                                                                                                       // 365\n  this.clear();                                                                                                        // 366\n  while (++index < length) {                                                                                           // 367\n    var entry = entries[index];                                                                                        // 368\n    this.set(entry[0], entry[1]);                                                                                      // 369\n  }                                                                                                                    // 370\n}                                                                                                                      // 371\n                                                                                                                       // 372\n/**                                                                                                                    // 373\n * Removes all key-value entries from the hash.                                                                        // 374\n *                                                                                                                     // 375\n * @private                                                                                                            // 376\n * @name clear                                                                                                         // 377\n * @memberOf Hash                                                                                                      // 378\n */                                                                                                                    // 379\nfunction hashClear() {                                                                                                 // 380\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};                                                              // 381\n}                                                                                                                      // 382\n                                                                                                                       // 383\n/**                                                                                                                    // 384\n * Removes `key` and its value from the hash.                                                                          // 385\n *                                                                                                                     // 386\n * @private                                                                                                            // 387\n * @name delete                                                                                                        // 388\n * @memberOf Hash                                                                                                      // 389\n * @param {Object} hash The hash to modify.                                                                            // 390\n * @param {string} key The key of the value to remove.                                                                 // 391\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 392\n */                                                                                                                    // 393\nfunction hashDelete(key) {                                                                                             // 394\n  return this.has(key) && delete this.__data__[key];                                                                   // 395\n}                                                                                                                      // 396\n                                                                                                                       // 397\n/**                                                                                                                    // 398\n * Gets the hash value for `key`.                                                                                      // 399\n *                                                                                                                     // 400\n * @private                                                                                                            // 401\n * @name get                                                                                                           // 402\n * @memberOf Hash                                                                                                      // 403\n * @param {string} key The key of the value to get.                                                                    // 404\n * @returns {*} Returns the entry value.                                                                               // 405\n */                                                                                                                    // 406\nfunction hashGet(key) {                                                                                                // 407\n  var data = this.__data__;                                                                                            // 408\n  if (nativeCreate) {                                                                                                  // 409\n    var result = data[key];                                                                                            // 410\n    return result === HASH_UNDEFINED ? undefined : result;                                                             // 411\n  }                                                                                                                    // 412\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;                                                       // 413\n}                                                                                                                      // 414\n                                                                                                                       // 415\n/**                                                                                                                    // 416\n * Checks if a hash value for `key` exists.                                                                            // 417\n *                                                                                                                     // 418\n * @private                                                                                                            // 419\n * @name has                                                                                                           // 420\n * @memberOf Hash                                                                                                      // 421\n * @param {string} key The key of the entry to check.                                                                  // 422\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 423\n */                                                                                                                    // 424\nfunction hashHas(key) {                                                                                                // 425\n  var data = this.__data__;                                                                                            // 426\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);                                      // 427\n}                                                                                                                      // 428\n                                                                                                                       // 429\n/**                                                                                                                    // 430\n * Sets the hash `key` to `value`.                                                                                     // 431\n *                                                                                                                     // 432\n * @private                                                                                                            // 433\n * @name set                                                                                                           // 434\n * @memberOf Hash                                                                                                      // 435\n * @param {string} key The key of the value to set.                                                                    // 436\n * @param {*} value The value to set.                                                                                  // 437\n * @returns {Object} Returns the hash instance.                                                                        // 438\n */                                                                                                                    // 439\nfunction hashSet(key, value) {                                                                                         // 440\n  var data = this.__data__;                                                                                            // 441\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;                                          // 442\n  return this;                                                                                                         // 443\n}                                                                                                                      // 444\n                                                                                                                       // 445\n// Add methods to `Hash`.                                                                                              // 446\nHash.prototype.clear = hashClear;                                                                                      // 447\nHash.prototype['delete'] = hashDelete;                                                                                 // 448\nHash.prototype.get = hashGet;                                                                                          // 449\nHash.prototype.has = hashHas;                                                                                          // 450\nHash.prototype.set = hashSet;                                                                                          // 451\n                                                                                                                       // 452\n/**                                                                                                                    // 453\n * Creates an list cache object.                                                                                       // 454\n *                                                                                                                     // 455\n * @private                                                                                                            // 456\n * @constructor                                                                                                        // 457\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 458\n */                                                                                                                    // 459\nfunction ListCache(entries) {                                                                                          // 460\n  var index = -1,                                                                                                      // 461\n      length = entries ? entries.length : 0;                                                                           // 462\n                                                                                                                       // 463\n  this.clear();                                                                                                        // 464\n  while (++index < length) {                                                                                           // 465\n    var entry = entries[index];                                                                                        // 466\n    this.set(entry[0], entry[1]);                                                                                      // 467\n  }                                                                                                                    // 468\n}                                                                                                                      // 469\n                                                                                                                       // 470\n/**                                                                                                                    // 471\n * Removes all key-value entries from the list cache.                                                                  // 472\n *                                                                                                                     // 473\n * @private                                                                                                            // 474\n * @name clear                                                                                                         // 475\n * @memberOf ListCache                                                                                                 // 476\n */                                                                                                                    // 477\nfunction listCacheClear() {                                                                                            // 478\n  this.__data__ = [];                                                                                                  // 479\n}                                                                                                                      // 480\n                                                                                                                       // 481\n/**                                                                                                                    // 482\n * Removes `key` and its value from the list cache.                                                                    // 483\n *                                                                                                                     // 484\n * @private                                                                                                            // 485\n * @name delete                                                                                                        // 486\n * @memberOf ListCache                                                                                                 // 487\n * @param {string} key The key of the value to remove.                                                                 // 488\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 489\n */                                                                                                                    // 490\nfunction listCacheDelete(key) {                                                                                        // 491\n  var data = this.__data__,                                                                                            // 492\n      index = assocIndexOf(data, key);                                                                                 // 493\n                                                                                                                       // 494\n  if (index < 0) {                                                                                                     // 495\n    return false;                                                                                                      // 496\n  }                                                                                                                    // 497\n  var lastIndex = data.length - 1;                                                                                     // 498\n  if (index == lastIndex) {                                                                                            // 499\n    data.pop();                                                                                                        // 500\n  } else {                                                                                                             // 501\n    splice.call(data, index, 1);                                                                                       // 502\n  }                                                                                                                    // 503\n  return true;                                                                                                         // 504\n}                                                                                                                      // 505\n                                                                                                                       // 506\n/**                                                                                                                    // 507\n * Gets the list cache value for `key`.                                                                                // 508\n *                                                                                                                     // 509\n * @private                                                                                                            // 510\n * @name get                                                                                                           // 511\n * @memberOf ListCache                                                                                                 // 512\n * @param {string} key The key of the value to get.                                                                    // 513\n * @returns {*} Returns the entry value.                                                                               // 514\n */                                                                                                                    // 515\nfunction listCacheGet(key) {                                                                                           // 516\n  var data = this.__data__,                                                                                            // 517\n      index = assocIndexOf(data, key);                                                                                 // 518\n                                                                                                                       // 519\n  return index < 0 ? undefined : data[index][1];                                                                       // 520\n}                                                                                                                      // 521\n                                                                                                                       // 522\n/**                                                                                                                    // 523\n * Checks if a list cache value for `key` exists.                                                                      // 524\n *                                                                                                                     // 525\n * @private                                                                                                            // 526\n * @name has                                                                                                           // 527\n * @memberOf ListCache                                                                                                 // 528\n * @param {string} key The key of the entry to check.                                                                  // 529\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 530\n */                                                                                                                    // 531\nfunction listCacheHas(key) {                                                                                           // 532\n  return assocIndexOf(this.__data__, key) > -1;                                                                        // 533\n}                                                                                                                      // 534\n                                                                                                                       // 535\n/**                                                                                                                    // 536\n * Sets the list cache `key` to `value`.                                                                               // 537\n *                                                                                                                     // 538\n * @private                                                                                                            // 539\n * @name set                                                                                                           // 540\n * @memberOf ListCache                                                                                                 // 541\n * @param {string} key The key of the value to set.                                                                    // 542\n * @param {*} value The value to set.                                                                                  // 543\n * @returns {Object} Returns the list cache instance.                                                                  // 544\n */                                                                                                                    // 545\nfunction listCacheSet(key, value) {                                                                                    // 546\n  var data = this.__data__,                                                                                            // 547\n      index = assocIndexOf(data, key);                                                                                 // 548\n                                                                                                                       // 549\n  if (index < 0) {                                                                                                     // 550\n    data.push([key, value]);                                                                                           // 551\n  } else {                                                                                                             // 552\n    data[index][1] = value;                                                                                            // 553\n  }                                                                                                                    // 554\n  return this;                                                                                                         // 555\n}                                                                                                                      // 556\n                                                                                                                       // 557\n// Add methods to `ListCache`.                                                                                         // 558\nListCache.prototype.clear = listCacheClear;                                                                            // 559\nListCache.prototype['delete'] = listCacheDelete;                                                                       // 560\nListCache.prototype.get = listCacheGet;                                                                                // 561\nListCache.prototype.has = listCacheHas;                                                                                // 562\nListCache.prototype.set = listCacheSet;                                                                                // 563\n                                                                                                                       // 564\n/**                                                                                                                    // 565\n * Creates a map cache object to store key-value pairs.                                                                // 566\n *                                                                                                                     // 567\n * @private                                                                                                            // 568\n * @constructor                                                                                                        // 569\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 570\n */                                                                                                                    // 571\nfunction MapCache(entries) {                                                                                           // 572\n  var index = -1,                                                                                                      // 573\n      length = entries ? entries.length : 0;                                                                           // 574\n                                                                                                                       // 575\n  this.clear();                                                                                                        // 576\n  while (++index < length) {                                                                                           // 577\n    var entry = entries[index];                                                                                        // 578\n    this.set(entry[0], entry[1]);                                                                                      // 579\n  }                                                                                                                    // 580\n}                                                                                                                      // 581\n                                                                                                                       // 582\n/**                                                                                                                    // 583\n * Removes all key-value entries from the map.                                                                         // 584\n *                                                                                                                     // 585\n * @private                                                                                                            // 586\n * @name clear                                                                                                         // 587\n * @memberOf MapCache                                                                                                  // 588\n */                                                                                                                    // 589\nfunction mapCacheClear() {                                                                                             // 590\n  this.__data__ = {                                                                                                    // 591\n    'hash': new Hash,                                                                                                  // 592\n    'map': new (Map || ListCache),                                                                                     // 593\n    'string': new Hash                                                                                                 // 594\n  };                                                                                                                   // 595\n}                                                                                                                      // 596\n                                                                                                                       // 597\n/**                                                                                                                    // 598\n * Removes `key` and its value from the map.                                                                           // 599\n *                                                                                                                     // 600\n * @private                                                                                                            // 601\n * @name delete                                                                                                        // 602\n * @memberOf MapCache                                                                                                  // 603\n * @param {string} key The key of the value to remove.                                                                 // 604\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 605\n */                                                                                                                    // 606\nfunction mapCacheDelete(key) {                                                                                         // 607\n  return getMapData(this, key)['delete'](key);                                                                         // 608\n}                                                                                                                      // 609\n                                                                                                                       // 610\n/**                                                                                                                    // 611\n * Gets the map value for `key`.                                                                                       // 612\n *                                                                                                                     // 613\n * @private                                                                                                            // 614\n * @name get                                                                                                           // 615\n * @memberOf MapCache                                                                                                  // 616\n * @param {string} key The key of the value to get.                                                                    // 617\n * @returns {*} Returns the entry value.                                                                               // 618\n */                                                                                                                    // 619\nfunction mapCacheGet(key) {                                                                                            // 620\n  return getMapData(this, key).get(key);                                                                               // 621\n}                                                                                                                      // 622\n                                                                                                                       // 623\n/**                                                                                                                    // 624\n * Checks if a map value for `key` exists.                                                                             // 625\n *                                                                                                                     // 626\n * @private                                                                                                            // 627\n * @name has                                                                                                           // 628\n * @memberOf MapCache                                                                                                  // 629\n * @param {string} key The key of the entry to check.                                                                  // 630\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 631\n */                                                                                                                    // 632\nfunction mapCacheHas(key) {                                                                                            // 633\n  return getMapData(this, key).has(key);                                                                               // 634\n}                                                                                                                      // 635\n                                                                                                                       // 636\n/**                                                                                                                    // 637\n * Sets the map `key` to `value`.                                                                                      // 638\n *                                                                                                                     // 639\n * @private                                                                                                            // 640\n * @name set                                                                                                           // 641\n * @memberOf MapCache                                                                                                  // 642\n * @param {string} key The key of the value to set.                                                                    // 643\n * @param {*} value The value to set.                                                                                  // 644\n * @returns {Object} Returns the map cache instance.                                                                   // 645\n */                                                                                                                    // 646\nfunction mapCacheSet(key, value) {                                                                                     // 647\n  getMapData(this, key).set(key, value);                                                                               // 648\n  return this;                                                                                                         // 649\n}                                                                                                                      // 650\n                                                                                                                       // 651\n// Add methods to `MapCache`.                                                                                          // 652\nMapCache.prototype.clear = mapCacheClear;                                                                              // 653\nMapCache.prototype['delete'] = mapCacheDelete;                                                                         // 654\nMapCache.prototype.get = mapCacheGet;                                                                                  // 655\nMapCache.prototype.has = mapCacheHas;                                                                                  // 656\nMapCache.prototype.set = mapCacheSet;                                                                                  // 657\n                                                                                                                       // 658\n/**                                                                                                                    // 659\n * Creates a stack cache object to store key-value pairs.                                                              // 660\n *                                                                                                                     // 661\n * @private                                                                                                            // 662\n * @constructor                                                                                                        // 663\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 664\n */                                                                                                                    // 665\nfunction Stack(entries) {                                                                                              // 666\n  this.__data__ = new ListCache(entries);                                                                              // 667\n}                                                                                                                      // 668\n                                                                                                                       // 669\n/**                                                                                                                    // 670\n * Removes all key-value entries from the stack.                                                                       // 671\n *                                                                                                                     // 672\n * @private                                                                                                            // 673\n * @name clear                                                                                                         // 674\n * @memberOf Stack                                                                                                     // 675\n */                                                                                                                    // 676\nfunction stackClear() {                                                                                                // 677\n  this.__data__ = new ListCache;                                                                                       // 678\n}                                                                                                                      // 679\n                                                                                                                       // 680\n/**                                                                                                                    // 681\n * Removes `key` and its value from the stack.                                                                         // 682\n *                                                                                                                     // 683\n * @private                                                                                                            // 684\n * @name delete                                                                                                        // 685\n * @memberOf Stack                                                                                                     // 686\n * @param {string} key The key of the value to remove.                                                                 // 687\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 688\n */                                                                                                                    // 689\nfunction stackDelete(key) {                                                                                            // 690\n  return this.__data__['delete'](key);                                                                                 // 691\n}                                                                                                                      // 692\n                                                                                                                       // 693\n/**                                                                                                                    // 694\n * Gets the stack value for `key`.                                                                                     // 695\n *                                                                                                                     // 696\n * @private                                                                                                            // 697\n * @name get                                                                                                           // 698\n * @memberOf Stack                                                                                                     // 699\n * @param {string} key The key of the value to get.                                                                    // 700\n * @returns {*} Returns the entry value.                                                                               // 701\n */                                                                                                                    // 702\nfunction stackGet(key) {                                                                                               // 703\n  return this.__data__.get(key);                                                                                       // 704\n}                                                                                                                      // 705\n                                                                                                                       // 706\n/**                                                                                                                    // 707\n * Checks if a stack value for `key` exists.                                                                           // 708\n *                                                                                                                     // 709\n * @private                                                                                                            // 710\n * @name has                                                                                                           // 711\n * @memberOf Stack                                                                                                     // 712\n * @param {string} key The key of the entry to check.                                                                  // 713\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 714\n */                                                                                                                    // 715\nfunction stackHas(key) {                                                                                               // 716\n  return this.__data__.has(key);                                                                                       // 717\n}                                                                                                                      // 718\n                                                                                                                       // 719\n/**                                                                                                                    // 720\n * Sets the stack `key` to `value`.                                                                                    // 721\n *                                                                                                                     // 722\n * @private                                                                                                            // 723\n * @name set                                                                                                           // 724\n * @memberOf Stack                                                                                                     // 725\n * @param {string} key The key of the value to set.                                                                    // 726\n * @param {*} value The value to set.                                                                                  // 727\n * @returns {Object} Returns the stack cache instance.                                                                 // 728\n */                                                                                                                    // 729\nfunction stackSet(key, value) {                                                                                        // 730\n  var cache = this.__data__;                                                                                           // 731\n  if (cache instanceof ListCache) {                                                                                    // 732\n    var pairs = cache.__data__;                                                                                        // 733\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {                                                               // 734\n      pairs.push([key, value]);                                                                                        // 735\n      return this;                                                                                                     // 736\n    }                                                                                                                  // 737\n    cache = this.__data__ = new MapCache(pairs);                                                                       // 738\n  }                                                                                                                    // 739\n  cache.set(key, value);                                                                                               // 740\n  return this;                                                                                                         // 741\n}                                                                                                                      // 742\n                                                                                                                       // 743\n// Add methods to `Stack`.                                                                                             // 744\nStack.prototype.clear = stackClear;                                                                                    // 745\nStack.prototype['delete'] = stackDelete;                                                                               // 746\nStack.prototype.get = stackGet;                                                                                        // 747\nStack.prototype.has = stackHas;                                                                                        // 748\nStack.prototype.set = stackSet;                                                                                        // 749\n                                                                                                                       // 750\n/**                                                                                                                    // 751\n * Creates an array of the enumerable property names of the array-like `value`.                                        // 752\n *                                                                                                                     // 753\n * @private                                                                                                            // 754\n * @param {*} value The value to query.                                                                                // 755\n * @param {boolean} inherited Specify returning inherited property names.                                              // 756\n * @returns {Array} Returns the array of property names.                                                               // 757\n */                                                                                                                    // 758\nfunction arrayLikeKeys(value, inherited) {                                                                             // 759\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 760\n  // Safari 9 makes `arguments.length` enumerable in strict mode.                                                      // 761\n  var result = (isArray(value) || isArguments(value))                                                                  // 762\n    ? baseTimes(value.length, String)                                                                                  // 763\n    : [];                                                                                                              // 764\n                                                                                                                       // 765\n  var length = result.length,                                                                                          // 766\n      skipIndexes = !!length;                                                                                          // 767\n                                                                                                                       // 768\n  for (var key in value) {                                                                                             // 769\n    if ((inherited || hasOwnProperty.call(value, key)) &&                                                              // 770\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {                                                 // 771\n      result.push(key);                                                                                                // 772\n    }                                                                                                                  // 773\n  }                                                                                                                    // 774\n  return result;                                                                                                       // 775\n}                                                                                                                      // 776\n                                                                                                                       // 777\n/**                                                                                                                    // 778\n * Assigns `value` to `key` of `object` if the existing value is not equivalent                                        // 779\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)                              // 780\n * for equality comparisons.                                                                                           // 781\n *                                                                                                                     // 782\n * @private                                                                                                            // 783\n * @param {Object} object The object to modify.                                                                        // 784\n * @param {string} key The key of the property to assign.                                                              // 785\n * @param {*} value The value to assign.                                                                               // 786\n */                                                                                                                    // 787\nfunction assignValue(object, key, value) {                                                                             // 788\n  var objValue = object[key];                                                                                          // 789\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||                                                    // 790\n      (value === undefined && !(key in object))) {                                                                     // 791\n    object[key] = value;                                                                                               // 792\n  }                                                                                                                    // 793\n}                                                                                                                      // 794\n                                                                                                                       // 795\n/**                                                                                                                    // 796\n * Gets the index at which the `key` is found in `array` of key-value pairs.                                           // 797\n *                                                                                                                     // 798\n * @private                                                                                                            // 799\n * @param {Array} array The array to inspect.                                                                          // 800\n * @param {*} key The key to search for.                                                                               // 801\n * @returns {number} Returns the index of the matched value, else `-1`.                                                // 802\n */                                                                                                                    // 803\nfunction assocIndexOf(array, key) {                                                                                    // 804\n  var length = array.length;                                                                                           // 805\n  while (length--) {                                                                                                   // 806\n    if (eq(array[length][0], key)) {                                                                                   // 807\n      return length;                                                                                                   // 808\n    }                                                                                                                  // 809\n  }                                                                                                                    // 810\n  return -1;                                                                                                           // 811\n}                                                                                                                      // 812\n                                                                                                                       // 813\n/**                                                                                                                    // 814\n * The base implementation of `_.assign` without support for multiple sources                                          // 815\n * or `customizer` functions.                                                                                          // 816\n *                                                                                                                     // 817\n * @private                                                                                                            // 818\n * @param {Object} object The destination object.                                                                      // 819\n * @param {Object} source The source object.                                                                           // 820\n * @returns {Object} Returns `object`.                                                                                 // 821\n */                                                                                                                    // 822\nfunction baseAssign(object, source) {                                                                                  // 823\n  return object && copyObject(source, keys(source), object);                                                           // 824\n}                                                                                                                      // 825\n                                                                                                                       // 826\n/**                                                                                                                    // 827\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks                                                 // 828\n * traversed objects.                                                                                                  // 829\n *                                                                                                                     // 830\n * @private                                                                                                            // 831\n * @param {*} value The value to clone.                                                                                // 832\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 833\n * @param {boolean} [isFull] Specify a clone including symbols.                                                        // 834\n * @param {Function} [customizer] The function to customize cloning.                                                   // 835\n * @param {string} [key] The key of `value`.                                                                           // 836\n * @param {Object} [object] The parent object of `value`.                                                              // 837\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.                                      // 838\n * @returns {*} Returns the cloned value.                                                                              // 839\n */                                                                                                                    // 840\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {                                            // 841\n  var result;                                                                                                          // 842\n  if (customizer) {                                                                                                    // 843\n    result = object ? customizer(value, key, object, stack) : customizer(value);                                       // 844\n  }                                                                                                                    // 845\n  if (result !== undefined) {                                                                                          // 846\n    return result;                                                                                                     // 847\n  }                                                                                                                    // 848\n  if (!isObject(value)) {                                                                                              // 849\n    return value;                                                                                                      // 850\n  }                                                                                                                    // 851\n  var isArr = isArray(value);                                                                                          // 852\n  if (isArr) {                                                                                                         // 853\n    result = initCloneArray(value);                                                                                    // 854\n    if (!isDeep) {                                                                                                     // 855\n      return copyArray(value, result);                                                                                 // 856\n    }                                                                                                                  // 857\n  } else {                                                                                                             // 858\n    var tag = getTag(value),                                                                                           // 859\n        isFunc = tag == funcTag || tag == genTag;                                                                      // 860\n                                                                                                                       // 861\n    if (isBuffer(value)) {                                                                                             // 862\n      return cloneBuffer(value, isDeep);                                                                               // 863\n    }                                                                                                                  // 864\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {                                                   // 865\n      if (isHostObject(value)) {                                                                                       // 866\n        return object ? value : {};                                                                                    // 867\n      }                                                                                                                // 868\n      result = initCloneObject(isFunc ? {} : value);                                                                   // 869\n      if (!isDeep) {                                                                                                   // 870\n        return copySymbols(value, baseAssign(result, value));                                                          // 871\n      }                                                                                                                // 872\n    } else {                                                                                                           // 873\n      if (!cloneableTags[tag]) {                                                                                       // 874\n        return object ? value : {};                                                                                    // 875\n      }                                                                                                                // 876\n      result = initCloneByTag(value, tag, baseClone, isDeep);                                                          // 877\n    }                                                                                                                  // 878\n  }                                                                                                                    // 879\n  // Check for circular references and return its corresponding clone.                                                 // 880\n  stack || (stack = new Stack);                                                                                        // 881\n  var stacked = stack.get(value);                                                                                      // 882\n  if (stacked) {                                                                                                       // 883\n    return stacked;                                                                                                    // 884\n  }                                                                                                                    // 885\n  stack.set(value, result);                                                                                            // 886\n                                                                                                                       // 887\n  if (!isArr) {                                                                                                        // 888\n    var props = isFull ? getAllKeys(value) : keys(value);                                                              // 889\n  }                                                                                                                    // 890\n  arrayEach(props || value, function(subValue, key) {                                                                  // 891\n    if (props) {                                                                                                       // 892\n      key = subValue;                                                                                                  // 893\n      subValue = value[key];                                                                                           // 894\n    }                                                                                                                  // 895\n    // Recursively populate clone (susceptible to call stack limits).                                                  // 896\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));                      // 897\n  });                                                                                                                  // 898\n  return result;                                                                                                       // 899\n}                                                                                                                      // 900\n                                                                                                                       // 901\n/**                                                                                                                    // 902\n * The base implementation of `_.create` without support for assigning                                                 // 903\n * properties to the created object.                                                                                   // 904\n *                                                                                                                     // 905\n * @private                                                                                                            // 906\n * @param {Object} prototype The object to inherit from.                                                               // 907\n * @returns {Object} Returns the new object.                                                                           // 908\n */                                                                                                                    // 909\nfunction baseCreate(proto) {                                                                                           // 910\n  return isObject(proto) ? objectCreate(proto) : {};                                                                   // 911\n}                                                                                                                      // 912\n                                                                                                                       // 913\n/**                                                                                                                    // 914\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses                                               // 915\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and                                               // 916\n * symbols of `object`.                                                                                                // 917\n *                                                                                                                     // 918\n * @private                                                                                                            // 919\n * @param {Object} object The object to query.                                                                         // 920\n * @param {Function} keysFunc The function to get the keys of `object`.                                                // 921\n * @param {Function} symbolsFunc The function to get the symbols of `object`.                                          // 922\n * @returns {Array} Returns the array of property names and symbols.                                                   // 923\n */                                                                                                                    // 924\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {                                                               // 925\n  var result = keysFunc(object);                                                                                       // 926\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));                                            // 927\n}                                                                                                                      // 928\n                                                                                                                       // 929\n/**                                                                                                                    // 930\n * The base implementation of `getTag`.                                                                                // 931\n *                                                                                                                     // 932\n * @private                                                                                                            // 933\n * @param {*} value The value to query.                                                                                // 934\n * @returns {string} Returns the `toStringTag`.                                                                        // 935\n */                                                                                                                    // 936\nfunction baseGetTag(value) {                                                                                           // 937\n  return objectToString.call(value);                                                                                   // 938\n}                                                                                                                      // 939\n                                                                                                                       // 940\n/**                                                                                                                    // 941\n * The base implementation of `_.isNative` without bad shim checks.                                                    // 942\n *                                                                                                                     // 943\n * @private                                                                                                            // 944\n * @param {*} value The value to check.                                                                                // 945\n * @returns {boolean} Returns `true` if `value` is a native function,                                                  // 946\n *  else `false`.                                                                                                      // 947\n */                                                                                                                    // 948\nfunction baseIsNative(value) {                                                                                         // 949\n  if (!isObject(value) || isMasked(value)) {                                                                           // 950\n    return false;                                                                                                      // 951\n  }                                                                                                                    // 952\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;                                // 953\n  return pattern.test(toSource(value));                                                                                // 954\n}                                                                                                                      // 955\n                                                                                                                       // 956\n/**                                                                                                                    // 957\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.                                     // 958\n *                                                                                                                     // 959\n * @private                                                                                                            // 960\n * @param {Object} object The object to query.                                                                         // 961\n * @returns {Array} Returns the array of property names.                                                               // 962\n */                                                                                                                    // 963\nfunction baseKeys(object) {                                                                                            // 964\n  if (!isPrototype(object)) {                                                                                          // 965\n    return nativeKeys(object);                                                                                         // 966\n  }                                                                                                                    // 967\n  var result = [];                                                                                                     // 968\n  for (var key in Object(object)) {                                                                                    // 969\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {                                                    // 970\n      result.push(key);                                                                                                // 971\n    }                                                                                                                  // 972\n  }                                                                                                                    // 973\n  return result;                                                                                                       // 974\n}                                                                                                                      // 975\n                                                                                                                       // 976\n/**                                                                                                                    // 977\n * Creates a clone of  `buffer`.                                                                                       // 978\n *                                                                                                                     // 979\n * @private                                                                                                            // 980\n * @param {Buffer} buffer The buffer to clone.                                                                         // 981\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 982\n * @returns {Buffer} Returns the cloned buffer.                                                                        // 983\n */                                                                                                                    // 984\nfunction cloneBuffer(buffer, isDeep) {                                                                                 // 985\n  if (isDeep) {                                                                                                        // 986\n    return buffer.slice();                                                                                             // 987\n  }                                                                                                                    // 988\n  var result = new buffer.constructor(buffer.length);                                                                  // 989\n  buffer.copy(result);                                                                                                 // 990\n  return result;                                                                                                       // 991\n}                                                                                                                      // 992\n                                                                                                                       // 993\n/**                                                                                                                    // 994\n * Creates a clone of `arrayBuffer`.                                                                                   // 995\n *                                                                                                                     // 996\n * @private                                                                                                            // 997\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.                                                         // 998\n * @returns {ArrayBuffer} Returns the cloned array buffer.                                                             // 999\n */                                                                                                                    // 1000\nfunction cloneArrayBuffer(arrayBuffer) {                                                                               // 1001\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);                                                    // 1002\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));                                                             // 1003\n  return result;                                                                                                       // 1004\n}                                                                                                                      // 1005\n                                                                                                                       // 1006\n/**                                                                                                                    // 1007\n * Creates a clone of `dataView`.                                                                                      // 1008\n *                                                                                                                     // 1009\n * @private                                                                                                            // 1010\n * @param {Object} dataView The data view to clone.                                                                    // 1011\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1012\n * @returns {Object} Returns the cloned data view.                                                                     // 1013\n */                                                                                                                    // 1014\nfunction cloneDataView(dataView, isDeep) {                                                                             // 1015\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;                                           // 1016\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);                                   // 1017\n}                                                                                                                      // 1018\n                                                                                                                       // 1019\n/**                                                                                                                    // 1020\n * Creates a clone of `map`.                                                                                           // 1021\n *                                                                                                                     // 1022\n * @private                                                                                                            // 1023\n * @param {Object} map The map to clone.                                                                               // 1024\n * @param {Function} cloneFunc The function to clone values.                                                           // 1025\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1026\n * @returns {Object} Returns the cloned map.                                                                           // 1027\n */                                                                                                                    // 1028\nfunction cloneMap(map, isDeep, cloneFunc) {                                                                            // 1029\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);                                             // 1030\n  return arrayReduce(array, addMapEntry, new map.constructor);                                                         // 1031\n}                                                                                                                      // 1032\n                                                                                                                       // 1033\n/**                                                                                                                    // 1034\n * Creates a clone of `regexp`.                                                                                        // 1035\n *                                                                                                                     // 1036\n * @private                                                                                                            // 1037\n * @param {Object} regexp The regexp to clone.                                                                         // 1038\n * @returns {Object} Returns the cloned regexp.                                                                        // 1039\n */                                                                                                                    // 1040\nfunction cloneRegExp(regexp) {                                                                                         // 1041\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));                                            // 1042\n  result.lastIndex = regexp.lastIndex;                                                                                 // 1043\n  return result;                                                                                                       // 1044\n}                                                                                                                      // 1045\n                                                                                                                       // 1046\n/**                                                                                                                    // 1047\n * Creates a clone of `set`.                                                                                           // 1048\n *                                                                                                                     // 1049\n * @private                                                                                                            // 1050\n * @param {Object} set The set to clone.                                                                               // 1051\n * @param {Function} cloneFunc The function to clone values.                                                           // 1052\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1053\n * @returns {Object} Returns the cloned set.                                                                           // 1054\n */                                                                                                                    // 1055\nfunction cloneSet(set, isDeep, cloneFunc) {                                                                            // 1056\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);                                             // 1057\n  return arrayReduce(array, addSetEntry, new set.constructor);                                                         // 1058\n}                                                                                                                      // 1059\n                                                                                                                       // 1060\n/**                                                                                                                    // 1061\n * Creates a clone of the `symbol` object.                                                                             // 1062\n *                                                                                                                     // 1063\n * @private                                                                                                            // 1064\n * @param {Object} symbol The symbol object to clone.                                                                  // 1065\n * @returns {Object} Returns the cloned symbol object.                                                                 // 1066\n */                                                                                                                    // 1067\nfunction cloneSymbol(symbol) {                                                                                         // 1068\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};                                                      // 1069\n}                                                                                                                      // 1070\n                                                                                                                       // 1071\n/**                                                                                                                    // 1072\n * Creates a clone of `typedArray`.                                                                                    // 1073\n *                                                                                                                     // 1074\n * @private                                                                                                            // 1075\n * @param {Object} typedArray The typed array to clone.                                                                // 1076\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1077\n * @returns {Object} Returns the cloned typed array.                                                                   // 1078\n */                                                                                                                    // 1079\nfunction cloneTypedArray(typedArray, isDeep) {                                                                         // 1080\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;                                       // 1081\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);                                 // 1082\n}                                                                                                                      // 1083\n                                                                                                                       // 1084\n/**                                                                                                                    // 1085\n * Copies the values of `source` to `array`.                                                                           // 1086\n *                                                                                                                     // 1087\n * @private                                                                                                            // 1088\n * @param {Array} source The array to copy values from.                                                                // 1089\n * @param {Array} [array=[]] The array to copy values to.                                                              // 1090\n * @returns {Array} Returns `array`.                                                                                   // 1091\n */                                                                                                                    // 1092\nfunction copyArray(source, array) {                                                                                    // 1093\n  var index = -1,                                                                                                      // 1094\n      length = source.length;                                                                                          // 1095\n                                                                                                                       // 1096\n  array || (array = Array(length));                                                                                    // 1097\n  while (++index < length) {                                                                                           // 1098\n    array[index] = source[index];                                                                                      // 1099\n  }                                                                                                                    // 1100\n  return array;                                                                                                        // 1101\n}                                                                                                                      // 1102\n                                                                                                                       // 1103\n/**                                                                                                                    // 1104\n * Copies properties of `source` to `object`.                                                                          // 1105\n *                                                                                                                     // 1106\n * @private                                                                                                            // 1107\n * @param {Object} source The object to copy properties from.                                                          // 1108\n * @param {Array} props The property identifiers to copy.                                                              // 1109\n * @param {Object} [object={}] The object to copy properties to.                                                       // 1110\n * @param {Function} [customizer] The function to customize copied values.                                             // 1111\n * @returns {Object} Returns `object`.                                                                                 // 1112\n */                                                                                                                    // 1113\nfunction copyObject(source, props, object, customizer) {                                                               // 1114\n  object || (object = {});                                                                                             // 1115\n                                                                                                                       // 1116\n  var index = -1,                                                                                                      // 1117\n      length = props.length;                                                                                           // 1118\n                                                                                                                       // 1119\n  while (++index < length) {                                                                                           // 1120\n    var key = props[index];                                                                                            // 1121\n                                                                                                                       // 1122\n    var newValue = customizer                                                                                          // 1123\n      ? customizer(object[key], source[key], key, object, source)                                                      // 1124\n      : undefined;                                                                                                     // 1125\n                                                                                                                       // 1126\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);                                         // 1127\n  }                                                                                                                    // 1128\n  return object;                                                                                                       // 1129\n}                                                                                                                      // 1130\n                                                                                                                       // 1131\n/**                                                                                                                    // 1132\n * Copies own symbol properties of `source` to `object`.                                                               // 1133\n *                                                                                                                     // 1134\n * @private                                                                                                            // 1135\n * @param {Object} source The object to copy symbols from.                                                             // 1136\n * @param {Object} [object={}] The object to copy symbols to.                                                          // 1137\n * @returns {Object} Returns `object`.                                                                                 // 1138\n */                                                                                                                    // 1139\nfunction copySymbols(source, object) {                                                                                 // 1140\n  return copyObject(source, getSymbols(source), object);                                                               // 1141\n}                                                                                                                      // 1142\n                                                                                                                       // 1143\n/**                                                                                                                    // 1144\n * Creates an array of own enumerable property names and symbols of `object`.                                          // 1145\n *                                                                                                                     // 1146\n * @private                                                                                                            // 1147\n * @param {Object} object The object to query.                                                                         // 1148\n * @returns {Array} Returns the array of property names and symbols.                                                   // 1149\n */                                                                                                                    // 1150\nfunction getAllKeys(object) {                                                                                          // 1151\n  return baseGetAllKeys(object, keys, getSymbols);                                                                     // 1152\n}                                                                                                                      // 1153\n                                                                                                                       // 1154\n/**                                                                                                                    // 1155\n * Gets the data for `map`.                                                                                            // 1156\n *                                                                                                                     // 1157\n * @private                                                                                                            // 1158\n * @param {Object} map The map to query.                                                                               // 1159\n * @param {string} key The reference key.                                                                              // 1160\n * @returns {*} Returns the map data.                                                                                  // 1161\n */                                                                                                                    // 1162\nfunction getMapData(map, key) {                                                                                        // 1163\n  var data = map.__data__;                                                                                             // 1164\n  return isKeyable(key)                                                                                                // 1165\n    ? data[typeof key == 'string' ? 'string' : 'hash']                                                                 // 1166\n    : data.map;                                                                                                        // 1167\n}                                                                                                                      // 1168\n                                                                                                                       // 1169\n/**                                                                                                                    // 1170\n * Gets the native function at `key` of `object`.                                                                      // 1171\n *                                                                                                                     // 1172\n * @private                                                                                                            // 1173\n * @param {Object} object The object to query.                                                                         // 1174\n * @param {string} key The key of the method to get.                                                                   // 1175\n * @returns {*} Returns the function if it's native, else `undefined`.                                                 // 1176\n */                                                                                                                    // 1177\nfunction getNative(object, key) {                                                                                      // 1178\n  var value = getValue(object, key);                                                                                   // 1179\n  return baseIsNative(value) ? value : undefined;                                                                      // 1180\n}                                                                                                                      // 1181\n                                                                                                                       // 1182\n/**                                                                                                                    // 1183\n * Creates an array of the own enumerable symbol properties of `object`.                                               // 1184\n *                                                                                                                     // 1185\n * @private                                                                                                            // 1186\n * @param {Object} object The object to query.                                                                         // 1187\n * @returns {Array} Returns the array of symbols.                                                                      // 1188\n */                                                                                                                    // 1189\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;                                     // 1190\n                                                                                                                       // 1191\n/**                                                                                                                    // 1192\n * Gets the `toStringTag` of `value`.                                                                                  // 1193\n *                                                                                                                     // 1194\n * @private                                                                                                            // 1195\n * @param {*} value The value to query.                                                                                // 1196\n * @returns {string} Returns the `toStringTag`.                                                                        // 1197\n */                                                                                                                    // 1198\nvar getTag = baseGetTag;                                                                                               // 1199\n                                                                                                                       // 1200\n// Fallback for data views, maps, sets, and weak maps in IE 11,                                                        // 1201\n// for data views in Edge < 14, and promises in Node.js.                                                               // 1202\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||                                           // 1203\n    (Map && getTag(new Map) != mapTag) ||                                                                              // 1204\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||                                                            // 1205\n    (Set && getTag(new Set) != setTag) ||                                                                              // 1206\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {                                                                  // 1207\n  getTag = function(value) {                                                                                           // 1208\n    var result = objectToString.call(value),                                                                           // 1209\n        Ctor = result == objectTag ? value.constructor : undefined,                                                    // 1210\n        ctorString = Ctor ? toSource(Ctor) : undefined;                                                                // 1211\n                                                                                                                       // 1212\n    if (ctorString) {                                                                                                  // 1213\n      switch (ctorString) {                                                                                            // 1214\n        case dataViewCtorString: return dataViewTag;                                                                   // 1215\n        case mapCtorString: return mapTag;                                                                             // 1216\n        case promiseCtorString: return promiseTag;                                                                     // 1217\n        case setCtorString: return setTag;                                                                             // 1218\n        case weakMapCtorString: return weakMapTag;                                                                     // 1219\n      }                                                                                                                // 1220\n    }                                                                                                                  // 1221\n    return result;                                                                                                     // 1222\n  };                                                                                                                   // 1223\n}                                                                                                                      // 1224\n                                                                                                                       // 1225\n/**                                                                                                                    // 1226\n * Initializes an array clone.                                                                                         // 1227\n *                                                                                                                     // 1228\n * @private                                                                                                            // 1229\n * @param {Array} array The array to clone.                                                                            // 1230\n * @returns {Array} Returns the initialized clone.                                                                     // 1231\n */                                                                                                                    // 1232\nfunction initCloneArray(array) {                                                                                       // 1233\n  var length = array.length,                                                                                           // 1234\n      result = array.constructor(length);                                                                              // 1235\n                                                                                                                       // 1236\n  // Add properties assigned by `RegExp#exec`.                                                                         // 1237\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {                                  // 1238\n    result.index = array.index;                                                                                        // 1239\n    result.input = array.input;                                                                                        // 1240\n  }                                                                                                                    // 1241\n  return result;                                                                                                       // 1242\n}                                                                                                                      // 1243\n                                                                                                                       // 1244\n/**                                                                                                                    // 1245\n * Initializes an object clone.                                                                                        // 1246\n *                                                                                                                     // 1247\n * @private                                                                                                            // 1248\n * @param {Object} object The object to clone.                                                                         // 1249\n * @returns {Object} Returns the initialized clone.                                                                    // 1250\n */                                                                                                                    // 1251\nfunction initCloneObject(object) {                                                                                     // 1252\n  return (typeof object.constructor == 'function' && !isPrototype(object))                                             // 1253\n    ? baseCreate(getPrototype(object))                                                                                 // 1254\n    : {};                                                                                                              // 1255\n}                                                                                                                      // 1256\n                                                                                                                       // 1257\n/**                                                                                                                    // 1258\n * Initializes an object clone based on its `toStringTag`.                                                             // 1259\n *                                                                                                                     // 1260\n * **Note:** This function only supports cloning values with tags of                                                   // 1261\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                        // 1262\n *                                                                                                                     // 1263\n * @private                                                                                                            // 1264\n * @param {Object} object The object to clone.                                                                         // 1265\n * @param {string} tag The `toStringTag` of the object to clone.                                                       // 1266\n * @param {Function} cloneFunc The function to clone values.                                                           // 1267\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1268\n * @returns {Object} Returns the initialized clone.                                                                    // 1269\n */                                                                                                                    // 1270\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {                                                              // 1271\n  var Ctor = object.constructor;                                                                                       // 1272\n  switch (tag) {                                                                                                       // 1273\n    case arrayBufferTag:                                                                                               // 1274\n      return cloneArrayBuffer(object);                                                                                 // 1275\n                                                                                                                       // 1276\n    case boolTag:                                                                                                      // 1277\n    case dateTag:                                                                                                      // 1278\n      return new Ctor(+object);                                                                                        // 1279\n                                                                                                                       // 1280\n    case dataViewTag:                                                                                                  // 1281\n      return cloneDataView(object, isDeep);                                                                            // 1282\n                                                                                                                       // 1283\n    case float32Tag: case float64Tag:                                                                                  // 1284\n    case int8Tag: case int16Tag: case int32Tag:                                                                        // 1285\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:                                               // 1286\n      return cloneTypedArray(object, isDeep);                                                                          // 1287\n                                                                                                                       // 1288\n    case mapTag:                                                                                                       // 1289\n      return cloneMap(object, isDeep, cloneFunc);                                                                      // 1290\n                                                                                                                       // 1291\n    case numberTag:                                                                                                    // 1292\n    case stringTag:                                                                                                    // 1293\n      return new Ctor(object);                                                                                         // 1294\n                                                                                                                       // 1295\n    case regexpTag:                                                                                                    // 1296\n      return cloneRegExp(object);                                                                                      // 1297\n                                                                                                                       // 1298\n    case setTag:                                                                                                       // 1299\n      return cloneSet(object, isDeep, cloneFunc);                                                                      // 1300\n                                                                                                                       // 1301\n    case symbolTag:                                                                                                    // 1302\n      return cloneSymbol(object);                                                                                      // 1303\n  }                                                                                                                    // 1304\n}                                                                                                                      // 1305\n                                                                                                                       // 1306\n/**                                                                                                                    // 1307\n * Checks if `value` is a valid array-like index.                                                                      // 1308\n *                                                                                                                     // 1309\n * @private                                                                                                            // 1310\n * @param {*} value The value to check.                                                                                // 1311\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                        // 1312\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                        // 1313\n */                                                                                                                    // 1314\nfunction isIndex(value, length) {                                                                                      // 1315\n  length = length == null ? MAX_SAFE_INTEGER : length;                                                                 // 1316\n  return !!length &&                                                                                                   // 1317\n    (typeof value == 'number' || reIsUint.test(value)) &&                                                              // 1318\n    (value > -1 && value % 1 == 0 && value < length);                                                                  // 1319\n}                                                                                                                      // 1320\n                                                                                                                       // 1321\n/**                                                                                                                    // 1322\n * Checks if `value` is suitable for use as unique object key.                                                         // 1323\n *                                                                                                                     // 1324\n * @private                                                                                                            // 1325\n * @param {*} value The value to check.                                                                                // 1326\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.                                             // 1327\n */                                                                                                                    // 1328\nfunction isKeyable(value) {                                                                                            // 1329\n  var type = typeof value;                                                                                             // 1330\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')                               // 1331\n    ? (value !== '__proto__')                                                                                          // 1332\n    : (value === null);                                                                                                // 1333\n}                                                                                                                      // 1334\n                                                                                                                       // 1335\n/**                                                                                                                    // 1336\n * Checks if `func` has its source masked.                                                                             // 1337\n *                                                                                                                     // 1338\n * @private                                                                                                            // 1339\n * @param {Function} func The function to check.                                                                       // 1340\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.                                                // 1341\n */                                                                                                                    // 1342\nfunction isMasked(func) {                                                                                              // 1343\n  return !!maskSrcKey && (maskSrcKey in func);                                                                         // 1344\n}                                                                                                                      // 1345\n                                                                                                                       // 1346\n/**                                                                                                                    // 1347\n * Checks if `value` is likely a prototype object.                                                                     // 1348\n *                                                                                                                     // 1349\n * @private                                                                                                            // 1350\n * @param {*} value The value to check.                                                                                // 1351\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.                                          // 1352\n */                                                                                                                    // 1353\nfunction isPrototype(value) {                                                                                          // 1354\n  var Ctor = value && value.constructor,                                                                               // 1355\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;                                            // 1356\n                                                                                                                       // 1357\n  return value === proto;                                                                                              // 1358\n}                                                                                                                      // 1359\n                                                                                                                       // 1360\n/**                                                                                                                    // 1361\n * Converts `func` to its source code.                                                                                 // 1362\n *                                                                                                                     // 1363\n * @private                                                                                                            // 1364\n * @param {Function} func The function to process.                                                                     // 1365\n * @returns {string} Returns the source code.                                                                          // 1366\n */                                                                                                                    // 1367\nfunction toSource(func) {                                                                                              // 1368\n  if (func != null) {                                                                                                  // 1369\n    try {                                                                                                              // 1370\n      return funcToString.call(func);                                                                                  // 1371\n    } catch (e) {}                                                                                                     // 1372\n    try {                                                                                                              // 1373\n      return (func + '');                                                                                              // 1374\n    } catch (e) {}                                                                                                     // 1375\n  }                                                                                                                    // 1376\n  return '';                                                                                                           // 1377\n}                                                                                                                      // 1378\n                                                                                                                       // 1379\n/**                                                                                                                    // 1380\n * This method is like `_.clone` except that it recursively clones `value`.                                            // 1381\n *                                                                                                                     // 1382\n * @static                                                                                                             // 1383\n * @memberOf _                                                                                                         // 1384\n * @since 1.0.0                                                                                                        // 1385\n * @category Lang                                                                                                      // 1386\n * @param {*} value The value to recursively clone.                                                                    // 1387\n * @returns {*} Returns the deep cloned value.                                                                         // 1388\n * @see _.clone                                                                                                        // 1389\n * @example                                                                                                            // 1390\n *                                                                                                                     // 1391\n * var objects = [{ 'a': 1 }, { 'b': 2 }];                                                                             // 1392\n *                                                                                                                     // 1393\n * var deep = _.cloneDeep(objects);                                                                                    // 1394\n * console.log(deep[0] === objects[0]);                                                                                // 1395\n * // => false                                                                                                         // 1396\n */                                                                                                                    // 1397\nfunction cloneDeep(value) {                                                                                            // 1398\n  return baseClone(value, true, true);                                                                                 // 1399\n}                                                                                                                      // 1400\n                                                                                                                       // 1401\n/**                                                                                                                    // 1402\n * Performs a                                                                                                          // 1403\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)                                    // 1404\n * comparison between two values to determine if they are equivalent.                                                  // 1405\n *                                                                                                                     // 1406\n * @static                                                                                                             // 1407\n * @memberOf _                                                                                                         // 1408\n * @since 4.0.0                                                                                                        // 1409\n * @category Lang                                                                                                      // 1410\n * @param {*} value The value to compare.                                                                              // 1411\n * @param {*} other The other value to compare.                                                                        // 1412\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                       // 1413\n * @example                                                                                                            // 1414\n *                                                                                                                     // 1415\n * var object = { 'a': 1 };                                                                                            // 1416\n * var other = { 'a': 1 };                                                                                             // 1417\n *                                                                                                                     // 1418\n * _.eq(object, object);                                                                                               // 1419\n * // => true                                                                                                          // 1420\n *                                                                                                                     // 1421\n * _.eq(object, other);                                                                                                // 1422\n * // => false                                                                                                         // 1423\n *                                                                                                                     // 1424\n * _.eq('a', 'a');                                                                                                     // 1425\n * // => true                                                                                                          // 1426\n *                                                                                                                     // 1427\n * _.eq('a', Object('a'));                                                                                             // 1428\n * // => false                                                                                                         // 1429\n *                                                                                                                     // 1430\n * _.eq(NaN, NaN);                                                                                                     // 1431\n * // => true                                                                                                          // 1432\n */                                                                                                                    // 1433\nfunction eq(value, other) {                                                                                            // 1434\n  return value === other || (value !== value && other !== other);                                                      // 1435\n}                                                                                                                      // 1436\n                                                                                                                       // 1437\n/**                                                                                                                    // 1438\n * Checks if `value` is likely an `arguments` object.                                                                  // 1439\n *                                                                                                                     // 1440\n * @static                                                                                                             // 1441\n * @memberOf _                                                                                                         // 1442\n * @since 0.1.0                                                                                                        // 1443\n * @category Lang                                                                                                      // 1444\n * @param {*} value The value to check.                                                                                // 1445\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,                                              // 1446\n *  else `false`.                                                                                                      // 1447\n * @example                                                                                                            // 1448\n *                                                                                                                     // 1449\n * _.isArguments(function() { return arguments; }());                                                                  // 1450\n * // => true                                                                                                          // 1451\n *                                                                                                                     // 1452\n * _.isArguments([1, 2, 3]);                                                                                           // 1453\n * // => false                                                                                                         // 1454\n */                                                                                                                    // 1455\nfunction isArguments(value) {                                                                                          // 1456\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 1457\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&                                           // 1458\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);                            // 1459\n}                                                                                                                      // 1460\n                                                                                                                       // 1461\n/**                                                                                                                    // 1462\n * Checks if `value` is classified as an `Array` object.                                                               // 1463\n *                                                                                                                     // 1464\n * @static                                                                                                             // 1465\n * @memberOf _                                                                                                         // 1466\n * @since 0.1.0                                                                                                        // 1467\n * @category Lang                                                                                                      // 1468\n * @param {*} value The value to check.                                                                                // 1469\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.                                             // 1470\n * @example                                                                                                            // 1471\n *                                                                                                                     // 1472\n * _.isArray([1, 2, 3]);                                                                                               // 1473\n * // => true                                                                                                          // 1474\n *                                                                                                                     // 1475\n * _.isArray(document.body.children);                                                                                  // 1476\n * // => false                                                                                                         // 1477\n *                                                                                                                     // 1478\n * _.isArray('abc');                                                                                                   // 1479\n * // => false                                                                                                         // 1480\n *                                                                                                                     // 1481\n * _.isArray(_.noop);                                                                                                  // 1482\n * // => false                                                                                                         // 1483\n */                                                                                                                    // 1484\nvar isArray = Array.isArray;                                                                                           // 1485\n                                                                                                                       // 1486\n/**                                                                                                                    // 1487\n * Checks if `value` is array-like. A value is considered array-like if it's                                           // 1488\n * not a function and has a `value.length` that's an integer greater than or                                           // 1489\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.                                                   // 1490\n *                                                                                                                     // 1491\n * @static                                                                                                             // 1492\n * @memberOf _                                                                                                         // 1493\n * @since 4.0.0                                                                                                        // 1494\n * @category Lang                                                                                                      // 1495\n * @param {*} value The value to check.                                                                                // 1496\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                           // 1497\n * @example                                                                                                            // 1498\n *                                                                                                                     // 1499\n * _.isArrayLike([1, 2, 3]);                                                                                           // 1500\n * // => true                                                                                                          // 1501\n *                                                                                                                     // 1502\n * _.isArrayLike(document.body.children);                                                                              // 1503\n * // => true                                                                                                          // 1504\n *                                                                                                                     // 1505\n * _.isArrayLike('abc');                                                                                               // 1506\n * // => true                                                                                                          // 1507\n *                                                                                                                     // 1508\n * _.isArrayLike(_.noop);                                                                                              // 1509\n * // => false                                                                                                         // 1510\n */                                                                                                                    // 1511\nfunction isArrayLike(value) {                                                                                          // 1512\n  return value != null && isLength(value.length) && !isFunction(value);                                                // 1513\n}                                                                                                                      // 1514\n                                                                                                                       // 1515\n/**                                                                                                                    // 1516\n * This method is like `_.isArrayLike` except that it also checks if `value`                                           // 1517\n * is an object.                                                                                                       // 1518\n *                                                                                                                     // 1519\n * @static                                                                                                             // 1520\n * @memberOf _                                                                                                         // 1521\n * @since 4.0.0                                                                                                        // 1522\n * @category Lang                                                                                                      // 1523\n * @param {*} value The value to check.                                                                                // 1524\n * @returns {boolean} Returns `true` if `value` is an array-like object,                                               // 1525\n *  else `false`.                                                                                                      // 1526\n * @example                                                                                                            // 1527\n *                                                                                                                     // 1528\n * _.isArrayLikeObject([1, 2, 3]);                                                                                     // 1529\n * // => true                                                                                                          // 1530\n *                                                                                                                     // 1531\n * _.isArrayLikeObject(document.body.children);                                                                        // 1532\n * // => true                                                                                                          // 1533\n *                                                                                                                     // 1534\n * _.isArrayLikeObject('abc');                                                                                         // 1535\n * // => false                                                                                                         // 1536\n *                                                                                                                     // 1537\n * _.isArrayLikeObject(_.noop);                                                                                        // 1538\n * // => false                                                                                                         // 1539\n */                                                                                                                    // 1540\nfunction isArrayLikeObject(value) {                                                                                    // 1541\n  return isObjectLike(value) && isArrayLike(value);                                                                    // 1542\n}                                                                                                                      // 1543\n                                                                                                                       // 1544\n/**                                                                                                                    // 1545\n * Checks if `value` is a buffer.                                                                                      // 1546\n *                                                                                                                     // 1547\n * @static                                                                                                             // 1548\n * @memberOf _                                                                                                         // 1549\n * @since 4.3.0                                                                                                        // 1550\n * @category Lang                                                                                                      // 1551\n * @param {*} value The value to check.                                                                                // 1552\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.                                             // 1553\n * @example                                                                                                            // 1554\n *                                                                                                                     // 1555\n * _.isBuffer(new Buffer(2));                                                                                          // 1556\n * // => true                                                                                                          // 1557\n *                                                                                                                     // 1558\n * _.isBuffer(new Uint8Array(2));                                                                                      // 1559\n * // => false                                                                                                         // 1560\n */                                                                                                                    // 1561\nvar isBuffer = nativeIsBuffer || stubFalse;                                                                            // 1562\n                                                                                                                       // 1563\n/**                                                                                                                    // 1564\n * Checks if `value` is classified as a `Function` object.                                                             // 1565\n *                                                                                                                     // 1566\n * @static                                                                                                             // 1567\n * @memberOf _                                                                                                         // 1568\n * @since 0.1.0                                                                                                        // 1569\n * @category Lang                                                                                                      // 1570\n * @param {*} value The value to check.                                                                                // 1571\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.                                           // 1572\n * @example                                                                                                            // 1573\n *                                                                                                                     // 1574\n * _.isFunction(_);                                                                                                    // 1575\n * // => true                                                                                                          // 1576\n *                                                                                                                     // 1577\n * _.isFunction(/abc/);                                                                                                // 1578\n * // => false                                                                                                         // 1579\n */                                                                                                                    // 1580\nfunction isFunction(value) {                                                                                           // 1581\n  // The use of `Object#toString` avoids issues with the `typeof` operator                                             // 1582\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.                                      // 1583\n  var tag = isObject(value) ? objectToString.call(value) : '';                                                         // 1584\n  return tag == funcTag || tag == genTag;                                                                              // 1585\n}                                                                                                                      // 1586\n                                                                                                                       // 1587\n/**                                                                                                                    // 1588\n * Checks if `value` is a valid array-like length.                                                                     // 1589\n *                                                                                                                     // 1590\n * **Note:** This method is loosely based on                                                                           // 1591\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).                                             // 1592\n *                                                                                                                     // 1593\n * @static                                                                                                             // 1594\n * @memberOf _                                                                                                         // 1595\n * @since 4.0.0                                                                                                        // 1596\n * @category Lang                                                                                                      // 1597\n * @param {*} value The value to check.                                                                                // 1598\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                       // 1599\n * @example                                                                                                            // 1600\n *                                                                                                                     // 1601\n * _.isLength(3);                                                                                                      // 1602\n * // => true                                                                                                          // 1603\n *                                                                                                                     // 1604\n * _.isLength(Number.MIN_VALUE);                                                                                       // 1605\n * // => false                                                                                                         // 1606\n *                                                                                                                     // 1607\n * _.isLength(Infinity);                                                                                               // 1608\n * // => false                                                                                                         // 1609\n *                                                                                                                     // 1610\n * _.isLength('3');                                                                                                    // 1611\n * // => false                                                                                                         // 1612\n */                                                                                                                    // 1613\nfunction isLength(value) {                                                                                             // 1614\n  return typeof value == 'number' &&                                                                                   // 1615\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                                                         // 1616\n}                                                                                                                      // 1617\n                                                                                                                       // 1618\n/**                                                                                                                    // 1619\n * Checks if `value` is the                                                                                            // 1620\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)                      // 1621\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                      // 1622\n *                                                                                                                     // 1623\n * @static                                                                                                             // 1624\n * @memberOf _                                                                                                         // 1625\n * @since 0.1.0                                                                                                        // 1626\n * @category Lang                                                                                                      // 1627\n * @param {*} value The value to check.                                                                                // 1628\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                            // 1629\n * @example                                                                                                            // 1630\n *                                                                                                                     // 1631\n * _.isObject({});                                                                                                     // 1632\n * // => true                                                                                                          // 1633\n *                                                                                                                     // 1634\n * _.isObject([1, 2, 3]);                                                                                              // 1635\n * // => true                                                                                                          // 1636\n *                                                                                                                     // 1637\n * _.isObject(_.noop);                                                                                                 // 1638\n * // => true                                                                                                          // 1639\n *                                                                                                                     // 1640\n * _.isObject(null);                                                                                                   // 1641\n * // => false                                                                                                         // 1642\n */                                                                                                                    // 1643\nfunction isObject(value) {                                                                                             // 1644\n  var type = typeof value;                                                                                             // 1645\n  return !!value && (type == 'object' || type == 'function');                                                          // 1646\n}                                                                                                                      // 1647\n                                                                                                                       // 1648\n/**                                                                                                                    // 1649\n * Checks if `value` is object-like. A value is object-like if it's not `null`                                         // 1650\n * and has a `typeof` result of \"object\".                                                                              // 1651\n *                                                                                                                     // 1652\n * @static                                                                                                             // 1653\n * @memberOf _                                                                                                         // 1654\n * @since 4.0.0                                                                                                        // 1655\n * @category Lang                                                                                                      // 1656\n * @param {*} value The value to check.                                                                                // 1657\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 1658\n * @example                                                                                                            // 1659\n *                                                                                                                     // 1660\n * _.isObjectLike({});                                                                                                 // 1661\n * // => true                                                                                                          // 1662\n *                                                                                                                     // 1663\n * _.isObjectLike([1, 2, 3]);                                                                                          // 1664\n * // => true                                                                                                          // 1665\n *                                                                                                                     // 1666\n * _.isObjectLike(_.noop);                                                                                             // 1667\n * // => false                                                                                                         // 1668\n *                                                                                                                     // 1669\n * _.isObjectLike(null);                                                                                               // 1670\n * // => false                                                                                                         // 1671\n */                                                                                                                    // 1672\nfunction isObjectLike(value) {                                                                                         // 1673\n  return !!value && typeof value == 'object';                                                                          // 1674\n}                                                                                                                      // 1675\n                                                                                                                       // 1676\n/**                                                                                                                    // 1677\n * Creates an array of the own enumerable property names of `object`.                                                  // 1678\n *                                                                                                                     // 1679\n * **Note:** Non-object values are coerced to objects. See the                                                         // 1680\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)                                              // 1681\n * for more details.                                                                                                   // 1682\n *                                                                                                                     // 1683\n * @static                                                                                                             // 1684\n * @since 0.1.0                                                                                                        // 1685\n * @memberOf _                                                                                                         // 1686\n * @category Object                                                                                                    // 1687\n * @param {Object} object The object to query.                                                                         // 1688\n * @returns {Array} Returns the array of property names.                                                               // 1689\n * @example                                                                                                            // 1690\n *                                                                                                                     // 1691\n * function Foo() {                                                                                                    // 1692\n *   this.a = 1;                                                                                                       // 1693\n *   this.b = 2;                                                                                                       // 1694\n * }                                                                                                                   // 1695\n *                                                                                                                     // 1696\n * Foo.prototype.c = 3;                                                                                                // 1697\n *                                                                                                                     // 1698\n * _.keys(new Foo);                                                                                                    // 1699\n * // => ['a', 'b'] (iteration order is not guaranteed)                                                                // 1700\n *                                                                                                                     // 1701\n * _.keys('hi');                                                                                                       // 1702\n * // => ['0', '1']                                                                                                    // 1703\n */                                                                                                                    // 1704\nfunction keys(object) {                                                                                                // 1705\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);                                               // 1706\n}                                                                                                                      // 1707\n                                                                                                                       // 1708\n/**                                                                                                                    // 1709\n * This method returns a new empty array.                                                                              // 1710\n *                                                                                                                     // 1711\n * @static                                                                                                             // 1712\n * @memberOf _                                                                                                         // 1713\n * @since 4.13.0                                                                                                       // 1714\n * @category Util                                                                                                      // 1715\n * @returns {Array} Returns the new empty array.                                                                       // 1716\n * @example                                                                                                            // 1717\n *                                                                                                                     // 1718\n * var arrays = _.times(2, _.stubArray);                                                                               // 1719\n *                                                                                                                     // 1720\n * console.log(arrays);                                                                                                // 1721\n * // => [[], []]                                                                                                      // 1722\n *                                                                                                                     // 1723\n * console.log(arrays[0] === arrays[1]);                                                                               // 1724\n * // => false                                                                                                         // 1725\n */                                                                                                                    // 1726\nfunction stubArray() {                                                                                                 // 1727\n  return [];                                                                                                           // 1728\n}                                                                                                                      // 1729\n                                                                                                                       // 1730\n/**                                                                                                                    // 1731\n * This method returns `false`.                                                                                        // 1732\n *                                                                                                                     // 1733\n * @static                                                                                                             // 1734\n * @memberOf _                                                                                                         // 1735\n * @since 4.13.0                                                                                                       // 1736\n * @category Util                                                                                                      // 1737\n * @returns {boolean} Returns `false`.                                                                                 // 1738\n * @example                                                                                                            // 1739\n *                                                                                                                     // 1740\n * _.times(2, _.stubFalse);                                                                                            // 1741\n * // => [false, false]                                                                                                // 1742\n */                                                                                                                    // 1743\nfunction stubFalse() {                                                                                                 // 1744\n  return false;                                                                                                        // 1745\n}                                                                                                                      // 1746\n                                                                                                                       // 1747\nmodule.exports = cloneDeep;                                                                                            // 1748\n                                                                                                                       // 1749\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.isarray\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.isarray/package.json                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.isarray\";                                                                                       // 1\nexports.version = \"4.0.0\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.isarray/index.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash 4.0.0 (Custom Build) <https://lodash.com/>                                                                   // 2\n * Build: `lodash modularize exports=\"npm\" -o ./`                                                                      // 3\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>                                                // 4\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 5\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                            // 6\n * Available under MIT license <https://lodash.com/license>                                                            // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/**                                                                                                                    // 10\n * Checks if `value` is classified as an `Array` object.                                                               // 11\n *                                                                                                                     // 12\n * @static                                                                                                             // 13\n * @memberOf _                                                                                                         // 14\n * @type Function                                                                                                      // 15\n * @category Lang                                                                                                      // 16\n * @param {*} value The value to check.                                                                                // 17\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                                 // 18\n * @example                                                                                                            // 19\n *                                                                                                                     // 20\n * _.isArray([1, 2, 3]);                                                                                               // 21\n * // => true                                                                                                          // 22\n *                                                                                                                     // 23\n * _.isArray(document.body.children);                                                                                  // 24\n * // => false                                                                                                         // 25\n *                                                                                                                     // 26\n * _.isArray('abc');                                                                                                   // 27\n * // => false                                                                                                         // 28\n *                                                                                                                     // 29\n * _.isArray(_.noop);                                                                                                  // 30\n * // => false                                                                                                         // 31\n */                                                                                                                    // 32\nvar isArray = Array.isArray;                                                                                           // 33\n                                                                                                                       // 34\nmodule.exports = isArray;                                                                                              // 35\n                                                                                                                       // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.isnull\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.isnull/package.json                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.isnull\";                                                                                        // 1\nexports.version = \"3.0.0\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.isnull/index.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash 3.0.0 (Custom Build) <https://lodash.com/>                                                                   // 2\n * Build: `lodash modern modularize exports=\"npm\" -o ./`                                                               // 3\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>                                                // 4\n * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>                                                      // 5\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                            // 6\n * Available under MIT license <https://lodash.com/license>                                                            // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/**                                                                                                                    // 10\n * Checks if `value` is `null`.                                                                                        // 11\n *                                                                                                                     // 12\n * @static                                                                                                             // 13\n * @memberOf _                                                                                                         // 14\n * @category Lang                                                                                                      // 15\n * @param {*} value The value to check.                                                                                // 16\n * @returns {boolean} Returns `true` if `value` is `null`, else `false`.                                               // 17\n * @example                                                                                                            // 18\n *                                                                                                                     // 19\n * _.isNull(null);                                                                                                     // 20\n * // => true                                                                                                          // 21\n *                                                                                                                     // 22\n * _.isNull(void 0);                                                                                                   // 23\n * // => false                                                                                                         // 24\n */                                                                                                                    // 25\nfunction isNull(value) {                                                                                               // 26\n  return value === null;                                                                                               // 27\n}                                                                                                                      // 28\n                                                                                                                       // 29\nmodule.exports = isNull;                                                                                               // 30\n                                                                                                                       // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.isundefined\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.isundefined/package.json                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.isundefined\";                                                                                   // 1\nexports.version = \"3.0.1\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.isundefined/index.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash 3.0.1 (Custom Build) <https://lodash.com/>                                                                   // 2\n * Build: `lodash modern modularize exports=\"npm\" -o ./`                                                               // 3\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>                                                // 4\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 5\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                            // 6\n * Available under MIT license <https://lodash.com/license>                                                            // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/**                                                                                                                    // 10\n * Checks if `value` is `undefined`.                                                                                   // 11\n *                                                                                                                     // 12\n * @static                                                                                                             // 13\n * @memberOf _                                                                                                         // 14\n * @category Lang                                                                                                      // 15\n * @param {*} value The value to check.                                                                                // 16\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.                                          // 17\n * @example                                                                                                            // 18\n *                                                                                                                     // 19\n * _.isUndefined(void 0);                                                                                              // 20\n * // => true                                                                                                          // 21\n *                                                                                                                     // 22\n * _.isUndefined(null);                                                                                                // 23\n * // => false                                                                                                         // 24\n */                                                                                                                    // 25\nfunction isUndefined(value) {                                                                                          // 26\n  return value === undefined;                                                                                          // 27\n}                                                                                                                      // 28\n                                                                                                                       // 29\nmodule.exports = isUndefined;                                                                                          // 30\n                                                                                                                       // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"redux\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/redux/package.json                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"redux\";                                                                                                // 1\nexports.version = \"3.6.0\";                                                                                             // 2\nexports.main = \"lib/index.js\";                                                                                         // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"index.js\":[\"./createStore\",\"./combineReducers\",\"./bindActionCreators\",\"./applyMiddleware\",\"./compose\",\"./utils/warning\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/redux/lib/index.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\nexports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;\n                                                                                                                       // 5\nvar _createStore = require('./createStore');                                                                           // 6\n                                                                                                                       // 7\nvar _createStore2 = _interopRequireDefault(_createStore);                                                              // 8\n                                                                                                                       // 9\nvar _combineReducers = require('./combineReducers');                                                                   // 10\n                                                                                                                       // 11\nvar _combineReducers2 = _interopRequireDefault(_combineReducers);                                                      // 12\n                                                                                                                       // 13\nvar _bindActionCreators = require('./bindActionCreators');                                                             // 14\n                                                                                                                       // 15\nvar _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);                                                // 16\n                                                                                                                       // 17\nvar _applyMiddleware = require('./applyMiddleware');                                                                   // 18\n                                                                                                                       // 19\nvar _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);                                                      // 20\n                                                                                                                       // 21\nvar _compose = require('./compose');                                                                                   // 22\n                                                                                                                       // 23\nvar _compose2 = _interopRequireDefault(_compose);                                                                      // 24\n                                                                                                                       // 25\nvar _warning = require('./utils/warning');                                                                             // 26\n                                                                                                                       // 27\nvar _warning2 = _interopRequireDefault(_warning);                                                                      // 28\n                                                                                                                       // 29\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      // 30\n                                                                                                                       // 31\n/*                                                                                                                     // 32\n* This is a dummy function to check if the function name has been altered by minification.                             // 33\n* If the function has been minified and NODE_ENV !== 'production', warn the user.                                      // 34\n*/                                                                                                                     // 35\nfunction isCrushed() {}                                                                                                // 36\n                                                                                                                       // 37\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {   // 38\n  (0, _warning2['default'])('You are currently using minified code outside of NODE_ENV === \\'production\\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');\n}                                                                                                                      // 40\n                                                                                                                       // 41\nexports.createStore = _createStore2['default'];                                                                        // 42\nexports.combineReducers = _combineReducers2['default'];                                                                // 43\nexports.bindActionCreators = _bindActionCreators2['default'];                                                          // 44\nexports.applyMiddleware = _applyMiddleware2['default'];                                                                // 45\nexports.compose = _compose2['default'];                                                                                // 46\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"createStore.js\":[\"lodash/isPlainObject\",\"symbol-observable\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/redux/lib/createStore.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\nexports.ActionTypes = undefined;                                                                                       // 4\nexports['default'] = createStore;                                                                                      // 5\n                                                                                                                       // 6\nvar _isPlainObject = require('lodash/isPlainObject');                                                                  // 7\n                                                                                                                       // 8\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);                                                          // 9\n                                                                                                                       // 10\nvar _symbolObservable = require('symbol-observable');                                                                  // 11\n                                                                                                                       // 12\nvar _symbolObservable2 = _interopRequireDefault(_symbolObservable);                                                    // 13\n                                                                                                                       // 14\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * These are private action types reserved by Redux.                                                                   // 18\n * For any unknown actions, you must return the current state.                                                         // 19\n * If the current state is undefined, you must return the initial state.                                               // 20\n * Do not reference these action types directly in your code.                                                          // 21\n */                                                                                                                    // 22\nvar ActionTypes = exports.ActionTypes = {                                                                              // 23\n  INIT: '@@redux/INIT'                                                                                                 // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * Creates a Redux store that holds the state tree.                                                                    // 28\n * The only way to change the data in the store is to call `dispatch()` on it.                                         // 29\n *                                                                                                                     // 30\n * There should only be a single store in your app. To specify how different                                           // 31\n * parts of the state tree respond to actions, you may combine several reducers                                        // 32\n * into a single reducer function by using `combineReducers`.                                                          // 33\n *                                                                                                                     // 34\n * @param {Function} reducer A function that returns the next state tree, given                                        // 35\n * the current state tree and the action to handle.                                                                    // 36\n *                                                                                                                     // 37\n * @param {any} [preloadedState] The initial state. You may optionally specify it                                      // 38\n * to hydrate the state from the server in universal apps, or to restore a                                             // 39\n * previously serialized user session.                                                                                 // 40\n * If you use `combineReducers` to produce the root reducer function, this must be                                     // 41\n * an object with the same shape as `combineReducers` keys.                                                            // 42\n *                                                                                                                     // 43\n * @param {Function} enhancer The store enhancer. You may optionally specify it                                        // 44\n * to enhance the store with third-party capabilities such as middleware,                                              // 45\n * time travel, persistence, etc. The only store enhancer that ships with Redux                                        // 46\n * is `applyMiddleware()`.                                                                                             // 47\n *                                                                                                                     // 48\n * @returns {Store} A Redux store that lets you read the state, dispatch actions                                       // 49\n * and subscribe to changes.                                                                                           // 50\n */                                                                                                                    // 51\nfunction createStore(reducer, preloadedState, enhancer) {                                                              // 52\n  var _ref2;                                                                                                           // 53\n                                                                                                                       // 54\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {                                       // 55\n    enhancer = preloadedState;                                                                                         // 56\n    preloadedState = undefined;                                                                                        // 57\n  }                                                                                                                    // 58\n                                                                                                                       // 59\n  if (typeof enhancer !== 'undefined') {                                                                               // 60\n    if (typeof enhancer !== 'function') {                                                                              // 61\n      throw new Error('Expected the enhancer to be a function.');                                                      // 62\n    }                                                                                                                  // 63\n                                                                                                                       // 64\n    return enhancer(createStore)(reducer, preloadedState);                                                             // 65\n  }                                                                                                                    // 66\n                                                                                                                       // 67\n  if (typeof reducer !== 'function') {                                                                                 // 68\n    throw new Error('Expected the reducer to be a function.');                                                         // 69\n  }                                                                                                                    // 70\n                                                                                                                       // 71\n  var currentReducer = reducer;                                                                                        // 72\n  var currentState = preloadedState;                                                                                   // 73\n  var currentListeners = [];                                                                                           // 74\n  var nextListeners = currentListeners;                                                                                // 75\n  var isDispatching = false;                                                                                           // 76\n                                                                                                                       // 77\n  function ensureCanMutateNextListeners() {                                                                            // 78\n    if (nextListeners === currentListeners) {                                                                          // 79\n      nextListeners = currentListeners.slice();                                                                        // 80\n    }                                                                                                                  // 81\n  }                                                                                                                    // 82\n                                                                                                                       // 83\n  /**                                                                                                                  // 84\n   * Reads the state tree managed by the store.                                                                        // 85\n   *                                                                                                                   // 86\n   * @returns {any} The current state tree of your application.                                                        // 87\n   */                                                                                                                  // 88\n  function getState() {                                                                                                // 89\n    return currentState;                                                                                               // 90\n  }                                                                                                                    // 91\n                                                                                                                       // 92\n  /**                                                                                                                  // 93\n   * Adds a change listener. It will be called any time an action is dispatched,                                       // 94\n   * and some part of the state tree may potentially have changed. You may then                                        // 95\n   * call `getState()` to read the current state tree inside the callback.                                             // 96\n   *                                                                                                                   // 97\n   * You may call `dispatch()` from a change listener, with the following                                              // 98\n   * caveats:                                                                                                          // 99\n   *                                                                                                                   // 100\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.                                         // 101\n   * If you subscribe or unsubscribe while the listeners are being invoked, this                                       // 102\n   * will not have any effect on the `dispatch()` that is currently in progress.                                       // 103\n   * However, the next `dispatch()` call, whether nested or not, will use a more                                       // 104\n   * recent snapshot of the subscription list.                                                                         // 105\n   *                                                                                                                   // 106\n   * 2. The listener should not expect to see all state changes, as the state                                          // 107\n   * might have been updated multiple times during a nested `dispatch()` before                                        // 108\n   * the listener is called. It is, however, guaranteed that all subscribers                                           // 109\n   * registered before the `dispatch()` started will be called with the latest                                         // 110\n   * state by the time it exits.                                                                                       // 111\n   *                                                                                                                   // 112\n   * @param {Function} listener A callback to be invoked on every dispatch.                                            // 113\n   * @returns {Function} A function to remove this change listener.                                                    // 114\n   */                                                                                                                  // 115\n  function subscribe(listener) {                                                                                       // 116\n    if (typeof listener !== 'function') {                                                                              // 117\n      throw new Error('Expected listener to be a function.');                                                          // 118\n    }                                                                                                                  // 119\n                                                                                                                       // 120\n    var isSubscribed = true;                                                                                           // 121\n                                                                                                                       // 122\n    ensureCanMutateNextListeners();                                                                                    // 123\n    nextListeners.push(listener);                                                                                      // 124\n                                                                                                                       // 125\n    return function unsubscribe() {                                                                                    // 126\n      if (!isSubscribed) {                                                                                             // 127\n        return;                                                                                                        // 128\n      }                                                                                                                // 129\n                                                                                                                       // 130\n      isSubscribed = false;                                                                                            // 131\n                                                                                                                       // 132\n      ensureCanMutateNextListeners();                                                                                  // 133\n      var index = nextListeners.indexOf(listener);                                                                     // 134\n      nextListeners.splice(index, 1);                                                                                  // 135\n    };                                                                                                                 // 136\n  }                                                                                                                    // 137\n                                                                                                                       // 138\n  /**                                                                                                                  // 139\n   * Dispatches an action. It is the only way to trigger a state change.                                               // 140\n   *                                                                                                                   // 141\n   * The `reducer` function, used to create the store, will be called with the                                         // 142\n   * current state tree and the given `action`. Its return value will                                                  // 143\n   * be considered the **next** state of the tree, and the change listeners                                            // 144\n   * will be notified.                                                                                                 // 145\n   *                                                                                                                   // 146\n   * The base implementation only supports plain object actions. If you want to                                        // 147\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to                                        // 148\n   * wrap your store creating function into the corresponding middleware. For                                          // 149\n   * example, see the documentation for the `redux-thunk` package. Even the                                            // 150\n   * middleware will eventually dispatch plain object actions using this method.                                       // 151\n   *                                                                                                                   // 152\n   * @param {Object} action A plain object representing “what changed”. It is                                          // 153\n   * a good idea to keep actions serializable so you can record and replay user                                        // 154\n   * sessions, or use the time travelling `redux-devtools`. An action must have                                        // 155\n   * a `type` property which may not be `undefined`. It is a good idea to use                                          // 156\n   * string constants for action types.                                                                                // 157\n   *                                                                                                                   // 158\n   * @returns {Object} For convenience, the same action object you dispatched.                                         // 159\n   *                                                                                                                   // 160\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to                                            // 161\n   * return something else (for example, a Promise you can await).                                                     // 162\n   */                                                                                                                  // 163\n  function dispatch(action) {                                                                                          // 164\n    if (!(0, _isPlainObject2['default'])(action)) {                                                                    // 165\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');                 // 166\n    }                                                                                                                  // 167\n                                                                                                                       // 168\n    if (typeof action.type === 'undefined') {                                                                          // 169\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');      // 170\n    }                                                                                                                  // 171\n                                                                                                                       // 172\n    if (isDispatching) {                                                                                               // 173\n      throw new Error('Reducers may not dispatch actions.');                                                           // 174\n    }                                                                                                                  // 175\n                                                                                                                       // 176\n    try {                                                                                                              // 177\n      isDispatching = true;                                                                                            // 178\n      currentState = currentReducer(currentState, action);                                                             // 179\n    } finally {                                                                                                        // 180\n      isDispatching = false;                                                                                           // 181\n    }                                                                                                                  // 182\n                                                                                                                       // 183\n    var listeners = currentListeners = nextListeners;                                                                  // 184\n    for (var i = 0; i < listeners.length; i++) {                                                                       // 185\n      listeners[i]();                                                                                                  // 186\n    }                                                                                                                  // 187\n                                                                                                                       // 188\n    return action;                                                                                                     // 189\n  }                                                                                                                    // 190\n                                                                                                                       // 191\n  /**                                                                                                                  // 192\n   * Replaces the reducer currently used by the store to calculate the state.                                          // 193\n   *                                                                                                                   // 194\n   * You might need this if your app implements code splitting and you want to                                         // 195\n   * load some of the reducers dynamically. You might also need this if you                                            // 196\n   * implement a hot reloading mechanism for Redux.                                                                    // 197\n   *                                                                                                                   // 198\n   * @param {Function} nextReducer The reducer for the store to use instead.                                           // 199\n   * @returns {void}                                                                                                   // 200\n   */                                                                                                                  // 201\n  function replaceReducer(nextReducer) {                                                                               // 202\n    if (typeof nextReducer !== 'function') {                                                                           // 203\n      throw new Error('Expected the nextReducer to be a function.');                                                   // 204\n    }                                                                                                                  // 205\n                                                                                                                       // 206\n    currentReducer = nextReducer;                                                                                      // 207\n    dispatch({ type: ActionTypes.INIT });                                                                              // 208\n  }                                                                                                                    // 209\n                                                                                                                       // 210\n  /**                                                                                                                  // 211\n   * Interoperability point for observable/reactive libraries.                                                         // 212\n   * @returns {observable} A minimal observable of state changes.                                                      // 213\n   * For more information, see the observable proposal:                                                                // 214\n   * https://github.com/zenparsing/es-observable                                                                       // 215\n   */                                                                                                                  // 216\n  function observable() {                                                                                              // 217\n    var _ref;                                                                                                          // 218\n                                                                                                                       // 219\n    var outerSubscribe = subscribe;                                                                                    // 220\n    return _ref = {                                                                                                    // 221\n      /**                                                                                                              // 222\n       * The minimal observable subscription method.                                                                   // 223\n       * @param {Object} observer Any object that can be used as an observer.                                          // 224\n       * The observer object should have a `next` method.                                                              // 225\n       * @returns {subscription} An object with an `unsubscribe` method that can                                       // 226\n       * be used to unsubscribe the observable from the store, and prevent further                                     // 227\n       * emission of values from the observable.                                                                       // 228\n       */                                                                                                              // 229\n      subscribe: function subscribe(observer) {                                                                        // 230\n        if (typeof observer !== 'object') {                                                                            // 231\n          throw new TypeError('Expected the observer to be an object.');                                               // 232\n        }                                                                                                              // 233\n                                                                                                                       // 234\n        function observeState() {                                                                                      // 235\n          if (observer.next) {                                                                                         // 236\n            observer.next(getState());                                                                                 // 237\n          }                                                                                                            // 238\n        }                                                                                                              // 239\n                                                                                                                       // 240\n        observeState();                                                                                                // 241\n        var unsubscribe = outerSubscribe(observeState);                                                                // 242\n        return { unsubscribe: unsubscribe };                                                                           // 243\n      }                                                                                                                // 244\n    }, _ref[_symbolObservable2['default']] = function () {                                                             // 245\n      return this;                                                                                                     // 246\n    }, _ref;                                                                                                           // 247\n  }                                                                                                                    // 248\n                                                                                                                       // 249\n  // When a store is created, an \"INIT\" action is dispatched so that every                                             // 250\n  // reducer returns their initial state. This effectively populates                                                   // 251\n  // the initial state tree.                                                                                           // 252\n  dispatch({ type: ActionTypes.INIT });                                                                                // 253\n                                                                                                                       // 254\n  return _ref2 = {                                                                                                     // 255\n    dispatch: dispatch,                                                                                                // 256\n    subscribe: subscribe,                                                                                              // 257\n    getState: getState,                                                                                                // 258\n    replaceReducer: replaceReducer                                                                                     // 259\n  }, _ref2[_symbolObservable2['default']] = observable, _ref2;                                                         // 260\n}                                                                                                                      // 261\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"combineReducers.js\":[\"./createStore\",\"lodash/isPlainObject\",\"./utils/warning\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/redux/lib/combineReducers.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\nexports['default'] = combineReducers;                                                                                  // 4\n                                                                                                                       // 5\nvar _createStore = require('./createStore');                                                                           // 6\n                                                                                                                       // 7\nvar _isPlainObject = require('lodash/isPlainObject');                                                                  // 8\n                                                                                                                       // 9\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);                                                          // 10\n                                                                                                                       // 11\nvar _warning = require('./utils/warning');                                                                             // 12\n                                                                                                                       // 13\nvar _warning2 = _interopRequireDefault(_warning);                                                                      // 14\n                                                                                                                       // 15\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      // 16\n                                                                                                                       // 17\nfunction getUndefinedStateErrorMessage(key, action) {                                                                  // 18\n  var actionType = action && action.type;                                                                              // 19\n  var actionName = actionType && '\"' + actionType.toString() + '\"' || 'an action';                                     // 20\n                                                                                                                       // 21\n  return 'Given action ' + actionName + ', reducer \"' + key + '\" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state.';\n}                                                                                                                      // 23\n                                                                                                                       // 24\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {                     // 25\n  var reducerKeys = Object.keys(reducers);                                                                             // 26\n  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n                                                                                                                       // 28\n  if (reducerKeys.length === 0) {                                                                                      // 29\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }                                                                                                                    // 31\n                                                                                                                       // 32\n  if (!(0, _isPlainObject2['default'])(inputState)) {                                                                  // 33\n    return 'The ' + argumentName + ' has unexpected type of \"' + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + '\". Expected argument to be an object with the following ' + ('keys: \"' + reducerKeys.join('\", \"') + '\"');\n  }                                                                                                                    // 35\n                                                                                                                       // 36\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {                                                 // 37\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];                                                  // 38\n  });                                                                                                                  // 39\n                                                                                                                       // 40\n  unexpectedKeys.forEach(function (key) {                                                                              // 41\n    unexpectedKeyCache[key] = true;                                                                                    // 42\n  });                                                                                                                  // 43\n                                                                                                                       // 44\n  if (unexpectedKeys.length > 0) {                                                                                     // 45\n    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('\"' + unexpectedKeys.join('\", \"') + '\" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('\"' + reducerKeys.join('\", \"') + '\". Unexpected keys will be ignored.');\n  }                                                                                                                    // 47\n}                                                                                                                      // 48\n                                                                                                                       // 49\nfunction assertReducerSanity(reducers) {                                                                               // 50\n  Object.keys(reducers).forEach(function (key) {                                                                       // 51\n    var reducer = reducers[key];                                                                                       // 52\n    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });                                    // 53\n                                                                                                                       // 54\n    if (typeof initialState === 'undefined') {                                                                         // 55\n      throw new Error('Reducer \"' + key + '\" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');\n    }                                                                                                                  // 57\n                                                                                                                       // 58\n    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');          // 59\n    if (typeof reducer(undefined, { type: type }) === 'undefined') {                                                   // 60\n      throw new Error('Reducer \"' + key + '\" returned undefined when probed with a random type. ' + ('Don\\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in \"redux/*\" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');\n    }                                                                                                                  // 62\n  });                                                                                                                  // 63\n}                                                                                                                      // 64\n                                                                                                                       // 65\n/**                                                                                                                    // 66\n * Turns an object whose values are different reducer functions, into a single                                         // 67\n * reducer function. It will call every child reducer, and gather their results                                        // 68\n * into a single state object, whose keys correspond to the keys of the passed                                         // 69\n * reducer functions.                                                                                                  // 70\n *                                                                                                                     // 71\n * @param {Object} reducers An object whose values correspond to different                                             // 72\n * reducer functions that need to be combined into one. One handy way to obtain                                        // 73\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return                                       // 74\n * undefined for any action. Instead, they should return their initial state                                           // 75\n * if the state passed to them was undefined, and the current state for any                                            // 76\n * unrecognized action.                                                                                                // 77\n *                                                                                                                     // 78\n * @returns {Function} A reducer function that invokes every reducer inside the                                        // 79\n * passed object, and builds a state object with the same shape.                                                       // 80\n */                                                                                                                    // 81\nfunction combineReducers(reducers) {                                                                                   // 82\n  var reducerKeys = Object.keys(reducers);                                                                             // 83\n  var finalReducers = {};                                                                                              // 84\n  for (var i = 0; i < reducerKeys.length; i++) {                                                                       // 85\n    var key = reducerKeys[i];                                                                                          // 86\n                                                                                                                       // 87\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 88\n      if (typeof reducers[key] === 'undefined') {                                                                      // 89\n        (0, _warning2['default'])('No reducer provided for key \"' + key + '\"');                                        // 90\n      }                                                                                                                // 91\n    }                                                                                                                  // 92\n                                                                                                                       // 93\n    if (typeof reducers[key] === 'function') {                                                                         // 94\n      finalReducers[key] = reducers[key];                                                                              // 95\n    }                                                                                                                  // 96\n  }                                                                                                                    // 97\n  var finalReducerKeys = Object.keys(finalReducers);                                                                   // 98\n                                                                                                                       // 99\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 100\n    var unexpectedKeyCache = {};                                                                                       // 101\n  }                                                                                                                    // 102\n                                                                                                                       // 103\n  var sanityError;                                                                                                     // 104\n  try {                                                                                                                // 105\n    assertReducerSanity(finalReducers);                                                                                // 106\n  } catch (e) {                                                                                                        // 107\n    sanityError = e;                                                                                                   // 108\n  }                                                                                                                    // 109\n                                                                                                                       // 110\n  return function combination() {                                                                                      // 111\n    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                               // 112\n    var action = arguments[1];                                                                                         // 113\n                                                                                                                       // 114\n    if (sanityError) {                                                                                                 // 115\n      throw sanityError;                                                                                               // 116\n    }                                                                                                                  // 117\n                                                                                                                       // 118\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 119\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);    // 120\n      if (warningMessage) {                                                                                            // 121\n        (0, _warning2['default'])(warningMessage);                                                                     // 122\n      }                                                                                                                // 123\n    }                                                                                                                  // 124\n                                                                                                                       // 125\n    var hasChanged = false;                                                                                            // 126\n    var nextState = {};                                                                                                // 127\n    for (var i = 0; i < finalReducerKeys.length; i++) {                                                                // 128\n      var key = finalReducerKeys[i];                                                                                   // 129\n      var reducer = finalReducers[key];                                                                                // 130\n      var previousStateForKey = state[key];                                                                            // 131\n      var nextStateForKey = reducer(previousStateForKey, action);                                                      // 132\n      if (typeof nextStateForKey === 'undefined') {                                                                    // 133\n        var errorMessage = getUndefinedStateErrorMessage(key, action);                                                 // 134\n        throw new Error(errorMessage);                                                                                 // 135\n      }                                                                                                                // 136\n      nextState[key] = nextStateForKey;                                                                                // 137\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;                                              // 138\n    }                                                                                                                  // 139\n    return hasChanged ? nextState : state;                                                                             // 140\n  };                                                                                                                   // 141\n}                                                                                                                      // 142\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"utils\":{\"warning.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/redux/lib/utils/warning.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\nexports['default'] = warning;                                                                                          // 4\n/**                                                                                                                    // 5\n * Prints a warning in the console if it exists.                                                                       // 6\n *                                                                                                                     // 7\n * @param {String} message The warning message.                                                                        // 8\n * @returns {void}                                                                                                     // 9\n */                                                                                                                    // 10\nfunction warning(message) {                                                                                            // 11\n  /* eslint-disable no-console */                                                                                      // 12\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {                                         // 13\n    console.error(message);                                                                                            // 14\n  }                                                                                                                    // 15\n  /* eslint-enable no-console */                                                                                       // 16\n  try {                                                                                                                // 17\n    // This error was thrown as a convenience so that if you enable                                                    // 18\n    // \"break on all exceptions\" in your console,                                                                      // 19\n    // it would pause the execution at this line.                                                                      // 20\n    throw new Error(message);                                                                                          // 21\n    /* eslint-disable no-empty */                                                                                      // 22\n  } catch (e) {}                                                                                                       // 23\n  /* eslint-enable no-empty */                                                                                         // 24\n}                                                                                                                      // 25\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bindActionCreators.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/redux/lib/bindActionCreators.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\nexports['default'] = bindActionCreators;                                                                               // 4\nfunction bindActionCreator(actionCreator, dispatch) {                                                                  // 5\n  return function () {                                                                                                 // 6\n    return dispatch(actionCreator.apply(undefined, arguments));                                                        // 7\n  };                                                                                                                   // 8\n}                                                                                                                      // 9\n                                                                                                                       // 10\n/**                                                                                                                    // 11\n * Turns an object whose values are action creators, into an object with the                                           // 12\n * same keys, but with every function wrapped into a `dispatch` call so they                                           // 13\n * may be invoked directly. This is just a convenience method, as you can call                                         // 14\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.                                                // 15\n *                                                                                                                     // 16\n * For convenience, you can also pass a single function as the first argument,                                         // 17\n * and get a function in return.                                                                                       // 18\n *                                                                                                                     // 19\n * @param {Function|Object} actionCreators An object whose values are action                                           // 20\n * creator functions. One handy way to obtain it is to use ES6 `import * as`                                           // 21\n * syntax. You may also pass a single function.                                                                        // 22\n *                                                                                                                     // 23\n * @param {Function} dispatch The `dispatch` function available on your Redux                                          // 24\n * store.                                                                                                              // 25\n *                                                                                                                     // 26\n * @returns {Function|Object} The object mimicking the original object, but with                                       // 27\n * every action creator wrapped into the `dispatch` call. If you passed a                                              // 28\n * function as `actionCreators`, the return value will also be a single                                                // 29\n * function.                                                                                                           // 30\n */                                                                                                                    // 31\nfunction bindActionCreators(actionCreators, dispatch) {                                                                // 32\n  if (typeof actionCreators === 'function') {                                                                          // 33\n    return bindActionCreator(actionCreators, dispatch);                                                                // 34\n  }                                                                                                                    // 35\n                                                                                                                       // 36\n  if (typeof actionCreators !== 'object' || actionCreators === null) {                                                 // 37\n    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?');\n  }                                                                                                                    // 39\n                                                                                                                       // 40\n  var keys = Object.keys(actionCreators);                                                                              // 41\n  var boundActionCreators = {};                                                                                        // 42\n  for (var i = 0; i < keys.length; i++) {                                                                              // 43\n    var key = keys[i];                                                                                                 // 44\n    var actionCreator = actionCreators[key];                                                                           // 45\n    if (typeof actionCreator === 'function') {                                                                         // 46\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);                                           // 47\n    }                                                                                                                  // 48\n  }                                                                                                                    // 49\n  return boundActionCreators;                                                                                          // 50\n}                                                                                                                      // 51\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"applyMiddleware.js\":[\"./compose\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/redux/lib/applyMiddleware.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\n                                                                                                                       // 4\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n                                                                                                                       // 6\nexports['default'] = applyMiddleware;                                                                                  // 7\n                                                                                                                       // 8\nvar _compose = require('./compose');                                                                                   // 9\n                                                                                                                       // 10\nvar _compose2 = _interopRequireDefault(_compose);                                                                      // 11\n                                                                                                                       // 12\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Creates a store enhancer that applies middleware to the dispatch method                                             // 16\n * of the Redux store. This is handy for a variety of tasks, such as expressing                                        // 17\n * asynchronous actions in a concise manner, or logging every action payload.                                          // 18\n *                                                                                                                     // 19\n * See `redux-thunk` package as an example of the Redux middleware.                                                    // 20\n *                                                                                                                     // 21\n * Because middleware is potentially asynchronous, this should be the first                                            // 22\n * store enhancer in the composition chain.                                                                            // 23\n *                                                                                                                     // 24\n * Note that each middleware will be given the `dispatch` and `getState` functions                                     // 25\n * as named arguments.                                                                                                 // 26\n *                                                                                                                     // 27\n * @param {...Function} middlewares The middleware chain to be applied.                                                // 28\n * @returns {Function} A store enhancer applying the middleware.                                                       // 29\n */                                                                                                                    // 30\nfunction applyMiddleware() {                                                                                           // 31\n  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {                        // 32\n    middlewares[_key] = arguments[_key];                                                                               // 33\n  }                                                                                                                    // 34\n                                                                                                                       // 35\n  return function (createStore) {                                                                                      // 36\n    return function (reducer, preloadedState, enhancer) {                                                              // 37\n      var store = createStore(reducer, preloadedState, enhancer);                                                      // 38\n      var _dispatch = store.dispatch;                                                                                  // 39\n      var chain = [];                                                                                                  // 40\n                                                                                                                       // 41\n      var middlewareAPI = {                                                                                            // 42\n        getState: store.getState,                                                                                      // 43\n        dispatch: function dispatch(action) {                                                                          // 44\n          return _dispatch(action);                                                                                    // 45\n        }                                                                                                              // 46\n      };                                                                                                               // 47\n      chain = middlewares.map(function (middleware) {                                                                  // 48\n        return middleware(middlewareAPI);                                                                              // 49\n      });                                                                                                              // 50\n      _dispatch = _compose2['default'].apply(undefined, chain)(store.dispatch);                                        // 51\n                                                                                                                       // 52\n      return _extends({}, store, {                                                                                     // 53\n        dispatch: _dispatch                                                                                            // 54\n      });                                                                                                              // 55\n    };                                                                                                                 // 56\n  };                                                                                                                   // 57\n}                                                                                                                      // 58\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"compose.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/redux/lib/compose.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\nexports[\"default\"] = compose;                                                                                          // 4\n/**                                                                                                                    // 5\n * Composes single-argument functions from right to left. The rightmost                                                // 6\n * function can take multiple arguments as it provides the signature for                                               // 7\n * the resulting composite function.                                                                                   // 8\n *                                                                                                                     // 9\n * @param {...Function} funcs The functions to compose.                                                                // 10\n * @returns {Function} A function obtained by composing the argument functions                                         // 11\n * from right to left. For example, compose(f, g, h) is identical to doing                                             // 12\n * (...args) => f(g(h(...args))).                                                                                      // 13\n */                                                                                                                    // 14\n                                                                                                                       // 15\nfunction compose() {                                                                                                   // 16\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {                              // 17\n    funcs[_key] = arguments[_key];                                                                                     // 18\n  }                                                                                                                    // 19\n                                                                                                                       // 20\n  if (funcs.length === 0) {                                                                                            // 21\n    return function (arg) {                                                                                            // 22\n      return arg;                                                                                                      // 23\n    };                                                                                                                 // 24\n  }                                                                                                                    // 25\n                                                                                                                       // 26\n  if (funcs.length === 1) {                                                                                            // 27\n    return funcs[0];                                                                                                   // 28\n  }                                                                                                                    // 29\n                                                                                                                       // 30\n  var last = funcs[funcs.length - 1];                                                                                  // 31\n  var rest = funcs.slice(0, -1);                                                                                       // 32\n  return function () {                                                                                                 // 33\n    return rest.reduceRight(function (composed, f) {                                                                   // 34\n      return f(composed);                                                                                              // 35\n    }, last.apply(undefined, arguments));                                                                              // 36\n  };                                                                                                                   // 37\n}                                                                                                                      // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"node_modules\":{\"lodash\":{\"isPlainObject.js\":[\"./_getPrototype\",\"./isObjectLike\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/redux/node_modules/lodash/isPlainObject.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar getPrototype = require('./_getPrototype'),                                                                         // 1\n    isObjectLike = require('./isObjectLike');                                                                          // 2\n                                                                                                                       // 3\n/** `Object#toString` result references. */                                                                            // 4\nvar objectTag = '[object Object]';                                                                                     // 5\n                                                                                                                       // 6\n/** Used for built-in method references. */                                                                            // 7\nvar funcProto = Function.prototype,                                                                                    // 8\n    objectProto = Object.prototype;                                                                                    // 9\n                                                                                                                       // 10\n/** Used to resolve the decompiled source of functions. */                                                             // 11\nvar funcToString = funcProto.toString;                                                                                 // 12\n                                                                                                                       // 13\n/** Used to check objects for own properties. */                                                                       // 14\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 15\n                                                                                                                       // 16\n/** Used to infer the `Object` constructor. */                                                                         // 17\nvar objectCtorString = funcToString.call(Object);                                                                      // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * Used to resolve the                                                                                                 // 21\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)                          // 22\n * of values.                                                                                                          // 23\n */                                                                                                                    // 24\nvar objectToString = objectProto.toString;                                                                             // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * Checks if `value` is a plain object, that is, an object created by the                                              // 28\n * `Object` constructor or one with a `[[Prototype]]` of `null`.                                                       // 29\n *                                                                                                                     // 30\n * @static                                                                                                             // 31\n * @memberOf _                                                                                                         // 32\n * @since 0.8.0                                                                                                        // 33\n * @category Lang                                                                                                      // 34\n * @param {*} value The value to check.                                                                                // 35\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.                                       // 36\n * @example                                                                                                            // 37\n *                                                                                                                     // 38\n * function Foo() {                                                                                                    // 39\n *   this.a = 1;                                                                                                       // 40\n * }                                                                                                                   // 41\n *                                                                                                                     // 42\n * _.isPlainObject(new Foo);                                                                                           // 43\n * // => false                                                                                                         // 44\n *                                                                                                                     // 45\n * _.isPlainObject([1, 2, 3]);                                                                                         // 46\n * // => false                                                                                                         // 47\n *                                                                                                                     // 48\n * _.isPlainObject({ 'x': 0, 'y': 0 });                                                                                // 49\n * // => true                                                                                                          // 50\n *                                                                                                                     // 51\n * _.isPlainObject(Object.create(null));                                                                               // 52\n * // => true                                                                                                          // 53\n */                                                                                                                    // 54\nfunction isPlainObject(value) {                                                                                        // 55\n  if (!isObjectLike(value) || objectToString.call(value) != objectTag) {                                               // 56\n    return false;                                                                                                      // 57\n  }                                                                                                                    // 58\n  var proto = getPrototype(value);                                                                                     // 59\n  if (proto === null) {                                                                                                // 60\n    return true;                                                                                                       // 61\n  }                                                                                                                    // 62\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;                                           // 63\n  return (typeof Ctor == 'function' &&                                                                                 // 64\n    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);                                              // 65\n}                                                                                                                      // 66\n                                                                                                                       // 67\nmodule.exports = isPlainObject;                                                                                        // 68\n                                                                                                                       // 69\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_getPrototype.js\":[\"./_overArg\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/redux/node_modules/lodash/_getPrototype.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar overArg = require('./_overArg');                                                                                   // 1\n                                                                                                                       // 2\n/** Built-in value references. */                                                                                      // 3\nvar getPrototype = overArg(Object.getPrototypeOf, Object);                                                             // 4\n                                                                                                                       // 5\nmodule.exports = getPrototype;                                                                                         // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_overArg.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/redux/node_modules/lodash/_overArg.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Creates a unary function that invokes `func` with its argument transformed.                                         // 2\n *                                                                                                                     // 3\n * @private                                                                                                            // 4\n * @param {Function} func The function to wrap.                                                                        // 5\n * @param {Function} transform The argument transform.                                                                 // 6\n * @returns {Function} Returns the new function.                                                                       // 7\n */                                                                                                                    // 8\nfunction overArg(func, transform) {                                                                                    // 9\n  return function(arg) {                                                                                               // 10\n    return func(transform(arg));                                                                                       // 11\n  };                                                                                                                   // 12\n}                                                                                                                      // 13\n                                                                                                                       // 14\nmodule.exports = overArg;                                                                                              // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isObjectLike.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/redux/node_modules/lodash/isObjectLike.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Checks if `value` is object-like. A value is object-like if it's not `null`                                         // 2\n * and has a `typeof` result of \"object\".                                                                              // 3\n *                                                                                                                     // 4\n * @static                                                                                                             // 5\n * @memberOf _                                                                                                         // 6\n * @since 4.0.0                                                                                                        // 7\n * @category Lang                                                                                                      // 8\n * @param {*} value The value to check.                                                                                // 9\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 10\n * @example                                                                                                            // 11\n *                                                                                                                     // 12\n * _.isObjectLike({});                                                                                                 // 13\n * // => true                                                                                                          // 14\n *                                                                                                                     // 15\n * _.isObjectLike([1, 2, 3]);                                                                                          // 16\n * // => true                                                                                                          // 17\n *                                                                                                                     // 18\n * _.isObjectLike(_.noop);                                                                                             // 19\n * // => false                                                                                                         // 20\n *                                                                                                                     // 21\n * _.isObjectLike(null);                                                                                               // 22\n * // => false                                                                                                         // 23\n */                                                                                                                    // 24\nfunction isObjectLike(value) {                                                                                         // 25\n  return value != null && typeof value == 'object';                                                                    // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\nmodule.exports = isObjectLike;                                                                                         // 29\n                                                                                                                       // 30\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"symbol-observable\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/symbol-observable/package.json                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"symbol-observable\";                                                                                    // 1\nexports.version = \"1.0.2\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"./lib/index\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/symbol-observable/index.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require('./lib/index');                                                                               // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"lib\":{\"index.js\":[\"./ponyfill\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/symbol-observable/lib/index.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n\tvalue: true                                                                                                           // 4\n});                                                                                                                    // 5\n                                                                                                                       // 6\nvar _ponyfill = require('./ponyfill');                                                                                 // 7\n                                                                                                                       // 8\nvar _ponyfill2 = _interopRequireDefault(_ponyfill);                                                                    // 9\n                                                                                                                       // 10\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      // 11\n                                                                                                                       // 12\nvar root = undefined; /* global window */                                                                              // 13\n                                                                                                                       // 14\nif (typeof global !== 'undefined') {                                                                                   // 15\n\troot = global;                                                                                                        // 16\n} else if (typeof window !== 'undefined') {                                                                            // 17\n\troot = window;                                                                                                        // 18\n}                                                                                                                      // 19\n                                                                                                                       // 20\nvar result = (0, _ponyfill2['default'])(root);                                                                         // 21\nexports['default'] = result;                                                                                           // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ponyfill.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/symbol-observable/lib/ponyfill.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n\tvalue: true                                                                                                           // 4\n});                                                                                                                    // 5\nexports['default'] = symbolObservablePonyfill;                                                                         // 6\nfunction symbolObservablePonyfill(root) {                                                                              // 7\n\tvar result;                                                                                                           // 8\n\tvar _Symbol = root.Symbol;                                                                                            // 9\n                                                                                                                       // 10\n\tif (typeof _Symbol === 'function') {                                                                                  // 11\n\t\tif (_Symbol.observable) {                                                                                            // 12\n\t\t\tresult = _Symbol.observable;                                                                                        // 13\n\t\t} else {                                                                                                             // 14\n\t\t\tresult = _Symbol('observable');                                                                                     // 15\n\t\t\t_Symbol.observable = result;                                                                                        // 16\n\t\t}                                                                                                                    // 17\n\t} else {                                                                                                              // 18\n\t\tresult = '@@observable';                                                                                             // 19\n\t}                                                                                                                     // 20\n                                                                                                                       // 21\n\treturn result;                                                                                                        // 22\n};                                                                                                                     // 23\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"lodash.isobject\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.isobject/package.json                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.isobject\";                                                                                      // 1\nexports.version = \"3.0.2\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.isobject/index.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash 3.0.2 (Custom Build) <https://lodash.com/>                                                                   // 2\n * Build: `lodash modern modularize exports=\"npm\" -o ./`                                                               // 3\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>                                                // 4\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 5\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                            // 6\n * Available under MIT license <https://lodash.com/license>                                                            // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/**                                                                                                                    // 10\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.                                    // 11\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                                   // 12\n *                                                                                                                     // 13\n * @static                                                                                                             // 14\n * @memberOf _                                                                                                         // 15\n * @category Lang                                                                                                      // 16\n * @param {*} value The value to check.                                                                                // 17\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                            // 18\n * @example                                                                                                            // 19\n *                                                                                                                     // 20\n * _.isObject({});                                                                                                     // 21\n * // => true                                                                                                          // 22\n *                                                                                                                     // 23\n * _.isObject([1, 2, 3]);                                                                                              // 24\n * // => true                                                                                                          // 25\n *                                                                                                                     // 26\n * _.isObject(1);                                                                                                      // 27\n * // => false                                                                                                         // 28\n */                                                                                                                    // 29\nfunction isObject(value) {                                                                                             // 30\n  // Avoid a V8 JIT bug in Chrome 19-20.                                                                               // 31\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.                                          // 32\n  var type = typeof value;                                                                                             // 33\n  return !!value && (type == 'object' || type == 'function');                                                          // 34\n}                                                                                                                      // 35\n                                                                                                                       // 36\nmodule.exports = isObject;                                                                                             // 37\n                                                                                                                       // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.has\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.has/package.json                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.has\";                                                                                           // 1\nexports.version = \"4.5.2\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.has/index.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash (Custom Build) <https://lodash.com/>                                                                         // 2\n * Build: `lodash modularize exports=\"npm\" -o ./`                                                                      // 3\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>                                            // 4\n * Released under MIT license <https://lodash.com/license>                                                             // 5\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                                      // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/** Used as the `TypeError` message for \"Functions\" methods. */                                                        // 10\nvar FUNC_ERROR_TEXT = 'Expected a function';                                                                           // 11\n                                                                                                                       // 12\n/** Used to stand-in for `undefined` hash values. */                                                                   // 13\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';                                                                      // 14\n                                                                                                                       // 15\n/** Used as references for various `Number` constants. */                                                              // 16\nvar INFINITY = 1 / 0,                                                                                                  // 17\n    MAX_SAFE_INTEGER = 9007199254740991;                                                                               // 18\n                                                                                                                       // 19\n/** `Object#toString` result references. */                                                                            // 20\nvar argsTag = '[object Arguments]',                                                                                    // 21\n    funcTag = '[object Function]',                                                                                     // 22\n    genTag = '[object GeneratorFunction]',                                                                             // 23\n    symbolTag = '[object Symbol]';                                                                                     // 24\n                                                                                                                       // 25\n/** Used to match property names within property paths. */                                                             // 26\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,                                                 // 27\n    reIsPlainProp = /^\\w*$/,                                                                                           // 28\n    reLeadingDot = /^\\./,                                                                                              // 29\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;   // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Used to match `RegExp`                                                                                              // 33\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).                                      // 34\n */                                                                                                                    // 35\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;                                                                              // 36\n                                                                                                                       // 37\n/** Used to match backslashes in property paths. */                                                                    // 38\nvar reEscapeChar = /\\\\(\\\\)?/g;                                                                                         // 39\n                                                                                                                       // 40\n/** Used to detect host constructors (Safari). */                                                                      // 41\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;                                                                      // 42\n                                                                                                                       // 43\n/** Used to detect unsigned integer values. */                                                                         // 44\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;                                                                                     // 45\n                                                                                                                       // 46\n/** Detect free variable `global` from Node.js. */                                                                     // 47\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;                            // 48\n                                                                                                                       // 49\n/** Detect free variable `self`. */                                                                                    // 50\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;                                      // 51\n                                                                                                                       // 52\n/** Used as a reference to the global object. */                                                                       // 53\nvar root = freeGlobal || freeSelf || Function('return this')();                                                        // 54\n                                                                                                                       // 55\n/**                                                                                                                    // 56\n * Gets the value at `key` of `object`.                                                                                // 57\n *                                                                                                                     // 58\n * @private                                                                                                            // 59\n * @param {Object} [object] The object to query.                                                                       // 60\n * @param {string} key The key of the property to get.                                                                 // 61\n * @returns {*} Returns the property value.                                                                            // 62\n */                                                                                                                    // 63\nfunction getValue(object, key) {                                                                                       // 64\n  return object == null ? undefined : object[key];                                                                     // 65\n}                                                                                                                      // 66\n                                                                                                                       // 67\n/**                                                                                                                    // 68\n * Checks if `value` is a host object in IE < 9.                                                                       // 69\n *                                                                                                                     // 70\n * @private                                                                                                            // 71\n * @param {*} value The value to check.                                                                                // 72\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.                                        // 73\n */                                                                                                                    // 74\nfunction isHostObject(value) {                                                                                         // 75\n  // Many host objects are `Object` objects that can coerce to strings                                                 // 76\n  // despite having improperly defined `toString` methods.                                                             // 77\n  var result = false;                                                                                                  // 78\n  if (value != null && typeof value.toString != 'function') {                                                          // 79\n    try {                                                                                                              // 80\n      result = !!(value + '');                                                                                         // 81\n    } catch (e) {}                                                                                                     // 82\n  }                                                                                                                    // 83\n  return result;                                                                                                       // 84\n}                                                                                                                      // 85\n                                                                                                                       // 86\n/** Used for built-in method references. */                                                                            // 87\nvar arrayProto = Array.prototype,                                                                                      // 88\n    funcProto = Function.prototype,                                                                                    // 89\n    objectProto = Object.prototype;                                                                                    // 90\n                                                                                                                       // 91\n/** Used to detect overreaching core-js shims. */                                                                      // 92\nvar coreJsData = root['__core-js_shared__'];                                                                           // 93\n                                                                                                                       // 94\n/** Used to detect methods masquerading as native. */                                                                  // 95\nvar maskSrcKey = (function() {                                                                                         // 96\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');                            // 97\n  return uid ? ('Symbol(src)_1.' + uid) : '';                                                                          // 98\n}());                                                                                                                  // 99\n                                                                                                                       // 100\n/** Used to resolve the decompiled source of functions. */                                                             // 101\nvar funcToString = funcProto.toString;                                                                                 // 102\n                                                                                                                       // 103\n/** Used to check objects for own properties. */                                                                       // 104\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 105\n                                                                                                                       // 106\n/**                                                                                                                    // 107\n * Used to resolve the                                                                                                 // 108\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)                          // 109\n * of values.                                                                                                          // 110\n */                                                                                                                    // 111\nvar objectToString = objectProto.toString;                                                                             // 112\n                                                                                                                       // 113\n/** Used to detect if a method is native. */                                                                           // 114\nvar reIsNative = RegExp('^' +                                                                                          // 115\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')                                                      // 116\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'                                    // 117\n);                                                                                                                     // 118\n                                                                                                                       // 119\n/** Built-in value references. */                                                                                      // 120\nvar Symbol = root.Symbol,                                                                                              // 121\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,                                                           // 122\n    splice = arrayProto.splice;                                                                                        // 123\n                                                                                                                       // 124\n/* Built-in method references that are verified to be native. */                                                       // 125\nvar Map = getNative(root, 'Map'),                                                                                      // 126\n    nativeCreate = getNative(Object, 'create');                                                                        // 127\n                                                                                                                       // 128\n/** Used to convert symbols to primitives and strings. */                                                              // 129\nvar symbolProto = Symbol ? Symbol.prototype : undefined,                                                               // 130\n    symbolToString = symbolProto ? symbolProto.toString : undefined;                                                   // 131\n                                                                                                                       // 132\n/**                                                                                                                    // 133\n * Creates a hash object.                                                                                              // 134\n *                                                                                                                     // 135\n * @private                                                                                                            // 136\n * @constructor                                                                                                        // 137\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 138\n */                                                                                                                    // 139\nfunction Hash(entries) {                                                                                               // 140\n  var index = -1,                                                                                                      // 141\n      length = entries ? entries.length : 0;                                                                           // 142\n                                                                                                                       // 143\n  this.clear();                                                                                                        // 144\n  while (++index < length) {                                                                                           // 145\n    var entry = entries[index];                                                                                        // 146\n    this.set(entry[0], entry[1]);                                                                                      // 147\n  }                                                                                                                    // 148\n}                                                                                                                      // 149\n                                                                                                                       // 150\n/**                                                                                                                    // 151\n * Removes all key-value entries from the hash.                                                                        // 152\n *                                                                                                                     // 153\n * @private                                                                                                            // 154\n * @name clear                                                                                                         // 155\n * @memberOf Hash                                                                                                      // 156\n */                                                                                                                    // 157\nfunction hashClear() {                                                                                                 // 158\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};                                                              // 159\n}                                                                                                                      // 160\n                                                                                                                       // 161\n/**                                                                                                                    // 162\n * Removes `key` and its value from the hash.                                                                          // 163\n *                                                                                                                     // 164\n * @private                                                                                                            // 165\n * @name delete                                                                                                        // 166\n * @memberOf Hash                                                                                                      // 167\n * @param {Object} hash The hash to modify.                                                                            // 168\n * @param {string} key The key of the value to remove.                                                                 // 169\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 170\n */                                                                                                                    // 171\nfunction hashDelete(key) {                                                                                             // 172\n  return this.has(key) && delete this.__data__[key];                                                                   // 173\n}                                                                                                                      // 174\n                                                                                                                       // 175\n/**                                                                                                                    // 176\n * Gets the hash value for `key`.                                                                                      // 177\n *                                                                                                                     // 178\n * @private                                                                                                            // 179\n * @name get                                                                                                           // 180\n * @memberOf Hash                                                                                                      // 181\n * @param {string} key The key of the value to get.                                                                    // 182\n * @returns {*} Returns the entry value.                                                                               // 183\n */                                                                                                                    // 184\nfunction hashGet(key) {                                                                                                // 185\n  var data = this.__data__;                                                                                            // 186\n  if (nativeCreate) {                                                                                                  // 187\n    var result = data[key];                                                                                            // 188\n    return result === HASH_UNDEFINED ? undefined : result;                                                             // 189\n  }                                                                                                                    // 190\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;                                                       // 191\n}                                                                                                                      // 192\n                                                                                                                       // 193\n/**                                                                                                                    // 194\n * Checks if a hash value for `key` exists.                                                                            // 195\n *                                                                                                                     // 196\n * @private                                                                                                            // 197\n * @name has                                                                                                           // 198\n * @memberOf Hash                                                                                                      // 199\n * @param {string} key The key of the entry to check.                                                                  // 200\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 201\n */                                                                                                                    // 202\nfunction hashHas(key) {                                                                                                // 203\n  var data = this.__data__;                                                                                            // 204\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);                                      // 205\n}                                                                                                                      // 206\n                                                                                                                       // 207\n/**                                                                                                                    // 208\n * Sets the hash `key` to `value`.                                                                                     // 209\n *                                                                                                                     // 210\n * @private                                                                                                            // 211\n * @name set                                                                                                           // 212\n * @memberOf Hash                                                                                                      // 213\n * @param {string} key The key of the value to set.                                                                    // 214\n * @param {*} value The value to set.                                                                                  // 215\n * @returns {Object} Returns the hash instance.                                                                        // 216\n */                                                                                                                    // 217\nfunction hashSet(key, value) {                                                                                         // 218\n  var data = this.__data__;                                                                                            // 219\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;                                          // 220\n  return this;                                                                                                         // 221\n}                                                                                                                      // 222\n                                                                                                                       // 223\n// Add methods to `Hash`.                                                                                              // 224\nHash.prototype.clear = hashClear;                                                                                      // 225\nHash.prototype['delete'] = hashDelete;                                                                                 // 226\nHash.prototype.get = hashGet;                                                                                          // 227\nHash.prototype.has = hashHas;                                                                                          // 228\nHash.prototype.set = hashSet;                                                                                          // 229\n                                                                                                                       // 230\n/**                                                                                                                    // 231\n * Creates an list cache object.                                                                                       // 232\n *                                                                                                                     // 233\n * @private                                                                                                            // 234\n * @constructor                                                                                                        // 235\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 236\n */                                                                                                                    // 237\nfunction ListCache(entries) {                                                                                          // 238\n  var index = -1,                                                                                                      // 239\n      length = entries ? entries.length : 0;                                                                           // 240\n                                                                                                                       // 241\n  this.clear();                                                                                                        // 242\n  while (++index < length) {                                                                                           // 243\n    var entry = entries[index];                                                                                        // 244\n    this.set(entry[0], entry[1]);                                                                                      // 245\n  }                                                                                                                    // 246\n}                                                                                                                      // 247\n                                                                                                                       // 248\n/**                                                                                                                    // 249\n * Removes all key-value entries from the list cache.                                                                  // 250\n *                                                                                                                     // 251\n * @private                                                                                                            // 252\n * @name clear                                                                                                         // 253\n * @memberOf ListCache                                                                                                 // 254\n */                                                                                                                    // 255\nfunction listCacheClear() {                                                                                            // 256\n  this.__data__ = [];                                                                                                  // 257\n}                                                                                                                      // 258\n                                                                                                                       // 259\n/**                                                                                                                    // 260\n * Removes `key` and its value from the list cache.                                                                    // 261\n *                                                                                                                     // 262\n * @private                                                                                                            // 263\n * @name delete                                                                                                        // 264\n * @memberOf ListCache                                                                                                 // 265\n * @param {string} key The key of the value to remove.                                                                 // 266\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 267\n */                                                                                                                    // 268\nfunction listCacheDelete(key) {                                                                                        // 269\n  var data = this.__data__,                                                                                            // 270\n      index = assocIndexOf(data, key);                                                                                 // 271\n                                                                                                                       // 272\n  if (index < 0) {                                                                                                     // 273\n    return false;                                                                                                      // 274\n  }                                                                                                                    // 275\n  var lastIndex = data.length - 1;                                                                                     // 276\n  if (index == lastIndex) {                                                                                            // 277\n    data.pop();                                                                                                        // 278\n  } else {                                                                                                             // 279\n    splice.call(data, index, 1);                                                                                       // 280\n  }                                                                                                                    // 281\n  return true;                                                                                                         // 282\n}                                                                                                                      // 283\n                                                                                                                       // 284\n/**                                                                                                                    // 285\n * Gets the list cache value for `key`.                                                                                // 286\n *                                                                                                                     // 287\n * @private                                                                                                            // 288\n * @name get                                                                                                           // 289\n * @memberOf ListCache                                                                                                 // 290\n * @param {string} key The key of the value to get.                                                                    // 291\n * @returns {*} Returns the entry value.                                                                               // 292\n */                                                                                                                    // 293\nfunction listCacheGet(key) {                                                                                           // 294\n  var data = this.__data__,                                                                                            // 295\n      index = assocIndexOf(data, key);                                                                                 // 296\n                                                                                                                       // 297\n  return index < 0 ? undefined : data[index][1];                                                                       // 298\n}                                                                                                                      // 299\n                                                                                                                       // 300\n/**                                                                                                                    // 301\n * Checks if a list cache value for `key` exists.                                                                      // 302\n *                                                                                                                     // 303\n * @private                                                                                                            // 304\n * @name has                                                                                                           // 305\n * @memberOf ListCache                                                                                                 // 306\n * @param {string} key The key of the entry to check.                                                                  // 307\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 308\n */                                                                                                                    // 309\nfunction listCacheHas(key) {                                                                                           // 310\n  return assocIndexOf(this.__data__, key) > -1;                                                                        // 311\n}                                                                                                                      // 312\n                                                                                                                       // 313\n/**                                                                                                                    // 314\n * Sets the list cache `key` to `value`.                                                                               // 315\n *                                                                                                                     // 316\n * @private                                                                                                            // 317\n * @name set                                                                                                           // 318\n * @memberOf ListCache                                                                                                 // 319\n * @param {string} key The key of the value to set.                                                                    // 320\n * @param {*} value The value to set.                                                                                  // 321\n * @returns {Object} Returns the list cache instance.                                                                  // 322\n */                                                                                                                    // 323\nfunction listCacheSet(key, value) {                                                                                    // 324\n  var data = this.__data__,                                                                                            // 325\n      index = assocIndexOf(data, key);                                                                                 // 326\n                                                                                                                       // 327\n  if (index < 0) {                                                                                                     // 328\n    data.push([key, value]);                                                                                           // 329\n  } else {                                                                                                             // 330\n    data[index][1] = value;                                                                                            // 331\n  }                                                                                                                    // 332\n  return this;                                                                                                         // 333\n}                                                                                                                      // 334\n                                                                                                                       // 335\n// Add methods to `ListCache`.                                                                                         // 336\nListCache.prototype.clear = listCacheClear;                                                                            // 337\nListCache.prototype['delete'] = listCacheDelete;                                                                       // 338\nListCache.prototype.get = listCacheGet;                                                                                // 339\nListCache.prototype.has = listCacheHas;                                                                                // 340\nListCache.prototype.set = listCacheSet;                                                                                // 341\n                                                                                                                       // 342\n/**                                                                                                                    // 343\n * Creates a map cache object to store key-value pairs.                                                                // 344\n *                                                                                                                     // 345\n * @private                                                                                                            // 346\n * @constructor                                                                                                        // 347\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 348\n */                                                                                                                    // 349\nfunction MapCache(entries) {                                                                                           // 350\n  var index = -1,                                                                                                      // 351\n      length = entries ? entries.length : 0;                                                                           // 352\n                                                                                                                       // 353\n  this.clear();                                                                                                        // 354\n  while (++index < length) {                                                                                           // 355\n    var entry = entries[index];                                                                                        // 356\n    this.set(entry[0], entry[1]);                                                                                      // 357\n  }                                                                                                                    // 358\n}                                                                                                                      // 359\n                                                                                                                       // 360\n/**                                                                                                                    // 361\n * Removes all key-value entries from the map.                                                                         // 362\n *                                                                                                                     // 363\n * @private                                                                                                            // 364\n * @name clear                                                                                                         // 365\n * @memberOf MapCache                                                                                                  // 366\n */                                                                                                                    // 367\nfunction mapCacheClear() {                                                                                             // 368\n  this.__data__ = {                                                                                                    // 369\n    'hash': new Hash,                                                                                                  // 370\n    'map': new (Map || ListCache),                                                                                     // 371\n    'string': new Hash                                                                                                 // 372\n  };                                                                                                                   // 373\n}                                                                                                                      // 374\n                                                                                                                       // 375\n/**                                                                                                                    // 376\n * Removes `key` and its value from the map.                                                                           // 377\n *                                                                                                                     // 378\n * @private                                                                                                            // 379\n * @name delete                                                                                                        // 380\n * @memberOf MapCache                                                                                                  // 381\n * @param {string} key The key of the value to remove.                                                                 // 382\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 383\n */                                                                                                                    // 384\nfunction mapCacheDelete(key) {                                                                                         // 385\n  return getMapData(this, key)['delete'](key);                                                                         // 386\n}                                                                                                                      // 387\n                                                                                                                       // 388\n/**                                                                                                                    // 389\n * Gets the map value for `key`.                                                                                       // 390\n *                                                                                                                     // 391\n * @private                                                                                                            // 392\n * @name get                                                                                                           // 393\n * @memberOf MapCache                                                                                                  // 394\n * @param {string} key The key of the value to get.                                                                    // 395\n * @returns {*} Returns the entry value.                                                                               // 396\n */                                                                                                                    // 397\nfunction mapCacheGet(key) {                                                                                            // 398\n  return getMapData(this, key).get(key);                                                                               // 399\n}                                                                                                                      // 400\n                                                                                                                       // 401\n/**                                                                                                                    // 402\n * Checks if a map value for `key` exists.                                                                             // 403\n *                                                                                                                     // 404\n * @private                                                                                                            // 405\n * @name has                                                                                                           // 406\n * @memberOf MapCache                                                                                                  // 407\n * @param {string} key The key of the entry to check.                                                                  // 408\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 409\n */                                                                                                                    // 410\nfunction mapCacheHas(key) {                                                                                            // 411\n  return getMapData(this, key).has(key);                                                                               // 412\n}                                                                                                                      // 413\n                                                                                                                       // 414\n/**                                                                                                                    // 415\n * Sets the map `key` to `value`.                                                                                      // 416\n *                                                                                                                     // 417\n * @private                                                                                                            // 418\n * @name set                                                                                                           // 419\n * @memberOf MapCache                                                                                                  // 420\n * @param {string} key The key of the value to set.                                                                    // 421\n * @param {*} value The value to set.                                                                                  // 422\n * @returns {Object} Returns the map cache instance.                                                                   // 423\n */                                                                                                                    // 424\nfunction mapCacheSet(key, value) {                                                                                     // 425\n  getMapData(this, key).set(key, value);                                                                               // 426\n  return this;                                                                                                         // 427\n}                                                                                                                      // 428\n                                                                                                                       // 429\n// Add methods to `MapCache`.                                                                                          // 430\nMapCache.prototype.clear = mapCacheClear;                                                                              // 431\nMapCache.prototype['delete'] = mapCacheDelete;                                                                         // 432\nMapCache.prototype.get = mapCacheGet;                                                                                  // 433\nMapCache.prototype.has = mapCacheHas;                                                                                  // 434\nMapCache.prototype.set = mapCacheSet;                                                                                  // 435\n                                                                                                                       // 436\n/**                                                                                                                    // 437\n * Gets the index at which the `key` is found in `array` of key-value pairs.                                           // 438\n *                                                                                                                     // 439\n * @private                                                                                                            // 440\n * @param {Array} array The array to inspect.                                                                          // 441\n * @param {*} key The key to search for.                                                                               // 442\n * @returns {number} Returns the index of the matched value, else `-1`.                                                // 443\n */                                                                                                                    // 444\nfunction assocIndexOf(array, key) {                                                                                    // 445\n  var length = array.length;                                                                                           // 446\n  while (length--) {                                                                                                   // 447\n    if (eq(array[length][0], key)) {                                                                                   // 448\n      return length;                                                                                                   // 449\n    }                                                                                                                  // 450\n  }                                                                                                                    // 451\n  return -1;                                                                                                           // 452\n}                                                                                                                      // 453\n                                                                                                                       // 454\n/**                                                                                                                    // 455\n * The base implementation of `_.has` without support for deep paths.                                                  // 456\n *                                                                                                                     // 457\n * @private                                                                                                            // 458\n * @param {Object} [object] The object to query.                                                                       // 459\n * @param {Array|string} key The key to check.                                                                         // 460\n * @returns {boolean} Returns `true` if `key` exists, else `false`.                                                    // 461\n */                                                                                                                    // 462\nfunction baseHas(object, key) {                                                                                        // 463\n  return object != null && hasOwnProperty.call(object, key);                                                           // 464\n}                                                                                                                      // 465\n                                                                                                                       // 466\n/**                                                                                                                    // 467\n * The base implementation of `_.isNative` without bad shim checks.                                                    // 468\n *                                                                                                                     // 469\n * @private                                                                                                            // 470\n * @param {*} value The value to check.                                                                                // 471\n * @returns {boolean} Returns `true` if `value` is a native function,                                                  // 472\n *  else `false`.                                                                                                      // 473\n */                                                                                                                    // 474\nfunction baseIsNative(value) {                                                                                         // 475\n  if (!isObject(value) || isMasked(value)) {                                                                           // 476\n    return false;                                                                                                      // 477\n  }                                                                                                                    // 478\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;                                // 479\n  return pattern.test(toSource(value));                                                                                // 480\n}                                                                                                                      // 481\n                                                                                                                       // 482\n/**                                                                                                                    // 483\n * The base implementation of `_.toString` which doesn't convert nullish                                               // 484\n * values to empty strings.                                                                                            // 485\n *                                                                                                                     // 486\n * @private                                                                                                            // 487\n * @param {*} value The value to process.                                                                              // 488\n * @returns {string} Returns the string.                                                                               // 489\n */                                                                                                                    // 490\nfunction baseToString(value) {                                                                                         // 491\n  // Exit early for strings to avoid a performance hit in some environments.                                           // 492\n  if (typeof value == 'string') {                                                                                      // 493\n    return value;                                                                                                      // 494\n  }                                                                                                                    // 495\n  if (isSymbol(value)) {                                                                                               // 496\n    return symbolToString ? symbolToString.call(value) : '';                                                           // 497\n  }                                                                                                                    // 498\n  var result = (value + '');                                                                                           // 499\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;                                                  // 500\n}                                                                                                                      // 501\n                                                                                                                       // 502\n/**                                                                                                                    // 503\n * Casts `value` to a path array if it's not one.                                                                      // 504\n *                                                                                                                     // 505\n * @private                                                                                                            // 506\n * @param {*} value The value to inspect.                                                                              // 507\n * @returns {Array} Returns the cast property path array.                                                              // 508\n */                                                                                                                    // 509\nfunction castPath(value) {                                                                                             // 510\n  return isArray(value) ? value : stringToPath(value);                                                                 // 511\n}                                                                                                                      // 512\n                                                                                                                       // 513\n/**                                                                                                                    // 514\n * Gets the data for `map`.                                                                                            // 515\n *                                                                                                                     // 516\n * @private                                                                                                            // 517\n * @param {Object} map The map to query.                                                                               // 518\n * @param {string} key The reference key.                                                                              // 519\n * @returns {*} Returns the map data.                                                                                  // 520\n */                                                                                                                    // 521\nfunction getMapData(map, key) {                                                                                        // 522\n  var data = map.__data__;                                                                                             // 523\n  return isKeyable(key)                                                                                                // 524\n    ? data[typeof key == 'string' ? 'string' : 'hash']                                                                 // 525\n    : data.map;                                                                                                        // 526\n}                                                                                                                      // 527\n                                                                                                                       // 528\n/**                                                                                                                    // 529\n * Gets the native function at `key` of `object`.                                                                      // 530\n *                                                                                                                     // 531\n * @private                                                                                                            // 532\n * @param {Object} object The object to query.                                                                         // 533\n * @param {string} key The key of the method to get.                                                                   // 534\n * @returns {*} Returns the function if it's native, else `undefined`.                                                 // 535\n */                                                                                                                    // 536\nfunction getNative(object, key) {                                                                                      // 537\n  var value = getValue(object, key);                                                                                   // 538\n  return baseIsNative(value) ? value : undefined;                                                                      // 539\n}                                                                                                                      // 540\n                                                                                                                       // 541\n/**                                                                                                                    // 542\n * Checks if `path` exists on `object`.                                                                                // 543\n *                                                                                                                     // 544\n * @private                                                                                                            // 545\n * @param {Object} object The object to query.                                                                         // 546\n * @param {Array|string} path The path to check.                                                                       // 547\n * @param {Function} hasFunc The function to check properties.                                                         // 548\n * @returns {boolean} Returns `true` if `path` exists, else `false`.                                                   // 549\n */                                                                                                                    // 550\nfunction hasPath(object, path, hasFunc) {                                                                              // 551\n  path = isKey(path, object) ? [path] : castPath(path);                                                                // 552\n                                                                                                                       // 553\n  var result,                                                                                                          // 554\n      index = -1,                                                                                                      // 555\n      length = path.length;                                                                                            // 556\n                                                                                                                       // 557\n  while (++index < length) {                                                                                           // 558\n    var key = toKey(path[index]);                                                                                      // 559\n    if (!(result = object != null && hasFunc(object, key))) {                                                          // 560\n      break;                                                                                                           // 561\n    }                                                                                                                  // 562\n    object = object[key];                                                                                              // 563\n  }                                                                                                                    // 564\n  if (result) {                                                                                                        // 565\n    return result;                                                                                                     // 566\n  }                                                                                                                    // 567\n  var length = object ? object.length : 0;                                                                             // 568\n  return !!length && isLength(length) && isIndex(key, length) &&                                                       // 569\n    (isArray(object) || isArguments(object));                                                                          // 570\n}                                                                                                                      // 571\n                                                                                                                       // 572\n/**                                                                                                                    // 573\n * Checks if `value` is a valid array-like index.                                                                      // 574\n *                                                                                                                     // 575\n * @private                                                                                                            // 576\n * @param {*} value The value to check.                                                                                // 577\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                        // 578\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                        // 579\n */                                                                                                                    // 580\nfunction isIndex(value, length) {                                                                                      // 581\n  length = length == null ? MAX_SAFE_INTEGER : length;                                                                 // 582\n  return !!length &&                                                                                                   // 583\n    (typeof value == 'number' || reIsUint.test(value)) &&                                                              // 584\n    (value > -1 && value % 1 == 0 && value < length);                                                                  // 585\n}                                                                                                                      // 586\n                                                                                                                       // 587\n/**                                                                                                                    // 588\n * Checks if `value` is a property name and not a property path.                                                       // 589\n *                                                                                                                     // 590\n * @private                                                                                                            // 591\n * @param {*} value The value to check.                                                                                // 592\n * @param {Object} [object] The object to query keys on.                                                               // 593\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.                                      // 594\n */                                                                                                                    // 595\nfunction isKey(value, object) {                                                                                        // 596\n  if (isArray(value)) {                                                                                                // 597\n    return false;                                                                                                      // 598\n  }                                                                                                                    // 599\n  var type = typeof value;                                                                                             // 600\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||                                                     // 601\n      value == null || isSymbol(value)) {                                                                              // 602\n    return true;                                                                                                       // 603\n  }                                                                                                                    // 604\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||                                                     // 605\n    (object != null && value in Object(object));                                                                       // 606\n}                                                                                                                      // 607\n                                                                                                                       // 608\n/**                                                                                                                    // 609\n * Checks if `value` is suitable for use as unique object key.                                                         // 610\n *                                                                                                                     // 611\n * @private                                                                                                            // 612\n * @param {*} value The value to check.                                                                                // 613\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.                                             // 614\n */                                                                                                                    // 615\nfunction isKeyable(value) {                                                                                            // 616\n  var type = typeof value;                                                                                             // 617\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')                               // 618\n    ? (value !== '__proto__')                                                                                          // 619\n    : (value === null);                                                                                                // 620\n}                                                                                                                      // 621\n                                                                                                                       // 622\n/**                                                                                                                    // 623\n * Checks if `func` has its source masked.                                                                             // 624\n *                                                                                                                     // 625\n * @private                                                                                                            // 626\n * @param {Function} func The function to check.                                                                       // 627\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.                                                // 628\n */                                                                                                                    // 629\nfunction isMasked(func) {                                                                                              // 630\n  return !!maskSrcKey && (maskSrcKey in func);                                                                         // 631\n}                                                                                                                      // 632\n                                                                                                                       // 633\n/**                                                                                                                    // 634\n * Converts `string` to a property path array.                                                                         // 635\n *                                                                                                                     // 636\n * @private                                                                                                            // 637\n * @param {string} string The string to convert.                                                                       // 638\n * @returns {Array} Returns the property path array.                                                                   // 639\n */                                                                                                                    // 640\nvar stringToPath = memoize(function(string) {                                                                          // 641\n  string = toString(string);                                                                                           // 642\n                                                                                                                       // 643\n  var result = [];                                                                                                     // 644\n  if (reLeadingDot.test(string)) {                                                                                     // 645\n    result.push('');                                                                                                   // 646\n  }                                                                                                                    // 647\n  string.replace(rePropName, function(match, number, quote, string) {                                                  // 648\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));                                       // 649\n  });                                                                                                                  // 650\n  return result;                                                                                                       // 651\n});                                                                                                                    // 652\n                                                                                                                       // 653\n/**                                                                                                                    // 654\n * Converts `value` to a string key if it's not a string or symbol.                                                    // 655\n *                                                                                                                     // 656\n * @private                                                                                                            // 657\n * @param {*} value The value to inspect.                                                                              // 658\n * @returns {string|symbol} Returns the key.                                                                           // 659\n */                                                                                                                    // 660\nfunction toKey(value) {                                                                                                // 661\n  if (typeof value == 'string' || isSymbol(value)) {                                                                   // 662\n    return value;                                                                                                      // 663\n  }                                                                                                                    // 664\n  var result = (value + '');                                                                                           // 665\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;                                                  // 666\n}                                                                                                                      // 667\n                                                                                                                       // 668\n/**                                                                                                                    // 669\n * Converts `func` to its source code.                                                                                 // 670\n *                                                                                                                     // 671\n * @private                                                                                                            // 672\n * @param {Function} func The function to process.                                                                     // 673\n * @returns {string} Returns the source code.                                                                          // 674\n */                                                                                                                    // 675\nfunction toSource(func) {                                                                                              // 676\n  if (func != null) {                                                                                                  // 677\n    try {                                                                                                              // 678\n      return funcToString.call(func);                                                                                  // 679\n    } catch (e) {}                                                                                                     // 680\n    try {                                                                                                              // 681\n      return (func + '');                                                                                              // 682\n    } catch (e) {}                                                                                                     // 683\n  }                                                                                                                    // 684\n  return '';                                                                                                           // 685\n}                                                                                                                      // 686\n                                                                                                                       // 687\n/**                                                                                                                    // 688\n * Creates a function that memoizes the result of `func`. If `resolver` is                                             // 689\n * provided, it determines the cache key for storing the result based on the                                           // 690\n * arguments provided to the memoized function. By default, the first argument                                         // 691\n * provided to the memoized function is used as the map cache key. The `func`                                          // 692\n * is invoked with the `this` binding of the memoized function.                                                        // 693\n *                                                                                                                     // 694\n * **Note:** The cache is exposed as the `cache` property on the memoized                                              // 695\n * function. Its creation may be customized by replacing the `_.memoize.Cache`                                         // 696\n * constructor with one whose instances implement the                                                                  // 697\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)                     // 698\n * method interface of `delete`, `get`, `has`, and `set`.                                                              // 699\n *                                                                                                                     // 700\n * @static                                                                                                             // 701\n * @memberOf _                                                                                                         // 702\n * @since 0.1.0                                                                                                        // 703\n * @category Function                                                                                                  // 704\n * @param {Function} func The function to have its output memoized.                                                    // 705\n * @param {Function} [resolver] The function to resolve the cache key.                                                 // 706\n * @returns {Function} Returns the new memoized function.                                                              // 707\n * @example                                                                                                            // 708\n *                                                                                                                     // 709\n * var object = { 'a': 1, 'b': 2 };                                                                                    // 710\n * var other = { 'c': 3, 'd': 4 };                                                                                     // 711\n *                                                                                                                     // 712\n * var values = _.memoize(_.values);                                                                                   // 713\n * values(object);                                                                                                     // 714\n * // => [1, 2]                                                                                                        // 715\n *                                                                                                                     // 716\n * values(other);                                                                                                      // 717\n * // => [3, 4]                                                                                                        // 718\n *                                                                                                                     // 719\n * object.a = 2;                                                                                                       // 720\n * values(object);                                                                                                     // 721\n * // => [1, 2]                                                                                                        // 722\n *                                                                                                                     // 723\n * // Modify the result cache.                                                                                         // 724\n * values.cache.set(object, ['a', 'b']);                                                                               // 725\n * values(object);                                                                                                     // 726\n * // => ['a', 'b']                                                                                                    // 727\n *                                                                                                                     // 728\n * // Replace `_.memoize.Cache`.                                                                                       // 729\n * _.memoize.Cache = WeakMap;                                                                                          // 730\n */                                                                                                                    // 731\nfunction memoize(func, resolver) {                                                                                     // 732\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {                                      // 733\n    throw new TypeError(FUNC_ERROR_TEXT);                                                                              // 734\n  }                                                                                                                    // 735\n  var memoized = function() {                                                                                          // 736\n    var args = arguments,                                                                                              // 737\n        key = resolver ? resolver.apply(this, args) : args[0],                                                         // 738\n        cache = memoized.cache;                                                                                        // 739\n                                                                                                                       // 740\n    if (cache.has(key)) {                                                                                              // 741\n      return cache.get(key);                                                                                           // 742\n    }                                                                                                                  // 743\n    var result = func.apply(this, args);                                                                               // 744\n    memoized.cache = cache.set(key, result);                                                                           // 745\n    return result;                                                                                                     // 746\n  };                                                                                                                   // 747\n  memoized.cache = new (memoize.Cache || MapCache);                                                                    // 748\n  return memoized;                                                                                                     // 749\n}                                                                                                                      // 750\n                                                                                                                       // 751\n// Assign cache to `_.memoize`.                                                                                        // 752\nmemoize.Cache = MapCache;                                                                                              // 753\n                                                                                                                       // 754\n/**                                                                                                                    // 755\n * Performs a                                                                                                          // 756\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)                                    // 757\n * comparison between two values to determine if they are equivalent.                                                  // 758\n *                                                                                                                     // 759\n * @static                                                                                                             // 760\n * @memberOf _                                                                                                         // 761\n * @since 4.0.0                                                                                                        // 762\n * @category Lang                                                                                                      // 763\n * @param {*} value The value to compare.                                                                              // 764\n * @param {*} other The other value to compare.                                                                        // 765\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                       // 766\n * @example                                                                                                            // 767\n *                                                                                                                     // 768\n * var object = { 'a': 1 };                                                                                            // 769\n * var other = { 'a': 1 };                                                                                             // 770\n *                                                                                                                     // 771\n * _.eq(object, object);                                                                                               // 772\n * // => true                                                                                                          // 773\n *                                                                                                                     // 774\n * _.eq(object, other);                                                                                                // 775\n * // => false                                                                                                         // 776\n *                                                                                                                     // 777\n * _.eq('a', 'a');                                                                                                     // 778\n * // => true                                                                                                          // 779\n *                                                                                                                     // 780\n * _.eq('a', Object('a'));                                                                                             // 781\n * // => false                                                                                                         // 782\n *                                                                                                                     // 783\n * _.eq(NaN, NaN);                                                                                                     // 784\n * // => true                                                                                                          // 785\n */                                                                                                                    // 786\nfunction eq(value, other) {                                                                                            // 787\n  return value === other || (value !== value && other !== other);                                                      // 788\n}                                                                                                                      // 789\n                                                                                                                       // 790\n/**                                                                                                                    // 791\n * Checks if `value` is likely an `arguments` object.                                                                  // 792\n *                                                                                                                     // 793\n * @static                                                                                                             // 794\n * @memberOf _                                                                                                         // 795\n * @since 0.1.0                                                                                                        // 796\n * @category Lang                                                                                                      // 797\n * @param {*} value The value to check.                                                                                // 798\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,                                              // 799\n *  else `false`.                                                                                                      // 800\n * @example                                                                                                            // 801\n *                                                                                                                     // 802\n * _.isArguments(function() { return arguments; }());                                                                  // 803\n * // => true                                                                                                          // 804\n *                                                                                                                     // 805\n * _.isArguments([1, 2, 3]);                                                                                           // 806\n * // => false                                                                                                         // 807\n */                                                                                                                    // 808\nfunction isArguments(value) {                                                                                          // 809\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 810\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&                                           // 811\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);                            // 812\n}                                                                                                                      // 813\n                                                                                                                       // 814\n/**                                                                                                                    // 815\n * Checks if `value` is classified as an `Array` object.                                                               // 816\n *                                                                                                                     // 817\n * @static                                                                                                             // 818\n * @memberOf _                                                                                                         // 819\n * @since 0.1.0                                                                                                        // 820\n * @category Lang                                                                                                      // 821\n * @param {*} value The value to check.                                                                                // 822\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.                                             // 823\n * @example                                                                                                            // 824\n *                                                                                                                     // 825\n * _.isArray([1, 2, 3]);                                                                                               // 826\n * // => true                                                                                                          // 827\n *                                                                                                                     // 828\n * _.isArray(document.body.children);                                                                                  // 829\n * // => false                                                                                                         // 830\n *                                                                                                                     // 831\n * _.isArray('abc');                                                                                                   // 832\n * // => false                                                                                                         // 833\n *                                                                                                                     // 834\n * _.isArray(_.noop);                                                                                                  // 835\n * // => false                                                                                                         // 836\n */                                                                                                                    // 837\nvar isArray = Array.isArray;                                                                                           // 838\n                                                                                                                       // 839\n/**                                                                                                                    // 840\n * Checks if `value` is array-like. A value is considered array-like if it's                                           // 841\n * not a function and has a `value.length` that's an integer greater than or                                           // 842\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.                                                   // 843\n *                                                                                                                     // 844\n * @static                                                                                                             // 845\n * @memberOf _                                                                                                         // 846\n * @since 4.0.0                                                                                                        // 847\n * @category Lang                                                                                                      // 848\n * @param {*} value The value to check.                                                                                // 849\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                           // 850\n * @example                                                                                                            // 851\n *                                                                                                                     // 852\n * _.isArrayLike([1, 2, 3]);                                                                                           // 853\n * // => true                                                                                                          // 854\n *                                                                                                                     // 855\n * _.isArrayLike(document.body.children);                                                                              // 856\n * // => true                                                                                                          // 857\n *                                                                                                                     // 858\n * _.isArrayLike('abc');                                                                                               // 859\n * // => true                                                                                                          // 860\n *                                                                                                                     // 861\n * _.isArrayLike(_.noop);                                                                                              // 862\n * // => false                                                                                                         // 863\n */                                                                                                                    // 864\nfunction isArrayLike(value) {                                                                                          // 865\n  return value != null && isLength(value.length) && !isFunction(value);                                                // 866\n}                                                                                                                      // 867\n                                                                                                                       // 868\n/**                                                                                                                    // 869\n * This method is like `_.isArrayLike` except that it also checks if `value`                                           // 870\n * is an object.                                                                                                       // 871\n *                                                                                                                     // 872\n * @static                                                                                                             // 873\n * @memberOf _                                                                                                         // 874\n * @since 4.0.0                                                                                                        // 875\n * @category Lang                                                                                                      // 876\n * @param {*} value The value to check.                                                                                // 877\n * @returns {boolean} Returns `true` if `value` is an array-like object,                                               // 878\n *  else `false`.                                                                                                      // 879\n * @example                                                                                                            // 880\n *                                                                                                                     // 881\n * _.isArrayLikeObject([1, 2, 3]);                                                                                     // 882\n * // => true                                                                                                          // 883\n *                                                                                                                     // 884\n * _.isArrayLikeObject(document.body.children);                                                                        // 885\n * // => true                                                                                                          // 886\n *                                                                                                                     // 887\n * _.isArrayLikeObject('abc');                                                                                         // 888\n * // => false                                                                                                         // 889\n *                                                                                                                     // 890\n * _.isArrayLikeObject(_.noop);                                                                                        // 891\n * // => false                                                                                                         // 892\n */                                                                                                                    // 893\nfunction isArrayLikeObject(value) {                                                                                    // 894\n  return isObjectLike(value) && isArrayLike(value);                                                                    // 895\n}                                                                                                                      // 896\n                                                                                                                       // 897\n/**                                                                                                                    // 898\n * Checks if `value` is classified as a `Function` object.                                                             // 899\n *                                                                                                                     // 900\n * @static                                                                                                             // 901\n * @memberOf _                                                                                                         // 902\n * @since 0.1.0                                                                                                        // 903\n * @category Lang                                                                                                      // 904\n * @param {*} value The value to check.                                                                                // 905\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.                                           // 906\n * @example                                                                                                            // 907\n *                                                                                                                     // 908\n * _.isFunction(_);                                                                                                    // 909\n * // => true                                                                                                          // 910\n *                                                                                                                     // 911\n * _.isFunction(/abc/);                                                                                                // 912\n * // => false                                                                                                         // 913\n */                                                                                                                    // 914\nfunction isFunction(value) {                                                                                           // 915\n  // The use of `Object#toString` avoids issues with the `typeof` operator                                             // 916\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.                                      // 917\n  var tag = isObject(value) ? objectToString.call(value) : '';                                                         // 918\n  return tag == funcTag || tag == genTag;                                                                              // 919\n}                                                                                                                      // 920\n                                                                                                                       // 921\n/**                                                                                                                    // 922\n * Checks if `value` is a valid array-like length.                                                                     // 923\n *                                                                                                                     // 924\n * **Note:** This method is loosely based on                                                                           // 925\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).                                             // 926\n *                                                                                                                     // 927\n * @static                                                                                                             // 928\n * @memberOf _                                                                                                         // 929\n * @since 4.0.0                                                                                                        // 930\n * @category Lang                                                                                                      // 931\n * @param {*} value The value to check.                                                                                // 932\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                       // 933\n * @example                                                                                                            // 934\n *                                                                                                                     // 935\n * _.isLength(3);                                                                                                      // 936\n * // => true                                                                                                          // 937\n *                                                                                                                     // 938\n * _.isLength(Number.MIN_VALUE);                                                                                       // 939\n * // => false                                                                                                         // 940\n *                                                                                                                     // 941\n * _.isLength(Infinity);                                                                                               // 942\n * // => false                                                                                                         // 943\n *                                                                                                                     // 944\n * _.isLength('3');                                                                                                    // 945\n * // => false                                                                                                         // 946\n */                                                                                                                    // 947\nfunction isLength(value) {                                                                                             // 948\n  return typeof value == 'number' &&                                                                                   // 949\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                                                         // 950\n}                                                                                                                      // 951\n                                                                                                                       // 952\n/**                                                                                                                    // 953\n * Checks if `value` is the                                                                                            // 954\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)                      // 955\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                      // 956\n *                                                                                                                     // 957\n * @static                                                                                                             // 958\n * @memberOf _                                                                                                         // 959\n * @since 0.1.0                                                                                                        // 960\n * @category Lang                                                                                                      // 961\n * @param {*} value The value to check.                                                                                // 962\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                            // 963\n * @example                                                                                                            // 964\n *                                                                                                                     // 965\n * _.isObject({});                                                                                                     // 966\n * // => true                                                                                                          // 967\n *                                                                                                                     // 968\n * _.isObject([1, 2, 3]);                                                                                              // 969\n * // => true                                                                                                          // 970\n *                                                                                                                     // 971\n * _.isObject(_.noop);                                                                                                 // 972\n * // => true                                                                                                          // 973\n *                                                                                                                     // 974\n * _.isObject(null);                                                                                                   // 975\n * // => false                                                                                                         // 976\n */                                                                                                                    // 977\nfunction isObject(value) {                                                                                             // 978\n  var type = typeof value;                                                                                             // 979\n  return !!value && (type == 'object' || type == 'function');                                                          // 980\n}                                                                                                                      // 981\n                                                                                                                       // 982\n/**                                                                                                                    // 983\n * Checks if `value` is object-like. A value is object-like if it's not `null`                                         // 984\n * and has a `typeof` result of \"object\".                                                                              // 985\n *                                                                                                                     // 986\n * @static                                                                                                             // 987\n * @memberOf _                                                                                                         // 988\n * @since 4.0.0                                                                                                        // 989\n * @category Lang                                                                                                      // 990\n * @param {*} value The value to check.                                                                                // 991\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 992\n * @example                                                                                                            // 993\n *                                                                                                                     // 994\n * _.isObjectLike({});                                                                                                 // 995\n * // => true                                                                                                          // 996\n *                                                                                                                     // 997\n * _.isObjectLike([1, 2, 3]);                                                                                          // 998\n * // => true                                                                                                          // 999\n *                                                                                                                     // 1000\n * _.isObjectLike(_.noop);                                                                                             // 1001\n * // => false                                                                                                         // 1002\n *                                                                                                                     // 1003\n * _.isObjectLike(null);                                                                                               // 1004\n * // => false                                                                                                         // 1005\n */                                                                                                                    // 1006\nfunction isObjectLike(value) {                                                                                         // 1007\n  return !!value && typeof value == 'object';                                                                          // 1008\n}                                                                                                                      // 1009\n                                                                                                                       // 1010\n/**                                                                                                                    // 1011\n * Checks if `value` is classified as a `Symbol` primitive or object.                                                  // 1012\n *                                                                                                                     // 1013\n * @static                                                                                                             // 1014\n * @memberOf _                                                                                                         // 1015\n * @since 4.0.0                                                                                                        // 1016\n * @category Lang                                                                                                      // 1017\n * @param {*} value The value to check.                                                                                // 1018\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.                                             // 1019\n * @example                                                                                                            // 1020\n *                                                                                                                     // 1021\n * _.isSymbol(Symbol.iterator);                                                                                        // 1022\n * // => true                                                                                                          // 1023\n *                                                                                                                     // 1024\n * _.isSymbol('abc');                                                                                                  // 1025\n * // => false                                                                                                         // 1026\n */                                                                                                                    // 1027\nfunction isSymbol(value) {                                                                                             // 1028\n  return typeof value == 'symbol' ||                                                                                   // 1029\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);                                                  // 1030\n}                                                                                                                      // 1031\n                                                                                                                       // 1032\n/**                                                                                                                    // 1033\n * Converts `value` to a string. An empty string is returned for `null`                                                // 1034\n * and `undefined` values. The sign of `-0` is preserved.                                                              // 1035\n *                                                                                                                     // 1036\n * @static                                                                                                             // 1037\n * @memberOf _                                                                                                         // 1038\n * @since 4.0.0                                                                                                        // 1039\n * @category Lang                                                                                                      // 1040\n * @param {*} value The value to process.                                                                              // 1041\n * @returns {string} Returns the string.                                                                               // 1042\n * @example                                                                                                            // 1043\n *                                                                                                                     // 1044\n * _.toString(null);                                                                                                   // 1045\n * // => ''                                                                                                            // 1046\n *                                                                                                                     // 1047\n * _.toString(-0);                                                                                                     // 1048\n * // => '-0'                                                                                                          // 1049\n *                                                                                                                     // 1050\n * _.toString([1, 2, 3]);                                                                                              // 1051\n * // => '1,2,3'                                                                                                       // 1052\n */                                                                                                                    // 1053\nfunction toString(value) {                                                                                             // 1054\n  return value == null ? '' : baseToString(value);                                                                     // 1055\n}                                                                                                                      // 1056\n                                                                                                                       // 1057\n/**                                                                                                                    // 1058\n * Checks if `path` is a direct property of `object`.                                                                  // 1059\n *                                                                                                                     // 1060\n * @static                                                                                                             // 1061\n * @since 0.1.0                                                                                                        // 1062\n * @memberOf _                                                                                                         // 1063\n * @category Object                                                                                                    // 1064\n * @param {Object} object The object to query.                                                                         // 1065\n * @param {Array|string} path The path to check.                                                                       // 1066\n * @returns {boolean} Returns `true` if `path` exists, else `false`.                                                   // 1067\n * @example                                                                                                            // 1068\n *                                                                                                                     // 1069\n * var object = { 'a': { 'b': 2 } };                                                                                   // 1070\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });                                                                // 1071\n *                                                                                                                     // 1072\n * _.has(object, 'a');                                                                                                 // 1073\n * // => true                                                                                                          // 1074\n *                                                                                                                     // 1075\n * _.has(object, 'a.b');                                                                                               // 1076\n * // => true                                                                                                          // 1077\n *                                                                                                                     // 1078\n * _.has(object, ['a', 'b']);                                                                                          // 1079\n * // => true                                                                                                          // 1080\n *                                                                                                                     // 1081\n * _.has(other, 'a');                                                                                                  // 1082\n * // => false                                                                                                         // 1083\n */                                                                                                                    // 1084\nfunction has(object, path) {                                                                                           // 1085\n  return object != null && hasPath(object, path, baseHas);                                                             // 1086\n}                                                                                                                      // 1087\n                                                                                                                       // 1088\nmodule.exports = has;                                                                                                  // 1089\n                                                                                                                       // 1090\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.merge\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.merge/package.json                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.merge\";                                                                                         // 1\nexports.version = \"4.6.0\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.merge/index.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash (Custom Build) <https://lodash.com/>                                                                         // 2\n * Build: `lodash modularize exports=\"npm\" -o ./`                                                                      // 3\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>                                            // 4\n * Released under MIT license <https://lodash.com/license>                                                             // 5\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                                      // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/** Used as the size to enable large array optimizations. */                                                           // 10\nvar LARGE_ARRAY_SIZE = 200;                                                                                            // 11\n                                                                                                                       // 12\n/** Used to stand-in for `undefined` hash values. */                                                                   // 13\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';                                                                      // 14\n                                                                                                                       // 15\n/** Used as references for various `Number` constants. */                                                              // 16\nvar MAX_SAFE_INTEGER = 9007199254740991;                                                                               // 17\n                                                                                                                       // 18\n/** `Object#toString` result references. */                                                                            // 19\nvar argsTag = '[object Arguments]',                                                                                    // 20\n    arrayTag = '[object Array]',                                                                                       // 21\n    boolTag = '[object Boolean]',                                                                                      // 22\n    dateTag = '[object Date]',                                                                                         // 23\n    errorTag = '[object Error]',                                                                                       // 24\n    funcTag = '[object Function]',                                                                                     // 25\n    genTag = '[object GeneratorFunction]',                                                                             // 26\n    mapTag = '[object Map]',                                                                                           // 27\n    numberTag = '[object Number]',                                                                                     // 28\n    objectTag = '[object Object]',                                                                                     // 29\n    promiseTag = '[object Promise]',                                                                                   // 30\n    regexpTag = '[object RegExp]',                                                                                     // 31\n    setTag = '[object Set]',                                                                                           // 32\n    stringTag = '[object String]',                                                                                     // 33\n    symbolTag = '[object Symbol]',                                                                                     // 34\n    weakMapTag = '[object WeakMap]';                                                                                   // 35\n                                                                                                                       // 36\nvar arrayBufferTag = '[object ArrayBuffer]',                                                                           // 37\n    dataViewTag = '[object DataView]',                                                                                 // 38\n    float32Tag = '[object Float32Array]',                                                                              // 39\n    float64Tag = '[object Float64Array]',                                                                              // 40\n    int8Tag = '[object Int8Array]',                                                                                    // 41\n    int16Tag = '[object Int16Array]',                                                                                  // 42\n    int32Tag = '[object Int32Array]',                                                                                  // 43\n    uint8Tag = '[object Uint8Array]',                                                                                  // 44\n    uint8ClampedTag = '[object Uint8ClampedArray]',                                                                    // 45\n    uint16Tag = '[object Uint16Array]',                                                                                // 46\n    uint32Tag = '[object Uint32Array]';                                                                                // 47\n                                                                                                                       // 48\n/**                                                                                                                    // 49\n * Used to match `RegExp`                                                                                              // 50\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).                                      // 51\n */                                                                                                                    // 52\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;                                                                              // 53\n                                                                                                                       // 54\n/** Used to match `RegExp` flags from their coerced string values. */                                                  // 55\nvar reFlags = /\\w*$/;                                                                                                  // 56\n                                                                                                                       // 57\n/** Used to detect host constructors (Safari). */                                                                      // 58\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;                                                                      // 59\n                                                                                                                       // 60\n/** Used to detect unsigned integer values. */                                                                         // 61\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;                                                                                     // 62\n                                                                                                                       // 63\n/** Used to identify `toStringTag` values of typed arrays. */                                                          // 64\nvar typedArrayTags = {};                                                                                               // 65\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =                                                              // 66\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =                                                                   // 67\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =                                                                  // 68\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =                                                          // 69\ntypedArrayTags[uint32Tag] = true;                                                                                      // 70\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =                                                                   // 71\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =                                                             // 72\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =                                                                // 73\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =                                                                   // 74\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =                                                                   // 75\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =                                                                // 76\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =                                                                   // 77\ntypedArrayTags[weakMapTag] = false;                                                                                    // 78\n                                                                                                                       // 79\n/** Used to identify `toStringTag` values supported by `_.clone`. */                                                   // 80\nvar cloneableTags = {};                                                                                                // 81\ncloneableTags[argsTag] = cloneableTags[arrayTag] =                                                                     // 82\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =                                                           // 83\ncloneableTags[boolTag] = cloneableTags[dateTag] =                                                                      // 84\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =                                                                // 85\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =                                                                     // 86\ncloneableTags[int32Tag] = cloneableTags[mapTag] =                                                                      // 87\ncloneableTags[numberTag] = cloneableTags[objectTag] =                                                                  // 88\ncloneableTags[regexpTag] = cloneableTags[setTag] =                                                                     // 89\ncloneableTags[stringTag] = cloneableTags[symbolTag] =                                                                  // 90\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =                                                             // 91\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;                                                            // 92\ncloneableTags[errorTag] = cloneableTags[funcTag] =                                                                     // 93\ncloneableTags[weakMapTag] = false;                                                                                     // 94\n                                                                                                                       // 95\n/** Detect free variable `global` from Node.js. */                                                                     // 96\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;                            // 97\n                                                                                                                       // 98\n/** Detect free variable `self`. */                                                                                    // 99\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;                                      // 100\n                                                                                                                       // 101\n/** Used as a reference to the global object. */                                                                       // 102\nvar root = freeGlobal || freeSelf || Function('return this')();                                                        // 103\n                                                                                                                       // 104\n/** Detect free variable `exports`. */                                                                                 // 105\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;                               // 106\n                                                                                                                       // 107\n/** Detect free variable `module`. */                                                                                  // 108\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;                     // 109\n                                                                                                                       // 110\n/** Detect the popular CommonJS extension `module.exports`. */                                                         // 111\nvar moduleExports = freeModule && freeModule.exports === freeExports;                                                  // 112\n                                                                                                                       // 113\n/** Detect free variable `process` from Node.js. */                                                                    // 114\nvar freeProcess = moduleExports && freeGlobal.process;                                                                 // 115\n                                                                                                                       // 116\n/** Used to access faster Node.js helpers. */                                                                          // 117\nvar nodeUtil = (function() {                                                                                           // 118\n  try {                                                                                                                // 119\n    return freeProcess && freeProcess.binding('util');                                                                 // 120\n  } catch (e) {}                                                                                                       // 121\n}());                                                                                                                  // 122\n                                                                                                                       // 123\n/* Node.js helper references. */                                                                                       // 124\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;                                                              // 125\n                                                                                                                       // 126\n/**                                                                                                                    // 127\n * Adds the key-value `pair` to `map`.                                                                                 // 128\n *                                                                                                                     // 129\n * @private                                                                                                            // 130\n * @param {Object} map The map to modify.                                                                              // 131\n * @param {Array} pair The key-value pair to add.                                                                      // 132\n * @returns {Object} Returns `map`.                                                                                    // 133\n */                                                                                                                    // 134\nfunction addMapEntry(map, pair) {                                                                                      // 135\n  // Don't return `map.set` because it's not chainable in IE 11.                                                       // 136\n  map.set(pair[0], pair[1]);                                                                                           // 137\n  return map;                                                                                                          // 138\n}                                                                                                                      // 139\n                                                                                                                       // 140\n/**                                                                                                                    // 141\n * Adds `value` to `set`.                                                                                              // 142\n *                                                                                                                     // 143\n * @private                                                                                                            // 144\n * @param {Object} set The set to modify.                                                                              // 145\n * @param {*} value The value to add.                                                                                  // 146\n * @returns {Object} Returns `set`.                                                                                    // 147\n */                                                                                                                    // 148\nfunction addSetEntry(set, value) {                                                                                     // 149\n  // Don't return `set.add` because it's not chainable in IE 11.                                                       // 150\n  set.add(value);                                                                                                      // 151\n  return set;                                                                                                          // 152\n}                                                                                                                      // 153\n                                                                                                                       // 154\n/**                                                                                                                    // 155\n * A faster alternative to `Function#apply`, this function invokes `func`                                              // 156\n * with the `this` binding of `thisArg` and the arguments of `args`.                                                   // 157\n *                                                                                                                     // 158\n * @private                                                                                                            // 159\n * @param {Function} func The function to invoke.                                                                      // 160\n * @param {*} thisArg The `this` binding of `func`.                                                                    // 161\n * @param {Array} args The arguments to invoke `func` with.                                                            // 162\n * @returns {*} Returns the result of `func`.                                                                          // 163\n */                                                                                                                    // 164\nfunction apply(func, thisArg, args) {                                                                                  // 165\n  switch (args.length) {                                                                                               // 166\n    case 0: return func.call(thisArg);                                                                                 // 167\n    case 1: return func.call(thisArg, args[0]);                                                                        // 168\n    case 2: return func.call(thisArg, args[0], args[1]);                                                               // 169\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);                                                      // 170\n  }                                                                                                                    // 171\n  return func.apply(thisArg, args);                                                                                    // 172\n}                                                                                                                      // 173\n                                                                                                                       // 174\n/**                                                                                                                    // 175\n * A specialized version of `_.forEach` for arrays without support for                                                 // 176\n * iteratee shorthands.                                                                                                // 177\n *                                                                                                                     // 178\n * @private                                                                                                            // 179\n * @param {Array} [array] The array to iterate over.                                                                   // 180\n * @param {Function} iteratee The function invoked per iteration.                                                      // 181\n * @returns {Array} Returns `array`.                                                                                   // 182\n */                                                                                                                    // 183\nfunction arrayEach(array, iteratee) {                                                                                  // 184\n  var index = -1,                                                                                                      // 185\n      length = array ? array.length : 0;                                                                               // 186\n                                                                                                                       // 187\n  while (++index < length) {                                                                                           // 188\n    if (iteratee(array[index], index, array) === false) {                                                              // 189\n      break;                                                                                                           // 190\n    }                                                                                                                  // 191\n  }                                                                                                                    // 192\n  return array;                                                                                                        // 193\n}                                                                                                                      // 194\n                                                                                                                       // 195\n/**                                                                                                                    // 196\n * Appends the elements of `values` to `array`.                                                                        // 197\n *                                                                                                                     // 198\n * @private                                                                                                            // 199\n * @param {Array} array The array to modify.                                                                           // 200\n * @param {Array} values The values to append.                                                                         // 201\n * @returns {Array} Returns `array`.                                                                                   // 202\n */                                                                                                                    // 203\nfunction arrayPush(array, values) {                                                                                    // 204\n  var index = -1,                                                                                                      // 205\n      length = values.length,                                                                                          // 206\n      offset = array.length;                                                                                           // 207\n                                                                                                                       // 208\n  while (++index < length) {                                                                                           // 209\n    array[offset + index] = values[index];                                                                             // 210\n  }                                                                                                                    // 211\n  return array;                                                                                                        // 212\n}                                                                                                                      // 213\n                                                                                                                       // 214\n/**                                                                                                                    // 215\n * A specialized version of `_.reduce` for arrays without support for                                                  // 216\n * iteratee shorthands.                                                                                                // 217\n *                                                                                                                     // 218\n * @private                                                                                                            // 219\n * @param {Array} [array] The array to iterate over.                                                                   // 220\n * @param {Function} iteratee The function invoked per iteration.                                                      // 221\n * @param {*} [accumulator] The initial value.                                                                         // 222\n * @param {boolean} [initAccum] Specify using the first element of `array` as                                          // 223\n *  the initial value.                                                                                                 // 224\n * @returns {*} Returns the accumulated value.                                                                         // 225\n */                                                                                                                    // 226\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {                                                        // 227\n  var index = -1,                                                                                                      // 228\n      length = array ? array.length : 0;                                                                               // 229\n                                                                                                                       // 230\n  if (initAccum && length) {                                                                                           // 231\n    accumulator = array[++index];                                                                                      // 232\n  }                                                                                                                    // 233\n  while (++index < length) {                                                                                           // 234\n    accumulator = iteratee(accumulator, array[index], index, array);                                                   // 235\n  }                                                                                                                    // 236\n  return accumulator;                                                                                                  // 237\n}                                                                                                                      // 238\n                                                                                                                       // 239\n/**                                                                                                                    // 240\n * The base implementation of `_.times` without support for iteratee shorthands                                        // 241\n * or max array length checks.                                                                                         // 242\n *                                                                                                                     // 243\n * @private                                                                                                            // 244\n * @param {number} n The number of times to invoke `iteratee`.                                                         // 245\n * @param {Function} iteratee The function invoked per iteration.                                                      // 246\n * @returns {Array} Returns the array of results.                                                                      // 247\n */                                                                                                                    // 248\nfunction baseTimes(n, iteratee) {                                                                                      // 249\n  var index = -1,                                                                                                      // 250\n      result = Array(n);                                                                                               // 251\n                                                                                                                       // 252\n  while (++index < n) {                                                                                                // 253\n    result[index] = iteratee(index);                                                                                   // 254\n  }                                                                                                                    // 255\n  return result;                                                                                                       // 256\n}                                                                                                                      // 257\n                                                                                                                       // 258\n/**                                                                                                                    // 259\n * The base implementation of `_.unary` without support for storing metadata.                                          // 260\n *                                                                                                                     // 261\n * @private                                                                                                            // 262\n * @param {Function} func The function to cap arguments for.                                                           // 263\n * @returns {Function} Returns the new capped function.                                                                // 264\n */                                                                                                                    // 265\nfunction baseUnary(func) {                                                                                             // 266\n  return function(value) {                                                                                             // 267\n    return func(value);                                                                                                // 268\n  };                                                                                                                   // 269\n}                                                                                                                      // 270\n                                                                                                                       // 271\n/**                                                                                                                    // 272\n * Gets the value at `key` of `object`.                                                                                // 273\n *                                                                                                                     // 274\n * @private                                                                                                            // 275\n * @param {Object} [object] The object to query.                                                                       // 276\n * @param {string} key The key of the property to get.                                                                 // 277\n * @returns {*} Returns the property value.                                                                            // 278\n */                                                                                                                    // 279\nfunction getValue(object, key) {                                                                                       // 280\n  return object == null ? undefined : object[key];                                                                     // 281\n}                                                                                                                      // 282\n                                                                                                                       // 283\n/**                                                                                                                    // 284\n * Checks if `value` is a host object in IE < 9.                                                                       // 285\n *                                                                                                                     // 286\n * @private                                                                                                            // 287\n * @param {*} value The value to check.                                                                                // 288\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.                                        // 289\n */                                                                                                                    // 290\nfunction isHostObject(value) {                                                                                         // 291\n  // Many host objects are `Object` objects that can coerce to strings                                                 // 292\n  // despite having improperly defined `toString` methods.                                                             // 293\n  var result = false;                                                                                                  // 294\n  if (value != null && typeof value.toString != 'function') {                                                          // 295\n    try {                                                                                                              // 296\n      result = !!(value + '');                                                                                         // 297\n    } catch (e) {}                                                                                                     // 298\n  }                                                                                                                    // 299\n  return result;                                                                                                       // 300\n}                                                                                                                      // 301\n                                                                                                                       // 302\n/**                                                                                                                    // 303\n * Converts `map` to its key-value pairs.                                                                              // 304\n *                                                                                                                     // 305\n * @private                                                                                                            // 306\n * @param {Object} map The map to convert.                                                                             // 307\n * @returns {Array} Returns the key-value pairs.                                                                       // 308\n */                                                                                                                    // 309\nfunction mapToArray(map) {                                                                                             // 310\n  var index = -1,                                                                                                      // 311\n      result = Array(map.size);                                                                                        // 312\n                                                                                                                       // 313\n  map.forEach(function(value, key) {                                                                                   // 314\n    result[++index] = [key, value];                                                                                    // 315\n  });                                                                                                                  // 316\n  return result;                                                                                                       // 317\n}                                                                                                                      // 318\n                                                                                                                       // 319\n/**                                                                                                                    // 320\n * Creates a unary function that invokes `func` with its argument transformed.                                         // 321\n *                                                                                                                     // 322\n * @private                                                                                                            // 323\n * @param {Function} func The function to wrap.                                                                        // 324\n * @param {Function} transform The argument transform.                                                                 // 325\n * @returns {Function} Returns the new function.                                                                       // 326\n */                                                                                                                    // 327\nfunction overArg(func, transform) {                                                                                    // 328\n  return function(arg) {                                                                                               // 329\n    return func(transform(arg));                                                                                       // 330\n  };                                                                                                                   // 331\n}                                                                                                                      // 332\n                                                                                                                       // 333\n/**                                                                                                                    // 334\n * Converts `set` to an array of its values.                                                                           // 335\n *                                                                                                                     // 336\n * @private                                                                                                            // 337\n * @param {Object} set The set to convert.                                                                             // 338\n * @returns {Array} Returns the values.                                                                                // 339\n */                                                                                                                    // 340\nfunction setToArray(set) {                                                                                             // 341\n  var index = -1,                                                                                                      // 342\n      result = Array(set.size);                                                                                        // 343\n                                                                                                                       // 344\n  set.forEach(function(value) {                                                                                        // 345\n    result[++index] = value;                                                                                           // 346\n  });                                                                                                                  // 347\n  return result;                                                                                                       // 348\n}                                                                                                                      // 349\n                                                                                                                       // 350\n/** Used for built-in method references. */                                                                            // 351\nvar arrayProto = Array.prototype,                                                                                      // 352\n    funcProto = Function.prototype,                                                                                    // 353\n    objectProto = Object.prototype;                                                                                    // 354\n                                                                                                                       // 355\n/** Used to detect overreaching core-js shims. */                                                                      // 356\nvar coreJsData = root['__core-js_shared__'];                                                                           // 357\n                                                                                                                       // 358\n/** Used to detect methods masquerading as native. */                                                                  // 359\nvar maskSrcKey = (function() {                                                                                         // 360\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');                            // 361\n  return uid ? ('Symbol(src)_1.' + uid) : '';                                                                          // 362\n}());                                                                                                                  // 363\n                                                                                                                       // 364\n/** Used to resolve the decompiled source of functions. */                                                             // 365\nvar funcToString = funcProto.toString;                                                                                 // 366\n                                                                                                                       // 367\n/** Used to check objects for own properties. */                                                                       // 368\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 369\n                                                                                                                       // 370\n/** Used to infer the `Object` constructor. */                                                                         // 371\nvar objectCtorString = funcToString.call(Object);                                                                      // 372\n                                                                                                                       // 373\n/**                                                                                                                    // 374\n * Used to resolve the                                                                                                 // 375\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)                          // 376\n * of values.                                                                                                          // 377\n */                                                                                                                    // 378\nvar objectToString = objectProto.toString;                                                                             // 379\n                                                                                                                       // 380\n/** Used to detect if a method is native. */                                                                           // 381\nvar reIsNative = RegExp('^' +                                                                                          // 382\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')                                                      // 383\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'                                    // 384\n);                                                                                                                     // 385\n                                                                                                                       // 386\n/** Built-in value references. */                                                                                      // 387\nvar Buffer = moduleExports ? root.Buffer : undefined,                                                                  // 388\n    Symbol = root.Symbol,                                                                                              // 389\n    Uint8Array = root.Uint8Array,                                                                                      // 390\n    getPrototype = overArg(Object.getPrototypeOf, Object),                                                             // 391\n    objectCreate = Object.create,                                                                                      // 392\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,                                                           // 393\n    splice = arrayProto.splice;                                                                                        // 394\n                                                                                                                       // 395\n/* Built-in method references for those with the same name as other `lodash` methods. */                               // 396\nvar nativeGetSymbols = Object.getOwnPropertySymbols,                                                                   // 397\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,                                                             // 398\n    nativeKeys = overArg(Object.keys, Object),                                                                         // 399\n    nativeMax = Math.max;                                                                                              // 400\n                                                                                                                       // 401\n/* Built-in method references that are verified to be native. */                                                       // 402\nvar DataView = getNative(root, 'DataView'),                                                                            // 403\n    Map = getNative(root, 'Map'),                                                                                      // 404\n    Promise = getNative(root, 'Promise'),                                                                              // 405\n    Set = getNative(root, 'Set'),                                                                                      // 406\n    WeakMap = getNative(root, 'WeakMap'),                                                                              // 407\n    nativeCreate = getNative(Object, 'create');                                                                        // 408\n                                                                                                                       // 409\n/** Used to detect maps, sets, and weakmaps. */                                                                        // 410\nvar dataViewCtorString = toSource(DataView),                                                                           // 411\n    mapCtorString = toSource(Map),                                                                                     // 412\n    promiseCtorString = toSource(Promise),                                                                             // 413\n    setCtorString = toSource(Set),                                                                                     // 414\n    weakMapCtorString = toSource(WeakMap);                                                                             // 415\n                                                                                                                       // 416\n/** Used to convert symbols to primitives and strings. */                                                              // 417\nvar symbolProto = Symbol ? Symbol.prototype : undefined,                                                               // 418\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;                                                     // 419\n                                                                                                                       // 420\n/**                                                                                                                    // 421\n * Creates a hash object.                                                                                              // 422\n *                                                                                                                     // 423\n * @private                                                                                                            // 424\n * @constructor                                                                                                        // 425\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 426\n */                                                                                                                    // 427\nfunction Hash(entries) {                                                                                               // 428\n  var index = -1,                                                                                                      // 429\n      length = entries ? entries.length : 0;                                                                           // 430\n                                                                                                                       // 431\n  this.clear();                                                                                                        // 432\n  while (++index < length) {                                                                                           // 433\n    var entry = entries[index];                                                                                        // 434\n    this.set(entry[0], entry[1]);                                                                                      // 435\n  }                                                                                                                    // 436\n}                                                                                                                      // 437\n                                                                                                                       // 438\n/**                                                                                                                    // 439\n * Removes all key-value entries from the hash.                                                                        // 440\n *                                                                                                                     // 441\n * @private                                                                                                            // 442\n * @name clear                                                                                                         // 443\n * @memberOf Hash                                                                                                      // 444\n */                                                                                                                    // 445\nfunction hashClear() {                                                                                                 // 446\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};                                                              // 447\n}                                                                                                                      // 448\n                                                                                                                       // 449\n/**                                                                                                                    // 450\n * Removes `key` and its value from the hash.                                                                          // 451\n *                                                                                                                     // 452\n * @private                                                                                                            // 453\n * @name delete                                                                                                        // 454\n * @memberOf Hash                                                                                                      // 455\n * @param {Object} hash The hash to modify.                                                                            // 456\n * @param {string} key The key of the value to remove.                                                                 // 457\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 458\n */                                                                                                                    // 459\nfunction hashDelete(key) {                                                                                             // 460\n  return this.has(key) && delete this.__data__[key];                                                                   // 461\n}                                                                                                                      // 462\n                                                                                                                       // 463\n/**                                                                                                                    // 464\n * Gets the hash value for `key`.                                                                                      // 465\n *                                                                                                                     // 466\n * @private                                                                                                            // 467\n * @name get                                                                                                           // 468\n * @memberOf Hash                                                                                                      // 469\n * @param {string} key The key of the value to get.                                                                    // 470\n * @returns {*} Returns the entry value.                                                                               // 471\n */                                                                                                                    // 472\nfunction hashGet(key) {                                                                                                // 473\n  var data = this.__data__;                                                                                            // 474\n  if (nativeCreate) {                                                                                                  // 475\n    var result = data[key];                                                                                            // 476\n    return result === HASH_UNDEFINED ? undefined : result;                                                             // 477\n  }                                                                                                                    // 478\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;                                                       // 479\n}                                                                                                                      // 480\n                                                                                                                       // 481\n/**                                                                                                                    // 482\n * Checks if a hash value for `key` exists.                                                                            // 483\n *                                                                                                                     // 484\n * @private                                                                                                            // 485\n * @name has                                                                                                           // 486\n * @memberOf Hash                                                                                                      // 487\n * @param {string} key The key of the entry to check.                                                                  // 488\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 489\n */                                                                                                                    // 490\nfunction hashHas(key) {                                                                                                // 491\n  var data = this.__data__;                                                                                            // 492\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);                                      // 493\n}                                                                                                                      // 494\n                                                                                                                       // 495\n/**                                                                                                                    // 496\n * Sets the hash `key` to `value`.                                                                                     // 497\n *                                                                                                                     // 498\n * @private                                                                                                            // 499\n * @name set                                                                                                           // 500\n * @memberOf Hash                                                                                                      // 501\n * @param {string} key The key of the value to set.                                                                    // 502\n * @param {*} value The value to set.                                                                                  // 503\n * @returns {Object} Returns the hash instance.                                                                        // 504\n */                                                                                                                    // 505\nfunction hashSet(key, value) {                                                                                         // 506\n  var data = this.__data__;                                                                                            // 507\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;                                          // 508\n  return this;                                                                                                         // 509\n}                                                                                                                      // 510\n                                                                                                                       // 511\n// Add methods to `Hash`.                                                                                              // 512\nHash.prototype.clear = hashClear;                                                                                      // 513\nHash.prototype['delete'] = hashDelete;                                                                                 // 514\nHash.prototype.get = hashGet;                                                                                          // 515\nHash.prototype.has = hashHas;                                                                                          // 516\nHash.prototype.set = hashSet;                                                                                          // 517\n                                                                                                                       // 518\n/**                                                                                                                    // 519\n * Creates an list cache object.                                                                                       // 520\n *                                                                                                                     // 521\n * @private                                                                                                            // 522\n * @constructor                                                                                                        // 523\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 524\n */                                                                                                                    // 525\nfunction ListCache(entries) {                                                                                          // 526\n  var index = -1,                                                                                                      // 527\n      length = entries ? entries.length : 0;                                                                           // 528\n                                                                                                                       // 529\n  this.clear();                                                                                                        // 530\n  while (++index < length) {                                                                                           // 531\n    var entry = entries[index];                                                                                        // 532\n    this.set(entry[0], entry[1]);                                                                                      // 533\n  }                                                                                                                    // 534\n}                                                                                                                      // 535\n                                                                                                                       // 536\n/**                                                                                                                    // 537\n * Removes all key-value entries from the list cache.                                                                  // 538\n *                                                                                                                     // 539\n * @private                                                                                                            // 540\n * @name clear                                                                                                         // 541\n * @memberOf ListCache                                                                                                 // 542\n */                                                                                                                    // 543\nfunction listCacheClear() {                                                                                            // 544\n  this.__data__ = [];                                                                                                  // 545\n}                                                                                                                      // 546\n                                                                                                                       // 547\n/**                                                                                                                    // 548\n * Removes `key` and its value from the list cache.                                                                    // 549\n *                                                                                                                     // 550\n * @private                                                                                                            // 551\n * @name delete                                                                                                        // 552\n * @memberOf ListCache                                                                                                 // 553\n * @param {string} key The key of the value to remove.                                                                 // 554\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 555\n */                                                                                                                    // 556\nfunction listCacheDelete(key) {                                                                                        // 557\n  var data = this.__data__,                                                                                            // 558\n      index = assocIndexOf(data, key);                                                                                 // 559\n                                                                                                                       // 560\n  if (index < 0) {                                                                                                     // 561\n    return false;                                                                                                      // 562\n  }                                                                                                                    // 563\n  var lastIndex = data.length - 1;                                                                                     // 564\n  if (index == lastIndex) {                                                                                            // 565\n    data.pop();                                                                                                        // 566\n  } else {                                                                                                             // 567\n    splice.call(data, index, 1);                                                                                       // 568\n  }                                                                                                                    // 569\n  return true;                                                                                                         // 570\n}                                                                                                                      // 571\n                                                                                                                       // 572\n/**                                                                                                                    // 573\n * Gets the list cache value for `key`.                                                                                // 574\n *                                                                                                                     // 575\n * @private                                                                                                            // 576\n * @name get                                                                                                           // 577\n * @memberOf ListCache                                                                                                 // 578\n * @param {string} key The key of the value to get.                                                                    // 579\n * @returns {*} Returns the entry value.                                                                               // 580\n */                                                                                                                    // 581\nfunction listCacheGet(key) {                                                                                           // 582\n  var data = this.__data__,                                                                                            // 583\n      index = assocIndexOf(data, key);                                                                                 // 584\n                                                                                                                       // 585\n  return index < 0 ? undefined : data[index][1];                                                                       // 586\n}                                                                                                                      // 587\n                                                                                                                       // 588\n/**                                                                                                                    // 589\n * Checks if a list cache value for `key` exists.                                                                      // 590\n *                                                                                                                     // 591\n * @private                                                                                                            // 592\n * @name has                                                                                                           // 593\n * @memberOf ListCache                                                                                                 // 594\n * @param {string} key The key of the entry to check.                                                                  // 595\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 596\n */                                                                                                                    // 597\nfunction listCacheHas(key) {                                                                                           // 598\n  return assocIndexOf(this.__data__, key) > -1;                                                                        // 599\n}                                                                                                                      // 600\n                                                                                                                       // 601\n/**                                                                                                                    // 602\n * Sets the list cache `key` to `value`.                                                                               // 603\n *                                                                                                                     // 604\n * @private                                                                                                            // 605\n * @name set                                                                                                           // 606\n * @memberOf ListCache                                                                                                 // 607\n * @param {string} key The key of the value to set.                                                                    // 608\n * @param {*} value The value to set.                                                                                  // 609\n * @returns {Object} Returns the list cache instance.                                                                  // 610\n */                                                                                                                    // 611\nfunction listCacheSet(key, value) {                                                                                    // 612\n  var data = this.__data__,                                                                                            // 613\n      index = assocIndexOf(data, key);                                                                                 // 614\n                                                                                                                       // 615\n  if (index < 0) {                                                                                                     // 616\n    data.push([key, value]);                                                                                           // 617\n  } else {                                                                                                             // 618\n    data[index][1] = value;                                                                                            // 619\n  }                                                                                                                    // 620\n  return this;                                                                                                         // 621\n}                                                                                                                      // 622\n                                                                                                                       // 623\n// Add methods to `ListCache`.                                                                                         // 624\nListCache.prototype.clear = listCacheClear;                                                                            // 625\nListCache.prototype['delete'] = listCacheDelete;                                                                       // 626\nListCache.prototype.get = listCacheGet;                                                                                // 627\nListCache.prototype.has = listCacheHas;                                                                                // 628\nListCache.prototype.set = listCacheSet;                                                                                // 629\n                                                                                                                       // 630\n/**                                                                                                                    // 631\n * Creates a map cache object to store key-value pairs.                                                                // 632\n *                                                                                                                     // 633\n * @private                                                                                                            // 634\n * @constructor                                                                                                        // 635\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 636\n */                                                                                                                    // 637\nfunction MapCache(entries) {                                                                                           // 638\n  var index = -1,                                                                                                      // 639\n      length = entries ? entries.length : 0;                                                                           // 640\n                                                                                                                       // 641\n  this.clear();                                                                                                        // 642\n  while (++index < length) {                                                                                           // 643\n    var entry = entries[index];                                                                                        // 644\n    this.set(entry[0], entry[1]);                                                                                      // 645\n  }                                                                                                                    // 646\n}                                                                                                                      // 647\n                                                                                                                       // 648\n/**                                                                                                                    // 649\n * Removes all key-value entries from the map.                                                                         // 650\n *                                                                                                                     // 651\n * @private                                                                                                            // 652\n * @name clear                                                                                                         // 653\n * @memberOf MapCache                                                                                                  // 654\n */                                                                                                                    // 655\nfunction mapCacheClear() {                                                                                             // 656\n  this.__data__ = {                                                                                                    // 657\n    'hash': new Hash,                                                                                                  // 658\n    'map': new (Map || ListCache),                                                                                     // 659\n    'string': new Hash                                                                                                 // 660\n  };                                                                                                                   // 661\n}                                                                                                                      // 662\n                                                                                                                       // 663\n/**                                                                                                                    // 664\n * Removes `key` and its value from the map.                                                                           // 665\n *                                                                                                                     // 666\n * @private                                                                                                            // 667\n * @name delete                                                                                                        // 668\n * @memberOf MapCache                                                                                                  // 669\n * @param {string} key The key of the value to remove.                                                                 // 670\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 671\n */                                                                                                                    // 672\nfunction mapCacheDelete(key) {                                                                                         // 673\n  return getMapData(this, key)['delete'](key);                                                                         // 674\n}                                                                                                                      // 675\n                                                                                                                       // 676\n/**                                                                                                                    // 677\n * Gets the map value for `key`.                                                                                       // 678\n *                                                                                                                     // 679\n * @private                                                                                                            // 680\n * @name get                                                                                                           // 681\n * @memberOf MapCache                                                                                                  // 682\n * @param {string} key The key of the value to get.                                                                    // 683\n * @returns {*} Returns the entry value.                                                                               // 684\n */                                                                                                                    // 685\nfunction mapCacheGet(key) {                                                                                            // 686\n  return getMapData(this, key).get(key);                                                                               // 687\n}                                                                                                                      // 688\n                                                                                                                       // 689\n/**                                                                                                                    // 690\n * Checks if a map value for `key` exists.                                                                             // 691\n *                                                                                                                     // 692\n * @private                                                                                                            // 693\n * @name has                                                                                                           // 694\n * @memberOf MapCache                                                                                                  // 695\n * @param {string} key The key of the entry to check.                                                                  // 696\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 697\n */                                                                                                                    // 698\nfunction mapCacheHas(key) {                                                                                            // 699\n  return getMapData(this, key).has(key);                                                                               // 700\n}                                                                                                                      // 701\n                                                                                                                       // 702\n/**                                                                                                                    // 703\n * Sets the map `key` to `value`.                                                                                      // 704\n *                                                                                                                     // 705\n * @private                                                                                                            // 706\n * @name set                                                                                                           // 707\n * @memberOf MapCache                                                                                                  // 708\n * @param {string} key The key of the value to set.                                                                    // 709\n * @param {*} value The value to set.                                                                                  // 710\n * @returns {Object} Returns the map cache instance.                                                                   // 711\n */                                                                                                                    // 712\nfunction mapCacheSet(key, value) {                                                                                     // 713\n  getMapData(this, key).set(key, value);                                                                               // 714\n  return this;                                                                                                         // 715\n}                                                                                                                      // 716\n                                                                                                                       // 717\n// Add methods to `MapCache`.                                                                                          // 718\nMapCache.prototype.clear = mapCacheClear;                                                                              // 719\nMapCache.prototype['delete'] = mapCacheDelete;                                                                         // 720\nMapCache.prototype.get = mapCacheGet;                                                                                  // 721\nMapCache.prototype.has = mapCacheHas;                                                                                  // 722\nMapCache.prototype.set = mapCacheSet;                                                                                  // 723\n                                                                                                                       // 724\n/**                                                                                                                    // 725\n * Creates a stack cache object to store key-value pairs.                                                              // 726\n *                                                                                                                     // 727\n * @private                                                                                                            // 728\n * @constructor                                                                                                        // 729\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 730\n */                                                                                                                    // 731\nfunction Stack(entries) {                                                                                              // 732\n  this.__data__ = new ListCache(entries);                                                                              // 733\n}                                                                                                                      // 734\n                                                                                                                       // 735\n/**                                                                                                                    // 736\n * Removes all key-value entries from the stack.                                                                       // 737\n *                                                                                                                     // 738\n * @private                                                                                                            // 739\n * @name clear                                                                                                         // 740\n * @memberOf Stack                                                                                                     // 741\n */                                                                                                                    // 742\nfunction stackClear() {                                                                                                // 743\n  this.__data__ = new ListCache;                                                                                       // 744\n}                                                                                                                      // 745\n                                                                                                                       // 746\n/**                                                                                                                    // 747\n * Removes `key` and its value from the stack.                                                                         // 748\n *                                                                                                                     // 749\n * @private                                                                                                            // 750\n * @name delete                                                                                                        // 751\n * @memberOf Stack                                                                                                     // 752\n * @param {string} key The key of the value to remove.                                                                 // 753\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 754\n */                                                                                                                    // 755\nfunction stackDelete(key) {                                                                                            // 756\n  return this.__data__['delete'](key);                                                                                 // 757\n}                                                                                                                      // 758\n                                                                                                                       // 759\n/**                                                                                                                    // 760\n * Gets the stack value for `key`.                                                                                     // 761\n *                                                                                                                     // 762\n * @private                                                                                                            // 763\n * @name get                                                                                                           // 764\n * @memberOf Stack                                                                                                     // 765\n * @param {string} key The key of the value to get.                                                                    // 766\n * @returns {*} Returns the entry value.                                                                               // 767\n */                                                                                                                    // 768\nfunction stackGet(key) {                                                                                               // 769\n  return this.__data__.get(key);                                                                                       // 770\n}                                                                                                                      // 771\n                                                                                                                       // 772\n/**                                                                                                                    // 773\n * Checks if a stack value for `key` exists.                                                                           // 774\n *                                                                                                                     // 775\n * @private                                                                                                            // 776\n * @name has                                                                                                           // 777\n * @memberOf Stack                                                                                                     // 778\n * @param {string} key The key of the entry to check.                                                                  // 779\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 780\n */                                                                                                                    // 781\nfunction stackHas(key) {                                                                                               // 782\n  return this.__data__.has(key);                                                                                       // 783\n}                                                                                                                      // 784\n                                                                                                                       // 785\n/**                                                                                                                    // 786\n * Sets the stack `key` to `value`.                                                                                    // 787\n *                                                                                                                     // 788\n * @private                                                                                                            // 789\n * @name set                                                                                                           // 790\n * @memberOf Stack                                                                                                     // 791\n * @param {string} key The key of the value to set.                                                                    // 792\n * @param {*} value The value to set.                                                                                  // 793\n * @returns {Object} Returns the stack cache instance.                                                                 // 794\n */                                                                                                                    // 795\nfunction stackSet(key, value) {                                                                                        // 796\n  var cache = this.__data__;                                                                                           // 797\n  if (cache instanceof ListCache) {                                                                                    // 798\n    var pairs = cache.__data__;                                                                                        // 799\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {                                                               // 800\n      pairs.push([key, value]);                                                                                        // 801\n      return this;                                                                                                     // 802\n    }                                                                                                                  // 803\n    cache = this.__data__ = new MapCache(pairs);                                                                       // 804\n  }                                                                                                                    // 805\n  cache.set(key, value);                                                                                               // 806\n  return this;                                                                                                         // 807\n}                                                                                                                      // 808\n                                                                                                                       // 809\n// Add methods to `Stack`.                                                                                             // 810\nStack.prototype.clear = stackClear;                                                                                    // 811\nStack.prototype['delete'] = stackDelete;                                                                               // 812\nStack.prototype.get = stackGet;                                                                                        // 813\nStack.prototype.has = stackHas;                                                                                        // 814\nStack.prototype.set = stackSet;                                                                                        // 815\n                                                                                                                       // 816\n/**                                                                                                                    // 817\n * Creates an array of the enumerable property names of the array-like `value`.                                        // 818\n *                                                                                                                     // 819\n * @private                                                                                                            // 820\n * @param {*} value The value to query.                                                                                // 821\n * @param {boolean} inherited Specify returning inherited property names.                                              // 822\n * @returns {Array} Returns the array of property names.                                                               // 823\n */                                                                                                                    // 824\nfunction arrayLikeKeys(value, inherited) {                                                                             // 825\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 826\n  // Safari 9 makes `arguments.length` enumerable in strict mode.                                                      // 827\n  var result = (isArray(value) || isArguments(value))                                                                  // 828\n    ? baseTimes(value.length, String)                                                                                  // 829\n    : [];                                                                                                              // 830\n                                                                                                                       // 831\n  var length = result.length,                                                                                          // 832\n      skipIndexes = !!length;                                                                                          // 833\n                                                                                                                       // 834\n  for (var key in value) {                                                                                             // 835\n    if ((inherited || hasOwnProperty.call(value, key)) &&                                                              // 836\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {                                                 // 837\n      result.push(key);                                                                                                // 838\n    }                                                                                                                  // 839\n  }                                                                                                                    // 840\n  return result;                                                                                                       // 841\n}                                                                                                                      // 842\n                                                                                                                       // 843\n/**                                                                                                                    // 844\n * This function is like `assignValue` except that it doesn't assign                                                   // 845\n * `undefined` values.                                                                                                 // 846\n *                                                                                                                     // 847\n * @private                                                                                                            // 848\n * @param {Object} object The object to modify.                                                                        // 849\n * @param {string} key The key of the property to assign.                                                              // 850\n * @param {*} value The value to assign.                                                                               // 851\n */                                                                                                                    // 852\nfunction assignMergeValue(object, key, value) {                                                                        // 853\n  if ((value !== undefined && !eq(object[key], value)) ||                                                              // 854\n      (typeof key == 'number' && value === undefined && !(key in object))) {                                           // 855\n    object[key] = value;                                                                                               // 856\n  }                                                                                                                    // 857\n}                                                                                                                      // 858\n                                                                                                                       // 859\n/**                                                                                                                    // 860\n * Assigns `value` to `key` of `object` if the existing value is not equivalent                                        // 861\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)                              // 862\n * for equality comparisons.                                                                                           // 863\n *                                                                                                                     // 864\n * @private                                                                                                            // 865\n * @param {Object} object The object to modify.                                                                        // 866\n * @param {string} key The key of the property to assign.                                                              // 867\n * @param {*} value The value to assign.                                                                               // 868\n */                                                                                                                    // 869\nfunction assignValue(object, key, value) {                                                                             // 870\n  var objValue = object[key];                                                                                          // 871\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||                                                    // 872\n      (value === undefined && !(key in object))) {                                                                     // 873\n    object[key] = value;                                                                                               // 874\n  }                                                                                                                    // 875\n}                                                                                                                      // 876\n                                                                                                                       // 877\n/**                                                                                                                    // 878\n * Gets the index at which the `key` is found in `array` of key-value pairs.                                           // 879\n *                                                                                                                     // 880\n * @private                                                                                                            // 881\n * @param {Array} array The array to inspect.                                                                          // 882\n * @param {*} key The key to search for.                                                                               // 883\n * @returns {number} Returns the index of the matched value, else `-1`.                                                // 884\n */                                                                                                                    // 885\nfunction assocIndexOf(array, key) {                                                                                    // 886\n  var length = array.length;                                                                                           // 887\n  while (length--) {                                                                                                   // 888\n    if (eq(array[length][0], key)) {                                                                                   // 889\n      return length;                                                                                                   // 890\n    }                                                                                                                  // 891\n  }                                                                                                                    // 892\n  return -1;                                                                                                           // 893\n}                                                                                                                      // 894\n                                                                                                                       // 895\n/**                                                                                                                    // 896\n * The base implementation of `_.assign` without support for multiple sources                                          // 897\n * or `customizer` functions.                                                                                          // 898\n *                                                                                                                     // 899\n * @private                                                                                                            // 900\n * @param {Object} object The destination object.                                                                      // 901\n * @param {Object} source The source object.                                                                           // 902\n * @returns {Object} Returns `object`.                                                                                 // 903\n */                                                                                                                    // 904\nfunction baseAssign(object, source) {                                                                                  // 905\n  return object && copyObject(source, keys(source), object);                                                           // 906\n}                                                                                                                      // 907\n                                                                                                                       // 908\n/**                                                                                                                    // 909\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks                                                 // 910\n * traversed objects.                                                                                                  // 911\n *                                                                                                                     // 912\n * @private                                                                                                            // 913\n * @param {*} value The value to clone.                                                                                // 914\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 915\n * @param {boolean} [isFull] Specify a clone including symbols.                                                        // 916\n * @param {Function} [customizer] The function to customize cloning.                                                   // 917\n * @param {string} [key] The key of `value`.                                                                           // 918\n * @param {Object} [object] The parent object of `value`.                                                              // 919\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.                                      // 920\n * @returns {*} Returns the cloned value.                                                                              // 921\n */                                                                                                                    // 922\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {                                            // 923\n  var result;                                                                                                          // 924\n  if (customizer) {                                                                                                    // 925\n    result = object ? customizer(value, key, object, stack) : customizer(value);                                       // 926\n  }                                                                                                                    // 927\n  if (result !== undefined) {                                                                                          // 928\n    return result;                                                                                                     // 929\n  }                                                                                                                    // 930\n  if (!isObject(value)) {                                                                                              // 931\n    return value;                                                                                                      // 932\n  }                                                                                                                    // 933\n  var isArr = isArray(value);                                                                                          // 934\n  if (isArr) {                                                                                                         // 935\n    result = initCloneArray(value);                                                                                    // 936\n    if (!isDeep) {                                                                                                     // 937\n      return copyArray(value, result);                                                                                 // 938\n    }                                                                                                                  // 939\n  } else {                                                                                                             // 940\n    var tag = getTag(value),                                                                                           // 941\n        isFunc = tag == funcTag || tag == genTag;                                                                      // 942\n                                                                                                                       // 943\n    if (isBuffer(value)) {                                                                                             // 944\n      return cloneBuffer(value, isDeep);                                                                               // 945\n    }                                                                                                                  // 946\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {                                                   // 947\n      if (isHostObject(value)) {                                                                                       // 948\n        return object ? value : {};                                                                                    // 949\n      }                                                                                                                // 950\n      result = initCloneObject(isFunc ? {} : value);                                                                   // 951\n      if (!isDeep) {                                                                                                   // 952\n        return copySymbols(value, baseAssign(result, value));                                                          // 953\n      }                                                                                                                // 954\n    } else {                                                                                                           // 955\n      if (!cloneableTags[tag]) {                                                                                       // 956\n        return object ? value : {};                                                                                    // 957\n      }                                                                                                                // 958\n      result = initCloneByTag(value, tag, baseClone, isDeep);                                                          // 959\n    }                                                                                                                  // 960\n  }                                                                                                                    // 961\n  // Check for circular references and return its corresponding clone.                                                 // 962\n  stack || (stack = new Stack);                                                                                        // 963\n  var stacked = stack.get(value);                                                                                      // 964\n  if (stacked) {                                                                                                       // 965\n    return stacked;                                                                                                    // 966\n  }                                                                                                                    // 967\n  stack.set(value, result);                                                                                            // 968\n                                                                                                                       // 969\n  if (!isArr) {                                                                                                        // 970\n    var props = isFull ? getAllKeys(value) : keys(value);                                                              // 971\n  }                                                                                                                    // 972\n  arrayEach(props || value, function(subValue, key) {                                                                  // 973\n    if (props) {                                                                                                       // 974\n      key = subValue;                                                                                                  // 975\n      subValue = value[key];                                                                                           // 976\n    }                                                                                                                  // 977\n    // Recursively populate clone (susceptible to call stack limits).                                                  // 978\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));                      // 979\n  });                                                                                                                  // 980\n  return result;                                                                                                       // 981\n}                                                                                                                      // 982\n                                                                                                                       // 983\n/**                                                                                                                    // 984\n * The base implementation of `_.create` without support for assigning                                                 // 985\n * properties to the created object.                                                                                   // 986\n *                                                                                                                     // 987\n * @private                                                                                                            // 988\n * @param {Object} prototype The object to inherit from.                                                               // 989\n * @returns {Object} Returns the new object.                                                                           // 990\n */                                                                                                                    // 991\nfunction baseCreate(proto) {                                                                                           // 992\n  return isObject(proto) ? objectCreate(proto) : {};                                                                   // 993\n}                                                                                                                      // 994\n                                                                                                                       // 995\n/**                                                                                                                    // 996\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses                                               // 997\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and                                               // 998\n * symbols of `object`.                                                                                                // 999\n *                                                                                                                     // 1000\n * @private                                                                                                            // 1001\n * @param {Object} object The object to query.                                                                         // 1002\n * @param {Function} keysFunc The function to get the keys of `object`.                                                // 1003\n * @param {Function} symbolsFunc The function to get the symbols of `object`.                                          // 1004\n * @returns {Array} Returns the array of property names and symbols.                                                   // 1005\n */                                                                                                                    // 1006\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {                                                               // 1007\n  var result = keysFunc(object);                                                                                       // 1008\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));                                            // 1009\n}                                                                                                                      // 1010\n                                                                                                                       // 1011\n/**                                                                                                                    // 1012\n * The base implementation of `getTag`.                                                                                // 1013\n *                                                                                                                     // 1014\n * @private                                                                                                            // 1015\n * @param {*} value The value to query.                                                                                // 1016\n * @returns {string} Returns the `toStringTag`.                                                                        // 1017\n */                                                                                                                    // 1018\nfunction baseGetTag(value) {                                                                                           // 1019\n  return objectToString.call(value);                                                                                   // 1020\n}                                                                                                                      // 1021\n                                                                                                                       // 1022\n/**                                                                                                                    // 1023\n * The base implementation of `_.isNative` without bad shim checks.                                                    // 1024\n *                                                                                                                     // 1025\n * @private                                                                                                            // 1026\n * @param {*} value The value to check.                                                                                // 1027\n * @returns {boolean} Returns `true` if `value` is a native function,                                                  // 1028\n *  else `false`.                                                                                                      // 1029\n */                                                                                                                    // 1030\nfunction baseIsNative(value) {                                                                                         // 1031\n  if (!isObject(value) || isMasked(value)) {                                                                           // 1032\n    return false;                                                                                                      // 1033\n  }                                                                                                                    // 1034\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;                                // 1035\n  return pattern.test(toSource(value));                                                                                // 1036\n}                                                                                                                      // 1037\n                                                                                                                       // 1038\n/**                                                                                                                    // 1039\n * The base implementation of `_.isTypedArray` without Node.js optimizations.                                          // 1040\n *                                                                                                                     // 1041\n * @private                                                                                                            // 1042\n * @param {*} value The value to check.                                                                                // 1043\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.                                        // 1044\n */                                                                                                                    // 1045\nfunction baseIsTypedArray(value) {                                                                                     // 1046\n  return isObjectLike(value) &&                                                                                        // 1047\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];                                            // 1048\n}                                                                                                                      // 1049\n                                                                                                                       // 1050\n/**                                                                                                                    // 1051\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.                                     // 1052\n *                                                                                                                     // 1053\n * @private                                                                                                            // 1054\n * @param {Object} object The object to query.                                                                         // 1055\n * @returns {Array} Returns the array of property names.                                                               // 1056\n */                                                                                                                    // 1057\nfunction baseKeys(object) {                                                                                            // 1058\n  if (!isPrototype(object)) {                                                                                          // 1059\n    return nativeKeys(object);                                                                                         // 1060\n  }                                                                                                                    // 1061\n  var result = [];                                                                                                     // 1062\n  for (var key in Object(object)) {                                                                                    // 1063\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {                                                    // 1064\n      result.push(key);                                                                                                // 1065\n    }                                                                                                                  // 1066\n  }                                                                                                                    // 1067\n  return result;                                                                                                       // 1068\n}                                                                                                                      // 1069\n                                                                                                                       // 1070\n/**                                                                                                                    // 1071\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.                                   // 1072\n *                                                                                                                     // 1073\n * @private                                                                                                            // 1074\n * @param {Object} object The object to query.                                                                         // 1075\n * @returns {Array} Returns the array of property names.                                                               // 1076\n */                                                                                                                    // 1077\nfunction baseKeysIn(object) {                                                                                          // 1078\n  if (!isObject(object)) {                                                                                             // 1079\n    return nativeKeysIn(object);                                                                                       // 1080\n  }                                                                                                                    // 1081\n  var isProto = isPrototype(object),                                                                                   // 1082\n      result = [];                                                                                                     // 1083\n                                                                                                                       // 1084\n  for (var key in object) {                                                                                            // 1085\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {                                   // 1086\n      result.push(key);                                                                                                // 1087\n    }                                                                                                                  // 1088\n  }                                                                                                                    // 1089\n  return result;                                                                                                       // 1090\n}                                                                                                                      // 1091\n                                                                                                                       // 1092\n/**                                                                                                                    // 1093\n * The base implementation of `_.merge` without support for multiple sources.                                          // 1094\n *                                                                                                                     // 1095\n * @private                                                                                                            // 1096\n * @param {Object} object The destination object.                                                                      // 1097\n * @param {Object} source The source object.                                                                           // 1098\n * @param {number} srcIndex The index of `source`.                                                                     // 1099\n * @param {Function} [customizer] The function to customize merged values.                                             // 1100\n * @param {Object} [stack] Tracks traversed source values and their merged                                             // 1101\n *  counterparts.                                                                                                      // 1102\n */                                                                                                                    // 1103\nfunction baseMerge(object, source, srcIndex, customizer, stack) {                                                      // 1104\n  if (object === source) {                                                                                             // 1105\n    return;                                                                                                            // 1106\n  }                                                                                                                    // 1107\n  if (!(isArray(source) || isTypedArray(source))) {                                                                    // 1108\n    var props = baseKeysIn(source);                                                                                    // 1109\n  }                                                                                                                    // 1110\n  arrayEach(props || source, function(srcValue, key) {                                                                 // 1111\n    if (props) {                                                                                                       // 1112\n      key = srcValue;                                                                                                  // 1113\n      srcValue = source[key];                                                                                          // 1114\n    }                                                                                                                  // 1115\n    if (isObject(srcValue)) {                                                                                          // 1116\n      stack || (stack = new Stack);                                                                                    // 1117\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);                                      // 1118\n    }                                                                                                                  // 1119\n    else {                                                                                                             // 1120\n      var newValue = customizer                                                                                        // 1121\n        ? customizer(object[key], srcValue, (key + ''), object, source, stack)                                         // 1122\n        : undefined;                                                                                                   // 1123\n                                                                                                                       // 1124\n      if (newValue === undefined) {                                                                                    // 1125\n        newValue = srcValue;                                                                                           // 1126\n      }                                                                                                                // 1127\n      assignMergeValue(object, key, newValue);                                                                         // 1128\n    }                                                                                                                  // 1129\n  });                                                                                                                  // 1130\n}                                                                                                                      // 1131\n                                                                                                                       // 1132\n/**                                                                                                                    // 1133\n * A specialized version of `baseMerge` for arrays and objects which performs                                          // 1134\n * deep merges and tracks traversed objects enabling objects with circular                                             // 1135\n * references to be merged.                                                                                            // 1136\n *                                                                                                                     // 1137\n * @private                                                                                                            // 1138\n * @param {Object} object The destination object.                                                                      // 1139\n * @param {Object} source The source object.                                                                           // 1140\n * @param {string} key The key of the value to merge.                                                                  // 1141\n * @param {number} srcIndex The index of `source`.                                                                     // 1142\n * @param {Function} mergeFunc The function to merge values.                                                           // 1143\n * @param {Function} [customizer] The function to customize assigned values.                                           // 1144\n * @param {Object} [stack] Tracks traversed source values and their merged                                             // 1145\n *  counterparts.                                                                                                      // 1146\n */                                                                                                                    // 1147\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {                                  // 1148\n  var objValue = object[key],                                                                                          // 1149\n      srcValue = source[key],                                                                                          // 1150\n      stacked = stack.get(srcValue);                                                                                   // 1151\n                                                                                                                       // 1152\n  if (stacked) {                                                                                                       // 1153\n    assignMergeValue(object, key, stacked);                                                                            // 1154\n    return;                                                                                                            // 1155\n  }                                                                                                                    // 1156\n  var newValue = customizer                                                                                            // 1157\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)                                                // 1158\n    : undefined;                                                                                                       // 1159\n                                                                                                                       // 1160\n  var isCommon = newValue === undefined;                                                                               // 1161\n                                                                                                                       // 1162\n  if (isCommon) {                                                                                                      // 1163\n    newValue = srcValue;                                                                                               // 1164\n    if (isArray(srcValue) || isTypedArray(srcValue)) {                                                                 // 1165\n      if (isArray(objValue)) {                                                                                         // 1166\n        newValue = objValue;                                                                                           // 1167\n      }                                                                                                                // 1168\n      else if (isArrayLikeObject(objValue)) {                                                                          // 1169\n        newValue = copyArray(objValue);                                                                                // 1170\n      }                                                                                                                // 1171\n      else {                                                                                                           // 1172\n        isCommon = false;                                                                                              // 1173\n        newValue = baseClone(srcValue, true);                                                                          // 1174\n      }                                                                                                                // 1175\n    }                                                                                                                  // 1176\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {                                                       // 1177\n      if (isArguments(objValue)) {                                                                                     // 1178\n        newValue = toPlainObject(objValue);                                                                            // 1179\n      }                                                                                                                // 1180\n      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {                                            // 1181\n        isCommon = false;                                                                                              // 1182\n        newValue = baseClone(srcValue, true);                                                                          // 1183\n      }                                                                                                                // 1184\n      else {                                                                                                           // 1185\n        newValue = objValue;                                                                                           // 1186\n      }                                                                                                                // 1187\n    }                                                                                                                  // 1188\n    else {                                                                                                             // 1189\n      isCommon = false;                                                                                                // 1190\n    }                                                                                                                  // 1191\n  }                                                                                                                    // 1192\n  if (isCommon) {                                                                                                      // 1193\n    // Recursively merge objects and arrays (susceptible to call stack limits).                                        // 1194\n    stack.set(srcValue, newValue);                                                                                     // 1195\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);                                                        // 1196\n    stack['delete'](srcValue);                                                                                         // 1197\n  }                                                                                                                    // 1198\n  assignMergeValue(object, key, newValue);                                                                             // 1199\n}                                                                                                                      // 1200\n                                                                                                                       // 1201\n/**                                                                                                                    // 1202\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.                                     // 1203\n *                                                                                                                     // 1204\n * @private                                                                                                            // 1205\n * @param {Function} func The function to apply a rest parameter to.                                                   // 1206\n * @param {number} [start=func.length-1] The start position of the rest parameter.                                     // 1207\n * @returns {Function} Returns the new function.                                                                       // 1208\n */                                                                                                                    // 1209\nfunction baseRest(func, start) {                                                                                       // 1210\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);                                               // 1211\n  return function() {                                                                                                  // 1212\n    var args = arguments,                                                                                              // 1213\n        index = -1,                                                                                                    // 1214\n        length = nativeMax(args.length - start, 0),                                                                    // 1215\n        array = Array(length);                                                                                         // 1216\n                                                                                                                       // 1217\n    while (++index < length) {                                                                                         // 1218\n      array[index] = args[start + index];                                                                              // 1219\n    }                                                                                                                  // 1220\n    index = -1;                                                                                                        // 1221\n    var otherArgs = Array(start + 1);                                                                                  // 1222\n    while (++index < start) {                                                                                          // 1223\n      otherArgs[index] = args[index];                                                                                  // 1224\n    }                                                                                                                  // 1225\n    otherArgs[start] = array;                                                                                          // 1226\n    return apply(func, this, otherArgs);                                                                               // 1227\n  };                                                                                                                   // 1228\n}                                                                                                                      // 1229\n                                                                                                                       // 1230\n/**                                                                                                                    // 1231\n * Creates a clone of  `buffer`.                                                                                       // 1232\n *                                                                                                                     // 1233\n * @private                                                                                                            // 1234\n * @param {Buffer} buffer The buffer to clone.                                                                         // 1235\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1236\n * @returns {Buffer} Returns the cloned buffer.                                                                        // 1237\n */                                                                                                                    // 1238\nfunction cloneBuffer(buffer, isDeep) {                                                                                 // 1239\n  if (isDeep) {                                                                                                        // 1240\n    return buffer.slice();                                                                                             // 1241\n  }                                                                                                                    // 1242\n  var result = new buffer.constructor(buffer.length);                                                                  // 1243\n  buffer.copy(result);                                                                                                 // 1244\n  return result;                                                                                                       // 1245\n}                                                                                                                      // 1246\n                                                                                                                       // 1247\n/**                                                                                                                    // 1248\n * Creates a clone of `arrayBuffer`.                                                                                   // 1249\n *                                                                                                                     // 1250\n * @private                                                                                                            // 1251\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.                                                         // 1252\n * @returns {ArrayBuffer} Returns the cloned array buffer.                                                             // 1253\n */                                                                                                                    // 1254\nfunction cloneArrayBuffer(arrayBuffer) {                                                                               // 1255\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);                                                    // 1256\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));                                                             // 1257\n  return result;                                                                                                       // 1258\n}                                                                                                                      // 1259\n                                                                                                                       // 1260\n/**                                                                                                                    // 1261\n * Creates a clone of `dataView`.                                                                                      // 1262\n *                                                                                                                     // 1263\n * @private                                                                                                            // 1264\n * @param {Object} dataView The data view to clone.                                                                    // 1265\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1266\n * @returns {Object} Returns the cloned data view.                                                                     // 1267\n */                                                                                                                    // 1268\nfunction cloneDataView(dataView, isDeep) {                                                                             // 1269\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;                                           // 1270\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);                                   // 1271\n}                                                                                                                      // 1272\n                                                                                                                       // 1273\n/**                                                                                                                    // 1274\n * Creates a clone of `map`.                                                                                           // 1275\n *                                                                                                                     // 1276\n * @private                                                                                                            // 1277\n * @param {Object} map The map to clone.                                                                               // 1278\n * @param {Function} cloneFunc The function to clone values.                                                           // 1279\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1280\n * @returns {Object} Returns the cloned map.                                                                           // 1281\n */                                                                                                                    // 1282\nfunction cloneMap(map, isDeep, cloneFunc) {                                                                            // 1283\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);                                             // 1284\n  return arrayReduce(array, addMapEntry, new map.constructor);                                                         // 1285\n}                                                                                                                      // 1286\n                                                                                                                       // 1287\n/**                                                                                                                    // 1288\n * Creates a clone of `regexp`.                                                                                        // 1289\n *                                                                                                                     // 1290\n * @private                                                                                                            // 1291\n * @param {Object} regexp The regexp to clone.                                                                         // 1292\n * @returns {Object} Returns the cloned regexp.                                                                        // 1293\n */                                                                                                                    // 1294\nfunction cloneRegExp(regexp) {                                                                                         // 1295\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));                                            // 1296\n  result.lastIndex = regexp.lastIndex;                                                                                 // 1297\n  return result;                                                                                                       // 1298\n}                                                                                                                      // 1299\n                                                                                                                       // 1300\n/**                                                                                                                    // 1301\n * Creates a clone of `set`.                                                                                           // 1302\n *                                                                                                                     // 1303\n * @private                                                                                                            // 1304\n * @param {Object} set The set to clone.                                                                               // 1305\n * @param {Function} cloneFunc The function to clone values.                                                           // 1306\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1307\n * @returns {Object} Returns the cloned set.                                                                           // 1308\n */                                                                                                                    // 1309\nfunction cloneSet(set, isDeep, cloneFunc) {                                                                            // 1310\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);                                             // 1311\n  return arrayReduce(array, addSetEntry, new set.constructor);                                                         // 1312\n}                                                                                                                      // 1313\n                                                                                                                       // 1314\n/**                                                                                                                    // 1315\n * Creates a clone of the `symbol` object.                                                                             // 1316\n *                                                                                                                     // 1317\n * @private                                                                                                            // 1318\n * @param {Object} symbol The symbol object to clone.                                                                  // 1319\n * @returns {Object} Returns the cloned symbol object.                                                                 // 1320\n */                                                                                                                    // 1321\nfunction cloneSymbol(symbol) {                                                                                         // 1322\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};                                                      // 1323\n}                                                                                                                      // 1324\n                                                                                                                       // 1325\n/**                                                                                                                    // 1326\n * Creates a clone of `typedArray`.                                                                                    // 1327\n *                                                                                                                     // 1328\n * @private                                                                                                            // 1329\n * @param {Object} typedArray The typed array to clone.                                                                // 1330\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1331\n * @returns {Object} Returns the cloned typed array.                                                                   // 1332\n */                                                                                                                    // 1333\nfunction cloneTypedArray(typedArray, isDeep) {                                                                         // 1334\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;                                       // 1335\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);                                 // 1336\n}                                                                                                                      // 1337\n                                                                                                                       // 1338\n/**                                                                                                                    // 1339\n * Copies the values of `source` to `array`.                                                                           // 1340\n *                                                                                                                     // 1341\n * @private                                                                                                            // 1342\n * @param {Array} source The array to copy values from.                                                                // 1343\n * @param {Array} [array=[]] The array to copy values to.                                                              // 1344\n * @returns {Array} Returns `array`.                                                                                   // 1345\n */                                                                                                                    // 1346\nfunction copyArray(source, array) {                                                                                    // 1347\n  var index = -1,                                                                                                      // 1348\n      length = source.length;                                                                                          // 1349\n                                                                                                                       // 1350\n  array || (array = Array(length));                                                                                    // 1351\n  while (++index < length) {                                                                                           // 1352\n    array[index] = source[index];                                                                                      // 1353\n  }                                                                                                                    // 1354\n  return array;                                                                                                        // 1355\n}                                                                                                                      // 1356\n                                                                                                                       // 1357\n/**                                                                                                                    // 1358\n * Copies properties of `source` to `object`.                                                                          // 1359\n *                                                                                                                     // 1360\n * @private                                                                                                            // 1361\n * @param {Object} source The object to copy properties from.                                                          // 1362\n * @param {Array} props The property identifiers to copy.                                                              // 1363\n * @param {Object} [object={}] The object to copy properties to.                                                       // 1364\n * @param {Function} [customizer] The function to customize copied values.                                             // 1365\n * @returns {Object} Returns `object`.                                                                                 // 1366\n */                                                                                                                    // 1367\nfunction copyObject(source, props, object, customizer) {                                                               // 1368\n  object || (object = {});                                                                                             // 1369\n                                                                                                                       // 1370\n  var index = -1,                                                                                                      // 1371\n      length = props.length;                                                                                           // 1372\n                                                                                                                       // 1373\n  while (++index < length) {                                                                                           // 1374\n    var key = props[index];                                                                                            // 1375\n                                                                                                                       // 1376\n    var newValue = customizer                                                                                          // 1377\n      ? customizer(object[key], source[key], key, object, source)                                                      // 1378\n      : undefined;                                                                                                     // 1379\n                                                                                                                       // 1380\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);                                         // 1381\n  }                                                                                                                    // 1382\n  return object;                                                                                                       // 1383\n}                                                                                                                      // 1384\n                                                                                                                       // 1385\n/**                                                                                                                    // 1386\n * Copies own symbol properties of `source` to `object`.                                                               // 1387\n *                                                                                                                     // 1388\n * @private                                                                                                            // 1389\n * @param {Object} source The object to copy symbols from.                                                             // 1390\n * @param {Object} [object={}] The object to copy symbols to.                                                          // 1391\n * @returns {Object} Returns `object`.                                                                                 // 1392\n */                                                                                                                    // 1393\nfunction copySymbols(source, object) {                                                                                 // 1394\n  return copyObject(source, getSymbols(source), object);                                                               // 1395\n}                                                                                                                      // 1396\n                                                                                                                       // 1397\n/**                                                                                                                    // 1398\n * Creates a function like `_.assign`.                                                                                 // 1399\n *                                                                                                                     // 1400\n * @private                                                                                                            // 1401\n * @param {Function} assigner The function to assign values.                                                           // 1402\n * @returns {Function} Returns the new assigner function.                                                              // 1403\n */                                                                                                                    // 1404\nfunction createAssigner(assigner) {                                                                                    // 1405\n  return baseRest(function(object, sources) {                                                                          // 1406\n    var index = -1,                                                                                                    // 1407\n        length = sources.length,                                                                                       // 1408\n        customizer = length > 1 ? sources[length - 1] : undefined,                                                     // 1409\n        guard = length > 2 ? sources[2] : undefined;                                                                   // 1410\n                                                                                                                       // 1411\n    customizer = (assigner.length > 3 && typeof customizer == 'function')                                              // 1412\n      ? (length--, customizer)                                                                                         // 1413\n      : undefined;                                                                                                     // 1414\n                                                                                                                       // 1415\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {                                                      // 1416\n      customizer = length < 3 ? undefined : customizer;                                                                // 1417\n      length = 1;                                                                                                      // 1418\n    }                                                                                                                  // 1419\n    object = Object(object);                                                                                           // 1420\n    while (++index < length) {                                                                                         // 1421\n      var source = sources[index];                                                                                     // 1422\n      if (source) {                                                                                                    // 1423\n        assigner(object, source, index, customizer);                                                                   // 1424\n      }                                                                                                                // 1425\n    }                                                                                                                  // 1426\n    return object;                                                                                                     // 1427\n  });                                                                                                                  // 1428\n}                                                                                                                      // 1429\n                                                                                                                       // 1430\n/**                                                                                                                    // 1431\n * Creates an array of own enumerable property names and symbols of `object`.                                          // 1432\n *                                                                                                                     // 1433\n * @private                                                                                                            // 1434\n * @param {Object} object The object to query.                                                                         // 1435\n * @returns {Array} Returns the array of property names and symbols.                                                   // 1436\n */                                                                                                                    // 1437\nfunction getAllKeys(object) {                                                                                          // 1438\n  return baseGetAllKeys(object, keys, getSymbols);                                                                     // 1439\n}                                                                                                                      // 1440\n                                                                                                                       // 1441\n/**                                                                                                                    // 1442\n * Gets the data for `map`.                                                                                            // 1443\n *                                                                                                                     // 1444\n * @private                                                                                                            // 1445\n * @param {Object} map The map to query.                                                                               // 1446\n * @param {string} key The reference key.                                                                              // 1447\n * @returns {*} Returns the map data.                                                                                  // 1448\n */                                                                                                                    // 1449\nfunction getMapData(map, key) {                                                                                        // 1450\n  var data = map.__data__;                                                                                             // 1451\n  return isKeyable(key)                                                                                                // 1452\n    ? data[typeof key == 'string' ? 'string' : 'hash']                                                                 // 1453\n    : data.map;                                                                                                        // 1454\n}                                                                                                                      // 1455\n                                                                                                                       // 1456\n/**                                                                                                                    // 1457\n * Gets the native function at `key` of `object`.                                                                      // 1458\n *                                                                                                                     // 1459\n * @private                                                                                                            // 1460\n * @param {Object} object The object to query.                                                                         // 1461\n * @param {string} key The key of the method to get.                                                                   // 1462\n * @returns {*} Returns the function if it's native, else `undefined`.                                                 // 1463\n */                                                                                                                    // 1464\nfunction getNative(object, key) {                                                                                      // 1465\n  var value = getValue(object, key);                                                                                   // 1466\n  return baseIsNative(value) ? value : undefined;                                                                      // 1467\n}                                                                                                                      // 1468\n                                                                                                                       // 1469\n/**                                                                                                                    // 1470\n * Creates an array of the own enumerable symbol properties of `object`.                                               // 1471\n *                                                                                                                     // 1472\n * @private                                                                                                            // 1473\n * @param {Object} object The object to query.                                                                         // 1474\n * @returns {Array} Returns the array of symbols.                                                                      // 1475\n */                                                                                                                    // 1476\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;                                     // 1477\n                                                                                                                       // 1478\n/**                                                                                                                    // 1479\n * Gets the `toStringTag` of `value`.                                                                                  // 1480\n *                                                                                                                     // 1481\n * @private                                                                                                            // 1482\n * @param {*} value The value to query.                                                                                // 1483\n * @returns {string} Returns the `toStringTag`.                                                                        // 1484\n */                                                                                                                    // 1485\nvar getTag = baseGetTag;                                                                                               // 1486\n                                                                                                                       // 1487\n// Fallback for data views, maps, sets, and weak maps in IE 11,                                                        // 1488\n// for data views in Edge < 14, and promises in Node.js.                                                               // 1489\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||                                           // 1490\n    (Map && getTag(new Map) != mapTag) ||                                                                              // 1491\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||                                                            // 1492\n    (Set && getTag(new Set) != setTag) ||                                                                              // 1493\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {                                                                  // 1494\n  getTag = function(value) {                                                                                           // 1495\n    var result = objectToString.call(value),                                                                           // 1496\n        Ctor = result == objectTag ? value.constructor : undefined,                                                    // 1497\n        ctorString = Ctor ? toSource(Ctor) : undefined;                                                                // 1498\n                                                                                                                       // 1499\n    if (ctorString) {                                                                                                  // 1500\n      switch (ctorString) {                                                                                            // 1501\n        case dataViewCtorString: return dataViewTag;                                                                   // 1502\n        case mapCtorString: return mapTag;                                                                             // 1503\n        case promiseCtorString: return promiseTag;                                                                     // 1504\n        case setCtorString: return setTag;                                                                             // 1505\n        case weakMapCtorString: return weakMapTag;                                                                     // 1506\n      }                                                                                                                // 1507\n    }                                                                                                                  // 1508\n    return result;                                                                                                     // 1509\n  };                                                                                                                   // 1510\n}                                                                                                                      // 1511\n                                                                                                                       // 1512\n/**                                                                                                                    // 1513\n * Initializes an array clone.                                                                                         // 1514\n *                                                                                                                     // 1515\n * @private                                                                                                            // 1516\n * @param {Array} array The array to clone.                                                                            // 1517\n * @returns {Array} Returns the initialized clone.                                                                     // 1518\n */                                                                                                                    // 1519\nfunction initCloneArray(array) {                                                                                       // 1520\n  var length = array.length,                                                                                           // 1521\n      result = array.constructor(length);                                                                              // 1522\n                                                                                                                       // 1523\n  // Add properties assigned by `RegExp#exec`.                                                                         // 1524\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {                                  // 1525\n    result.index = array.index;                                                                                        // 1526\n    result.input = array.input;                                                                                        // 1527\n  }                                                                                                                    // 1528\n  return result;                                                                                                       // 1529\n}                                                                                                                      // 1530\n                                                                                                                       // 1531\n/**                                                                                                                    // 1532\n * Initializes an object clone.                                                                                        // 1533\n *                                                                                                                     // 1534\n * @private                                                                                                            // 1535\n * @param {Object} object The object to clone.                                                                         // 1536\n * @returns {Object} Returns the initialized clone.                                                                    // 1537\n */                                                                                                                    // 1538\nfunction initCloneObject(object) {                                                                                     // 1539\n  return (typeof object.constructor == 'function' && !isPrototype(object))                                             // 1540\n    ? baseCreate(getPrototype(object))                                                                                 // 1541\n    : {};                                                                                                              // 1542\n}                                                                                                                      // 1543\n                                                                                                                       // 1544\n/**                                                                                                                    // 1545\n * Initializes an object clone based on its `toStringTag`.                                                             // 1546\n *                                                                                                                     // 1547\n * **Note:** This function only supports cloning values with tags of                                                   // 1548\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                        // 1549\n *                                                                                                                     // 1550\n * @private                                                                                                            // 1551\n * @param {Object} object The object to clone.                                                                         // 1552\n * @param {string} tag The `toStringTag` of the object to clone.                                                       // 1553\n * @param {Function} cloneFunc The function to clone values.                                                           // 1554\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 1555\n * @returns {Object} Returns the initialized clone.                                                                    // 1556\n */                                                                                                                    // 1557\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {                                                              // 1558\n  var Ctor = object.constructor;                                                                                       // 1559\n  switch (tag) {                                                                                                       // 1560\n    case arrayBufferTag:                                                                                               // 1561\n      return cloneArrayBuffer(object);                                                                                 // 1562\n                                                                                                                       // 1563\n    case boolTag:                                                                                                      // 1564\n    case dateTag:                                                                                                      // 1565\n      return new Ctor(+object);                                                                                        // 1566\n                                                                                                                       // 1567\n    case dataViewTag:                                                                                                  // 1568\n      return cloneDataView(object, isDeep);                                                                            // 1569\n                                                                                                                       // 1570\n    case float32Tag: case float64Tag:                                                                                  // 1571\n    case int8Tag: case int16Tag: case int32Tag:                                                                        // 1572\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:                                               // 1573\n      return cloneTypedArray(object, isDeep);                                                                          // 1574\n                                                                                                                       // 1575\n    case mapTag:                                                                                                       // 1576\n      return cloneMap(object, isDeep, cloneFunc);                                                                      // 1577\n                                                                                                                       // 1578\n    case numberTag:                                                                                                    // 1579\n    case stringTag:                                                                                                    // 1580\n      return new Ctor(object);                                                                                         // 1581\n                                                                                                                       // 1582\n    case regexpTag:                                                                                                    // 1583\n      return cloneRegExp(object);                                                                                      // 1584\n                                                                                                                       // 1585\n    case setTag:                                                                                                       // 1586\n      return cloneSet(object, isDeep, cloneFunc);                                                                      // 1587\n                                                                                                                       // 1588\n    case symbolTag:                                                                                                    // 1589\n      return cloneSymbol(object);                                                                                      // 1590\n  }                                                                                                                    // 1591\n}                                                                                                                      // 1592\n                                                                                                                       // 1593\n/**                                                                                                                    // 1594\n * Checks if `value` is a valid array-like index.                                                                      // 1595\n *                                                                                                                     // 1596\n * @private                                                                                                            // 1597\n * @param {*} value The value to check.                                                                                // 1598\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                        // 1599\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                        // 1600\n */                                                                                                                    // 1601\nfunction isIndex(value, length) {                                                                                      // 1602\n  length = length == null ? MAX_SAFE_INTEGER : length;                                                                 // 1603\n  return !!length &&                                                                                                   // 1604\n    (typeof value == 'number' || reIsUint.test(value)) &&                                                              // 1605\n    (value > -1 && value % 1 == 0 && value < length);                                                                  // 1606\n}                                                                                                                      // 1607\n                                                                                                                       // 1608\n/**                                                                                                                    // 1609\n * Checks if the given arguments are from an iteratee call.                                                            // 1610\n *                                                                                                                     // 1611\n * @private                                                                                                            // 1612\n * @param {*} value The potential iteratee value argument.                                                             // 1613\n * @param {*} index The potential iteratee index or key argument.                                                      // 1614\n * @param {*} object The potential iteratee object argument.                                                           // 1615\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,                                       // 1616\n *  else `false`.                                                                                                      // 1617\n */                                                                                                                    // 1618\nfunction isIterateeCall(value, index, object) {                                                                        // 1619\n  if (!isObject(object)) {                                                                                             // 1620\n    return false;                                                                                                      // 1621\n  }                                                                                                                    // 1622\n  var type = typeof index;                                                                                             // 1623\n  if (type == 'number'                                                                                                 // 1624\n        ? (isArrayLike(object) && isIndex(index, object.length))                                                       // 1625\n        : (type == 'string' && index in object)                                                                        // 1626\n      ) {                                                                                                              // 1627\n    return eq(object[index], value);                                                                                   // 1628\n  }                                                                                                                    // 1629\n  return false;                                                                                                        // 1630\n}                                                                                                                      // 1631\n                                                                                                                       // 1632\n/**                                                                                                                    // 1633\n * Checks if `value` is suitable for use as unique object key.                                                         // 1634\n *                                                                                                                     // 1635\n * @private                                                                                                            // 1636\n * @param {*} value The value to check.                                                                                // 1637\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.                                             // 1638\n */                                                                                                                    // 1639\nfunction isKeyable(value) {                                                                                            // 1640\n  var type = typeof value;                                                                                             // 1641\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')                               // 1642\n    ? (value !== '__proto__')                                                                                          // 1643\n    : (value === null);                                                                                                // 1644\n}                                                                                                                      // 1645\n                                                                                                                       // 1646\n/**                                                                                                                    // 1647\n * Checks if `func` has its source masked.                                                                             // 1648\n *                                                                                                                     // 1649\n * @private                                                                                                            // 1650\n * @param {Function} func The function to check.                                                                       // 1651\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.                                                // 1652\n */                                                                                                                    // 1653\nfunction isMasked(func) {                                                                                              // 1654\n  return !!maskSrcKey && (maskSrcKey in func);                                                                         // 1655\n}                                                                                                                      // 1656\n                                                                                                                       // 1657\n/**                                                                                                                    // 1658\n * Checks if `value` is likely a prototype object.                                                                     // 1659\n *                                                                                                                     // 1660\n * @private                                                                                                            // 1661\n * @param {*} value The value to check.                                                                                // 1662\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.                                          // 1663\n */                                                                                                                    // 1664\nfunction isPrototype(value) {                                                                                          // 1665\n  var Ctor = value && value.constructor,                                                                               // 1666\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;                                            // 1667\n                                                                                                                       // 1668\n  return value === proto;                                                                                              // 1669\n}                                                                                                                      // 1670\n                                                                                                                       // 1671\n/**                                                                                                                    // 1672\n * This function is like                                                                                               // 1673\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)                                        // 1674\n * except that it includes inherited enumerable properties.                                                            // 1675\n *                                                                                                                     // 1676\n * @private                                                                                                            // 1677\n * @param {Object} object The object to query.                                                                         // 1678\n * @returns {Array} Returns the array of property names.                                                               // 1679\n */                                                                                                                    // 1680\nfunction nativeKeysIn(object) {                                                                                        // 1681\n  var result = [];                                                                                                     // 1682\n  if (object != null) {                                                                                                // 1683\n    for (var key in Object(object)) {                                                                                  // 1684\n      result.push(key);                                                                                                // 1685\n    }                                                                                                                  // 1686\n  }                                                                                                                    // 1687\n  return result;                                                                                                       // 1688\n}                                                                                                                      // 1689\n                                                                                                                       // 1690\n/**                                                                                                                    // 1691\n * Converts `func` to its source code.                                                                                 // 1692\n *                                                                                                                     // 1693\n * @private                                                                                                            // 1694\n * @param {Function} func The function to process.                                                                     // 1695\n * @returns {string} Returns the source code.                                                                          // 1696\n */                                                                                                                    // 1697\nfunction toSource(func) {                                                                                              // 1698\n  if (func != null) {                                                                                                  // 1699\n    try {                                                                                                              // 1700\n      return funcToString.call(func);                                                                                  // 1701\n    } catch (e) {}                                                                                                     // 1702\n    try {                                                                                                              // 1703\n      return (func + '');                                                                                              // 1704\n    } catch (e) {}                                                                                                     // 1705\n  }                                                                                                                    // 1706\n  return '';                                                                                                           // 1707\n}                                                                                                                      // 1708\n                                                                                                                       // 1709\n/**                                                                                                                    // 1710\n * Performs a                                                                                                          // 1711\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)                                    // 1712\n * comparison between two values to determine if they are equivalent.                                                  // 1713\n *                                                                                                                     // 1714\n * @static                                                                                                             // 1715\n * @memberOf _                                                                                                         // 1716\n * @since 4.0.0                                                                                                        // 1717\n * @category Lang                                                                                                      // 1718\n * @param {*} value The value to compare.                                                                              // 1719\n * @param {*} other The other value to compare.                                                                        // 1720\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                       // 1721\n * @example                                                                                                            // 1722\n *                                                                                                                     // 1723\n * var object = { 'a': 1 };                                                                                            // 1724\n * var other = { 'a': 1 };                                                                                             // 1725\n *                                                                                                                     // 1726\n * _.eq(object, object);                                                                                               // 1727\n * // => true                                                                                                          // 1728\n *                                                                                                                     // 1729\n * _.eq(object, other);                                                                                                // 1730\n * // => false                                                                                                         // 1731\n *                                                                                                                     // 1732\n * _.eq('a', 'a');                                                                                                     // 1733\n * // => true                                                                                                          // 1734\n *                                                                                                                     // 1735\n * _.eq('a', Object('a'));                                                                                             // 1736\n * // => false                                                                                                         // 1737\n *                                                                                                                     // 1738\n * _.eq(NaN, NaN);                                                                                                     // 1739\n * // => true                                                                                                          // 1740\n */                                                                                                                    // 1741\nfunction eq(value, other) {                                                                                            // 1742\n  return value === other || (value !== value && other !== other);                                                      // 1743\n}                                                                                                                      // 1744\n                                                                                                                       // 1745\n/**                                                                                                                    // 1746\n * Checks if `value` is likely an `arguments` object.                                                                  // 1747\n *                                                                                                                     // 1748\n * @static                                                                                                             // 1749\n * @memberOf _                                                                                                         // 1750\n * @since 0.1.0                                                                                                        // 1751\n * @category Lang                                                                                                      // 1752\n * @param {*} value The value to check.                                                                                // 1753\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,                                              // 1754\n *  else `false`.                                                                                                      // 1755\n * @example                                                                                                            // 1756\n *                                                                                                                     // 1757\n * _.isArguments(function() { return arguments; }());                                                                  // 1758\n * // => true                                                                                                          // 1759\n *                                                                                                                     // 1760\n * _.isArguments([1, 2, 3]);                                                                                           // 1761\n * // => false                                                                                                         // 1762\n */                                                                                                                    // 1763\nfunction isArguments(value) {                                                                                          // 1764\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 1765\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&                                           // 1766\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);                            // 1767\n}                                                                                                                      // 1768\n                                                                                                                       // 1769\n/**                                                                                                                    // 1770\n * Checks if `value` is classified as an `Array` object.                                                               // 1771\n *                                                                                                                     // 1772\n * @static                                                                                                             // 1773\n * @memberOf _                                                                                                         // 1774\n * @since 0.1.0                                                                                                        // 1775\n * @category Lang                                                                                                      // 1776\n * @param {*} value The value to check.                                                                                // 1777\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.                                             // 1778\n * @example                                                                                                            // 1779\n *                                                                                                                     // 1780\n * _.isArray([1, 2, 3]);                                                                                               // 1781\n * // => true                                                                                                          // 1782\n *                                                                                                                     // 1783\n * _.isArray(document.body.children);                                                                                  // 1784\n * // => false                                                                                                         // 1785\n *                                                                                                                     // 1786\n * _.isArray('abc');                                                                                                   // 1787\n * // => false                                                                                                         // 1788\n *                                                                                                                     // 1789\n * _.isArray(_.noop);                                                                                                  // 1790\n * // => false                                                                                                         // 1791\n */                                                                                                                    // 1792\nvar isArray = Array.isArray;                                                                                           // 1793\n                                                                                                                       // 1794\n/**                                                                                                                    // 1795\n * Checks if `value` is array-like. A value is considered array-like if it's                                           // 1796\n * not a function and has a `value.length` that's an integer greater than or                                           // 1797\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.                                                   // 1798\n *                                                                                                                     // 1799\n * @static                                                                                                             // 1800\n * @memberOf _                                                                                                         // 1801\n * @since 4.0.0                                                                                                        // 1802\n * @category Lang                                                                                                      // 1803\n * @param {*} value The value to check.                                                                                // 1804\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                           // 1805\n * @example                                                                                                            // 1806\n *                                                                                                                     // 1807\n * _.isArrayLike([1, 2, 3]);                                                                                           // 1808\n * // => true                                                                                                          // 1809\n *                                                                                                                     // 1810\n * _.isArrayLike(document.body.children);                                                                              // 1811\n * // => true                                                                                                          // 1812\n *                                                                                                                     // 1813\n * _.isArrayLike('abc');                                                                                               // 1814\n * // => true                                                                                                          // 1815\n *                                                                                                                     // 1816\n * _.isArrayLike(_.noop);                                                                                              // 1817\n * // => false                                                                                                         // 1818\n */                                                                                                                    // 1819\nfunction isArrayLike(value) {                                                                                          // 1820\n  return value != null && isLength(value.length) && !isFunction(value);                                                // 1821\n}                                                                                                                      // 1822\n                                                                                                                       // 1823\n/**                                                                                                                    // 1824\n * This method is like `_.isArrayLike` except that it also checks if `value`                                           // 1825\n * is an object.                                                                                                       // 1826\n *                                                                                                                     // 1827\n * @static                                                                                                             // 1828\n * @memberOf _                                                                                                         // 1829\n * @since 4.0.0                                                                                                        // 1830\n * @category Lang                                                                                                      // 1831\n * @param {*} value The value to check.                                                                                // 1832\n * @returns {boolean} Returns `true` if `value` is an array-like object,                                               // 1833\n *  else `false`.                                                                                                      // 1834\n * @example                                                                                                            // 1835\n *                                                                                                                     // 1836\n * _.isArrayLikeObject([1, 2, 3]);                                                                                     // 1837\n * // => true                                                                                                          // 1838\n *                                                                                                                     // 1839\n * _.isArrayLikeObject(document.body.children);                                                                        // 1840\n * // => true                                                                                                          // 1841\n *                                                                                                                     // 1842\n * _.isArrayLikeObject('abc');                                                                                         // 1843\n * // => false                                                                                                         // 1844\n *                                                                                                                     // 1845\n * _.isArrayLikeObject(_.noop);                                                                                        // 1846\n * // => false                                                                                                         // 1847\n */                                                                                                                    // 1848\nfunction isArrayLikeObject(value) {                                                                                    // 1849\n  return isObjectLike(value) && isArrayLike(value);                                                                    // 1850\n}                                                                                                                      // 1851\n                                                                                                                       // 1852\n/**                                                                                                                    // 1853\n * Checks if `value` is a buffer.                                                                                      // 1854\n *                                                                                                                     // 1855\n * @static                                                                                                             // 1856\n * @memberOf _                                                                                                         // 1857\n * @since 4.3.0                                                                                                        // 1858\n * @category Lang                                                                                                      // 1859\n * @param {*} value The value to check.                                                                                // 1860\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.                                             // 1861\n * @example                                                                                                            // 1862\n *                                                                                                                     // 1863\n * _.isBuffer(new Buffer(2));                                                                                          // 1864\n * // => true                                                                                                          // 1865\n *                                                                                                                     // 1866\n * _.isBuffer(new Uint8Array(2));                                                                                      // 1867\n * // => false                                                                                                         // 1868\n */                                                                                                                    // 1869\nvar isBuffer = nativeIsBuffer || stubFalse;                                                                            // 1870\n                                                                                                                       // 1871\n/**                                                                                                                    // 1872\n * Checks if `value` is classified as a `Function` object.                                                             // 1873\n *                                                                                                                     // 1874\n * @static                                                                                                             // 1875\n * @memberOf _                                                                                                         // 1876\n * @since 0.1.0                                                                                                        // 1877\n * @category Lang                                                                                                      // 1878\n * @param {*} value The value to check.                                                                                // 1879\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.                                           // 1880\n * @example                                                                                                            // 1881\n *                                                                                                                     // 1882\n * _.isFunction(_);                                                                                                    // 1883\n * // => true                                                                                                          // 1884\n *                                                                                                                     // 1885\n * _.isFunction(/abc/);                                                                                                // 1886\n * // => false                                                                                                         // 1887\n */                                                                                                                    // 1888\nfunction isFunction(value) {                                                                                           // 1889\n  // The use of `Object#toString` avoids issues with the `typeof` operator                                             // 1890\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.                                      // 1891\n  var tag = isObject(value) ? objectToString.call(value) : '';                                                         // 1892\n  return tag == funcTag || tag == genTag;                                                                              // 1893\n}                                                                                                                      // 1894\n                                                                                                                       // 1895\n/**                                                                                                                    // 1896\n * Checks if `value` is a valid array-like length.                                                                     // 1897\n *                                                                                                                     // 1898\n * **Note:** This method is loosely based on                                                                           // 1899\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).                                             // 1900\n *                                                                                                                     // 1901\n * @static                                                                                                             // 1902\n * @memberOf _                                                                                                         // 1903\n * @since 4.0.0                                                                                                        // 1904\n * @category Lang                                                                                                      // 1905\n * @param {*} value The value to check.                                                                                // 1906\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                       // 1907\n * @example                                                                                                            // 1908\n *                                                                                                                     // 1909\n * _.isLength(3);                                                                                                      // 1910\n * // => true                                                                                                          // 1911\n *                                                                                                                     // 1912\n * _.isLength(Number.MIN_VALUE);                                                                                       // 1913\n * // => false                                                                                                         // 1914\n *                                                                                                                     // 1915\n * _.isLength(Infinity);                                                                                               // 1916\n * // => false                                                                                                         // 1917\n *                                                                                                                     // 1918\n * _.isLength('3');                                                                                                    // 1919\n * // => false                                                                                                         // 1920\n */                                                                                                                    // 1921\nfunction isLength(value) {                                                                                             // 1922\n  return typeof value == 'number' &&                                                                                   // 1923\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                                                         // 1924\n}                                                                                                                      // 1925\n                                                                                                                       // 1926\n/**                                                                                                                    // 1927\n * Checks if `value` is the                                                                                            // 1928\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)                      // 1929\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                      // 1930\n *                                                                                                                     // 1931\n * @static                                                                                                             // 1932\n * @memberOf _                                                                                                         // 1933\n * @since 0.1.0                                                                                                        // 1934\n * @category Lang                                                                                                      // 1935\n * @param {*} value The value to check.                                                                                // 1936\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                            // 1937\n * @example                                                                                                            // 1938\n *                                                                                                                     // 1939\n * _.isObject({});                                                                                                     // 1940\n * // => true                                                                                                          // 1941\n *                                                                                                                     // 1942\n * _.isObject([1, 2, 3]);                                                                                              // 1943\n * // => true                                                                                                          // 1944\n *                                                                                                                     // 1945\n * _.isObject(_.noop);                                                                                                 // 1946\n * // => true                                                                                                          // 1947\n *                                                                                                                     // 1948\n * _.isObject(null);                                                                                                   // 1949\n * // => false                                                                                                         // 1950\n */                                                                                                                    // 1951\nfunction isObject(value) {                                                                                             // 1952\n  var type = typeof value;                                                                                             // 1953\n  return !!value && (type == 'object' || type == 'function');                                                          // 1954\n}                                                                                                                      // 1955\n                                                                                                                       // 1956\n/**                                                                                                                    // 1957\n * Checks if `value` is object-like. A value is object-like if it's not `null`                                         // 1958\n * and has a `typeof` result of \"object\".                                                                              // 1959\n *                                                                                                                     // 1960\n * @static                                                                                                             // 1961\n * @memberOf _                                                                                                         // 1962\n * @since 4.0.0                                                                                                        // 1963\n * @category Lang                                                                                                      // 1964\n * @param {*} value The value to check.                                                                                // 1965\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 1966\n * @example                                                                                                            // 1967\n *                                                                                                                     // 1968\n * _.isObjectLike({});                                                                                                 // 1969\n * // => true                                                                                                          // 1970\n *                                                                                                                     // 1971\n * _.isObjectLike([1, 2, 3]);                                                                                          // 1972\n * // => true                                                                                                          // 1973\n *                                                                                                                     // 1974\n * _.isObjectLike(_.noop);                                                                                             // 1975\n * // => false                                                                                                         // 1976\n *                                                                                                                     // 1977\n * _.isObjectLike(null);                                                                                               // 1978\n * // => false                                                                                                         // 1979\n */                                                                                                                    // 1980\nfunction isObjectLike(value) {                                                                                         // 1981\n  return !!value && typeof value == 'object';                                                                          // 1982\n}                                                                                                                      // 1983\n                                                                                                                       // 1984\n/**                                                                                                                    // 1985\n * Checks if `value` is a plain object, that is, an object created by the                                              // 1986\n * `Object` constructor or one with a `[[Prototype]]` of `null`.                                                       // 1987\n *                                                                                                                     // 1988\n * @static                                                                                                             // 1989\n * @memberOf _                                                                                                         // 1990\n * @since 0.8.0                                                                                                        // 1991\n * @category Lang                                                                                                      // 1992\n * @param {*} value The value to check.                                                                                // 1993\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.                                       // 1994\n * @example                                                                                                            // 1995\n *                                                                                                                     // 1996\n * function Foo() {                                                                                                    // 1997\n *   this.a = 1;                                                                                                       // 1998\n * }                                                                                                                   // 1999\n *                                                                                                                     // 2000\n * _.isPlainObject(new Foo);                                                                                           // 2001\n * // => false                                                                                                         // 2002\n *                                                                                                                     // 2003\n * _.isPlainObject([1, 2, 3]);                                                                                         // 2004\n * // => false                                                                                                         // 2005\n *                                                                                                                     // 2006\n * _.isPlainObject({ 'x': 0, 'y': 0 });                                                                                // 2007\n * // => true                                                                                                          // 2008\n *                                                                                                                     // 2009\n * _.isPlainObject(Object.create(null));                                                                               // 2010\n * // => true                                                                                                          // 2011\n */                                                                                                                    // 2012\nfunction isPlainObject(value) {                                                                                        // 2013\n  if (!isObjectLike(value) ||                                                                                          // 2014\n      objectToString.call(value) != objectTag || isHostObject(value)) {                                                // 2015\n    return false;                                                                                                      // 2016\n  }                                                                                                                    // 2017\n  var proto = getPrototype(value);                                                                                     // 2018\n  if (proto === null) {                                                                                                // 2019\n    return true;                                                                                                       // 2020\n  }                                                                                                                    // 2021\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;                                           // 2022\n  return (typeof Ctor == 'function' &&                                                                                 // 2023\n    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);                                              // 2024\n}                                                                                                                      // 2025\n                                                                                                                       // 2026\n/**                                                                                                                    // 2027\n * Checks if `value` is classified as a typed array.                                                                   // 2028\n *                                                                                                                     // 2029\n * @static                                                                                                             // 2030\n * @memberOf _                                                                                                         // 2031\n * @since 3.0.0                                                                                                        // 2032\n * @category Lang                                                                                                      // 2033\n * @param {*} value The value to check.                                                                                // 2034\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.                                        // 2035\n * @example                                                                                                            // 2036\n *                                                                                                                     // 2037\n * _.isTypedArray(new Uint8Array);                                                                                     // 2038\n * // => true                                                                                                          // 2039\n *                                                                                                                     // 2040\n * _.isTypedArray([]);                                                                                                 // 2041\n * // => false                                                                                                         // 2042\n */                                                                                                                    // 2043\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;                                  // 2044\n                                                                                                                       // 2045\n/**                                                                                                                    // 2046\n * Converts `value` to a plain object flattening inherited enumerable string                                           // 2047\n * keyed properties of `value` to own properties of the plain object.                                                  // 2048\n *                                                                                                                     // 2049\n * @static                                                                                                             // 2050\n * @memberOf _                                                                                                         // 2051\n * @since 3.0.0                                                                                                        // 2052\n * @category Lang                                                                                                      // 2053\n * @param {*} value The value to convert.                                                                              // 2054\n * @returns {Object} Returns the converted plain object.                                                               // 2055\n * @example                                                                                                            // 2056\n *                                                                                                                     // 2057\n * function Foo() {                                                                                                    // 2058\n *   this.b = 2;                                                                                                       // 2059\n * }                                                                                                                   // 2060\n *                                                                                                                     // 2061\n * Foo.prototype.c = 3;                                                                                                // 2062\n *                                                                                                                     // 2063\n * _.assign({ 'a': 1 }, new Foo);                                                                                      // 2064\n * // => { 'a': 1, 'b': 2 }                                                                                            // 2065\n *                                                                                                                     // 2066\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));                                                                     // 2067\n * // => { 'a': 1, 'b': 2, 'c': 3 }                                                                                    // 2068\n */                                                                                                                    // 2069\nfunction toPlainObject(value) {                                                                                        // 2070\n  return copyObject(value, keysIn(value));                                                                             // 2071\n}                                                                                                                      // 2072\n                                                                                                                       // 2073\n/**                                                                                                                    // 2074\n * Creates an array of the own enumerable property names of `object`.                                                  // 2075\n *                                                                                                                     // 2076\n * **Note:** Non-object values are coerced to objects. See the                                                         // 2077\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)                                              // 2078\n * for more details.                                                                                                   // 2079\n *                                                                                                                     // 2080\n * @static                                                                                                             // 2081\n * @since 0.1.0                                                                                                        // 2082\n * @memberOf _                                                                                                         // 2083\n * @category Object                                                                                                    // 2084\n * @param {Object} object The object to query.                                                                         // 2085\n * @returns {Array} Returns the array of property names.                                                               // 2086\n * @example                                                                                                            // 2087\n *                                                                                                                     // 2088\n * function Foo() {                                                                                                    // 2089\n *   this.a = 1;                                                                                                       // 2090\n *   this.b = 2;                                                                                                       // 2091\n * }                                                                                                                   // 2092\n *                                                                                                                     // 2093\n * Foo.prototype.c = 3;                                                                                                // 2094\n *                                                                                                                     // 2095\n * _.keys(new Foo);                                                                                                    // 2096\n * // => ['a', 'b'] (iteration order is not guaranteed)                                                                // 2097\n *                                                                                                                     // 2098\n * _.keys('hi');                                                                                                       // 2099\n * // => ['0', '1']                                                                                                    // 2100\n */                                                                                                                    // 2101\nfunction keys(object) {                                                                                                // 2102\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);                                               // 2103\n}                                                                                                                      // 2104\n                                                                                                                       // 2105\n/**                                                                                                                    // 2106\n * Creates an array of the own and inherited enumerable property names of `object`.                                    // 2107\n *                                                                                                                     // 2108\n * **Note:** Non-object values are coerced to objects.                                                                 // 2109\n *                                                                                                                     // 2110\n * @static                                                                                                             // 2111\n * @memberOf _                                                                                                         // 2112\n * @since 3.0.0                                                                                                        // 2113\n * @category Object                                                                                                    // 2114\n * @param {Object} object The object to query.                                                                         // 2115\n * @returns {Array} Returns the array of property names.                                                               // 2116\n * @example                                                                                                            // 2117\n *                                                                                                                     // 2118\n * function Foo() {                                                                                                    // 2119\n *   this.a = 1;                                                                                                       // 2120\n *   this.b = 2;                                                                                                       // 2121\n * }                                                                                                                   // 2122\n *                                                                                                                     // 2123\n * Foo.prototype.c = 3;                                                                                                // 2124\n *                                                                                                                     // 2125\n * _.keysIn(new Foo);                                                                                                  // 2126\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)                                                           // 2127\n */                                                                                                                    // 2128\nfunction keysIn(object) {                                                                                              // 2129\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);                                       // 2130\n}                                                                                                                      // 2131\n                                                                                                                       // 2132\n/**                                                                                                                    // 2133\n * This method is like `_.assign` except that it recursively merges own and                                            // 2134\n * inherited enumerable string keyed properties of source objects into the                                             // 2135\n * destination object. Source properties that resolve to `undefined` are                                               // 2136\n * skipped if a destination value exists. Array and plain object properties                                            // 2137\n * are merged recursively. Other objects and value types are overridden by                                             // 2138\n * assignment. Source objects are applied from left to right. Subsequent                                               // 2139\n * sources overwrite property assignments of previous sources.                                                         // 2140\n *                                                                                                                     // 2141\n * **Note:** This method mutates `object`.                                                                             // 2142\n *                                                                                                                     // 2143\n * @static                                                                                                             // 2144\n * @memberOf _                                                                                                         // 2145\n * @since 0.5.0                                                                                                        // 2146\n * @category Object                                                                                                    // 2147\n * @param {Object} object The destination object.                                                                      // 2148\n * @param {...Object} [sources] The source objects.                                                                    // 2149\n * @returns {Object} Returns `object`.                                                                                 // 2150\n * @example                                                                                                            // 2151\n *                                                                                                                     // 2152\n * var object = {                                                                                                      // 2153\n *   'a': [{ 'b': 2 }, { 'd': 4 }]                                                                                     // 2154\n * };                                                                                                                  // 2155\n *                                                                                                                     // 2156\n * var other = {                                                                                                       // 2157\n *   'a': [{ 'c': 3 }, { 'e': 5 }]                                                                                     // 2158\n * };                                                                                                                  // 2159\n *                                                                                                                     // 2160\n * _.merge(object, other);                                                                                             // 2161\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }                                                             // 2162\n */                                                                                                                    // 2163\nvar merge = createAssigner(function(object, source, srcIndex) {                                                        // 2164\n  baseMerge(object, source, srcIndex);                                                                                 // 2165\n});                                                                                                                    // 2166\n                                                                                                                       // 2167\n/**                                                                                                                    // 2168\n * This method returns a new empty array.                                                                              // 2169\n *                                                                                                                     // 2170\n * @static                                                                                                             // 2171\n * @memberOf _                                                                                                         // 2172\n * @since 4.13.0                                                                                                       // 2173\n * @category Util                                                                                                      // 2174\n * @returns {Array} Returns the new empty array.                                                                       // 2175\n * @example                                                                                                            // 2176\n *                                                                                                                     // 2177\n * var arrays = _.times(2, _.stubArray);                                                                               // 2178\n *                                                                                                                     // 2179\n * console.log(arrays);                                                                                                // 2180\n * // => [[], []]                                                                                                      // 2181\n *                                                                                                                     // 2182\n * console.log(arrays[0] === arrays[1]);                                                                               // 2183\n * // => false                                                                                                         // 2184\n */                                                                                                                    // 2185\nfunction stubArray() {                                                                                                 // 2186\n  return [];                                                                                                           // 2187\n}                                                                                                                      // 2188\n                                                                                                                       // 2189\n/**                                                                                                                    // 2190\n * This method returns `false`.                                                                                        // 2191\n *                                                                                                                     // 2192\n * @static                                                                                                             // 2193\n * @memberOf _                                                                                                         // 2194\n * @since 4.13.0                                                                                                       // 2195\n * @category Util                                                                                                      // 2196\n * @returns {boolean} Returns `false`.                                                                                 // 2197\n * @example                                                                                                            // 2198\n *                                                                                                                     // 2199\n * _.times(2, _.stubFalse);                                                                                            // 2200\n * // => [false, false]                                                                                                // 2201\n */                                                                                                                    // 2202\nfunction stubFalse() {                                                                                                 // 2203\n  return false;                                                                                                        // 2204\n}                                                                                                                      // 2205\n                                                                                                                       // 2206\nmodule.exports = merge;                                                                                                // 2207\n                                                                                                                       // 2208\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.flatten\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.flatten/package.json                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.flatten\";                                                                                       // 1\nexports.version = \"4.4.0\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.flatten/index.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash (Custom Build) <https://lodash.com/>                                                                         // 2\n * Build: `lodash modularize exports=\"npm\" -o ./`                                                                      // 3\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>                                            // 4\n * Released under MIT license <https://lodash.com/license>                                                             // 5\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                                      // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/** Used as references for various `Number` constants. */                                                              // 10\nvar MAX_SAFE_INTEGER = 9007199254740991;                                                                               // 11\n                                                                                                                       // 12\n/** `Object#toString` result references. */                                                                            // 13\nvar argsTag = '[object Arguments]',                                                                                    // 14\n    funcTag = '[object Function]',                                                                                     // 15\n    genTag = '[object GeneratorFunction]';                                                                             // 16\n                                                                                                                       // 17\n/** Detect free variable `global` from Node.js. */                                                                     // 18\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;                            // 19\n                                                                                                                       // 20\n/** Detect free variable `self`. */                                                                                    // 21\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;                                      // 22\n                                                                                                                       // 23\n/** Used as a reference to the global object. */                                                                       // 24\nvar root = freeGlobal || freeSelf || Function('return this')();                                                        // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * Appends the elements of `values` to `array`.                                                                        // 28\n *                                                                                                                     // 29\n * @private                                                                                                            // 30\n * @param {Array} array The array to modify.                                                                           // 31\n * @param {Array} values The values to append.                                                                         // 32\n * @returns {Array} Returns `array`.                                                                                   // 33\n */                                                                                                                    // 34\nfunction arrayPush(array, values) {                                                                                    // 35\n  var index = -1,                                                                                                      // 36\n      length = values.length,                                                                                          // 37\n      offset = array.length;                                                                                           // 38\n                                                                                                                       // 39\n  while (++index < length) {                                                                                           // 40\n    array[offset + index] = values[index];                                                                             // 41\n  }                                                                                                                    // 42\n  return array;                                                                                                        // 43\n}                                                                                                                      // 44\n                                                                                                                       // 45\n/** Used for built-in method references. */                                                                            // 46\nvar objectProto = Object.prototype;                                                                                    // 47\n                                                                                                                       // 48\n/** Used to check objects for own properties. */                                                                       // 49\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 50\n                                                                                                                       // 51\n/**                                                                                                                    // 52\n * Used to resolve the                                                                                                 // 53\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)                          // 54\n * of values.                                                                                                          // 55\n */                                                                                                                    // 56\nvar objectToString = objectProto.toString;                                                                             // 57\n                                                                                                                       // 58\n/** Built-in value references. */                                                                                      // 59\nvar Symbol = root.Symbol,                                                                                              // 60\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,                                                           // 61\n    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;                                                 // 62\n                                                                                                                       // 63\n/**                                                                                                                    // 64\n * The base implementation of `_.flatten` with support for restricting flattening.                                     // 65\n *                                                                                                                     // 66\n * @private                                                                                                            // 67\n * @param {Array} array The array to flatten.                                                                          // 68\n * @param {number} depth The maximum recursion depth.                                                                  // 69\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.                                      // 70\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.                                        // 71\n * @param {Array} [result=[]] The initial result value.                                                                // 72\n * @returns {Array} Returns the new flattened array.                                                                   // 73\n */                                                                                                                    // 74\nfunction baseFlatten(array, depth, predicate, isStrict, result) {                                                      // 75\n  var index = -1,                                                                                                      // 76\n      length = array.length;                                                                                           // 77\n                                                                                                                       // 78\n  predicate || (predicate = isFlattenable);                                                                            // 79\n  result || (result = []);                                                                                             // 80\n                                                                                                                       // 81\n  while (++index < length) {                                                                                           // 82\n    var value = array[index];                                                                                          // 83\n    if (depth > 0 && predicate(value)) {                                                                               // 84\n      if (depth > 1) {                                                                                                 // 85\n        // Recursively flatten arrays (susceptible to call stack limits).                                              // 86\n        baseFlatten(value, depth - 1, predicate, isStrict, result);                                                    // 87\n      } else {                                                                                                         // 88\n        arrayPush(result, value);                                                                                      // 89\n      }                                                                                                                // 90\n    } else if (!isStrict) {                                                                                            // 91\n      result[result.length] = value;                                                                                   // 92\n    }                                                                                                                  // 93\n  }                                                                                                                    // 94\n  return result;                                                                                                       // 95\n}                                                                                                                      // 96\n                                                                                                                       // 97\n/**                                                                                                                    // 98\n * Checks if `value` is a flattenable `arguments` object or array.                                                     // 99\n *                                                                                                                     // 100\n * @private                                                                                                            // 101\n * @param {*} value The value to check.                                                                                // 102\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.                                          // 103\n */                                                                                                                    // 104\nfunction isFlattenable(value) {                                                                                        // 105\n  return isArray(value) || isArguments(value) ||                                                                       // 106\n    !!(spreadableSymbol && value && value[spreadableSymbol]);                                                          // 107\n}                                                                                                                      // 108\n                                                                                                                       // 109\n/**                                                                                                                    // 110\n * Flattens `array` a single level deep.                                                                               // 111\n *                                                                                                                     // 112\n * @static                                                                                                             // 113\n * @memberOf _                                                                                                         // 114\n * @since 0.1.0                                                                                                        // 115\n * @category Array                                                                                                     // 116\n * @param {Array} array The array to flatten.                                                                          // 117\n * @returns {Array} Returns the new flattened array.                                                                   // 118\n * @example                                                                                                            // 119\n *                                                                                                                     // 120\n * _.flatten([1, [2, [3, [4]], 5]]);                                                                                   // 121\n * // => [1, 2, [3, [4]], 5]                                                                                           // 122\n */                                                                                                                    // 123\nfunction flatten(array) {                                                                                              // 124\n  var length = array ? array.length : 0;                                                                               // 125\n  return length ? baseFlatten(array, 1) : [];                                                                          // 126\n}                                                                                                                      // 127\n                                                                                                                       // 128\n/**                                                                                                                    // 129\n * Checks if `value` is likely an `arguments` object.                                                                  // 130\n *                                                                                                                     // 131\n * @static                                                                                                             // 132\n * @memberOf _                                                                                                         // 133\n * @since 0.1.0                                                                                                        // 134\n * @category Lang                                                                                                      // 135\n * @param {*} value The value to check.                                                                                // 136\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,                                              // 137\n *  else `false`.                                                                                                      // 138\n * @example                                                                                                            // 139\n *                                                                                                                     // 140\n * _.isArguments(function() { return arguments; }());                                                                  // 141\n * // => true                                                                                                          // 142\n *                                                                                                                     // 143\n * _.isArguments([1, 2, 3]);                                                                                           // 144\n * // => false                                                                                                         // 145\n */                                                                                                                    // 146\nfunction isArguments(value) {                                                                                          // 147\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 148\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&                                           // 149\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);                            // 150\n}                                                                                                                      // 151\n                                                                                                                       // 152\n/**                                                                                                                    // 153\n * Checks if `value` is classified as an `Array` object.                                                               // 154\n *                                                                                                                     // 155\n * @static                                                                                                             // 156\n * @memberOf _                                                                                                         // 157\n * @since 0.1.0                                                                                                        // 158\n * @category Lang                                                                                                      // 159\n * @param {*} value The value to check.                                                                                // 160\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.                                             // 161\n * @example                                                                                                            // 162\n *                                                                                                                     // 163\n * _.isArray([1, 2, 3]);                                                                                               // 164\n * // => true                                                                                                          // 165\n *                                                                                                                     // 166\n * _.isArray(document.body.children);                                                                                  // 167\n * // => false                                                                                                         // 168\n *                                                                                                                     // 169\n * _.isArray('abc');                                                                                                   // 170\n * // => false                                                                                                         // 171\n *                                                                                                                     // 172\n * _.isArray(_.noop);                                                                                                  // 173\n * // => false                                                                                                         // 174\n */                                                                                                                    // 175\nvar isArray = Array.isArray;                                                                                           // 176\n                                                                                                                       // 177\n/**                                                                                                                    // 178\n * Checks if `value` is array-like. A value is considered array-like if it's                                           // 179\n * not a function and has a `value.length` that's an integer greater than or                                           // 180\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.                                                   // 181\n *                                                                                                                     // 182\n * @static                                                                                                             // 183\n * @memberOf _                                                                                                         // 184\n * @since 4.0.0                                                                                                        // 185\n * @category Lang                                                                                                      // 186\n * @param {*} value The value to check.                                                                                // 187\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                           // 188\n * @example                                                                                                            // 189\n *                                                                                                                     // 190\n * _.isArrayLike([1, 2, 3]);                                                                                           // 191\n * // => true                                                                                                          // 192\n *                                                                                                                     // 193\n * _.isArrayLike(document.body.children);                                                                              // 194\n * // => true                                                                                                          // 195\n *                                                                                                                     // 196\n * _.isArrayLike('abc');                                                                                               // 197\n * // => true                                                                                                          // 198\n *                                                                                                                     // 199\n * _.isArrayLike(_.noop);                                                                                              // 200\n * // => false                                                                                                         // 201\n */                                                                                                                    // 202\nfunction isArrayLike(value) {                                                                                          // 203\n  return value != null && isLength(value.length) && !isFunction(value);                                                // 204\n}                                                                                                                      // 205\n                                                                                                                       // 206\n/**                                                                                                                    // 207\n * This method is like `_.isArrayLike` except that it also checks if `value`                                           // 208\n * is an object.                                                                                                       // 209\n *                                                                                                                     // 210\n * @static                                                                                                             // 211\n * @memberOf _                                                                                                         // 212\n * @since 4.0.0                                                                                                        // 213\n * @category Lang                                                                                                      // 214\n * @param {*} value The value to check.                                                                                // 215\n * @returns {boolean} Returns `true` if `value` is an array-like object,                                               // 216\n *  else `false`.                                                                                                      // 217\n * @example                                                                                                            // 218\n *                                                                                                                     // 219\n * _.isArrayLikeObject([1, 2, 3]);                                                                                     // 220\n * // => true                                                                                                          // 221\n *                                                                                                                     // 222\n * _.isArrayLikeObject(document.body.children);                                                                        // 223\n * // => true                                                                                                          // 224\n *                                                                                                                     // 225\n * _.isArrayLikeObject('abc');                                                                                         // 226\n * // => false                                                                                                         // 227\n *                                                                                                                     // 228\n * _.isArrayLikeObject(_.noop);                                                                                        // 229\n * // => false                                                                                                         // 230\n */                                                                                                                    // 231\nfunction isArrayLikeObject(value) {                                                                                    // 232\n  return isObjectLike(value) && isArrayLike(value);                                                                    // 233\n}                                                                                                                      // 234\n                                                                                                                       // 235\n/**                                                                                                                    // 236\n * Checks if `value` is classified as a `Function` object.                                                             // 237\n *                                                                                                                     // 238\n * @static                                                                                                             // 239\n * @memberOf _                                                                                                         // 240\n * @since 0.1.0                                                                                                        // 241\n * @category Lang                                                                                                      // 242\n * @param {*} value The value to check.                                                                                // 243\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.                                           // 244\n * @example                                                                                                            // 245\n *                                                                                                                     // 246\n * _.isFunction(_);                                                                                                    // 247\n * // => true                                                                                                          // 248\n *                                                                                                                     // 249\n * _.isFunction(/abc/);                                                                                                // 250\n * // => false                                                                                                         // 251\n */                                                                                                                    // 252\nfunction isFunction(value) {                                                                                           // 253\n  // The use of `Object#toString` avoids issues with the `typeof` operator                                             // 254\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.                                      // 255\n  var tag = isObject(value) ? objectToString.call(value) : '';                                                         // 256\n  return tag == funcTag || tag == genTag;                                                                              // 257\n}                                                                                                                      // 258\n                                                                                                                       // 259\n/**                                                                                                                    // 260\n * Checks if `value` is a valid array-like length.                                                                     // 261\n *                                                                                                                     // 262\n * **Note:** This method is loosely based on                                                                           // 263\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).                                             // 264\n *                                                                                                                     // 265\n * @static                                                                                                             // 266\n * @memberOf _                                                                                                         // 267\n * @since 4.0.0                                                                                                        // 268\n * @category Lang                                                                                                      // 269\n * @param {*} value The value to check.                                                                                // 270\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                       // 271\n * @example                                                                                                            // 272\n *                                                                                                                     // 273\n * _.isLength(3);                                                                                                      // 274\n * // => true                                                                                                          // 275\n *                                                                                                                     // 276\n * _.isLength(Number.MIN_VALUE);                                                                                       // 277\n * // => false                                                                                                         // 278\n *                                                                                                                     // 279\n * _.isLength(Infinity);                                                                                               // 280\n * // => false                                                                                                         // 281\n *                                                                                                                     // 282\n * _.isLength('3');                                                                                                    // 283\n * // => false                                                                                                         // 284\n */                                                                                                                    // 285\nfunction isLength(value) {                                                                                             // 286\n  return typeof value == 'number' &&                                                                                   // 287\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                                                         // 288\n}                                                                                                                      // 289\n                                                                                                                       // 290\n/**                                                                                                                    // 291\n * Checks if `value` is the                                                                                            // 292\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)                      // 293\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                      // 294\n *                                                                                                                     // 295\n * @static                                                                                                             // 296\n * @memberOf _                                                                                                         // 297\n * @since 0.1.0                                                                                                        // 298\n * @category Lang                                                                                                      // 299\n * @param {*} value The value to check.                                                                                // 300\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                            // 301\n * @example                                                                                                            // 302\n *                                                                                                                     // 303\n * _.isObject({});                                                                                                     // 304\n * // => true                                                                                                          // 305\n *                                                                                                                     // 306\n * _.isObject([1, 2, 3]);                                                                                              // 307\n * // => true                                                                                                          // 308\n *                                                                                                                     // 309\n * _.isObject(_.noop);                                                                                                 // 310\n * // => true                                                                                                          // 311\n *                                                                                                                     // 312\n * _.isObject(null);                                                                                                   // 313\n * // => false                                                                                                         // 314\n */                                                                                                                    // 315\nfunction isObject(value) {                                                                                             // 316\n  var type = typeof value;                                                                                             // 317\n  return !!value && (type == 'object' || type == 'function');                                                          // 318\n}                                                                                                                      // 319\n                                                                                                                       // 320\n/**                                                                                                                    // 321\n * Checks if `value` is object-like. A value is object-like if it's not `null`                                         // 322\n * and has a `typeof` result of \"object\".                                                                              // 323\n *                                                                                                                     // 324\n * @static                                                                                                             // 325\n * @memberOf _                                                                                                         // 326\n * @since 4.0.0                                                                                                        // 327\n * @category Lang                                                                                                      // 328\n * @param {*} value The value to check.                                                                                // 329\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 330\n * @example                                                                                                            // 331\n *                                                                                                                     // 332\n * _.isObjectLike({});                                                                                                 // 333\n * // => true                                                                                                          // 334\n *                                                                                                                     // 335\n * _.isObjectLike([1, 2, 3]);                                                                                          // 336\n * // => true                                                                                                          // 337\n *                                                                                                                     // 338\n * _.isObjectLike(_.noop);                                                                                             // 339\n * // => false                                                                                                         // 340\n *                                                                                                                     // 341\n * _.isObjectLike(null);                                                                                               // 342\n * // => false                                                                                                         // 343\n */                                                                                                                    // 344\nfunction isObjectLike(value) {                                                                                         // 345\n  return !!value && typeof value == 'object';                                                                          // 346\n}                                                                                                                      // 347\n                                                                                                                       // 348\nmodule.exports = flatten;                                                                                              // 349\n                                                                                                                       // 350\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.isnumber\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.isnumber/package.json                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.isnumber\";                                                                                      // 1\nexports.version = \"3.0.3\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.isnumber/index.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash 3.0.3 (Custom Build) <https://lodash.com/>                                                                   // 2\n * Build: `lodash modularize exports=\"npm\" -o ./`                                                                      // 3\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>                                                // 4\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 5\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                            // 6\n * Available under MIT license <https://lodash.com/license>                                                            // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/** `Object#toString` result references. */                                                                            // 10\nvar numberTag = '[object Number]';                                                                                     // 11\n                                                                                                                       // 12\n/** Used for built-in method references. */                                                                            // 13\nvar objectProto = Object.prototype;                                                                                    // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)      // 17\n * of values.                                                                                                          // 18\n */                                                                                                                    // 19\nvar objectToString = objectProto.toString;                                                                             // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Checks if `value` is object-like. A value is object-like if it's not `null`                                         // 23\n * and has a `typeof` result of \"object\".                                                                              // 24\n *                                                                                                                     // 25\n * @static                                                                                                             // 26\n * @memberOf _                                                                                                         // 27\n * @category Lang                                                                                                      // 28\n * @param {*} value The value to check.                                                                                // 29\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 30\n * @example                                                                                                            // 31\n *                                                                                                                     // 32\n * _.isObjectLike({});                                                                                                 // 33\n * // => true                                                                                                          // 34\n *                                                                                                                     // 35\n * _.isObjectLike([1, 2, 3]);                                                                                          // 36\n * // => true                                                                                                          // 37\n *                                                                                                                     // 38\n * _.isObjectLike(_.noop);                                                                                             // 39\n * // => false                                                                                                         // 40\n *                                                                                                                     // 41\n * _.isObjectLike(null);                                                                                               // 42\n * // => false                                                                                                         // 43\n */                                                                                                                    // 44\nfunction isObjectLike(value) {                                                                                         // 45\n  return !!value && typeof value == 'object';                                                                          // 46\n}                                                                                                                      // 47\n                                                                                                                       // 48\n/**                                                                                                                    // 49\n * Checks if `value` is classified as a `Number` primitive or object.                                                  // 50\n *                                                                                                                     // 51\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified                                       // 52\n * as numbers, use the `_.isFinite` method.                                                                            // 53\n *                                                                                                                     // 54\n * @static                                                                                                             // 55\n * @memberOf _                                                                                                         // 56\n * @category Lang                                                                                                      // 57\n * @param {*} value The value to check.                                                                                // 58\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                                 // 59\n * @example                                                                                                            // 60\n *                                                                                                                     // 61\n * _.isNumber(3);                                                                                                      // 62\n * // => true                                                                                                          // 63\n *                                                                                                                     // 64\n * _.isNumber(Number.MIN_VALUE);                                                                                       // 65\n * // => true                                                                                                          // 66\n *                                                                                                                     // 67\n * _.isNumber(Infinity);                                                                                               // 68\n * // => true                                                                                                          // 69\n *                                                                                                                     // 70\n * _.isNumber('3');                                                                                                    // 71\n * // => false                                                                                                         // 72\n */                                                                                                                    // 73\nfunction isNumber(value) {                                                                                             // 74\n  return typeof value == 'number' ||                                                                                   // 75\n    (isObjectLike(value) && objectToString.call(value) == numberTag);                                                  // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\nmodule.exports = isNumber;                                                                                             // 79\n                                                                                                                       // 80\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.isequal\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.isequal/package.json                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.isequal\";                                                                                       // 1\nexports.version = \"4.4.0\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.isequal/index.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash (Custom Build) <https://lodash.com/>                                                                         // 2\n * Build: `lodash modularize exports=\"npm\" -o ./`                                                                      // 3\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>                                            // 4\n * Released under MIT license <https://lodash.com/license>                                                             // 5\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                                      // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/** Used as the size to enable large array optimizations. */                                                           // 10\nvar LARGE_ARRAY_SIZE = 200;                                                                                            // 11\n                                                                                                                       // 12\n/** Used to stand-in for `undefined` hash values. */                                                                   // 13\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';                                                                      // 14\n                                                                                                                       // 15\n/** Used to compose bitmasks for comparison styles. */                                                                 // 16\nvar UNORDERED_COMPARE_FLAG = 1,                                                                                        // 17\n    PARTIAL_COMPARE_FLAG = 2;                                                                                          // 18\n                                                                                                                       // 19\n/** Used as references for various `Number` constants. */                                                              // 20\nvar MAX_SAFE_INTEGER = 9007199254740991;                                                                               // 21\n                                                                                                                       // 22\n/** `Object#toString` result references. */                                                                            // 23\nvar argsTag = '[object Arguments]',                                                                                    // 24\n    arrayTag = '[object Array]',                                                                                       // 25\n    boolTag = '[object Boolean]',                                                                                      // 26\n    dateTag = '[object Date]',                                                                                         // 27\n    errorTag = '[object Error]',                                                                                       // 28\n    funcTag = '[object Function]',                                                                                     // 29\n    genTag = '[object GeneratorFunction]',                                                                             // 30\n    mapTag = '[object Map]',                                                                                           // 31\n    numberTag = '[object Number]',                                                                                     // 32\n    objectTag = '[object Object]',                                                                                     // 33\n    promiseTag = '[object Promise]',                                                                                   // 34\n    regexpTag = '[object RegExp]',                                                                                     // 35\n    setTag = '[object Set]',                                                                                           // 36\n    stringTag = '[object String]',                                                                                     // 37\n    symbolTag = '[object Symbol]',                                                                                     // 38\n    weakMapTag = '[object WeakMap]';                                                                                   // 39\n                                                                                                                       // 40\nvar arrayBufferTag = '[object ArrayBuffer]',                                                                           // 41\n    dataViewTag = '[object DataView]',                                                                                 // 42\n    float32Tag = '[object Float32Array]',                                                                              // 43\n    float64Tag = '[object Float64Array]',                                                                              // 44\n    int8Tag = '[object Int8Array]',                                                                                    // 45\n    int16Tag = '[object Int16Array]',                                                                                  // 46\n    int32Tag = '[object Int32Array]',                                                                                  // 47\n    uint8Tag = '[object Uint8Array]',                                                                                  // 48\n    uint8ClampedTag = '[object Uint8ClampedArray]',                                                                    // 49\n    uint16Tag = '[object Uint16Array]',                                                                                // 50\n    uint32Tag = '[object Uint32Array]';                                                                                // 51\n                                                                                                                       // 52\n/**                                                                                                                    // 53\n * Used to match `RegExp`                                                                                              // 54\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).                                      // 55\n */                                                                                                                    // 56\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;                                                                              // 57\n                                                                                                                       // 58\n/** Used to detect host constructors (Safari). */                                                                      // 59\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;                                                                      // 60\n                                                                                                                       // 61\n/** Used to detect unsigned integer values. */                                                                         // 62\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;                                                                                     // 63\n                                                                                                                       // 64\n/** Used to identify `toStringTag` values of typed arrays. */                                                          // 65\nvar typedArrayTags = {};                                                                                               // 66\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =                                                              // 67\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =                                                                   // 68\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =                                                                  // 69\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =                                                          // 70\ntypedArrayTags[uint32Tag] = true;                                                                                      // 71\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =                                                                   // 72\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =                                                             // 73\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =                                                                // 74\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =                                                                   // 75\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =                                                                   // 76\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =                                                                // 77\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =                                                                   // 78\ntypedArrayTags[weakMapTag] = false;                                                                                    // 79\n                                                                                                                       // 80\n/** Detect free variable `global` from Node.js. */                                                                     // 81\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;                            // 82\n                                                                                                                       // 83\n/** Detect free variable `self`. */                                                                                    // 84\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;                                      // 85\n                                                                                                                       // 86\n/** Used as a reference to the global object. */                                                                       // 87\nvar root = freeGlobal || freeSelf || Function('return this')();                                                        // 88\n                                                                                                                       // 89\n/** Detect free variable `exports`. */                                                                                 // 90\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;                               // 91\n                                                                                                                       // 92\n/** Detect free variable `module`. */                                                                                  // 93\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;                     // 94\n                                                                                                                       // 95\n/** Detect the popular CommonJS extension `module.exports`. */                                                         // 96\nvar moduleExports = freeModule && freeModule.exports === freeExports;                                                  // 97\n                                                                                                                       // 98\n/** Detect free variable `process` from Node.js. */                                                                    // 99\nvar freeProcess = moduleExports && freeGlobal.process;                                                                 // 100\n                                                                                                                       // 101\n/** Used to access faster Node.js helpers. */                                                                          // 102\nvar nodeUtil = (function() {                                                                                           // 103\n  try {                                                                                                                // 104\n    return freeProcess && freeProcess.binding('util');                                                                 // 105\n  } catch (e) {}                                                                                                       // 106\n}());                                                                                                                  // 107\n                                                                                                                       // 108\n/* Node.js helper references. */                                                                                       // 109\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;                                                              // 110\n                                                                                                                       // 111\n/**                                                                                                                    // 112\n * A specialized version of `_.some` for arrays without support for iteratee                                           // 113\n * shorthands.                                                                                                         // 114\n *                                                                                                                     // 115\n * @private                                                                                                            // 116\n * @param {Array} [array] The array to iterate over.                                                                   // 117\n * @param {Function} predicate The function invoked per iteration.                                                     // 118\n * @returns {boolean} Returns `true` if any element passes the predicate check,                                        // 119\n *  else `false`.                                                                                                      // 120\n */                                                                                                                    // 121\nfunction arraySome(array, predicate) {                                                                                 // 122\n  var index = -1,                                                                                                      // 123\n      length = array ? array.length : 0;                                                                               // 124\n                                                                                                                       // 125\n  while (++index < length) {                                                                                           // 126\n    if (predicate(array[index], index, array)) {                                                                       // 127\n      return true;                                                                                                     // 128\n    }                                                                                                                  // 129\n  }                                                                                                                    // 130\n  return false;                                                                                                        // 131\n}                                                                                                                      // 132\n                                                                                                                       // 133\n/**                                                                                                                    // 134\n * The base implementation of `_.times` without support for iteratee shorthands                                        // 135\n * or max array length checks.                                                                                         // 136\n *                                                                                                                     // 137\n * @private                                                                                                            // 138\n * @param {number} n The number of times to invoke `iteratee`.                                                         // 139\n * @param {Function} iteratee The function invoked per iteration.                                                      // 140\n * @returns {Array} Returns the array of results.                                                                      // 141\n */                                                                                                                    // 142\nfunction baseTimes(n, iteratee) {                                                                                      // 143\n  var index = -1,                                                                                                      // 144\n      result = Array(n);                                                                                               // 145\n                                                                                                                       // 146\n  while (++index < n) {                                                                                                // 147\n    result[index] = iteratee(index);                                                                                   // 148\n  }                                                                                                                    // 149\n  return result;                                                                                                       // 150\n}                                                                                                                      // 151\n                                                                                                                       // 152\n/**                                                                                                                    // 153\n * The base implementation of `_.unary` without support for storing metadata.                                          // 154\n *                                                                                                                     // 155\n * @private                                                                                                            // 156\n * @param {Function} func The function to cap arguments for.                                                           // 157\n * @returns {Function} Returns the new capped function.                                                                // 158\n */                                                                                                                    // 159\nfunction baseUnary(func) {                                                                                             // 160\n  return function(value) {                                                                                             // 161\n    return func(value);                                                                                                // 162\n  };                                                                                                                   // 163\n}                                                                                                                      // 164\n                                                                                                                       // 165\n/**                                                                                                                    // 166\n * Gets the value at `key` of `object`.                                                                                // 167\n *                                                                                                                     // 168\n * @private                                                                                                            // 169\n * @param {Object} [object] The object to query.                                                                       // 170\n * @param {string} key The key of the property to get.                                                                 // 171\n * @returns {*} Returns the property value.                                                                            // 172\n */                                                                                                                    // 173\nfunction getValue(object, key) {                                                                                       // 174\n  return object == null ? undefined : object[key];                                                                     // 175\n}                                                                                                                      // 176\n                                                                                                                       // 177\n/**                                                                                                                    // 178\n * Checks if `value` is a host object in IE < 9.                                                                       // 179\n *                                                                                                                     // 180\n * @private                                                                                                            // 181\n * @param {*} value The value to check.                                                                                // 182\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.                                        // 183\n */                                                                                                                    // 184\nfunction isHostObject(value) {                                                                                         // 185\n  // Many host objects are `Object` objects that can coerce to strings                                                 // 186\n  // despite having improperly defined `toString` methods.                                                             // 187\n  var result = false;                                                                                                  // 188\n  if (value != null && typeof value.toString != 'function') {                                                          // 189\n    try {                                                                                                              // 190\n      result = !!(value + '');                                                                                         // 191\n    } catch (e) {}                                                                                                     // 192\n  }                                                                                                                    // 193\n  return result;                                                                                                       // 194\n}                                                                                                                      // 195\n                                                                                                                       // 196\n/**                                                                                                                    // 197\n * Converts `map` to its key-value pairs.                                                                              // 198\n *                                                                                                                     // 199\n * @private                                                                                                            // 200\n * @param {Object} map The map to convert.                                                                             // 201\n * @returns {Array} Returns the key-value pairs.                                                                       // 202\n */                                                                                                                    // 203\nfunction mapToArray(map) {                                                                                             // 204\n  var index = -1,                                                                                                      // 205\n      result = Array(map.size);                                                                                        // 206\n                                                                                                                       // 207\n  map.forEach(function(value, key) {                                                                                   // 208\n    result[++index] = [key, value];                                                                                    // 209\n  });                                                                                                                  // 210\n  return result;                                                                                                       // 211\n}                                                                                                                      // 212\n                                                                                                                       // 213\n/**                                                                                                                    // 214\n * Creates a unary function that invokes `func` with its argument transformed.                                         // 215\n *                                                                                                                     // 216\n * @private                                                                                                            // 217\n * @param {Function} func The function to wrap.                                                                        // 218\n * @param {Function} transform The argument transform.                                                                 // 219\n * @returns {Function} Returns the new function.                                                                       // 220\n */                                                                                                                    // 221\nfunction overArg(func, transform) {                                                                                    // 222\n  return function(arg) {                                                                                               // 223\n    return func(transform(arg));                                                                                       // 224\n  };                                                                                                                   // 225\n}                                                                                                                      // 226\n                                                                                                                       // 227\n/**                                                                                                                    // 228\n * Converts `set` to an array of its values.                                                                           // 229\n *                                                                                                                     // 230\n * @private                                                                                                            // 231\n * @param {Object} set The set to convert.                                                                             // 232\n * @returns {Array} Returns the values.                                                                                // 233\n */                                                                                                                    // 234\nfunction setToArray(set) {                                                                                             // 235\n  var index = -1,                                                                                                      // 236\n      result = Array(set.size);                                                                                        // 237\n                                                                                                                       // 238\n  set.forEach(function(value) {                                                                                        // 239\n    result[++index] = value;                                                                                           // 240\n  });                                                                                                                  // 241\n  return result;                                                                                                       // 242\n}                                                                                                                      // 243\n                                                                                                                       // 244\n/** Used for built-in method references. */                                                                            // 245\nvar arrayProto = Array.prototype,                                                                                      // 246\n    funcProto = Function.prototype,                                                                                    // 247\n    objectProto = Object.prototype;                                                                                    // 248\n                                                                                                                       // 249\n/** Used to detect overreaching core-js shims. */                                                                      // 250\nvar coreJsData = root['__core-js_shared__'];                                                                           // 251\n                                                                                                                       // 252\n/** Used to detect methods masquerading as native. */                                                                  // 253\nvar maskSrcKey = (function() {                                                                                         // 254\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');                            // 255\n  return uid ? ('Symbol(src)_1.' + uid) : '';                                                                          // 256\n}());                                                                                                                  // 257\n                                                                                                                       // 258\n/** Used to resolve the decompiled source of functions. */                                                             // 259\nvar funcToString = funcProto.toString;                                                                                 // 260\n                                                                                                                       // 261\n/** Used to check objects for own properties. */                                                                       // 262\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 263\n                                                                                                                       // 264\n/**                                                                                                                    // 265\n * Used to resolve the                                                                                                 // 266\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)                          // 267\n * of values.                                                                                                          // 268\n */                                                                                                                    // 269\nvar objectToString = objectProto.toString;                                                                             // 270\n                                                                                                                       // 271\n/** Used to detect if a method is native. */                                                                           // 272\nvar reIsNative = RegExp('^' +                                                                                          // 273\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')                                                      // 274\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'                                    // 275\n);                                                                                                                     // 276\n                                                                                                                       // 277\n/** Built-in value references. */                                                                                      // 278\nvar Symbol = root.Symbol,                                                                                              // 279\n    Uint8Array = root.Uint8Array,                                                                                      // 280\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,                                                           // 281\n    splice = arrayProto.splice;                                                                                        // 282\n                                                                                                                       // 283\n/* Built-in method references for those with the same name as other `lodash` methods. */                               // 284\nvar nativeKeys = overArg(Object.keys, Object);                                                                         // 285\n                                                                                                                       // 286\n/* Built-in method references that are verified to be native. */                                                       // 287\nvar DataView = getNative(root, 'DataView'),                                                                            // 288\n    Map = getNative(root, 'Map'),                                                                                      // 289\n    Promise = getNative(root, 'Promise'),                                                                              // 290\n    Set = getNative(root, 'Set'),                                                                                      // 291\n    WeakMap = getNative(root, 'WeakMap'),                                                                              // 292\n    nativeCreate = getNative(Object, 'create');                                                                        // 293\n                                                                                                                       // 294\n/** Used to detect maps, sets, and weakmaps. */                                                                        // 295\nvar dataViewCtorString = toSource(DataView),                                                                           // 296\n    mapCtorString = toSource(Map),                                                                                     // 297\n    promiseCtorString = toSource(Promise),                                                                             // 298\n    setCtorString = toSource(Set),                                                                                     // 299\n    weakMapCtorString = toSource(WeakMap);                                                                             // 300\n                                                                                                                       // 301\n/** Used to convert symbols to primitives and strings. */                                                              // 302\nvar symbolProto = Symbol ? Symbol.prototype : undefined,                                                               // 303\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;                                                     // 304\n                                                                                                                       // 305\n/**                                                                                                                    // 306\n * Creates a hash object.                                                                                              // 307\n *                                                                                                                     // 308\n * @private                                                                                                            // 309\n * @constructor                                                                                                        // 310\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 311\n */                                                                                                                    // 312\nfunction Hash(entries) {                                                                                               // 313\n  var index = -1,                                                                                                      // 314\n      length = entries ? entries.length : 0;                                                                           // 315\n                                                                                                                       // 316\n  this.clear();                                                                                                        // 317\n  while (++index < length) {                                                                                           // 318\n    var entry = entries[index];                                                                                        // 319\n    this.set(entry[0], entry[1]);                                                                                      // 320\n  }                                                                                                                    // 321\n}                                                                                                                      // 322\n                                                                                                                       // 323\n/**                                                                                                                    // 324\n * Removes all key-value entries from the hash.                                                                        // 325\n *                                                                                                                     // 326\n * @private                                                                                                            // 327\n * @name clear                                                                                                         // 328\n * @memberOf Hash                                                                                                      // 329\n */                                                                                                                    // 330\nfunction hashClear() {                                                                                                 // 331\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};                                                              // 332\n}                                                                                                                      // 333\n                                                                                                                       // 334\n/**                                                                                                                    // 335\n * Removes `key` and its value from the hash.                                                                          // 336\n *                                                                                                                     // 337\n * @private                                                                                                            // 338\n * @name delete                                                                                                        // 339\n * @memberOf Hash                                                                                                      // 340\n * @param {Object} hash The hash to modify.                                                                            // 341\n * @param {string} key The key of the value to remove.                                                                 // 342\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 343\n */                                                                                                                    // 344\nfunction hashDelete(key) {                                                                                             // 345\n  return this.has(key) && delete this.__data__[key];                                                                   // 346\n}                                                                                                                      // 347\n                                                                                                                       // 348\n/**                                                                                                                    // 349\n * Gets the hash value for `key`.                                                                                      // 350\n *                                                                                                                     // 351\n * @private                                                                                                            // 352\n * @name get                                                                                                           // 353\n * @memberOf Hash                                                                                                      // 354\n * @param {string} key The key of the value to get.                                                                    // 355\n * @returns {*} Returns the entry value.                                                                               // 356\n */                                                                                                                    // 357\nfunction hashGet(key) {                                                                                                // 358\n  var data = this.__data__;                                                                                            // 359\n  if (nativeCreate) {                                                                                                  // 360\n    var result = data[key];                                                                                            // 361\n    return result === HASH_UNDEFINED ? undefined : result;                                                             // 362\n  }                                                                                                                    // 363\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;                                                       // 364\n}                                                                                                                      // 365\n                                                                                                                       // 366\n/**                                                                                                                    // 367\n * Checks if a hash value for `key` exists.                                                                            // 368\n *                                                                                                                     // 369\n * @private                                                                                                            // 370\n * @name has                                                                                                           // 371\n * @memberOf Hash                                                                                                      // 372\n * @param {string} key The key of the entry to check.                                                                  // 373\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 374\n */                                                                                                                    // 375\nfunction hashHas(key) {                                                                                                // 376\n  var data = this.__data__;                                                                                            // 377\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);                                      // 378\n}                                                                                                                      // 379\n                                                                                                                       // 380\n/**                                                                                                                    // 381\n * Sets the hash `key` to `value`.                                                                                     // 382\n *                                                                                                                     // 383\n * @private                                                                                                            // 384\n * @name set                                                                                                           // 385\n * @memberOf Hash                                                                                                      // 386\n * @param {string} key The key of the value to set.                                                                    // 387\n * @param {*} value The value to set.                                                                                  // 388\n * @returns {Object} Returns the hash instance.                                                                        // 389\n */                                                                                                                    // 390\nfunction hashSet(key, value) {                                                                                         // 391\n  var data = this.__data__;                                                                                            // 392\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;                                          // 393\n  return this;                                                                                                         // 394\n}                                                                                                                      // 395\n                                                                                                                       // 396\n// Add methods to `Hash`.                                                                                              // 397\nHash.prototype.clear = hashClear;                                                                                      // 398\nHash.prototype['delete'] = hashDelete;                                                                                 // 399\nHash.prototype.get = hashGet;                                                                                          // 400\nHash.prototype.has = hashHas;                                                                                          // 401\nHash.prototype.set = hashSet;                                                                                          // 402\n                                                                                                                       // 403\n/**                                                                                                                    // 404\n * Creates an list cache object.                                                                                       // 405\n *                                                                                                                     // 406\n * @private                                                                                                            // 407\n * @constructor                                                                                                        // 408\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 409\n */                                                                                                                    // 410\nfunction ListCache(entries) {                                                                                          // 411\n  var index = -1,                                                                                                      // 412\n      length = entries ? entries.length : 0;                                                                           // 413\n                                                                                                                       // 414\n  this.clear();                                                                                                        // 415\n  while (++index < length) {                                                                                           // 416\n    var entry = entries[index];                                                                                        // 417\n    this.set(entry[0], entry[1]);                                                                                      // 418\n  }                                                                                                                    // 419\n}                                                                                                                      // 420\n                                                                                                                       // 421\n/**                                                                                                                    // 422\n * Removes all key-value entries from the list cache.                                                                  // 423\n *                                                                                                                     // 424\n * @private                                                                                                            // 425\n * @name clear                                                                                                         // 426\n * @memberOf ListCache                                                                                                 // 427\n */                                                                                                                    // 428\nfunction listCacheClear() {                                                                                            // 429\n  this.__data__ = [];                                                                                                  // 430\n}                                                                                                                      // 431\n                                                                                                                       // 432\n/**                                                                                                                    // 433\n * Removes `key` and its value from the list cache.                                                                    // 434\n *                                                                                                                     // 435\n * @private                                                                                                            // 436\n * @name delete                                                                                                        // 437\n * @memberOf ListCache                                                                                                 // 438\n * @param {string} key The key of the value to remove.                                                                 // 439\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 440\n */                                                                                                                    // 441\nfunction listCacheDelete(key) {                                                                                        // 442\n  var data = this.__data__,                                                                                            // 443\n      index = assocIndexOf(data, key);                                                                                 // 444\n                                                                                                                       // 445\n  if (index < 0) {                                                                                                     // 446\n    return false;                                                                                                      // 447\n  }                                                                                                                    // 448\n  var lastIndex = data.length - 1;                                                                                     // 449\n  if (index == lastIndex) {                                                                                            // 450\n    data.pop();                                                                                                        // 451\n  } else {                                                                                                             // 452\n    splice.call(data, index, 1);                                                                                       // 453\n  }                                                                                                                    // 454\n  return true;                                                                                                         // 455\n}                                                                                                                      // 456\n                                                                                                                       // 457\n/**                                                                                                                    // 458\n * Gets the list cache value for `key`.                                                                                // 459\n *                                                                                                                     // 460\n * @private                                                                                                            // 461\n * @name get                                                                                                           // 462\n * @memberOf ListCache                                                                                                 // 463\n * @param {string} key The key of the value to get.                                                                    // 464\n * @returns {*} Returns the entry value.                                                                               // 465\n */                                                                                                                    // 466\nfunction listCacheGet(key) {                                                                                           // 467\n  var data = this.__data__,                                                                                            // 468\n      index = assocIndexOf(data, key);                                                                                 // 469\n                                                                                                                       // 470\n  return index < 0 ? undefined : data[index][1];                                                                       // 471\n}                                                                                                                      // 472\n                                                                                                                       // 473\n/**                                                                                                                    // 474\n * Checks if a list cache value for `key` exists.                                                                      // 475\n *                                                                                                                     // 476\n * @private                                                                                                            // 477\n * @name has                                                                                                           // 478\n * @memberOf ListCache                                                                                                 // 479\n * @param {string} key The key of the entry to check.                                                                  // 480\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 481\n */                                                                                                                    // 482\nfunction listCacheHas(key) {                                                                                           // 483\n  return assocIndexOf(this.__data__, key) > -1;                                                                        // 484\n}                                                                                                                      // 485\n                                                                                                                       // 486\n/**                                                                                                                    // 487\n * Sets the list cache `key` to `value`.                                                                               // 488\n *                                                                                                                     // 489\n * @private                                                                                                            // 490\n * @name set                                                                                                           // 491\n * @memberOf ListCache                                                                                                 // 492\n * @param {string} key The key of the value to set.                                                                    // 493\n * @param {*} value The value to set.                                                                                  // 494\n * @returns {Object} Returns the list cache instance.                                                                  // 495\n */                                                                                                                    // 496\nfunction listCacheSet(key, value) {                                                                                    // 497\n  var data = this.__data__,                                                                                            // 498\n      index = assocIndexOf(data, key);                                                                                 // 499\n                                                                                                                       // 500\n  if (index < 0) {                                                                                                     // 501\n    data.push([key, value]);                                                                                           // 502\n  } else {                                                                                                             // 503\n    data[index][1] = value;                                                                                            // 504\n  }                                                                                                                    // 505\n  return this;                                                                                                         // 506\n}                                                                                                                      // 507\n                                                                                                                       // 508\n// Add methods to `ListCache`.                                                                                         // 509\nListCache.prototype.clear = listCacheClear;                                                                            // 510\nListCache.prototype['delete'] = listCacheDelete;                                                                       // 511\nListCache.prototype.get = listCacheGet;                                                                                // 512\nListCache.prototype.has = listCacheHas;                                                                                // 513\nListCache.prototype.set = listCacheSet;                                                                                // 514\n                                                                                                                       // 515\n/**                                                                                                                    // 516\n * Creates a map cache object to store key-value pairs.                                                                // 517\n *                                                                                                                     // 518\n * @private                                                                                                            // 519\n * @constructor                                                                                                        // 520\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 521\n */                                                                                                                    // 522\nfunction MapCache(entries) {                                                                                           // 523\n  var index = -1,                                                                                                      // 524\n      length = entries ? entries.length : 0;                                                                           // 525\n                                                                                                                       // 526\n  this.clear();                                                                                                        // 527\n  while (++index < length) {                                                                                           // 528\n    var entry = entries[index];                                                                                        // 529\n    this.set(entry[0], entry[1]);                                                                                      // 530\n  }                                                                                                                    // 531\n}                                                                                                                      // 532\n                                                                                                                       // 533\n/**                                                                                                                    // 534\n * Removes all key-value entries from the map.                                                                         // 535\n *                                                                                                                     // 536\n * @private                                                                                                            // 537\n * @name clear                                                                                                         // 538\n * @memberOf MapCache                                                                                                  // 539\n */                                                                                                                    // 540\nfunction mapCacheClear() {                                                                                             // 541\n  this.__data__ = {                                                                                                    // 542\n    'hash': new Hash,                                                                                                  // 543\n    'map': new (Map || ListCache),                                                                                     // 544\n    'string': new Hash                                                                                                 // 545\n  };                                                                                                                   // 546\n}                                                                                                                      // 547\n                                                                                                                       // 548\n/**                                                                                                                    // 549\n * Removes `key` and its value from the map.                                                                           // 550\n *                                                                                                                     // 551\n * @private                                                                                                            // 552\n * @name delete                                                                                                        // 553\n * @memberOf MapCache                                                                                                  // 554\n * @param {string} key The key of the value to remove.                                                                 // 555\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 556\n */                                                                                                                    // 557\nfunction mapCacheDelete(key) {                                                                                         // 558\n  return getMapData(this, key)['delete'](key);                                                                         // 559\n}                                                                                                                      // 560\n                                                                                                                       // 561\n/**                                                                                                                    // 562\n * Gets the map value for `key`.                                                                                       // 563\n *                                                                                                                     // 564\n * @private                                                                                                            // 565\n * @name get                                                                                                           // 566\n * @memberOf MapCache                                                                                                  // 567\n * @param {string} key The key of the value to get.                                                                    // 568\n * @returns {*} Returns the entry value.                                                                               // 569\n */                                                                                                                    // 570\nfunction mapCacheGet(key) {                                                                                            // 571\n  return getMapData(this, key).get(key);                                                                               // 572\n}                                                                                                                      // 573\n                                                                                                                       // 574\n/**                                                                                                                    // 575\n * Checks if a map value for `key` exists.                                                                             // 576\n *                                                                                                                     // 577\n * @private                                                                                                            // 578\n * @name has                                                                                                           // 579\n * @memberOf MapCache                                                                                                  // 580\n * @param {string} key The key of the entry to check.                                                                  // 581\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 582\n */                                                                                                                    // 583\nfunction mapCacheHas(key) {                                                                                            // 584\n  return getMapData(this, key).has(key);                                                                               // 585\n}                                                                                                                      // 586\n                                                                                                                       // 587\n/**                                                                                                                    // 588\n * Sets the map `key` to `value`.                                                                                      // 589\n *                                                                                                                     // 590\n * @private                                                                                                            // 591\n * @name set                                                                                                           // 592\n * @memberOf MapCache                                                                                                  // 593\n * @param {string} key The key of the value to set.                                                                    // 594\n * @param {*} value The value to set.                                                                                  // 595\n * @returns {Object} Returns the map cache instance.                                                                   // 596\n */                                                                                                                    // 597\nfunction mapCacheSet(key, value) {                                                                                     // 598\n  getMapData(this, key).set(key, value);                                                                               // 599\n  return this;                                                                                                         // 600\n}                                                                                                                      // 601\n                                                                                                                       // 602\n// Add methods to `MapCache`.                                                                                          // 603\nMapCache.prototype.clear = mapCacheClear;                                                                              // 604\nMapCache.prototype['delete'] = mapCacheDelete;                                                                         // 605\nMapCache.prototype.get = mapCacheGet;                                                                                  // 606\nMapCache.prototype.has = mapCacheHas;                                                                                  // 607\nMapCache.prototype.set = mapCacheSet;                                                                                  // 608\n                                                                                                                       // 609\n/**                                                                                                                    // 610\n *                                                                                                                     // 611\n * Creates an array cache object to store unique values.                                                               // 612\n *                                                                                                                     // 613\n * @private                                                                                                            // 614\n * @constructor                                                                                                        // 615\n * @param {Array} [values] The values to cache.                                                                        // 616\n */                                                                                                                    // 617\nfunction SetCache(values) {                                                                                            // 618\n  var index = -1,                                                                                                      // 619\n      length = values ? values.length : 0;                                                                             // 620\n                                                                                                                       // 621\n  this.__data__ = new MapCache;                                                                                        // 622\n  while (++index < length) {                                                                                           // 623\n    this.add(values[index]);                                                                                           // 624\n  }                                                                                                                    // 625\n}                                                                                                                      // 626\n                                                                                                                       // 627\n/**                                                                                                                    // 628\n * Adds `value` to the array cache.                                                                                    // 629\n *                                                                                                                     // 630\n * @private                                                                                                            // 631\n * @name add                                                                                                           // 632\n * @memberOf SetCache                                                                                                  // 633\n * @alias push                                                                                                         // 634\n * @param {*} value The value to cache.                                                                                // 635\n * @returns {Object} Returns the cache instance.                                                                       // 636\n */                                                                                                                    // 637\nfunction setCacheAdd(value) {                                                                                          // 638\n  this.__data__.set(value, HASH_UNDEFINED);                                                                            // 639\n  return this;                                                                                                         // 640\n}                                                                                                                      // 641\n                                                                                                                       // 642\n/**                                                                                                                    // 643\n * Checks if `value` is in the array cache.                                                                            // 644\n *                                                                                                                     // 645\n * @private                                                                                                            // 646\n * @name has                                                                                                           // 647\n * @memberOf SetCache                                                                                                  // 648\n * @param {*} value The value to search for.                                                                           // 649\n * @returns {number} Returns `true` if `value` is found, else `false`.                                                 // 650\n */                                                                                                                    // 651\nfunction setCacheHas(value) {                                                                                          // 652\n  return this.__data__.has(value);                                                                                     // 653\n}                                                                                                                      // 654\n                                                                                                                       // 655\n// Add methods to `SetCache`.                                                                                          // 656\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;                                                        // 657\nSetCache.prototype.has = setCacheHas;                                                                                  // 658\n                                                                                                                       // 659\n/**                                                                                                                    // 660\n * Creates a stack cache object to store key-value pairs.                                                              // 661\n *                                                                                                                     // 662\n * @private                                                                                                            // 663\n * @constructor                                                                                                        // 664\n * @param {Array} [entries] The key-value pairs to cache.                                                              // 665\n */                                                                                                                    // 666\nfunction Stack(entries) {                                                                                              // 667\n  this.__data__ = new ListCache(entries);                                                                              // 668\n}                                                                                                                      // 669\n                                                                                                                       // 670\n/**                                                                                                                    // 671\n * Removes all key-value entries from the stack.                                                                       // 672\n *                                                                                                                     // 673\n * @private                                                                                                            // 674\n * @name clear                                                                                                         // 675\n * @memberOf Stack                                                                                                     // 676\n */                                                                                                                    // 677\nfunction stackClear() {                                                                                                // 678\n  this.__data__ = new ListCache;                                                                                       // 679\n}                                                                                                                      // 680\n                                                                                                                       // 681\n/**                                                                                                                    // 682\n * Removes `key` and its value from the stack.                                                                         // 683\n *                                                                                                                     // 684\n * @private                                                                                                            // 685\n * @name delete                                                                                                        // 686\n * @memberOf Stack                                                                                                     // 687\n * @param {string} key The key of the value to remove.                                                                 // 688\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                           // 689\n */                                                                                                                    // 690\nfunction stackDelete(key) {                                                                                            // 691\n  return this.__data__['delete'](key);                                                                                 // 692\n}                                                                                                                      // 693\n                                                                                                                       // 694\n/**                                                                                                                    // 695\n * Gets the stack value for `key`.                                                                                     // 696\n *                                                                                                                     // 697\n * @private                                                                                                            // 698\n * @name get                                                                                                           // 699\n * @memberOf Stack                                                                                                     // 700\n * @param {string} key The key of the value to get.                                                                    // 701\n * @returns {*} Returns the entry value.                                                                               // 702\n */                                                                                                                    // 703\nfunction stackGet(key) {                                                                                               // 704\n  return this.__data__.get(key);                                                                                       // 705\n}                                                                                                                      // 706\n                                                                                                                       // 707\n/**                                                                                                                    // 708\n * Checks if a stack value for `key` exists.                                                                           // 709\n *                                                                                                                     // 710\n * @private                                                                                                            // 711\n * @name has                                                                                                           // 712\n * @memberOf Stack                                                                                                     // 713\n * @param {string} key The key of the entry to check.                                                                  // 714\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                       // 715\n */                                                                                                                    // 716\nfunction stackHas(key) {                                                                                               // 717\n  return this.__data__.has(key);                                                                                       // 718\n}                                                                                                                      // 719\n                                                                                                                       // 720\n/**                                                                                                                    // 721\n * Sets the stack `key` to `value`.                                                                                    // 722\n *                                                                                                                     // 723\n * @private                                                                                                            // 724\n * @name set                                                                                                           // 725\n * @memberOf Stack                                                                                                     // 726\n * @param {string} key The key of the value to set.                                                                    // 727\n * @param {*} value The value to set.                                                                                  // 728\n * @returns {Object} Returns the stack cache instance.                                                                 // 729\n */                                                                                                                    // 730\nfunction stackSet(key, value) {                                                                                        // 731\n  var cache = this.__data__;                                                                                           // 732\n  if (cache instanceof ListCache) {                                                                                    // 733\n    var pairs = cache.__data__;                                                                                        // 734\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {                                                               // 735\n      pairs.push([key, value]);                                                                                        // 736\n      return this;                                                                                                     // 737\n    }                                                                                                                  // 738\n    cache = this.__data__ = new MapCache(pairs);                                                                       // 739\n  }                                                                                                                    // 740\n  cache.set(key, value);                                                                                               // 741\n  return this;                                                                                                         // 742\n}                                                                                                                      // 743\n                                                                                                                       // 744\n// Add methods to `Stack`.                                                                                             // 745\nStack.prototype.clear = stackClear;                                                                                    // 746\nStack.prototype['delete'] = stackDelete;                                                                               // 747\nStack.prototype.get = stackGet;                                                                                        // 748\nStack.prototype.has = stackHas;                                                                                        // 749\nStack.prototype.set = stackSet;                                                                                        // 750\n                                                                                                                       // 751\n/**                                                                                                                    // 752\n * Creates an array of the enumerable property names of the array-like `value`.                                        // 753\n *                                                                                                                     // 754\n * @private                                                                                                            // 755\n * @param {*} value The value to query.                                                                                // 756\n * @param {boolean} inherited Specify returning inherited property names.                                              // 757\n * @returns {Array} Returns the array of property names.                                                               // 758\n */                                                                                                                    // 759\nfunction arrayLikeKeys(value, inherited) {                                                                             // 760\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 761\n  // Safari 9 makes `arguments.length` enumerable in strict mode.                                                      // 762\n  var result = (isArray(value) || isArguments(value))                                                                  // 763\n    ? baseTimes(value.length, String)                                                                                  // 764\n    : [];                                                                                                              // 765\n                                                                                                                       // 766\n  var length = result.length,                                                                                          // 767\n      skipIndexes = !!length;                                                                                          // 768\n                                                                                                                       // 769\n  for (var key in value) {                                                                                             // 770\n    if ((inherited || hasOwnProperty.call(value, key)) &&                                                              // 771\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {                                                 // 772\n      result.push(key);                                                                                                // 773\n    }                                                                                                                  // 774\n  }                                                                                                                    // 775\n  return result;                                                                                                       // 776\n}                                                                                                                      // 777\n                                                                                                                       // 778\n/**                                                                                                                    // 779\n * Gets the index at which the `key` is found in `array` of key-value pairs.                                           // 780\n *                                                                                                                     // 781\n * @private                                                                                                            // 782\n * @param {Array} array The array to inspect.                                                                          // 783\n * @param {*} key The key to search for.                                                                               // 784\n * @returns {number} Returns the index of the matched value, else `-1`.                                                // 785\n */                                                                                                                    // 786\nfunction assocIndexOf(array, key) {                                                                                    // 787\n  var length = array.length;                                                                                           // 788\n  while (length--) {                                                                                                   // 789\n    if (eq(array[length][0], key)) {                                                                                   // 790\n      return length;                                                                                                   // 791\n    }                                                                                                                  // 792\n  }                                                                                                                    // 793\n  return -1;                                                                                                           // 794\n}                                                                                                                      // 795\n                                                                                                                       // 796\n/**                                                                                                                    // 797\n * The base implementation of `getTag`.                                                                                // 798\n *                                                                                                                     // 799\n * @private                                                                                                            // 800\n * @param {*} value The value to query.                                                                                // 801\n * @returns {string} Returns the `toStringTag`.                                                                        // 802\n */                                                                                                                    // 803\nfunction baseGetTag(value) {                                                                                           // 804\n  return objectToString.call(value);                                                                                   // 805\n}                                                                                                                      // 806\n                                                                                                                       // 807\n/**                                                                                                                    // 808\n * The base implementation of `_.isEqual` which supports partial comparisons                                           // 809\n * and tracks traversed objects.                                                                                       // 810\n *                                                                                                                     // 811\n * @private                                                                                                            // 812\n * @param {*} value The value to compare.                                                                              // 813\n * @param {*} other The other value to compare.                                                                        // 814\n * @param {Function} [customizer] The function to customize comparisons.                                               // 815\n * @param {boolean} [bitmask] The bitmask of comparison flags.                                                         // 816\n *  The bitmask may be composed of the following flags:                                                                // 817\n *     1 - Unordered comparison                                                                                        // 818\n *     2 - Partial comparison                                                                                          // 819\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.                                               // 820\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                       // 821\n */                                                                                                                    // 822\nfunction baseIsEqual(value, other, customizer, bitmask, stack) {                                                       // 823\n  if (value === other) {                                                                                               // 824\n    return true;                                                                                                       // 825\n  }                                                                                                                    // 826\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {                                  // 827\n    return value !== value && other !== other;                                                                         // 828\n  }                                                                                                                    // 829\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);                                       // 830\n}                                                                                                                      // 831\n                                                                                                                       // 832\n/**                                                                                                                    // 833\n * A specialized version of `baseIsEqual` for arrays and objects which performs                                        // 834\n * deep comparisons and tracks traversed objects enabling objects with circular                                        // 835\n * references to be compared.                                                                                          // 836\n *                                                                                                                     // 837\n * @private                                                                                                            // 838\n * @param {Object} object The object to compare.                                                                       // 839\n * @param {Object} other The other object to compare.                                                                  // 840\n * @param {Function} equalFunc The function to determine equivalents of values.                                        // 841\n * @param {Function} [customizer] The function to customize comparisons.                                               // 842\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`                                        // 843\n *  for more details.                                                                                                  // 844\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.                                              // 845\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                      // 846\n */                                                                                                                    // 847\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {                                       // 848\n  var objIsArr = isArray(object),                                                                                      // 849\n      othIsArr = isArray(other),                                                                                       // 850\n      objTag = arrayTag,                                                                                               // 851\n      othTag = arrayTag;                                                                                               // 852\n                                                                                                                       // 853\n  if (!objIsArr) {                                                                                                     // 854\n    objTag = getTag(object);                                                                                           // 855\n    objTag = objTag == argsTag ? objectTag : objTag;                                                                   // 856\n  }                                                                                                                    // 857\n  if (!othIsArr) {                                                                                                     // 858\n    othTag = getTag(other);                                                                                            // 859\n    othTag = othTag == argsTag ? objectTag : othTag;                                                                   // 860\n  }                                                                                                                    // 861\n  var objIsObj = objTag == objectTag && !isHostObject(object),                                                         // 862\n      othIsObj = othTag == objectTag && !isHostObject(other),                                                          // 863\n      isSameTag = objTag == othTag;                                                                                    // 864\n                                                                                                                       // 865\n  if (isSameTag && !objIsObj) {                                                                                        // 866\n    stack || (stack = new Stack);                                                                                      // 867\n    return (objIsArr || isTypedArray(object))                                                                          // 868\n      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)                                              // 869\n      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);                                      // 870\n  }                                                                                                                    // 871\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {                                                                             // 872\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),                                         // 873\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');                                          // 874\n                                                                                                                       // 875\n    if (objIsWrapped || othIsWrapped) {                                                                                // 876\n      var objUnwrapped = objIsWrapped ? object.value() : object,                                                       // 877\n          othUnwrapped = othIsWrapped ? other.value() : other;                                                         // 878\n                                                                                                                       // 879\n      stack || (stack = new Stack);                                                                                    // 880\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);                                        // 881\n    }                                                                                                                  // 882\n  }                                                                                                                    // 883\n  if (!isSameTag) {                                                                                                    // 884\n    return false;                                                                                                      // 885\n  }                                                                                                                    // 886\n  stack || (stack = new Stack);                                                                                        // 887\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);                                           // 888\n}                                                                                                                      // 889\n                                                                                                                       // 890\n/**                                                                                                                    // 891\n * The base implementation of `_.isNative` without bad shim checks.                                                    // 892\n *                                                                                                                     // 893\n * @private                                                                                                            // 894\n * @param {*} value The value to check.                                                                                // 895\n * @returns {boolean} Returns `true` if `value` is a native function,                                                  // 896\n *  else `false`.                                                                                                      // 897\n */                                                                                                                    // 898\nfunction baseIsNative(value) {                                                                                         // 899\n  if (!isObject(value) || isMasked(value)) {                                                                           // 900\n    return false;                                                                                                      // 901\n  }                                                                                                                    // 902\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;                                // 903\n  return pattern.test(toSource(value));                                                                                // 904\n}                                                                                                                      // 905\n                                                                                                                       // 906\n/**                                                                                                                    // 907\n * The base implementation of `_.isTypedArray` without Node.js optimizations.                                          // 908\n *                                                                                                                     // 909\n * @private                                                                                                            // 910\n * @param {*} value The value to check.                                                                                // 911\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.                                        // 912\n */                                                                                                                    // 913\nfunction baseIsTypedArray(value) {                                                                                     // 914\n  return isObjectLike(value) &&                                                                                        // 915\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];                                            // 916\n}                                                                                                                      // 917\n                                                                                                                       // 918\n/**                                                                                                                    // 919\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.                                     // 920\n *                                                                                                                     // 921\n * @private                                                                                                            // 922\n * @param {Object} object The object to query.                                                                         // 923\n * @returns {Array} Returns the array of property names.                                                               // 924\n */                                                                                                                    // 925\nfunction baseKeys(object) {                                                                                            // 926\n  if (!isPrototype(object)) {                                                                                          // 927\n    return nativeKeys(object);                                                                                         // 928\n  }                                                                                                                    // 929\n  var result = [];                                                                                                     // 930\n  for (var key in Object(object)) {                                                                                    // 931\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {                                                    // 932\n      result.push(key);                                                                                                // 933\n    }                                                                                                                  // 934\n  }                                                                                                                    // 935\n  return result;                                                                                                       // 936\n}                                                                                                                      // 937\n                                                                                                                       // 938\n/**                                                                                                                    // 939\n * A specialized version of `baseIsEqualDeep` for arrays with support for                                              // 940\n * partial deep comparisons.                                                                                           // 941\n *                                                                                                                     // 942\n * @private                                                                                                            // 943\n * @param {Array} array The array to compare.                                                                          // 944\n * @param {Array} other The other array to compare.                                                                    // 945\n * @param {Function} equalFunc The function to determine equivalents of values.                                        // 946\n * @param {Function} customizer The function to customize comparisons.                                                 // 947\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`                                          // 948\n *  for more details.                                                                                                  // 949\n * @param {Object} stack Tracks traversed `array` and `other` objects.                                                 // 950\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.                                       // 951\n */                                                                                                                    // 952\nfunction equalArrays(array, other, equalFunc, customizer, bitmask, stack) {                                            // 953\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,                                                                      // 954\n      arrLength = array.length,                                                                                        // 955\n      othLength = other.length;                                                                                        // 956\n                                                                                                                       // 957\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {                                               // 958\n    return false;                                                                                                      // 959\n  }                                                                                                                    // 960\n  // Assume cyclic values are equal.                                                                                   // 961\n  var stacked = stack.get(array);                                                                                      // 962\n  if (stacked && stack.get(other)) {                                                                                   // 963\n    return stacked == other;                                                                                           // 964\n  }                                                                                                                    // 965\n  var index = -1,                                                                                                      // 966\n      result = true,                                                                                                   // 967\n      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;                                            // 968\n                                                                                                                       // 969\n  stack.set(array, other);                                                                                             // 970\n  stack.set(other, array);                                                                                             // 971\n                                                                                                                       // 972\n  // Ignore non-index properties.                                                                                      // 973\n  while (++index < arrLength) {                                                                                        // 974\n    var arrValue = array[index],                                                                                       // 975\n        othValue = other[index];                                                                                       // 976\n                                                                                                                       // 977\n    if (customizer) {                                                                                                  // 978\n      var compared = isPartial                                                                                         // 979\n        ? customizer(othValue, arrValue, index, other, array, stack)                                                   // 980\n        : customizer(arrValue, othValue, index, array, other, stack);                                                  // 981\n    }                                                                                                                  // 982\n    if (compared !== undefined) {                                                                                      // 983\n      if (compared) {                                                                                                  // 984\n        continue;                                                                                                      // 985\n      }                                                                                                                // 986\n      result = false;                                                                                                  // 987\n      break;                                                                                                           // 988\n    }                                                                                                                  // 989\n    // Recursively compare arrays (susceptible to call stack limits).                                                  // 990\n    if (seen) {                                                                                                        // 991\n      if (!arraySome(other, function(othValue, othIndex) {                                                             // 992\n            if (!seen.has(othIndex) &&                                                                                 // 993\n                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {                // 994\n              return seen.add(othIndex);                                                                               // 995\n            }                                                                                                          // 996\n          })) {                                                                                                        // 997\n        result = false;                                                                                                // 998\n        break;                                                                                                         // 999\n      }                                                                                                                // 1000\n    } else if (!(                                                                                                      // 1001\n          arrValue === othValue ||                                                                                     // 1002\n            equalFunc(arrValue, othValue, customizer, bitmask, stack)                                                  // 1003\n        )) {                                                                                                           // 1004\n      result = false;                                                                                                  // 1005\n      break;                                                                                                           // 1006\n    }                                                                                                                  // 1007\n  }                                                                                                                    // 1008\n  stack['delete'](array);                                                                                              // 1009\n  stack['delete'](other);                                                                                              // 1010\n  return result;                                                                                                       // 1011\n}                                                                                                                      // 1012\n                                                                                                                       // 1013\n/**                                                                                                                    // 1014\n * A specialized version of `baseIsEqualDeep` for comparing objects of                                                 // 1015\n * the same `toStringTag`.                                                                                             // 1016\n *                                                                                                                     // 1017\n * **Note:** This function only supports comparing values with tags of                                                 // 1018\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                        // 1019\n *                                                                                                                     // 1020\n * @private                                                                                                            // 1021\n * @param {Object} object The object to compare.                                                                       // 1022\n * @param {Object} other The other object to compare.                                                                  // 1023\n * @param {string} tag The `toStringTag` of the objects to compare.                                                    // 1024\n * @param {Function} equalFunc The function to determine equivalents of values.                                        // 1025\n * @param {Function} customizer The function to customize comparisons.                                                 // 1026\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`                                          // 1027\n *  for more details.                                                                                                  // 1028\n * @param {Object} stack Tracks traversed `object` and `other` objects.                                                // 1029\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                      // 1030\n */                                                                                                                    // 1031\nfunction equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {                                       // 1032\n  switch (tag) {                                                                                                       // 1033\n    case dataViewTag:                                                                                                  // 1034\n      if ((object.byteLength != other.byteLength) ||                                                                   // 1035\n          (object.byteOffset != other.byteOffset)) {                                                                   // 1036\n        return false;                                                                                                  // 1037\n      }                                                                                                                // 1038\n      object = object.buffer;                                                                                          // 1039\n      other = other.buffer;                                                                                            // 1040\n                                                                                                                       // 1041\n    case arrayBufferTag:                                                                                               // 1042\n      if ((object.byteLength != other.byteLength) ||                                                                   // 1043\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {                                                 // 1044\n        return false;                                                                                                  // 1045\n      }                                                                                                                // 1046\n      return true;                                                                                                     // 1047\n                                                                                                                       // 1048\n    case boolTag:                                                                                                      // 1049\n    case dateTag:                                                                                                      // 1050\n    case numberTag:                                                                                                    // 1051\n      // Coerce booleans to `1` or `0` and dates to milliseconds.                                                      // 1052\n      // Invalid dates are coerced to `NaN`.                                                                           // 1053\n      return eq(+object, +other);                                                                                      // 1054\n                                                                                                                       // 1055\n    case errorTag:                                                                                                     // 1056\n      return object.name == other.name && object.message == other.message;                                             // 1057\n                                                                                                                       // 1058\n    case regexpTag:                                                                                                    // 1059\n    case stringTag:                                                                                                    // 1060\n      // Coerce regexes to strings and treat strings, primitives and objects,                                          // 1061\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring                   // 1062\n      // for more details.                                                                                             // 1063\n      return object == (other + '');                                                                                   // 1064\n                                                                                                                       // 1065\n    case mapTag:                                                                                                       // 1066\n      var convert = mapToArray;                                                                                        // 1067\n                                                                                                                       // 1068\n    case setTag:                                                                                                       // 1069\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;                                                                  // 1070\n      convert || (convert = setToArray);                                                                               // 1071\n                                                                                                                       // 1072\n      if (object.size != other.size && !isPartial) {                                                                   // 1073\n        return false;                                                                                                  // 1074\n      }                                                                                                                // 1075\n      // Assume cyclic values are equal.                                                                               // 1076\n      var stacked = stack.get(object);                                                                                 // 1077\n      if (stacked) {                                                                                                   // 1078\n        return stacked == other;                                                                                       // 1079\n      }                                                                                                                // 1080\n      bitmask |= UNORDERED_COMPARE_FLAG;                                                                               // 1081\n                                                                                                                       // 1082\n      // Recursively compare objects (susceptible to call stack limits).                                               // 1083\n      stack.set(object, other);                                                                                        // 1084\n      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);                // 1085\n      stack['delete'](object);                                                                                         // 1086\n      return result;                                                                                                   // 1087\n                                                                                                                       // 1088\n    case symbolTag:                                                                                                    // 1089\n      if (symbolValueOf) {                                                                                             // 1090\n        return symbolValueOf.call(object) == symbolValueOf.call(other);                                                // 1091\n      }                                                                                                                // 1092\n  }                                                                                                                    // 1093\n  return false;                                                                                                        // 1094\n}                                                                                                                      // 1095\n                                                                                                                       // 1096\n/**                                                                                                                    // 1097\n * A specialized version of `baseIsEqualDeep` for objects with support for                                             // 1098\n * partial deep comparisons.                                                                                           // 1099\n *                                                                                                                     // 1100\n * @private                                                                                                            // 1101\n * @param {Object} object The object to compare.                                                                       // 1102\n * @param {Object} other The other object to compare.                                                                  // 1103\n * @param {Function} equalFunc The function to determine equivalents of values.                                        // 1104\n * @param {Function} customizer The function to customize comparisons.                                                 // 1105\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`                                          // 1106\n *  for more details.                                                                                                  // 1107\n * @param {Object} stack Tracks traversed `object` and `other` objects.                                                // 1108\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                      // 1109\n */                                                                                                                    // 1110\nfunction equalObjects(object, other, equalFunc, customizer, bitmask, stack) {                                          // 1111\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,                                                                      // 1112\n      objProps = keys(object),                                                                                         // 1113\n      objLength = objProps.length,                                                                                     // 1114\n      othProps = keys(other),                                                                                          // 1115\n      othLength = othProps.length;                                                                                     // 1116\n                                                                                                                       // 1117\n  if (objLength != othLength && !isPartial) {                                                                          // 1118\n    return false;                                                                                                      // 1119\n  }                                                                                                                    // 1120\n  var index = objLength;                                                                                               // 1121\n  while (index--) {                                                                                                    // 1122\n    var key = objProps[index];                                                                                         // 1123\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {                                               // 1124\n      return false;                                                                                                    // 1125\n    }                                                                                                                  // 1126\n  }                                                                                                                    // 1127\n  // Assume cyclic values are equal.                                                                                   // 1128\n  var stacked = stack.get(object);                                                                                     // 1129\n  if (stacked && stack.get(other)) {                                                                                   // 1130\n    return stacked == other;                                                                                           // 1131\n  }                                                                                                                    // 1132\n  var result = true;                                                                                                   // 1133\n  stack.set(object, other);                                                                                            // 1134\n  stack.set(other, object);                                                                                            // 1135\n                                                                                                                       // 1136\n  var skipCtor = isPartial;                                                                                            // 1137\n  while (++index < objLength) {                                                                                        // 1138\n    key = objProps[index];                                                                                             // 1139\n    var objValue = object[key],                                                                                        // 1140\n        othValue = other[key];                                                                                         // 1141\n                                                                                                                       // 1142\n    if (customizer) {                                                                                                  // 1143\n      var compared = isPartial                                                                                         // 1144\n        ? customizer(othValue, objValue, key, other, object, stack)                                                    // 1145\n        : customizer(objValue, othValue, key, object, other, stack);                                                   // 1146\n    }                                                                                                                  // 1147\n    // Recursively compare objects (susceptible to call stack limits).                                                 // 1148\n    if (!(compared === undefined                                                                                       // 1149\n          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))                       // 1150\n          : compared                                                                                                   // 1151\n        )) {                                                                                                           // 1152\n      result = false;                                                                                                  // 1153\n      break;                                                                                                           // 1154\n    }                                                                                                                  // 1155\n    skipCtor || (skipCtor = key == 'constructor');                                                                     // 1156\n  }                                                                                                                    // 1157\n  if (result && !skipCtor) {                                                                                           // 1158\n    var objCtor = object.constructor,                                                                                  // 1159\n        othCtor = other.constructor;                                                                                   // 1160\n                                                                                                                       // 1161\n    // Non `Object` object instances with different constructors are not equal.                                        // 1162\n    if (objCtor != othCtor &&                                                                                          // 1163\n        ('constructor' in object && 'constructor' in other) &&                                                         // 1164\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&                                                // 1165\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {                                               // 1166\n      result = false;                                                                                                  // 1167\n    }                                                                                                                  // 1168\n  }                                                                                                                    // 1169\n  stack['delete'](object);                                                                                             // 1170\n  stack['delete'](other);                                                                                              // 1171\n  return result;                                                                                                       // 1172\n}                                                                                                                      // 1173\n                                                                                                                       // 1174\n/**                                                                                                                    // 1175\n * Gets the data for `map`.                                                                                            // 1176\n *                                                                                                                     // 1177\n * @private                                                                                                            // 1178\n * @param {Object} map The map to query.                                                                               // 1179\n * @param {string} key The reference key.                                                                              // 1180\n * @returns {*} Returns the map data.                                                                                  // 1181\n */                                                                                                                    // 1182\nfunction getMapData(map, key) {                                                                                        // 1183\n  var data = map.__data__;                                                                                             // 1184\n  return isKeyable(key)                                                                                                // 1185\n    ? data[typeof key == 'string' ? 'string' : 'hash']                                                                 // 1186\n    : data.map;                                                                                                        // 1187\n}                                                                                                                      // 1188\n                                                                                                                       // 1189\n/**                                                                                                                    // 1190\n * Gets the native function at `key` of `object`.                                                                      // 1191\n *                                                                                                                     // 1192\n * @private                                                                                                            // 1193\n * @param {Object} object The object to query.                                                                         // 1194\n * @param {string} key The key of the method to get.                                                                   // 1195\n * @returns {*} Returns the function if it's native, else `undefined`.                                                 // 1196\n */                                                                                                                    // 1197\nfunction getNative(object, key) {                                                                                      // 1198\n  var value = getValue(object, key);                                                                                   // 1199\n  return baseIsNative(value) ? value : undefined;                                                                      // 1200\n}                                                                                                                      // 1201\n                                                                                                                       // 1202\n/**                                                                                                                    // 1203\n * Gets the `toStringTag` of `value`.                                                                                  // 1204\n *                                                                                                                     // 1205\n * @private                                                                                                            // 1206\n * @param {*} value The value to query.                                                                                // 1207\n * @returns {string} Returns the `toStringTag`.                                                                        // 1208\n */                                                                                                                    // 1209\nvar getTag = baseGetTag;                                                                                               // 1210\n                                                                                                                       // 1211\n// Fallback for data views, maps, sets, and weak maps in IE 11,                                                        // 1212\n// for data views in Edge < 14, and promises in Node.js.                                                               // 1213\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||                                           // 1214\n    (Map && getTag(new Map) != mapTag) ||                                                                              // 1215\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||                                                            // 1216\n    (Set && getTag(new Set) != setTag) ||                                                                              // 1217\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {                                                                  // 1218\n  getTag = function(value) {                                                                                           // 1219\n    var result = objectToString.call(value),                                                                           // 1220\n        Ctor = result == objectTag ? value.constructor : undefined,                                                    // 1221\n        ctorString = Ctor ? toSource(Ctor) : undefined;                                                                // 1222\n                                                                                                                       // 1223\n    if (ctorString) {                                                                                                  // 1224\n      switch (ctorString) {                                                                                            // 1225\n        case dataViewCtorString: return dataViewTag;                                                                   // 1226\n        case mapCtorString: return mapTag;                                                                             // 1227\n        case promiseCtorString: return promiseTag;                                                                     // 1228\n        case setCtorString: return setTag;                                                                             // 1229\n        case weakMapCtorString: return weakMapTag;                                                                     // 1230\n      }                                                                                                                // 1231\n    }                                                                                                                  // 1232\n    return result;                                                                                                     // 1233\n  };                                                                                                                   // 1234\n}                                                                                                                      // 1235\n                                                                                                                       // 1236\n/**                                                                                                                    // 1237\n * Checks if `value` is a valid array-like index.                                                                      // 1238\n *                                                                                                                     // 1239\n * @private                                                                                                            // 1240\n * @param {*} value The value to check.                                                                                // 1241\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                        // 1242\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                        // 1243\n */                                                                                                                    // 1244\nfunction isIndex(value, length) {                                                                                      // 1245\n  length = length == null ? MAX_SAFE_INTEGER : length;                                                                 // 1246\n  return !!length &&                                                                                                   // 1247\n    (typeof value == 'number' || reIsUint.test(value)) &&                                                              // 1248\n    (value > -1 && value % 1 == 0 && value < length);                                                                  // 1249\n}                                                                                                                      // 1250\n                                                                                                                       // 1251\n/**                                                                                                                    // 1252\n * Checks if `value` is suitable for use as unique object key.                                                         // 1253\n *                                                                                                                     // 1254\n * @private                                                                                                            // 1255\n * @param {*} value The value to check.                                                                                // 1256\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.                                             // 1257\n */                                                                                                                    // 1258\nfunction isKeyable(value) {                                                                                            // 1259\n  var type = typeof value;                                                                                             // 1260\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')                               // 1261\n    ? (value !== '__proto__')                                                                                          // 1262\n    : (value === null);                                                                                                // 1263\n}                                                                                                                      // 1264\n                                                                                                                       // 1265\n/**                                                                                                                    // 1266\n * Checks if `func` has its source masked.                                                                             // 1267\n *                                                                                                                     // 1268\n * @private                                                                                                            // 1269\n * @param {Function} func The function to check.                                                                       // 1270\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.                                                // 1271\n */                                                                                                                    // 1272\nfunction isMasked(func) {                                                                                              // 1273\n  return !!maskSrcKey && (maskSrcKey in func);                                                                         // 1274\n}                                                                                                                      // 1275\n                                                                                                                       // 1276\n/**                                                                                                                    // 1277\n * Checks if `value` is likely a prototype object.                                                                     // 1278\n *                                                                                                                     // 1279\n * @private                                                                                                            // 1280\n * @param {*} value The value to check.                                                                                // 1281\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.                                          // 1282\n */                                                                                                                    // 1283\nfunction isPrototype(value) {                                                                                          // 1284\n  var Ctor = value && value.constructor,                                                                               // 1285\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;                                            // 1286\n                                                                                                                       // 1287\n  return value === proto;                                                                                              // 1288\n}                                                                                                                      // 1289\n                                                                                                                       // 1290\n/**                                                                                                                    // 1291\n * Converts `func` to its source code.                                                                                 // 1292\n *                                                                                                                     // 1293\n * @private                                                                                                            // 1294\n * @param {Function} func The function to process.                                                                     // 1295\n * @returns {string} Returns the source code.                                                                          // 1296\n */                                                                                                                    // 1297\nfunction toSource(func) {                                                                                              // 1298\n  if (func != null) {                                                                                                  // 1299\n    try {                                                                                                              // 1300\n      return funcToString.call(func);                                                                                  // 1301\n    } catch (e) {}                                                                                                     // 1302\n    try {                                                                                                              // 1303\n      return (func + '');                                                                                              // 1304\n    } catch (e) {}                                                                                                     // 1305\n  }                                                                                                                    // 1306\n  return '';                                                                                                           // 1307\n}                                                                                                                      // 1308\n                                                                                                                       // 1309\n/**                                                                                                                    // 1310\n * Performs a                                                                                                          // 1311\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)                                    // 1312\n * comparison between two values to determine if they are equivalent.                                                  // 1313\n *                                                                                                                     // 1314\n * @static                                                                                                             // 1315\n * @memberOf _                                                                                                         // 1316\n * @since 4.0.0                                                                                                        // 1317\n * @category Lang                                                                                                      // 1318\n * @param {*} value The value to compare.                                                                              // 1319\n * @param {*} other The other value to compare.                                                                        // 1320\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                       // 1321\n * @example                                                                                                            // 1322\n *                                                                                                                     // 1323\n * var object = { 'a': 1 };                                                                                            // 1324\n * var other = { 'a': 1 };                                                                                             // 1325\n *                                                                                                                     // 1326\n * _.eq(object, object);                                                                                               // 1327\n * // => true                                                                                                          // 1328\n *                                                                                                                     // 1329\n * _.eq(object, other);                                                                                                // 1330\n * // => false                                                                                                         // 1331\n *                                                                                                                     // 1332\n * _.eq('a', 'a');                                                                                                     // 1333\n * // => true                                                                                                          // 1334\n *                                                                                                                     // 1335\n * _.eq('a', Object('a'));                                                                                             // 1336\n * // => false                                                                                                         // 1337\n *                                                                                                                     // 1338\n * _.eq(NaN, NaN);                                                                                                     // 1339\n * // => true                                                                                                          // 1340\n */                                                                                                                    // 1341\nfunction eq(value, other) {                                                                                            // 1342\n  return value === other || (value !== value && other !== other);                                                      // 1343\n}                                                                                                                      // 1344\n                                                                                                                       // 1345\n/**                                                                                                                    // 1346\n * Checks if `value` is likely an `arguments` object.                                                                  // 1347\n *                                                                                                                     // 1348\n * @static                                                                                                             // 1349\n * @memberOf _                                                                                                         // 1350\n * @since 0.1.0                                                                                                        // 1351\n * @category Lang                                                                                                      // 1352\n * @param {*} value The value to check.                                                                                // 1353\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,                                              // 1354\n *  else `false`.                                                                                                      // 1355\n * @example                                                                                                            // 1356\n *                                                                                                                     // 1357\n * _.isArguments(function() { return arguments; }());                                                                  // 1358\n * // => true                                                                                                          // 1359\n *                                                                                                                     // 1360\n * _.isArguments([1, 2, 3]);                                                                                           // 1361\n * // => false                                                                                                         // 1362\n */                                                                                                                    // 1363\nfunction isArguments(value) {                                                                                          // 1364\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 1365\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&                                           // 1366\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);                            // 1367\n}                                                                                                                      // 1368\n                                                                                                                       // 1369\n/**                                                                                                                    // 1370\n * Checks if `value` is classified as an `Array` object.                                                               // 1371\n *                                                                                                                     // 1372\n * @static                                                                                                             // 1373\n * @memberOf _                                                                                                         // 1374\n * @since 0.1.0                                                                                                        // 1375\n * @category Lang                                                                                                      // 1376\n * @param {*} value The value to check.                                                                                // 1377\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.                                             // 1378\n * @example                                                                                                            // 1379\n *                                                                                                                     // 1380\n * _.isArray([1, 2, 3]);                                                                                               // 1381\n * // => true                                                                                                          // 1382\n *                                                                                                                     // 1383\n * _.isArray(document.body.children);                                                                                  // 1384\n * // => false                                                                                                         // 1385\n *                                                                                                                     // 1386\n * _.isArray('abc');                                                                                                   // 1387\n * // => false                                                                                                         // 1388\n *                                                                                                                     // 1389\n * _.isArray(_.noop);                                                                                                  // 1390\n * // => false                                                                                                         // 1391\n */                                                                                                                    // 1392\nvar isArray = Array.isArray;                                                                                           // 1393\n                                                                                                                       // 1394\n/**                                                                                                                    // 1395\n * Checks if `value` is array-like. A value is considered array-like if it's                                           // 1396\n * not a function and has a `value.length` that's an integer greater than or                                           // 1397\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.                                                   // 1398\n *                                                                                                                     // 1399\n * @static                                                                                                             // 1400\n * @memberOf _                                                                                                         // 1401\n * @since 4.0.0                                                                                                        // 1402\n * @category Lang                                                                                                      // 1403\n * @param {*} value The value to check.                                                                                // 1404\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                           // 1405\n * @example                                                                                                            // 1406\n *                                                                                                                     // 1407\n * _.isArrayLike([1, 2, 3]);                                                                                           // 1408\n * // => true                                                                                                          // 1409\n *                                                                                                                     // 1410\n * _.isArrayLike(document.body.children);                                                                              // 1411\n * // => true                                                                                                          // 1412\n *                                                                                                                     // 1413\n * _.isArrayLike('abc');                                                                                               // 1414\n * // => true                                                                                                          // 1415\n *                                                                                                                     // 1416\n * _.isArrayLike(_.noop);                                                                                              // 1417\n * // => false                                                                                                         // 1418\n */                                                                                                                    // 1419\nfunction isArrayLike(value) {                                                                                          // 1420\n  return value != null && isLength(value.length) && !isFunction(value);                                                // 1421\n}                                                                                                                      // 1422\n                                                                                                                       // 1423\n/**                                                                                                                    // 1424\n * This method is like `_.isArrayLike` except that it also checks if `value`                                           // 1425\n * is an object.                                                                                                       // 1426\n *                                                                                                                     // 1427\n * @static                                                                                                             // 1428\n * @memberOf _                                                                                                         // 1429\n * @since 4.0.0                                                                                                        // 1430\n * @category Lang                                                                                                      // 1431\n * @param {*} value The value to check.                                                                                // 1432\n * @returns {boolean} Returns `true` if `value` is an array-like object,                                               // 1433\n *  else `false`.                                                                                                      // 1434\n * @example                                                                                                            // 1435\n *                                                                                                                     // 1436\n * _.isArrayLikeObject([1, 2, 3]);                                                                                     // 1437\n * // => true                                                                                                          // 1438\n *                                                                                                                     // 1439\n * _.isArrayLikeObject(document.body.children);                                                                        // 1440\n * // => true                                                                                                          // 1441\n *                                                                                                                     // 1442\n * _.isArrayLikeObject('abc');                                                                                         // 1443\n * // => false                                                                                                         // 1444\n *                                                                                                                     // 1445\n * _.isArrayLikeObject(_.noop);                                                                                        // 1446\n * // => false                                                                                                         // 1447\n */                                                                                                                    // 1448\nfunction isArrayLikeObject(value) {                                                                                    // 1449\n  return isObjectLike(value) && isArrayLike(value);                                                                    // 1450\n}                                                                                                                      // 1451\n                                                                                                                       // 1452\n/**                                                                                                                    // 1453\n * Performs a deep comparison between two values to determine if they are                                              // 1454\n * equivalent.                                                                                                         // 1455\n *                                                                                                                     // 1456\n * **Note:** This method supports comparing arrays, array buffers, booleans,                                           // 1457\n * date objects, error objects, maps, numbers, `Object` objects, regexes,                                              // 1458\n * sets, strings, symbols, and typed arrays. `Object` objects are compared                                             // 1459\n * by their own, not inherited, enumerable properties. Functions and DOM                                               // 1460\n * nodes are **not** supported.                                                                                        // 1461\n *                                                                                                                     // 1462\n * @static                                                                                                             // 1463\n * @memberOf _                                                                                                         // 1464\n * @since 0.1.0                                                                                                        // 1465\n * @category Lang                                                                                                      // 1466\n * @param {*} value The value to compare.                                                                              // 1467\n * @param {*} other The other value to compare.                                                                        // 1468\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                       // 1469\n * @example                                                                                                            // 1470\n *                                                                                                                     // 1471\n * var object = { 'a': 1 };                                                                                            // 1472\n * var other = { 'a': 1 };                                                                                             // 1473\n *                                                                                                                     // 1474\n * _.isEqual(object, other);                                                                                           // 1475\n * // => true                                                                                                          // 1476\n *                                                                                                                     // 1477\n * object === other;                                                                                                   // 1478\n * // => false                                                                                                         // 1479\n */                                                                                                                    // 1480\nfunction isEqual(value, other) {                                                                                       // 1481\n  return baseIsEqual(value, other);                                                                                    // 1482\n}                                                                                                                      // 1483\n                                                                                                                       // 1484\n/**                                                                                                                    // 1485\n * Checks if `value` is classified as a `Function` object.                                                             // 1486\n *                                                                                                                     // 1487\n * @static                                                                                                             // 1488\n * @memberOf _                                                                                                         // 1489\n * @since 0.1.0                                                                                                        // 1490\n * @category Lang                                                                                                      // 1491\n * @param {*} value The value to check.                                                                                // 1492\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.                                           // 1493\n * @example                                                                                                            // 1494\n *                                                                                                                     // 1495\n * _.isFunction(_);                                                                                                    // 1496\n * // => true                                                                                                          // 1497\n *                                                                                                                     // 1498\n * _.isFunction(/abc/);                                                                                                // 1499\n * // => false                                                                                                         // 1500\n */                                                                                                                    // 1501\nfunction isFunction(value) {                                                                                           // 1502\n  // The use of `Object#toString` avoids issues with the `typeof` operator                                             // 1503\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.                                      // 1504\n  var tag = isObject(value) ? objectToString.call(value) : '';                                                         // 1505\n  return tag == funcTag || tag == genTag;                                                                              // 1506\n}                                                                                                                      // 1507\n                                                                                                                       // 1508\n/**                                                                                                                    // 1509\n * Checks if `value` is a valid array-like length.                                                                     // 1510\n *                                                                                                                     // 1511\n * **Note:** This method is loosely based on                                                                           // 1512\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).                                             // 1513\n *                                                                                                                     // 1514\n * @static                                                                                                             // 1515\n * @memberOf _                                                                                                         // 1516\n * @since 4.0.0                                                                                                        // 1517\n * @category Lang                                                                                                      // 1518\n * @param {*} value The value to check.                                                                                // 1519\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                       // 1520\n * @example                                                                                                            // 1521\n *                                                                                                                     // 1522\n * _.isLength(3);                                                                                                      // 1523\n * // => true                                                                                                          // 1524\n *                                                                                                                     // 1525\n * _.isLength(Number.MIN_VALUE);                                                                                       // 1526\n * // => false                                                                                                         // 1527\n *                                                                                                                     // 1528\n * _.isLength(Infinity);                                                                                               // 1529\n * // => false                                                                                                         // 1530\n *                                                                                                                     // 1531\n * _.isLength('3');                                                                                                    // 1532\n * // => false                                                                                                         // 1533\n */                                                                                                                    // 1534\nfunction isLength(value) {                                                                                             // 1535\n  return typeof value == 'number' &&                                                                                   // 1536\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                                                         // 1537\n}                                                                                                                      // 1538\n                                                                                                                       // 1539\n/**                                                                                                                    // 1540\n * Checks if `value` is the                                                                                            // 1541\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)                      // 1542\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                      // 1543\n *                                                                                                                     // 1544\n * @static                                                                                                             // 1545\n * @memberOf _                                                                                                         // 1546\n * @since 0.1.0                                                                                                        // 1547\n * @category Lang                                                                                                      // 1548\n * @param {*} value The value to check.                                                                                // 1549\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                            // 1550\n * @example                                                                                                            // 1551\n *                                                                                                                     // 1552\n * _.isObject({});                                                                                                     // 1553\n * // => true                                                                                                          // 1554\n *                                                                                                                     // 1555\n * _.isObject([1, 2, 3]);                                                                                              // 1556\n * // => true                                                                                                          // 1557\n *                                                                                                                     // 1558\n * _.isObject(_.noop);                                                                                                 // 1559\n * // => true                                                                                                          // 1560\n *                                                                                                                     // 1561\n * _.isObject(null);                                                                                                   // 1562\n * // => false                                                                                                         // 1563\n */                                                                                                                    // 1564\nfunction isObject(value) {                                                                                             // 1565\n  var type = typeof value;                                                                                             // 1566\n  return !!value && (type == 'object' || type == 'function');                                                          // 1567\n}                                                                                                                      // 1568\n                                                                                                                       // 1569\n/**                                                                                                                    // 1570\n * Checks if `value` is object-like. A value is object-like if it's not `null`                                         // 1571\n * and has a `typeof` result of \"object\".                                                                              // 1572\n *                                                                                                                     // 1573\n * @static                                                                                                             // 1574\n * @memberOf _                                                                                                         // 1575\n * @since 4.0.0                                                                                                        // 1576\n * @category Lang                                                                                                      // 1577\n * @param {*} value The value to check.                                                                                // 1578\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 1579\n * @example                                                                                                            // 1580\n *                                                                                                                     // 1581\n * _.isObjectLike({});                                                                                                 // 1582\n * // => true                                                                                                          // 1583\n *                                                                                                                     // 1584\n * _.isObjectLike([1, 2, 3]);                                                                                          // 1585\n * // => true                                                                                                          // 1586\n *                                                                                                                     // 1587\n * _.isObjectLike(_.noop);                                                                                             // 1588\n * // => false                                                                                                         // 1589\n *                                                                                                                     // 1590\n * _.isObjectLike(null);                                                                                               // 1591\n * // => false                                                                                                         // 1592\n */                                                                                                                    // 1593\nfunction isObjectLike(value) {                                                                                         // 1594\n  return !!value && typeof value == 'object';                                                                          // 1595\n}                                                                                                                      // 1596\n                                                                                                                       // 1597\n/**                                                                                                                    // 1598\n * Checks if `value` is classified as a typed array.                                                                   // 1599\n *                                                                                                                     // 1600\n * @static                                                                                                             // 1601\n * @memberOf _                                                                                                         // 1602\n * @since 3.0.0                                                                                                        // 1603\n * @category Lang                                                                                                      // 1604\n * @param {*} value The value to check.                                                                                // 1605\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.                                        // 1606\n * @example                                                                                                            // 1607\n *                                                                                                                     // 1608\n * _.isTypedArray(new Uint8Array);                                                                                     // 1609\n * // => true                                                                                                          // 1610\n *                                                                                                                     // 1611\n * _.isTypedArray([]);                                                                                                 // 1612\n * // => false                                                                                                         // 1613\n */                                                                                                                    // 1614\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;                                  // 1615\n                                                                                                                       // 1616\n/**                                                                                                                    // 1617\n * Creates an array of the own enumerable property names of `object`.                                                  // 1618\n *                                                                                                                     // 1619\n * **Note:** Non-object values are coerced to objects. See the                                                         // 1620\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)                                              // 1621\n * for more details.                                                                                                   // 1622\n *                                                                                                                     // 1623\n * @static                                                                                                             // 1624\n * @since 0.1.0                                                                                                        // 1625\n * @memberOf _                                                                                                         // 1626\n * @category Object                                                                                                    // 1627\n * @param {Object} object The object to query.                                                                         // 1628\n * @returns {Array} Returns the array of property names.                                                               // 1629\n * @example                                                                                                            // 1630\n *                                                                                                                     // 1631\n * function Foo() {                                                                                                    // 1632\n *   this.a = 1;                                                                                                       // 1633\n *   this.b = 2;                                                                                                       // 1634\n * }                                                                                                                   // 1635\n *                                                                                                                     // 1636\n * Foo.prototype.c = 3;                                                                                                // 1637\n *                                                                                                                     // 1638\n * _.keys(new Foo);                                                                                                    // 1639\n * // => ['a', 'b'] (iteration order is not guaranteed)                                                                // 1640\n *                                                                                                                     // 1641\n * _.keys('hi');                                                                                                       // 1642\n * // => ['0', '1']                                                                                                    // 1643\n */                                                                                                                    // 1644\nfunction keys(object) {                                                                                                // 1645\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);                                               // 1646\n}                                                                                                                      // 1647\n                                                                                                                       // 1648\nmodule.exports = isEqual;                                                                                              // 1649\n                                                                                                                       // 1650\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.pick\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.pick/package.json                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.pick\";                                                                                          // 1\nexports.version = \"4.4.0\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.pick/index.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash (Custom Build) <https://lodash.com/>                                                                         // 2\n * Build: `lodash modularize exports=\"npm\" -o ./`                                                                      // 3\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>                                            // 4\n * Released under MIT license <https://lodash.com/license>                                                             // 5\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                                      // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/** Used as references for various `Number` constants. */                                                              // 10\nvar INFINITY = 1 / 0,                                                                                                  // 11\n    MAX_SAFE_INTEGER = 9007199254740991;                                                                               // 12\n                                                                                                                       // 13\n/** `Object#toString` result references. */                                                                            // 14\nvar argsTag = '[object Arguments]',                                                                                    // 15\n    funcTag = '[object Function]',                                                                                     // 16\n    genTag = '[object GeneratorFunction]',                                                                             // 17\n    symbolTag = '[object Symbol]';                                                                                     // 18\n                                                                                                                       // 19\n/** Detect free variable `global` from Node.js. */                                                                     // 20\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;                            // 21\n                                                                                                                       // 22\n/** Detect free variable `self`. */                                                                                    // 23\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;                                      // 24\n                                                                                                                       // 25\n/** Used as a reference to the global object. */                                                                       // 26\nvar root = freeGlobal || freeSelf || Function('return this')();                                                        // 27\n                                                                                                                       // 28\n/**                                                                                                                    // 29\n * A faster alternative to `Function#apply`, this function invokes `func`                                              // 30\n * with the `this` binding of `thisArg` and the arguments of `args`.                                                   // 31\n *                                                                                                                     // 32\n * @private                                                                                                            // 33\n * @param {Function} func The function to invoke.                                                                      // 34\n * @param {*} thisArg The `this` binding of `func`.                                                                    // 35\n * @param {Array} args The arguments to invoke `func` with.                                                            // 36\n * @returns {*} Returns the result of `func`.                                                                          // 37\n */                                                                                                                    // 38\nfunction apply(func, thisArg, args) {                                                                                  // 39\n  switch (args.length) {                                                                                               // 40\n    case 0: return func.call(thisArg);                                                                                 // 41\n    case 1: return func.call(thisArg, args[0]);                                                                        // 42\n    case 2: return func.call(thisArg, args[0], args[1]);                                                               // 43\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);                                                      // 44\n  }                                                                                                                    // 45\n  return func.apply(thisArg, args);                                                                                    // 46\n}                                                                                                                      // 47\n                                                                                                                       // 48\n/**                                                                                                                    // 49\n * A specialized version of `_.map` for arrays without support for iteratee                                            // 50\n * shorthands.                                                                                                         // 51\n *                                                                                                                     // 52\n * @private                                                                                                            // 53\n * @param {Array} [array] The array to iterate over.                                                                   // 54\n * @param {Function} iteratee The function invoked per iteration.                                                      // 55\n * @returns {Array} Returns the new mapped array.                                                                      // 56\n */                                                                                                                    // 57\nfunction arrayMap(array, iteratee) {                                                                                   // 58\n  var index = -1,                                                                                                      // 59\n      length = array ? array.length : 0,                                                                               // 60\n      result = Array(length);                                                                                          // 61\n                                                                                                                       // 62\n  while (++index < length) {                                                                                           // 63\n    result[index] = iteratee(array[index], index, array);                                                              // 64\n  }                                                                                                                    // 65\n  return result;                                                                                                       // 66\n}                                                                                                                      // 67\n                                                                                                                       // 68\n/**                                                                                                                    // 69\n * Appends the elements of `values` to `array`.                                                                        // 70\n *                                                                                                                     // 71\n * @private                                                                                                            // 72\n * @param {Array} array The array to modify.                                                                           // 73\n * @param {Array} values The values to append.                                                                         // 74\n * @returns {Array} Returns `array`.                                                                                   // 75\n */                                                                                                                    // 76\nfunction arrayPush(array, values) {                                                                                    // 77\n  var index = -1,                                                                                                      // 78\n      length = values.length,                                                                                          // 79\n      offset = array.length;                                                                                           // 80\n                                                                                                                       // 81\n  while (++index < length) {                                                                                           // 82\n    array[offset + index] = values[index];                                                                             // 83\n  }                                                                                                                    // 84\n  return array;                                                                                                        // 85\n}                                                                                                                      // 86\n                                                                                                                       // 87\n/** Used for built-in method references. */                                                                            // 88\nvar objectProto = Object.prototype;                                                                                    // 89\n                                                                                                                       // 90\n/** Used to check objects for own properties. */                                                                       // 91\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 92\n                                                                                                                       // 93\n/**                                                                                                                    // 94\n * Used to resolve the                                                                                                 // 95\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)                          // 96\n * of values.                                                                                                          // 97\n */                                                                                                                    // 98\nvar objectToString = objectProto.toString;                                                                             // 99\n                                                                                                                       // 100\n/** Built-in value references. */                                                                                      // 101\nvar Symbol = root.Symbol,                                                                                              // 102\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,                                                           // 103\n    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;                                                 // 104\n                                                                                                                       // 105\n/* Built-in method references for those with the same name as other `lodash` methods. */                               // 106\nvar nativeMax = Math.max;                                                                                              // 107\n                                                                                                                       // 108\n/**                                                                                                                    // 109\n * The base implementation of `_.flatten` with support for restricting flattening.                                     // 110\n *                                                                                                                     // 111\n * @private                                                                                                            // 112\n * @param {Array} array The array to flatten.                                                                          // 113\n * @param {number} depth The maximum recursion depth.                                                                  // 114\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.                                      // 115\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.                                        // 116\n * @param {Array} [result=[]] The initial result value.                                                                // 117\n * @returns {Array} Returns the new flattened array.                                                                   // 118\n */                                                                                                                    // 119\nfunction baseFlatten(array, depth, predicate, isStrict, result) {                                                      // 120\n  var index = -1,                                                                                                      // 121\n      length = array.length;                                                                                           // 122\n                                                                                                                       // 123\n  predicate || (predicate = isFlattenable);                                                                            // 124\n  result || (result = []);                                                                                             // 125\n                                                                                                                       // 126\n  while (++index < length) {                                                                                           // 127\n    var value = array[index];                                                                                          // 128\n    if (depth > 0 && predicate(value)) {                                                                               // 129\n      if (depth > 1) {                                                                                                 // 130\n        // Recursively flatten arrays (susceptible to call stack limits).                                              // 131\n        baseFlatten(value, depth - 1, predicate, isStrict, result);                                                    // 132\n      } else {                                                                                                         // 133\n        arrayPush(result, value);                                                                                      // 134\n      }                                                                                                                // 135\n    } else if (!isStrict) {                                                                                            // 136\n      result[result.length] = value;                                                                                   // 137\n    }                                                                                                                  // 138\n  }                                                                                                                    // 139\n  return result;                                                                                                       // 140\n}                                                                                                                      // 141\n                                                                                                                       // 142\n/**                                                                                                                    // 143\n * The base implementation of `_.pick` without support for individual                                                  // 144\n * property identifiers.                                                                                               // 145\n *                                                                                                                     // 146\n * @private                                                                                                            // 147\n * @param {Object} object The source object.                                                                           // 148\n * @param {string[]} props The property identifiers to pick.                                                           // 149\n * @returns {Object} Returns the new object.                                                                           // 150\n */                                                                                                                    // 151\nfunction basePick(object, props) {                                                                                     // 152\n  object = Object(object);                                                                                             // 153\n  return basePickBy(object, props, function(value, key) {                                                              // 154\n    return key in object;                                                                                              // 155\n  });                                                                                                                  // 156\n}                                                                                                                      // 157\n                                                                                                                       // 158\n/**                                                                                                                    // 159\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.                                     // 160\n *                                                                                                                     // 161\n * @private                                                                                                            // 162\n * @param {Object} object The source object.                                                                           // 163\n * @param {string[]} props The property identifiers to pick from.                                                      // 164\n * @param {Function} predicate The function invoked per property.                                                      // 165\n * @returns {Object} Returns the new object.                                                                           // 166\n */                                                                                                                    // 167\nfunction basePickBy(object, props, predicate) {                                                                        // 168\n  var index = -1,                                                                                                      // 169\n      length = props.length,                                                                                           // 170\n      result = {};                                                                                                     // 171\n                                                                                                                       // 172\n  while (++index < length) {                                                                                           // 173\n    var key = props[index],                                                                                            // 174\n        value = object[key];                                                                                           // 175\n                                                                                                                       // 176\n    if (predicate(value, key)) {                                                                                       // 177\n      result[key] = value;                                                                                             // 178\n    }                                                                                                                  // 179\n  }                                                                                                                    // 180\n  return result;                                                                                                       // 181\n}                                                                                                                      // 182\n                                                                                                                       // 183\n/**                                                                                                                    // 184\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.                                     // 185\n *                                                                                                                     // 186\n * @private                                                                                                            // 187\n * @param {Function} func The function to apply a rest parameter to.                                                   // 188\n * @param {number} [start=func.length-1] The start position of the rest parameter.                                     // 189\n * @returns {Function} Returns the new function.                                                                       // 190\n */                                                                                                                    // 191\nfunction baseRest(func, start) {                                                                                       // 192\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);                                               // 193\n  return function() {                                                                                                  // 194\n    var args = arguments,                                                                                              // 195\n        index = -1,                                                                                                    // 196\n        length = nativeMax(args.length - start, 0),                                                                    // 197\n        array = Array(length);                                                                                         // 198\n                                                                                                                       // 199\n    while (++index < length) {                                                                                         // 200\n      array[index] = args[start + index];                                                                              // 201\n    }                                                                                                                  // 202\n    index = -1;                                                                                                        // 203\n    var otherArgs = Array(start + 1);                                                                                  // 204\n    while (++index < start) {                                                                                          // 205\n      otherArgs[index] = args[index];                                                                                  // 206\n    }                                                                                                                  // 207\n    otherArgs[start] = array;                                                                                          // 208\n    return apply(func, this, otherArgs);                                                                               // 209\n  };                                                                                                                   // 210\n}                                                                                                                      // 211\n                                                                                                                       // 212\n/**                                                                                                                    // 213\n * Checks if `value` is a flattenable `arguments` object or array.                                                     // 214\n *                                                                                                                     // 215\n * @private                                                                                                            // 216\n * @param {*} value The value to check.                                                                                // 217\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.                                          // 218\n */                                                                                                                    // 219\nfunction isFlattenable(value) {                                                                                        // 220\n  return isArray(value) || isArguments(value) ||                                                                       // 221\n    !!(spreadableSymbol && value && value[spreadableSymbol]);                                                          // 222\n}                                                                                                                      // 223\n                                                                                                                       // 224\n/**                                                                                                                    // 225\n * Converts `value` to a string key if it's not a string or symbol.                                                    // 226\n *                                                                                                                     // 227\n * @private                                                                                                            // 228\n * @param {*} value The value to inspect.                                                                              // 229\n * @returns {string|symbol} Returns the key.                                                                           // 230\n */                                                                                                                    // 231\nfunction toKey(value) {                                                                                                // 232\n  if (typeof value == 'string' || isSymbol(value)) {                                                                   // 233\n    return value;                                                                                                      // 234\n  }                                                                                                                    // 235\n  var result = (value + '');                                                                                           // 236\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;                                                  // 237\n}                                                                                                                      // 238\n                                                                                                                       // 239\n/**                                                                                                                    // 240\n * Checks if `value` is likely an `arguments` object.                                                                  // 241\n *                                                                                                                     // 242\n * @static                                                                                                             // 243\n * @memberOf _                                                                                                         // 244\n * @since 0.1.0                                                                                                        // 245\n * @category Lang                                                                                                      // 246\n * @param {*} value The value to check.                                                                                // 247\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,                                              // 248\n *  else `false`.                                                                                                      // 249\n * @example                                                                                                            // 250\n *                                                                                                                     // 251\n * _.isArguments(function() { return arguments; }());                                                                  // 252\n * // => true                                                                                                          // 253\n *                                                                                                                     // 254\n * _.isArguments([1, 2, 3]);                                                                                           // 255\n * // => false                                                                                                         // 256\n */                                                                                                                    // 257\nfunction isArguments(value) {                                                                                          // 258\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 259\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&                                           // 260\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);                            // 261\n}                                                                                                                      // 262\n                                                                                                                       // 263\n/**                                                                                                                    // 264\n * Checks if `value` is classified as an `Array` object.                                                               // 265\n *                                                                                                                     // 266\n * @static                                                                                                             // 267\n * @memberOf _                                                                                                         // 268\n * @since 0.1.0                                                                                                        // 269\n * @category Lang                                                                                                      // 270\n * @param {*} value The value to check.                                                                                // 271\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.                                             // 272\n * @example                                                                                                            // 273\n *                                                                                                                     // 274\n * _.isArray([1, 2, 3]);                                                                                               // 275\n * // => true                                                                                                          // 276\n *                                                                                                                     // 277\n * _.isArray(document.body.children);                                                                                  // 278\n * // => false                                                                                                         // 279\n *                                                                                                                     // 280\n * _.isArray('abc');                                                                                                   // 281\n * // => false                                                                                                         // 282\n *                                                                                                                     // 283\n * _.isArray(_.noop);                                                                                                  // 284\n * // => false                                                                                                         // 285\n */                                                                                                                    // 286\nvar isArray = Array.isArray;                                                                                           // 287\n                                                                                                                       // 288\n/**                                                                                                                    // 289\n * Checks if `value` is array-like. A value is considered array-like if it's                                           // 290\n * not a function and has a `value.length` that's an integer greater than or                                           // 291\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.                                                   // 292\n *                                                                                                                     // 293\n * @static                                                                                                             // 294\n * @memberOf _                                                                                                         // 295\n * @since 4.0.0                                                                                                        // 296\n * @category Lang                                                                                                      // 297\n * @param {*} value The value to check.                                                                                // 298\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                           // 299\n * @example                                                                                                            // 300\n *                                                                                                                     // 301\n * _.isArrayLike([1, 2, 3]);                                                                                           // 302\n * // => true                                                                                                          // 303\n *                                                                                                                     // 304\n * _.isArrayLike(document.body.children);                                                                              // 305\n * // => true                                                                                                          // 306\n *                                                                                                                     // 307\n * _.isArrayLike('abc');                                                                                               // 308\n * // => true                                                                                                          // 309\n *                                                                                                                     // 310\n * _.isArrayLike(_.noop);                                                                                              // 311\n * // => false                                                                                                         // 312\n */                                                                                                                    // 313\nfunction isArrayLike(value) {                                                                                          // 314\n  return value != null && isLength(value.length) && !isFunction(value);                                                // 315\n}                                                                                                                      // 316\n                                                                                                                       // 317\n/**                                                                                                                    // 318\n * This method is like `_.isArrayLike` except that it also checks if `value`                                           // 319\n * is an object.                                                                                                       // 320\n *                                                                                                                     // 321\n * @static                                                                                                             // 322\n * @memberOf _                                                                                                         // 323\n * @since 4.0.0                                                                                                        // 324\n * @category Lang                                                                                                      // 325\n * @param {*} value The value to check.                                                                                // 326\n * @returns {boolean} Returns `true` if `value` is an array-like object,                                               // 327\n *  else `false`.                                                                                                      // 328\n * @example                                                                                                            // 329\n *                                                                                                                     // 330\n * _.isArrayLikeObject([1, 2, 3]);                                                                                     // 331\n * // => true                                                                                                          // 332\n *                                                                                                                     // 333\n * _.isArrayLikeObject(document.body.children);                                                                        // 334\n * // => true                                                                                                          // 335\n *                                                                                                                     // 336\n * _.isArrayLikeObject('abc');                                                                                         // 337\n * // => false                                                                                                         // 338\n *                                                                                                                     // 339\n * _.isArrayLikeObject(_.noop);                                                                                        // 340\n * // => false                                                                                                         // 341\n */                                                                                                                    // 342\nfunction isArrayLikeObject(value) {                                                                                    // 343\n  return isObjectLike(value) && isArrayLike(value);                                                                    // 344\n}                                                                                                                      // 345\n                                                                                                                       // 346\n/**                                                                                                                    // 347\n * Checks if `value` is classified as a `Function` object.                                                             // 348\n *                                                                                                                     // 349\n * @static                                                                                                             // 350\n * @memberOf _                                                                                                         // 351\n * @since 0.1.0                                                                                                        // 352\n * @category Lang                                                                                                      // 353\n * @param {*} value The value to check.                                                                                // 354\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.                                           // 355\n * @example                                                                                                            // 356\n *                                                                                                                     // 357\n * _.isFunction(_);                                                                                                    // 358\n * // => true                                                                                                          // 359\n *                                                                                                                     // 360\n * _.isFunction(/abc/);                                                                                                // 361\n * // => false                                                                                                         // 362\n */                                                                                                                    // 363\nfunction isFunction(value) {                                                                                           // 364\n  // The use of `Object#toString` avoids issues with the `typeof` operator                                             // 365\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.                                      // 366\n  var tag = isObject(value) ? objectToString.call(value) : '';                                                         // 367\n  return tag == funcTag || tag == genTag;                                                                              // 368\n}                                                                                                                      // 369\n                                                                                                                       // 370\n/**                                                                                                                    // 371\n * Checks if `value` is a valid array-like length.                                                                     // 372\n *                                                                                                                     // 373\n * **Note:** This method is loosely based on                                                                           // 374\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).                                             // 375\n *                                                                                                                     // 376\n * @static                                                                                                             // 377\n * @memberOf _                                                                                                         // 378\n * @since 4.0.0                                                                                                        // 379\n * @category Lang                                                                                                      // 380\n * @param {*} value The value to check.                                                                                // 381\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                       // 382\n * @example                                                                                                            // 383\n *                                                                                                                     // 384\n * _.isLength(3);                                                                                                      // 385\n * // => true                                                                                                          // 386\n *                                                                                                                     // 387\n * _.isLength(Number.MIN_VALUE);                                                                                       // 388\n * // => false                                                                                                         // 389\n *                                                                                                                     // 390\n * _.isLength(Infinity);                                                                                               // 391\n * // => false                                                                                                         // 392\n *                                                                                                                     // 393\n * _.isLength('3');                                                                                                    // 394\n * // => false                                                                                                         // 395\n */                                                                                                                    // 396\nfunction isLength(value) {                                                                                             // 397\n  return typeof value == 'number' &&                                                                                   // 398\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                                                         // 399\n}                                                                                                                      // 400\n                                                                                                                       // 401\n/**                                                                                                                    // 402\n * Checks if `value` is the                                                                                            // 403\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)                      // 404\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                      // 405\n *                                                                                                                     // 406\n * @static                                                                                                             // 407\n * @memberOf _                                                                                                         // 408\n * @since 0.1.0                                                                                                        // 409\n * @category Lang                                                                                                      // 410\n * @param {*} value The value to check.                                                                                // 411\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                            // 412\n * @example                                                                                                            // 413\n *                                                                                                                     // 414\n * _.isObject({});                                                                                                     // 415\n * // => true                                                                                                          // 416\n *                                                                                                                     // 417\n * _.isObject([1, 2, 3]);                                                                                              // 418\n * // => true                                                                                                          // 419\n *                                                                                                                     // 420\n * _.isObject(_.noop);                                                                                                 // 421\n * // => true                                                                                                          // 422\n *                                                                                                                     // 423\n * _.isObject(null);                                                                                                   // 424\n * // => false                                                                                                         // 425\n */                                                                                                                    // 426\nfunction isObject(value) {                                                                                             // 427\n  var type = typeof value;                                                                                             // 428\n  return !!value && (type == 'object' || type == 'function');                                                          // 429\n}                                                                                                                      // 430\n                                                                                                                       // 431\n/**                                                                                                                    // 432\n * Checks if `value` is object-like. A value is object-like if it's not `null`                                         // 433\n * and has a `typeof` result of \"object\".                                                                              // 434\n *                                                                                                                     // 435\n * @static                                                                                                             // 436\n * @memberOf _                                                                                                         // 437\n * @since 4.0.0                                                                                                        // 438\n * @category Lang                                                                                                      // 439\n * @param {*} value The value to check.                                                                                // 440\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 441\n * @example                                                                                                            // 442\n *                                                                                                                     // 443\n * _.isObjectLike({});                                                                                                 // 444\n * // => true                                                                                                          // 445\n *                                                                                                                     // 446\n * _.isObjectLike([1, 2, 3]);                                                                                          // 447\n * // => true                                                                                                          // 448\n *                                                                                                                     // 449\n * _.isObjectLike(_.noop);                                                                                             // 450\n * // => false                                                                                                         // 451\n *                                                                                                                     // 452\n * _.isObjectLike(null);                                                                                               // 453\n * // => false                                                                                                         // 454\n */                                                                                                                    // 455\nfunction isObjectLike(value) {                                                                                         // 456\n  return !!value && typeof value == 'object';                                                                          // 457\n}                                                                                                                      // 458\n                                                                                                                       // 459\n/**                                                                                                                    // 460\n * Checks if `value` is classified as a `Symbol` primitive or object.                                                  // 461\n *                                                                                                                     // 462\n * @static                                                                                                             // 463\n * @memberOf _                                                                                                         // 464\n * @since 4.0.0                                                                                                        // 465\n * @category Lang                                                                                                      // 466\n * @param {*} value The value to check.                                                                                // 467\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.                                             // 468\n * @example                                                                                                            // 469\n *                                                                                                                     // 470\n * _.isSymbol(Symbol.iterator);                                                                                        // 471\n * // => true                                                                                                          // 472\n *                                                                                                                     // 473\n * _.isSymbol('abc');                                                                                                  // 474\n * // => false                                                                                                         // 475\n */                                                                                                                    // 476\nfunction isSymbol(value) {                                                                                             // 477\n  return typeof value == 'symbol' ||                                                                                   // 478\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);                                                  // 479\n}                                                                                                                      // 480\n                                                                                                                       // 481\n/**                                                                                                                    // 482\n * Creates an object composed of the picked `object` properties.                                                       // 483\n *                                                                                                                     // 484\n * @static                                                                                                             // 485\n * @since 0.1.0                                                                                                        // 486\n * @memberOf _                                                                                                         // 487\n * @category Object                                                                                                    // 488\n * @param {Object} object The source object.                                                                           // 489\n * @param {...(string|string[])} [props] The property identifiers to pick.                                             // 490\n * @returns {Object} Returns the new object.                                                                           // 491\n * @example                                                                                                            // 492\n *                                                                                                                     // 493\n * var object = { 'a': 1, 'b': '2', 'c': 3 };                                                                          // 494\n *                                                                                                                     // 495\n * _.pick(object, ['a', 'c']);                                                                                         // 496\n * // => { 'a': 1, 'c': 3 }                                                                                            // 497\n */                                                                                                                    // 498\nvar pick = baseRest(function(object, props) {                                                                          // 499\n  return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));                               // 500\n});                                                                                                                    // 501\n                                                                                                                       // 502\nmodule.exports = pick;                                                                                                 // 503\n                                                                                                                       // 504\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.forown\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.forown/package.json                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"lodash.forown\";                                                                                        // 1\nexports.version = \"4.4.0\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/node_modules/lodash.forown/index.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * lodash (Custom Build) <https://lodash.com/>                                                                         // 2\n * Build: `lodash modularize exports=\"npm\" -o ./`                                                                      // 3\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>                                            // 4\n * Released under MIT license <https://lodash.com/license>                                                             // 5\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                                      // 7\n */                                                                                                                    // 8\n                                                                                                                       // 9\n/** Used as references for various `Number` constants. */                                                              // 10\nvar MAX_SAFE_INTEGER = 9007199254740991;                                                                               // 11\n                                                                                                                       // 12\n/** `Object#toString` result references. */                                                                            // 13\nvar argsTag = '[object Arguments]',                                                                                    // 14\n    funcTag = '[object Function]',                                                                                     // 15\n    genTag = '[object GeneratorFunction]';                                                                             // 16\n                                                                                                                       // 17\n/** Used to detect unsigned integer values. */                                                                         // 18\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;                                                                                     // 19\n                                                                                                                       // 20\n/**                                                                                                                    // 21\n * The base implementation of `_.times` without support for iteratee shorthands                                        // 22\n * or max array length checks.                                                                                         // 23\n *                                                                                                                     // 24\n * @private                                                                                                            // 25\n * @param {number} n The number of times to invoke `iteratee`.                                                         // 26\n * @param {Function} iteratee The function invoked per iteration.                                                      // 27\n * @returns {Array} Returns the array of results.                                                                      // 28\n */                                                                                                                    // 29\nfunction baseTimes(n, iteratee) {                                                                                      // 30\n  var index = -1,                                                                                                      // 31\n      result = Array(n);                                                                                               // 32\n                                                                                                                       // 33\n  while (++index < n) {                                                                                                // 34\n    result[index] = iteratee(index);                                                                                   // 35\n  }                                                                                                                    // 36\n  return result;                                                                                                       // 37\n}                                                                                                                      // 38\n                                                                                                                       // 39\n/**                                                                                                                    // 40\n * Creates a unary function that invokes `func` with its argument transformed.                                         // 41\n *                                                                                                                     // 42\n * @private                                                                                                            // 43\n * @param {Function} func The function to wrap.                                                                        // 44\n * @param {Function} transform The argument transform.                                                                 // 45\n * @returns {Function} Returns the new function.                                                                       // 46\n */                                                                                                                    // 47\nfunction overArg(func, transform) {                                                                                    // 48\n  return function(arg) {                                                                                               // 49\n    return func(transform(arg));                                                                                       // 50\n  };                                                                                                                   // 51\n}                                                                                                                      // 52\n                                                                                                                       // 53\n/** Used for built-in method references. */                                                                            // 54\nvar objectProto = Object.prototype;                                                                                    // 55\n                                                                                                                       // 56\n/** Used to check objects for own properties. */                                                                       // 57\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 58\n                                                                                                                       // 59\n/**                                                                                                                    // 60\n * Used to resolve the                                                                                                 // 61\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)                          // 62\n * of values.                                                                                                          // 63\n */                                                                                                                    // 64\nvar objectToString = objectProto.toString;                                                                             // 65\n                                                                                                                       // 66\n/** Built-in value references. */                                                                                      // 67\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;                                                           // 68\n                                                                                                                       // 69\n/* Built-in method references for those with the same name as other `lodash` methods. */                               // 70\nvar nativeKeys = overArg(Object.keys, Object);                                                                         // 71\n                                                                                                                       // 72\n/**                                                                                                                    // 73\n * Creates an array of the enumerable property names of the array-like `value`.                                        // 74\n *                                                                                                                     // 75\n * @private                                                                                                            // 76\n * @param {*} value The value to query.                                                                                // 77\n * @param {boolean} inherited Specify returning inherited property names.                                              // 78\n * @returns {Array} Returns the array of property names.                                                               // 79\n */                                                                                                                    // 80\nfunction arrayLikeKeys(value, inherited) {                                                                             // 81\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 82\n  // Safari 9 makes `arguments.length` enumerable in strict mode.                                                      // 83\n  var result = (isArray(value) || isArguments(value))                                                                  // 84\n    ? baseTimes(value.length, String)                                                                                  // 85\n    : [];                                                                                                              // 86\n                                                                                                                       // 87\n  var length = result.length,                                                                                          // 88\n      skipIndexes = !!length;                                                                                          // 89\n                                                                                                                       // 90\n  for (var key in value) {                                                                                             // 91\n    if ((inherited || hasOwnProperty.call(value, key)) &&                                                              // 92\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {                                                 // 93\n      result.push(key);                                                                                                // 94\n    }                                                                                                                  // 95\n  }                                                                                                                    // 96\n  return result;                                                                                                       // 97\n}                                                                                                                      // 98\n                                                                                                                       // 99\n/**                                                                                                                    // 100\n * The base implementation of `baseForOwn` which iterates over `object`                                                // 101\n * properties returned by `keysFunc` and invokes `iteratee` for each property.                                         // 102\n * Iteratee functions may exit iteration early by explicitly returning `false`.                                        // 103\n *                                                                                                                     // 104\n * @private                                                                                                            // 105\n * @param {Object} object The object to iterate over.                                                                  // 106\n * @param {Function} iteratee The function invoked per iteration.                                                      // 107\n * @param {Function} keysFunc The function to get the keys of `object`.                                                // 108\n * @returns {Object} Returns `object`.                                                                                 // 109\n */                                                                                                                    // 110\nvar baseFor = createBaseFor();                                                                                         // 111\n                                                                                                                       // 112\n/**                                                                                                                    // 113\n * The base implementation of `_.forOwn` without support for iteratee shorthands.                                      // 114\n *                                                                                                                     // 115\n * @private                                                                                                            // 116\n * @param {Object} object The object to iterate over.                                                                  // 117\n * @param {Function} iteratee The function invoked per iteration.                                                      // 118\n * @returns {Object} Returns `object`.                                                                                 // 119\n */                                                                                                                    // 120\nfunction baseForOwn(object, iteratee) {                                                                                // 121\n  return object && baseFor(object, iteratee, keys);                                                                    // 122\n}                                                                                                                      // 123\n                                                                                                                       // 124\n/**                                                                                                                    // 125\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.                                     // 126\n *                                                                                                                     // 127\n * @private                                                                                                            // 128\n * @param {Object} object The object to query.                                                                         // 129\n * @returns {Array} Returns the array of property names.                                                               // 130\n */                                                                                                                    // 131\nfunction baseKeys(object) {                                                                                            // 132\n  if (!isPrototype(object)) {                                                                                          // 133\n    return nativeKeys(object);                                                                                         // 134\n  }                                                                                                                    // 135\n  var result = [];                                                                                                     // 136\n  for (var key in Object(object)) {                                                                                    // 137\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {                                                    // 138\n      result.push(key);                                                                                                // 139\n    }                                                                                                                  // 140\n  }                                                                                                                    // 141\n  return result;                                                                                                       // 142\n}                                                                                                                      // 143\n                                                                                                                       // 144\n/**                                                                                                                    // 145\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.                                                  // 146\n *                                                                                                                     // 147\n * @private                                                                                                            // 148\n * @param {boolean} [fromRight] Specify iterating from right to left.                                                  // 149\n * @returns {Function} Returns the new base function.                                                                  // 150\n */                                                                                                                    // 151\nfunction createBaseFor(fromRight) {                                                                                    // 152\n  return function(object, iteratee, keysFunc) {                                                                        // 153\n    var index = -1,                                                                                                    // 154\n        iterable = Object(object),                                                                                     // 155\n        props = keysFunc(object),                                                                                      // 156\n        length = props.length;                                                                                         // 157\n                                                                                                                       // 158\n    while (length--) {                                                                                                 // 159\n      var key = props[fromRight ? length : ++index];                                                                   // 160\n      if (iteratee(iterable[key], key, iterable) === false) {                                                          // 161\n        break;                                                                                                         // 162\n      }                                                                                                                // 163\n    }                                                                                                                  // 164\n    return object;                                                                                                     // 165\n  };                                                                                                                   // 166\n}                                                                                                                      // 167\n                                                                                                                       // 168\n/**                                                                                                                    // 169\n * Checks if `value` is a valid array-like index.                                                                      // 170\n *                                                                                                                     // 171\n * @private                                                                                                            // 172\n * @param {*} value The value to check.                                                                                // 173\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                        // 174\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                        // 175\n */                                                                                                                    // 176\nfunction isIndex(value, length) {                                                                                      // 177\n  length = length == null ? MAX_SAFE_INTEGER : length;                                                                 // 178\n  return !!length &&                                                                                                   // 179\n    (typeof value == 'number' || reIsUint.test(value)) &&                                                              // 180\n    (value > -1 && value % 1 == 0 && value < length);                                                                  // 181\n}                                                                                                                      // 182\n                                                                                                                       // 183\n/**                                                                                                                    // 184\n * Checks if `value` is likely a prototype object.                                                                     // 185\n *                                                                                                                     // 186\n * @private                                                                                                            // 187\n * @param {*} value The value to check.                                                                                // 188\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.                                          // 189\n */                                                                                                                    // 190\nfunction isPrototype(value) {                                                                                          // 191\n  var Ctor = value && value.constructor,                                                                               // 192\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;                                            // 193\n                                                                                                                       // 194\n  return value === proto;                                                                                              // 195\n}                                                                                                                      // 196\n                                                                                                                       // 197\n/**                                                                                                                    // 198\n * Checks if `value` is likely an `arguments` object.                                                                  // 199\n *                                                                                                                     // 200\n * @static                                                                                                             // 201\n * @memberOf _                                                                                                         // 202\n * @since 0.1.0                                                                                                        // 203\n * @category Lang                                                                                                      // 204\n * @param {*} value The value to check.                                                                                // 205\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,                                              // 206\n *  else `false`.                                                                                                      // 207\n * @example                                                                                                            // 208\n *                                                                                                                     // 209\n * _.isArguments(function() { return arguments; }());                                                                  // 210\n * // => true                                                                                                          // 211\n *                                                                                                                     // 212\n * _.isArguments([1, 2, 3]);                                                                                           // 213\n * // => false                                                                                                         // 214\n */                                                                                                                    // 215\nfunction isArguments(value) {                                                                                          // 216\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.                                                    // 217\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&                                           // 218\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);                            // 219\n}                                                                                                                      // 220\n                                                                                                                       // 221\n/**                                                                                                                    // 222\n * Checks if `value` is classified as an `Array` object.                                                               // 223\n *                                                                                                                     // 224\n * @static                                                                                                             // 225\n * @memberOf _                                                                                                         // 226\n * @since 0.1.0                                                                                                        // 227\n * @category Lang                                                                                                      // 228\n * @param {*} value The value to check.                                                                                // 229\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.                                             // 230\n * @example                                                                                                            // 231\n *                                                                                                                     // 232\n * _.isArray([1, 2, 3]);                                                                                               // 233\n * // => true                                                                                                          // 234\n *                                                                                                                     // 235\n * _.isArray(document.body.children);                                                                                  // 236\n * // => false                                                                                                         // 237\n *                                                                                                                     // 238\n * _.isArray('abc');                                                                                                   // 239\n * // => false                                                                                                         // 240\n *                                                                                                                     // 241\n * _.isArray(_.noop);                                                                                                  // 242\n * // => false                                                                                                         // 243\n */                                                                                                                    // 244\nvar isArray = Array.isArray;                                                                                           // 245\n                                                                                                                       // 246\n/**                                                                                                                    // 247\n * Checks if `value` is array-like. A value is considered array-like if it's                                           // 248\n * not a function and has a `value.length` that's an integer greater than or                                           // 249\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.                                                   // 250\n *                                                                                                                     // 251\n * @static                                                                                                             // 252\n * @memberOf _                                                                                                         // 253\n * @since 4.0.0                                                                                                        // 254\n * @category Lang                                                                                                      // 255\n * @param {*} value The value to check.                                                                                // 256\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                           // 257\n * @example                                                                                                            // 258\n *                                                                                                                     // 259\n * _.isArrayLike([1, 2, 3]);                                                                                           // 260\n * // => true                                                                                                          // 261\n *                                                                                                                     // 262\n * _.isArrayLike(document.body.children);                                                                              // 263\n * // => true                                                                                                          // 264\n *                                                                                                                     // 265\n * _.isArrayLike('abc');                                                                                               // 266\n * // => true                                                                                                          // 267\n *                                                                                                                     // 268\n * _.isArrayLike(_.noop);                                                                                              // 269\n * // => false                                                                                                         // 270\n */                                                                                                                    // 271\nfunction isArrayLike(value) {                                                                                          // 272\n  return value != null && isLength(value.length) && !isFunction(value);                                                // 273\n}                                                                                                                      // 274\n                                                                                                                       // 275\n/**                                                                                                                    // 276\n * This method is like `_.isArrayLike` except that it also checks if `value`                                           // 277\n * is an object.                                                                                                       // 278\n *                                                                                                                     // 279\n * @static                                                                                                             // 280\n * @memberOf _                                                                                                         // 281\n * @since 4.0.0                                                                                                        // 282\n * @category Lang                                                                                                      // 283\n * @param {*} value The value to check.                                                                                // 284\n * @returns {boolean} Returns `true` if `value` is an array-like object,                                               // 285\n *  else `false`.                                                                                                      // 286\n * @example                                                                                                            // 287\n *                                                                                                                     // 288\n * _.isArrayLikeObject([1, 2, 3]);                                                                                     // 289\n * // => true                                                                                                          // 290\n *                                                                                                                     // 291\n * _.isArrayLikeObject(document.body.children);                                                                        // 292\n * // => true                                                                                                          // 293\n *                                                                                                                     // 294\n * _.isArrayLikeObject('abc');                                                                                         // 295\n * // => false                                                                                                         // 296\n *                                                                                                                     // 297\n * _.isArrayLikeObject(_.noop);                                                                                        // 298\n * // => false                                                                                                         // 299\n */                                                                                                                    // 300\nfunction isArrayLikeObject(value) {                                                                                    // 301\n  return isObjectLike(value) && isArrayLike(value);                                                                    // 302\n}                                                                                                                      // 303\n                                                                                                                       // 304\n/**                                                                                                                    // 305\n * Checks if `value` is classified as a `Function` object.                                                             // 306\n *                                                                                                                     // 307\n * @static                                                                                                             // 308\n * @memberOf _                                                                                                         // 309\n * @since 0.1.0                                                                                                        // 310\n * @category Lang                                                                                                      // 311\n * @param {*} value The value to check.                                                                                // 312\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.                                           // 313\n * @example                                                                                                            // 314\n *                                                                                                                     // 315\n * _.isFunction(_);                                                                                                    // 316\n * // => true                                                                                                          // 317\n *                                                                                                                     // 318\n * _.isFunction(/abc/);                                                                                                // 319\n * // => false                                                                                                         // 320\n */                                                                                                                    // 321\nfunction isFunction(value) {                                                                                           // 322\n  // The use of `Object#toString` avoids issues with the `typeof` operator                                             // 323\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.                                      // 324\n  var tag = isObject(value) ? objectToString.call(value) : '';                                                         // 325\n  return tag == funcTag || tag == genTag;                                                                              // 326\n}                                                                                                                      // 327\n                                                                                                                       // 328\n/**                                                                                                                    // 329\n * Checks if `value` is a valid array-like length.                                                                     // 330\n *                                                                                                                     // 331\n * **Note:** This method is loosely based on                                                                           // 332\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).                                             // 333\n *                                                                                                                     // 334\n * @static                                                                                                             // 335\n * @memberOf _                                                                                                         // 336\n * @since 4.0.0                                                                                                        // 337\n * @category Lang                                                                                                      // 338\n * @param {*} value The value to check.                                                                                // 339\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                       // 340\n * @example                                                                                                            // 341\n *                                                                                                                     // 342\n * _.isLength(3);                                                                                                      // 343\n * // => true                                                                                                          // 344\n *                                                                                                                     // 345\n * _.isLength(Number.MIN_VALUE);                                                                                       // 346\n * // => false                                                                                                         // 347\n *                                                                                                                     // 348\n * _.isLength(Infinity);                                                                                               // 349\n * // => false                                                                                                         // 350\n *                                                                                                                     // 351\n * _.isLength('3');                                                                                                    // 352\n * // => false                                                                                                         // 353\n */                                                                                                                    // 354\nfunction isLength(value) {                                                                                             // 355\n  return typeof value == 'number' &&                                                                                   // 356\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                                                         // 357\n}                                                                                                                      // 358\n                                                                                                                       // 359\n/**                                                                                                                    // 360\n * Checks if `value` is the                                                                                            // 361\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)                      // 362\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                      // 363\n *                                                                                                                     // 364\n * @static                                                                                                             // 365\n * @memberOf _                                                                                                         // 366\n * @since 0.1.0                                                                                                        // 367\n * @category Lang                                                                                                      // 368\n * @param {*} value The value to check.                                                                                // 369\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                            // 370\n * @example                                                                                                            // 371\n *                                                                                                                     // 372\n * _.isObject({});                                                                                                     // 373\n * // => true                                                                                                          // 374\n *                                                                                                                     // 375\n * _.isObject([1, 2, 3]);                                                                                              // 376\n * // => true                                                                                                          // 377\n *                                                                                                                     // 378\n * _.isObject(_.noop);                                                                                                 // 379\n * // => true                                                                                                          // 380\n *                                                                                                                     // 381\n * _.isObject(null);                                                                                                   // 382\n * // => false                                                                                                         // 383\n */                                                                                                                    // 384\nfunction isObject(value) {                                                                                             // 385\n  var type = typeof value;                                                                                             // 386\n  return !!value && (type == 'object' || type == 'function');                                                          // 387\n}                                                                                                                      // 388\n                                                                                                                       // 389\n/**                                                                                                                    // 390\n * Checks if `value` is object-like. A value is object-like if it's not `null`                                         // 391\n * and has a `typeof` result of \"object\".                                                                              // 392\n *                                                                                                                     // 393\n * @static                                                                                                             // 394\n * @memberOf _                                                                                                         // 395\n * @since 4.0.0                                                                                                        // 396\n * @category Lang                                                                                                      // 397\n * @param {*} value The value to check.                                                                                // 398\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 399\n * @example                                                                                                            // 400\n *                                                                                                                     // 401\n * _.isObjectLike({});                                                                                                 // 402\n * // => true                                                                                                          // 403\n *                                                                                                                     // 404\n * _.isObjectLike([1, 2, 3]);                                                                                          // 405\n * // => true                                                                                                          // 406\n *                                                                                                                     // 407\n * _.isObjectLike(_.noop);                                                                                             // 408\n * // => false                                                                                                         // 409\n *                                                                                                                     // 410\n * _.isObjectLike(null);                                                                                               // 411\n * // => false                                                                                                         // 412\n */                                                                                                                    // 413\nfunction isObjectLike(value) {                                                                                         // 414\n  return !!value && typeof value == 'object';                                                                          // 415\n}                                                                                                                      // 416\n                                                                                                                       // 417\n/**                                                                                                                    // 418\n * Iterates over own enumerable string keyed properties of an object and                                               // 419\n * invokes `iteratee` for each property. The iteratee is invoked with three                                            // 420\n * arguments: (value, key, object). Iteratee functions may exit iteration                                              // 421\n * early by explicitly returning `false`.                                                                              // 422\n *                                                                                                                     // 423\n * @static                                                                                                             // 424\n * @memberOf _                                                                                                         // 425\n * @since 0.3.0                                                                                                        // 426\n * @category Object                                                                                                    // 427\n * @param {Object} object The object to iterate over.                                                                  // 428\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                         // 429\n * @returns {Object} Returns `object`.                                                                                 // 430\n * @see _.forOwnRight                                                                                                  // 431\n * @example                                                                                                            // 432\n *                                                                                                                     // 433\n * function Foo() {                                                                                                    // 434\n *   this.a = 1;                                                                                                       // 435\n *   this.b = 2;                                                                                                       // 436\n * }                                                                                                                   // 437\n *                                                                                                                     // 438\n * Foo.prototype.c = 3;                                                                                                // 439\n *                                                                                                                     // 440\n * _.forOwn(new Foo, function(value, key) {                                                                            // 441\n *   console.log(key);                                                                                                 // 442\n * });                                                                                                                 // 443\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).                                                        // 444\n */                                                                                                                    // 445\nfunction forOwn(object, iteratee) {                                                                                    // 446\n  return object && baseForOwn(object, typeof iteratee == 'function' ? iteratee : identity);                            // 447\n}                                                                                                                      // 448\n                                                                                                                       // 449\n/**                                                                                                                    // 450\n * Creates an array of the own enumerable property names of `object`.                                                  // 451\n *                                                                                                                     // 452\n * **Note:** Non-object values are coerced to objects. See the                                                         // 453\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)                                              // 454\n * for more details.                                                                                                   // 455\n *                                                                                                                     // 456\n * @static                                                                                                             // 457\n * @since 0.1.0                                                                                                        // 458\n * @memberOf _                                                                                                         // 459\n * @category Object                                                                                                    // 460\n * @param {Object} object The object to query.                                                                         // 461\n * @returns {Array} Returns the array of property names.                                                               // 462\n * @example                                                                                                            // 463\n *                                                                                                                     // 464\n * function Foo() {                                                                                                    // 465\n *   this.a = 1;                                                                                                       // 466\n *   this.b = 2;                                                                                                       // 467\n * }                                                                                                                   // 468\n *                                                                                                                     // 469\n * Foo.prototype.c = 3;                                                                                                // 470\n *                                                                                                                     // 471\n * _.keys(new Foo);                                                                                                    // 472\n * // => ['a', 'b'] (iteration order is not guaranteed)                                                                // 473\n *                                                                                                                     // 474\n * _.keys('hi');                                                                                                       // 475\n * // => ['0', '1']                                                                                                    // 476\n */                                                                                                                    // 477\nfunction keys(object) {                                                                                                // 478\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);                                               // 479\n}                                                                                                                      // 480\n                                                                                                                       // 481\n/**                                                                                                                    // 482\n * This method returns the first argument it receives.                                                                 // 483\n *                                                                                                                     // 484\n * @static                                                                                                             // 485\n * @since 0.1.0                                                                                                        // 486\n * @memberOf _                                                                                                         // 487\n * @category Util                                                                                                      // 488\n * @param {*} value Any value.                                                                                         // 489\n * @returns {*} Returns `value`.                                                                                       // 490\n * @example                                                                                                            // 491\n *                                                                                                                     // 492\n * var object = { 'a': 1 };                                                                                            // 493\n *                                                                                                                     // 494\n * console.log(_.identity(object) === object);                                                                         // 495\n * // => true                                                                                                          // 496\n */                                                                                                                    // 497\nfunction identity(value) {                                                                                             // 498\n  return value;                                                                                                        // 499\n}                                                                                                                      // 500\n                                                                                                                       // 501\nmodule.exports = forOwn;                                                                                               // 502\n                                                                                                                       // 503\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"batching\":{\"queryMerging.js\":[\"../queries/getFromAST\",\"../data/storeUtils\",\"lodash.assign\",\"lodash.clonedeep\",\"lodash.isarray\",\"lodash.isnull\",\"lodash.isundefined\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/batching/queryMerging.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar getFromAST_1 = require('../queries/getFromAST');                                                                   // 2\nvar storeUtils_1 = require('../data/storeUtils');                                                                      // 3\nvar assign = require('lodash.assign');                                                                                 // 4\nvar cloneDeep = require('lodash.clonedeep');                                                                           // 5\nvar isArray = require('lodash.isarray');                                                                               // 6\nvar isNull = require('lodash.isnull');                                                                                 // 7\nvar isUndefined = require('lodash.isundefined');                                                                       // 8\nfunction mergeRequests(requests) {                                                                                     // 9\n    var rootQueryDoc = createEmptyRootQueryDoc();                                                                      // 10\n    var rootVariables;                                                                                                 // 11\n    requests.forEach(function (request, requestIndex) {                                                                // 12\n        request = cloneDeep(request);                                                                                  // 13\n        rootQueryDoc = addQueryToRoot(rootQueryDoc, request.query, requestIndex);                                      // 14\n        if (request.variables) {                                                                                       // 15\n            rootVariables = addVariablesToRoot(rootVariables, request.variables, request.query, requestIndex);         // 16\n        }                                                                                                              // 17\n    });                                                                                                                // 18\n    var rootRequest = {                                                                                                // 19\n        debugName: '___composed',                                                                                      // 20\n        query: rootQueryDoc,                                                                                           // 21\n        variables: rootVariables,                                                                                      // 22\n    };                                                                                                                 // 23\n    return rootRequest;                                                                                                // 24\n}                                                                                                                      // 25\nexports.mergeRequests = mergeRequests;                                                                                 // 26\nfunction unpackMergedResult(result, childRequests) {                                                                   // 27\n    var resultArray = childRequests.map(function (request, index) {                                                    // 28\n        var unpackedData = unpackDataForRequest({                                                                      // 29\n            request: request,                                                                                          // 30\n            data: result.data,                                                                                         // 31\n            selectionSet: getFromAST_1.getQueryDefinition(request.query).selectionSet,                                 // 32\n            queryIndex: index,                                                                                         // 33\n            startIndex: 0,                                                                                             // 34\n            fragmentMap: getFromAST_1.createFragmentMap(getFromAST_1.getFragmentDefinitions(request.query)),           // 35\n            topLevel: true,                                                                                            // 36\n        }).unpackedData;                                                                                               // 37\n        return assign({}, result, { data: unpackedData });                                                             // 38\n    });                                                                                                                // 39\n    return resultArray;                                                                                                // 40\n}                                                                                                                      // 41\nexports.unpackMergedResult = unpackMergedResult;                                                                       // 42\nfunction unpackDataForRequest(_a) {                                                                                    // 43\n    var request = _a.request, data = _a.data, selectionSet = _a.selectionSet, queryIndex = _a.queryIndex, startIndex = _a.startIndex, fragmentMap = _a.fragmentMap, topLevel = _a.topLevel;\n    if (!selectionSet) {                                                                                               // 45\n        return {                                                                                                       // 46\n            newIndex: startIndex,                                                                                      // 47\n            unpackedData: {},                                                                                          // 48\n        };                                                                                                             // 49\n    }                                                                                                                  // 50\n    var unpackedData = {};                                                                                             // 51\n    var currIndex = startIndex;                                                                                        // 52\n    selectionSet.selections.forEach(function (selection) {                                                             // 53\n        if (selection.kind === 'Field') {                                                                              // 54\n            var field = selection;                                                                                     // 55\n            var realName = storeUtils_1.resultKeyNameFromField(field);                                                 // 56\n            var aliasName = getOperationDefinitionName(getFromAST_1.getQueryDefinition(request.query), queryIndex);    // 57\n            var stringKey = topLevel ? aliasName + \"___fieldIndex_\" + currIndex : realName;                            // 58\n            if (topLevel) {                                                                                            // 59\n                currIndex += 1;                                                                                        // 60\n            }                                                                                                          // 61\n            var childData = isNull(data) ? null : data[stringKey];                                                     // 62\n            var resData = childData;                                                                                   // 63\n            if (field.selectionSet && field.selectionSet.selections.length > 0) {                                      // 64\n                var fieldOpts_1 = {                                                                                    // 65\n                    request: request,                                                                                  // 66\n                    data: childData,                                                                                   // 67\n                    selectionSet: field.selectionSet,                                                                  // 68\n                    queryIndex: queryIndex,                                                                            // 69\n                    fragmentMap: fragmentMap,                                                                          // 70\n                    startIndex: currIndex,                                                                             // 71\n                    topLevel: false,                                                                                   // 72\n                };                                                                                                     // 73\n                if (isNull(childData)) {                                                                               // 74\n                    var selectionRet = unpackDataForRequest(assign(fieldOpts_1, {                                      // 75\n                        startIndex: currIndex,                                                                         // 76\n                    }));                                                                                               // 77\n                    currIndex = selectionRet.newIndex;                                                                 // 78\n                    resData = childData;                                                                               // 79\n                }                                                                                                      // 80\n                else if (isArray(childData)) {                                                                         // 81\n                    var resUnpacked_1 = [];                                                                            // 82\n                    var newIndex_1 = 0;                                                                                // 83\n                    childData.forEach(function (dataObject) {                                                          // 84\n                        var selectionRet = unpackDataForRequest(assign(fieldOpts_1, {                                  // 85\n                            data: dataObject,                                                                          // 86\n                            startIndex: currIndex,                                                                     // 87\n                        }));                                                                                           // 88\n                        newIndex_1 = selectionRet.newIndex;                                                            // 89\n                        resUnpacked_1.push(selectionRet.unpackedData);                                                 // 90\n                    });                                                                                                // 91\n                    currIndex = newIndex_1;                                                                            // 92\n                    resData = resUnpacked_1;                                                                           // 93\n                }                                                                                                      // 94\n                else {                                                                                                 // 95\n                    var selectionRet = unpackDataForRequest(assign(fieldOpts_1, { startIndex: currIndex }));           // 96\n                    resData = selectionRet.unpackedData;                                                               // 97\n                    currIndex = selectionRet.newIndex;                                                                 // 98\n                }                                                                                                      // 99\n            }                                                                                                          // 100\n            if (!isUndefined(childData)) {                                                                             // 101\n                unpackedData[realName] = resData;                                                                      // 102\n            }                                                                                                          // 103\n        }                                                                                                              // 104\n        else if (selection.kind === 'InlineFragment') {                                                                // 105\n            var inlineFragment = selection;                                                                            // 106\n            var ret = unpackDataForRequest({                                                                           // 107\n                request: request,                                                                                      // 108\n                data: data,                                                                                            // 109\n                selectionSet: inlineFragment.selectionSet,                                                             // 110\n                queryIndex: queryIndex,                                                                                // 111\n                startIndex: currIndex,                                                                                 // 112\n                fragmentMap: fragmentMap,                                                                              // 113\n                topLevel: topLevel,                                                                                    // 114\n            });                                                                                                        // 115\n            assign(unpackedData, ret.unpackedData);                                                                    // 116\n            currIndex = ret.newIndex;                                                                                  // 117\n        }                                                                                                              // 118\n        else if (selection.kind === 'FragmentSpread') {                                                                // 119\n            var fragmentSpread = selection;                                                                            // 120\n            var fragment = fragmentMap[fragmentSpread.name.value];                                                     // 121\n            var fragmentRet = unpackDataForRequest({                                                                   // 122\n                request: request,                                                                                      // 123\n                data: data,                                                                                            // 124\n                selectionSet: fragment.selectionSet,                                                                   // 125\n                queryIndex: queryIndex,                                                                                // 126\n                startIndex: currIndex,                                                                                 // 127\n                fragmentMap: fragmentMap,                                                                              // 128\n                topLevel: true,                                                                                        // 129\n            });                                                                                                        // 130\n            assign(unpackedData, fragmentRet.unpackedData);                                                            // 131\n            currIndex = fragmentRet.newIndex;                                                                          // 132\n        }                                                                                                              // 133\n    });                                                                                                                // 134\n    return {                                                                                                           // 135\n        newIndex: currIndex,                                                                                           // 136\n        unpackedData: unpackedData,                                                                                    // 137\n    };                                                                                                                 // 138\n}                                                                                                                      // 139\nexports.unpackDataForRequest = unpackDataForRequest;                                                                   // 140\nfunction mergeQueryDocuments(childQueryDocs) {                                                                         // 141\n    var rootQueryDoc = createEmptyRootQueryDoc();                                                                      // 142\n    childQueryDocs.forEach(function (childQueryDoc, childQueryDocIndex) {                                              // 143\n        rootQueryDoc = addQueryToRoot(rootQueryDoc, childQueryDoc, childQueryDocIndex);                                // 144\n    });                                                                                                                // 145\n    return rootQueryDoc;                                                                                               // 146\n}                                                                                                                      // 147\nexports.mergeQueryDocuments = mergeQueryDocuments;                                                                     // 148\nfunction addVariablesToRoot(rootVariables, childVariables, childQueryDoc, childQueryDocIndex) {                        // 149\n    var aliasName = getOperationDefinitionName(getFromAST_1.getQueryDefinition(childQueryDoc), childQueryDocIndex);    // 150\n    var aliasedChildVariables = addPrefixToVariables(aliasName + '___', childVariables);                               // 151\n    return assign({}, rootVariables, aliasedChildVariables);                                                           // 152\n}                                                                                                                      // 153\nexports.addVariablesToRoot = addVariablesToRoot;                                                                       // 154\nfunction addQueryToRoot(rootQueryDoc, childQueryDoc, childQueryDocIndex) {                                             // 155\n    var aliasName = getOperationDefinitionName(getFromAST_1.getQueryDefinition(childQueryDoc), childQueryDocIndex);    // 156\n    var aliasedChild = applyAliasNameToDocument(childQueryDoc, aliasName);                                             // 157\n    var aliasedChildQueryDef = getFromAST_1.getQueryDefinition(aliasedChild);                                          // 158\n    var aliasedChildFragmentDefs = getFromAST_1.getFragmentDefinitions(aliasedChild);                                  // 159\n    var rootQueryDef = getFromAST_1.getQueryDefinition(rootQueryDoc);                                                  // 160\n    rootQueryDoc.definitions = rootQueryDoc.definitions.concat(aliasedChildFragmentDefs);                              // 161\n    rootQueryDef.selectionSet.selections =                                                                             // 162\n        rootQueryDef.selectionSet.selections.concat(aliasedChildQueryDef.selectionSet.selections);                     // 163\n    rootQueryDef.variableDefinitions =                                                                                 // 164\n        rootQueryDef.variableDefinitions.concat(aliasedChildQueryDef.variableDefinitions);                             // 165\n    return rootQueryDoc;                                                                                               // 166\n}                                                                                                                      // 167\nexports.addQueryToRoot = addQueryToRoot;                                                                               // 168\nfunction createEmptyRootQueryDoc(rootQueryName) {                                                                      // 169\n    if (!rootQueryName) {                                                                                              // 170\n        rootQueryName = '___composed';                                                                                 // 171\n    }                                                                                                                  // 172\n    return {                                                                                                           // 173\n        kind: 'Document',                                                                                              // 174\n        definitions: [                                                                                                 // 175\n            {                                                                                                          // 176\n                kind: 'OperationDefinition',                                                                           // 177\n                operation: 'query',                                                                                    // 178\n                name: {                                                                                                // 179\n                    kind: 'Name',                                                                                      // 180\n                    value: rootQueryName,                                                                              // 181\n                },                                                                                                     // 182\n                variableDefinitions: [],                                                                               // 183\n                directives: [],                                                                                        // 184\n                selectionSet: {                                                                                        // 185\n                    kind: 'SelectionSet',                                                                              // 186\n                    selections: [],                                                                                    // 187\n                },                                                                                                     // 188\n            },                                                                                                         // 189\n        ],                                                                                                             // 190\n    };                                                                                                                 // 191\n}                                                                                                                      // 192\nexports.createEmptyRootQueryDoc = createEmptyRootQueryDoc;                                                             // 193\nfunction renameFragmentSpreads(selSet, aliasName) {                                                                    // 194\n    if (selSet && selSet.selections) {                                                                                 // 195\n        selSet.selections = selSet.selections.map(function (selection) {                                               // 196\n            if (selection.kind === 'FragmentSpread') {                                                                 // 197\n                var fragmentSpread = selection;                                                                        // 198\n                fragmentSpread.name.value = getFragmentAliasName(fragmentSpread, aliasName);                           // 199\n                return fragmentSpread;                                                                                 // 200\n            }                                                                                                          // 201\n            else {                                                                                                     // 202\n                var withSelSet = selection;                                                                            // 203\n                withSelSet.selectionSet = renameFragmentSpreads(withSelSet.selectionSet, aliasName);                   // 204\n                return selection;                                                                                      // 205\n            }                                                                                                          // 206\n        });                                                                                                            // 207\n    }                                                                                                                  // 208\n    return selSet;                                                                                                     // 209\n}                                                                                                                      // 210\nexports.renameFragmentSpreads = renameFragmentSpreads;                                                                 // 211\nfunction renameVariablesInArgument(argument, aliasName) {                                                              // 212\n    if (argument.kind === 'Argument' &&                                                                                // 213\n        argument.value.kind === 'Variable') {                                                                          // 214\n        var varx = argument.value;                                                                                     // 215\n        argument.value.name.value = getVariableAliasName(varx, aliasName);                                             // 216\n    }                                                                                                                  // 217\n    return argument;                                                                                                   // 218\n}                                                                                                                      // 219\nfunction renameVariables(selSet, aliasName) {                                                                          // 220\n    if (selSet && selSet.selections) {                                                                                 // 221\n        selSet.selections = selSet.selections.map(function (selection) {                                               // 222\n            if (selection.kind === 'Field') {                                                                          // 223\n                var field = selection;                                                                                 // 224\n                if (field.arguments) {                                                                                 // 225\n                    field.arguments = field.arguments.map(function (argument) {                                        // 226\n                        return renameVariablesInArgument(argument, aliasName);                                         // 227\n                    });                                                                                                // 228\n                }                                                                                                      // 229\n                if (field.directives) {                                                                                // 230\n                    field.directives = field.directives.map(function (directive) {                                     // 231\n                        if (directive.arguments) {                                                                     // 232\n                            directive.arguments = directive.arguments.map(function (argument) {                        // 233\n                                return renameVariablesInArgument(argument, aliasName);                                 // 234\n                            });                                                                                        // 235\n                        }                                                                                              // 236\n                        return directive;                                                                              // 237\n                    });                                                                                                // 238\n                }                                                                                                      // 239\n                field.selectionSet = renameVariables(field.selectionSet, aliasName);                                   // 240\n                return field;                                                                                          // 241\n            }                                                                                                          // 242\n            else if (selection.kind === 'InlineFragment') {                                                            // 243\n                var inlineFragment = selection;                                                                        // 244\n                inlineFragment.selectionSet = renameVariables(inlineFragment.selectionSet, aliasName);                 // 245\n                return inlineFragment;                                                                                 // 246\n            }                                                                                                          // 247\n            return selection;                                                                                          // 248\n        });                                                                                                            // 249\n    }                                                                                                                  // 250\n    return selSet;                                                                                                     // 251\n}                                                                                                                      // 252\nexports.renameVariables = renameVariables;                                                                             // 253\nfunction applyAliasNameToVariableDefinition(vDef, aliasName) {                                                         // 254\n    if (containsMarker(vDef.variable.name.value)) {                                                                    // 255\n        throw new Error(\"Variable definition for \" + vDef.variable.name.value + \" contains \\\"___\\\"\");                  // 256\n    }                                                                                                                  // 257\n    vDef.variable.name.value = getVariableAliasName(vDef.variable, aliasName);                                         // 258\n    return vDef;                                                                                                       // 259\n}                                                                                                                      // 260\nexports.applyAliasNameToVariableDefinition = applyAliasNameToVariableDefinition;                                       // 261\nfunction applyAliasNameToDocument(document, aliasName) {                                                               // 262\n    document.definitions = document.definitions.map(function (definition) {                                            // 263\n        var operationOrFragmentDef = definition;                                                                       // 264\n        operationOrFragmentDef.selectionSet =                                                                          // 265\n            renameFragmentSpreads(operationOrFragmentDef.selectionSet, aliasName);                                     // 266\n        operationOrFragmentDef.selectionSet =                                                                          // 267\n            renameVariables(operationOrFragmentDef.selectionSet, aliasName);                                           // 268\n        return operationOrFragmentDef;                                                                                 // 269\n    });                                                                                                                // 270\n    var currStartIndex = 0;                                                                                            // 271\n    document.definitions = document.definitions.map(function (definition) {                                            // 272\n        if (definition.kind === 'OperationDefinition' &&                                                               // 273\n            definition.operation === 'query') {                                                                        // 274\n            var operationDef = definition;                                                                             // 275\n            if (operationDef.variableDefinitions) {                                                                    // 276\n                operationDef.variableDefinitions =                                                                     // 277\n                    operationDef.variableDefinitions.map(function (vDef) {                                             // 278\n                        return applyAliasNameToVariableDefinition(vDef, aliasName);                                    // 279\n                    });                                                                                                // 280\n            }                                                                                                          // 281\n            var retDef = applyAliasNameToTopLevelFields(operationDef, aliasName, currStartIndex);                      // 282\n            currStartIndex += operationDef.selectionSet.selections.length;                                             // 283\n            return retDef;                                                                                             // 284\n        }                                                                                                              // 285\n        else if (definition.kind === 'FragmentDefinition') {                                                           // 286\n            var fragmentDef = definition;                                                                              // 287\n            var retDef = applyAliasNameToFragment(fragmentDef, aliasName, currStartIndex);                             // 288\n            currStartIndex += fragmentDef.selectionSet.selections.length;                                              // 289\n            return retDef;                                                                                             // 290\n        }                                                                                                              // 291\n        else {                                                                                                         // 292\n            throw new Error('Cannot apply alias names to documents that contain mutations.');                          // 293\n        }                                                                                                              // 294\n    });                                                                                                                // 295\n    return document;                                                                                                   // 296\n}                                                                                                                      // 297\nexports.applyAliasNameToDocument = applyAliasNameToDocument;                                                           // 298\nfunction applyAliasNameToFragment(fragment, aliasName, startIndex) {                                                   // 299\n    if (containsMarker(fragment.name.value)) {                                                                         // 300\n        throw new Error(\"Fragment \" + fragment.name.value + \" contains \\\"___\\\"\");                                      // 301\n    }                                                                                                                  // 302\n    fragment.name.value = getFragmentAliasName(fragment, aliasName);                                                   // 303\n    fragment.selectionSet.selections =                                                                                 // 304\n        applyAliasNameToSelections(fragment.selectionSet.selections, aliasName, startIndex).res;                       // 305\n    return fragment;                                                                                                   // 306\n}                                                                                                                      // 307\nexports.applyAliasNameToFragment = applyAliasNameToFragment;                                                           // 308\nfunction applyAliasNameToTopLevelFields(childQuery, aliasName, startIndex) {                                           // 309\n    childQuery.selectionSet.selections =                                                                               // 310\n        applyAliasNameToSelections(childQuery.selectionSet.selections, aliasName, startIndex).res;                     // 311\n    return childQuery;                                                                                                 // 312\n}                                                                                                                      // 313\nexports.applyAliasNameToTopLevelFields = applyAliasNameToTopLevelFields;                                               // 314\nfunction getVariableAliasName(varNode, aliasName) {                                                                    // 315\n    return aliasName + \"___\" + varNode.name.value;                                                                     // 316\n}                                                                                                                      // 317\nexports.getVariableAliasName = getVariableAliasName;                                                                   // 318\nfunction getFragmentAliasName(fragment, queryAliasName) {                                                              // 319\n    return queryAliasName + \"___\" + fragment.name.value;                                                               // 320\n}                                                                                                                      // 321\nexports.getFragmentAliasName = getFragmentAliasName;                                                                   // 322\nfunction getOperationDefinitionName(operationDef, requestIndex) {                                                      // 323\n    var operationDefName = '';                                                                                         // 324\n    if (operationDef.name) {                                                                                           // 325\n        operationDefName = operationDef.name.value;                                                                    // 326\n    }                                                                                                                  // 327\n    return \"___\" + operationDefName + \"___requestIndex_\" + requestIndex;                                               // 328\n}                                                                                                                      // 329\nexports.getOperationDefinitionName = getOperationDefinitionName;                                                       // 330\nfunction aliasField(field, alias) {                                                                                    // 331\n    if (containsMarker(field.name.value)) {                                                                            // 332\n        throw new Error(\"Field \" + field.name.value + \" contains \\\"___\\\".\");                                           // 333\n    }                                                                                                                  // 334\n    field.alias = {                                                                                                    // 335\n        kind: 'Name',                                                                                                  // 336\n        value: alias,                                                                                                  // 337\n    };                                                                                                                 // 338\n    return field;                                                                                                      // 339\n}                                                                                                                      // 340\nexports.aliasField = aliasField;                                                                                       // 341\nfunction addPrefixToQuery(prefix, query) {                                                                             // 342\n    if (query.name) {                                                                                                  // 343\n        query.name.value = prefix + query.name.value;                                                                  // 344\n    }                                                                                                                  // 345\n    return query;                                                                                                      // 346\n}                                                                                                                      // 347\nexports.addPrefixToQuery = addPrefixToQuery;                                                                           // 348\nfunction addPrefixToVariables(prefix, variables) {                                                                     // 349\n    var newVariables = {};                                                                                             // 350\n    Object.keys(variables).forEach(function (variableName) {                                                           // 351\n        newVariables[prefix + variableName] = variables[variableName];                                                 // 352\n    });                                                                                                                // 353\n    return newVariables;                                                                                               // 354\n}                                                                                                                      // 355\nexports.addPrefixToVariables = addPrefixToVariables;                                                                   // 356\nfunction applyAliasNameToSelections(selections, aliasName, startIndex) {                                               // 357\n    var currIndex = startIndex;                                                                                        // 358\n    var res = selections.map(function (selection) {                                                                    // 359\n        if (selection.kind === 'Field') {                                                                              // 360\n            var aliasedField = aliasField(selection, aliasName + \"___fieldIndex_\" + currIndex);                        // 361\n            currIndex += 1;                                                                                            // 362\n            return aliasedField;                                                                                       // 363\n        }                                                                                                              // 364\n        else if (selection.kind === 'InlineFragment') {                                                                // 365\n            var inlineFragment = selection;                                                                            // 366\n            var ret = applyAliasNameToSelections(inlineFragment.selectionSet.selections, aliasName, currIndex);        // 367\n            inlineFragment.selectionSet.selections = ret.res;                                                          // 368\n            currIndex = ret.newIndex;                                                                                  // 369\n            return inlineFragment;                                                                                     // 370\n        }                                                                                                              // 371\n        else {                                                                                                         // 372\n            return selection;                                                                                          // 373\n        }                                                                                                              // 374\n    });                                                                                                                // 375\n    return {                                                                                                           // 376\n        res: res,                                                                                                      // 377\n        newIndex: currIndex,                                                                                           // 378\n    };                                                                                                                 // 379\n}                                                                                                                      // 380\nfunction containsMarker(name) {                                                                                        // 381\n    return name.indexOf('___') > -1;                                                                                   // 382\n}                                                                                                                      // 383\n//# sourceMappingURL=queryMerging.js.map                                                                               // 384\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"queries\":{\"getFromAST.js\":[\"lodash.assign\",\"lodash.countby\",\"lodash.identity\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/queries/getFromAST.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar assign = require('lodash.assign');                                                                                 // 2\nvar countBy = require('lodash.countby');                                                                               // 3\nvar identity = require('lodash.identity');                                                                             // 4\nfunction getMutationDefinition(doc) {                                                                                  // 5\n    checkDocument(doc);                                                                                                // 6\n    var mutationDef = null;                                                                                            // 7\n    doc.definitions.forEach(function (definition) {                                                                    // 8\n        if (definition.kind === 'OperationDefinition'                                                                  // 9\n            && definition.operation === 'mutation') {                                                                  // 10\n            mutationDef = definition;                                                                                  // 11\n        }                                                                                                              // 12\n    });                                                                                                                // 13\n    if (!mutationDef) {                                                                                                // 14\n        throw new Error('Must contain a mutation definition.');                                                        // 15\n    }                                                                                                                  // 16\n    return mutationDef;                                                                                                // 17\n}                                                                                                                      // 18\nexports.getMutationDefinition = getMutationDefinition;                                                                 // 19\nfunction checkDocument(doc) {                                                                                          // 20\n    if (doc.kind !== 'Document') {                                                                                     // 21\n        throw new Error(\"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    }                                                                                                                  // 23\n    var definitionTypes = doc.definitions.map(function (definition) {                                                  // 24\n        if (definition.kind !== 'OperationDefinition' && definition.kind !== 'FragmentDefinition') {                   // 25\n            throw new Error(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");     // 26\n        }                                                                                                              // 27\n        return definition.kind;                                                                                        // 28\n    });                                                                                                                // 29\n    var typeCounts = countBy(definitionTypes, identity);                                                               // 30\n    if (typeCounts['OperationDefinition'] > 1) {                                                                       // 31\n        throw new Error('Queries must have exactly one operation definition.');                                        // 32\n    }                                                                                                                  // 33\n}                                                                                                                      // 34\nexports.checkDocument = checkDocument;                                                                                 // 35\nfunction getOperationName(doc) {                                                                                       // 36\n    var res = '';                                                                                                      // 37\n    doc.definitions.forEach(function (definition) {                                                                    // 38\n        if (definition.kind === 'OperationDefinition'                                                                  // 39\n            && definition.name) {                                                                                      // 40\n            res = definition.name.value;                                                                               // 41\n        }                                                                                                              // 42\n    });                                                                                                                // 43\n    return res;                                                                                                        // 44\n}                                                                                                                      // 45\nexports.getOperationName = getOperationName;                                                                           // 46\nfunction getFragmentDefinitions(doc) {                                                                                 // 47\n    var fragmentDefinitions = doc.definitions.filter(function (definition) {                                           // 48\n        if (definition.kind === 'FragmentDefinition') {                                                                // 49\n            return true;                                                                                               // 50\n        }                                                                                                              // 51\n        else {                                                                                                         // 52\n            return false;                                                                                              // 53\n        }                                                                                                              // 54\n    });                                                                                                                // 55\n    return fragmentDefinitions;                                                                                        // 56\n}                                                                                                                      // 57\nexports.getFragmentDefinitions = getFragmentDefinitions;                                                               // 58\nfunction getQueryDefinition(doc) {                                                                                     // 59\n    checkDocument(doc);                                                                                                // 60\n    var queryDef = null;                                                                                               // 61\n    doc.definitions.map(function (definition) {                                                                        // 62\n        if (definition.kind === 'OperationDefinition'                                                                  // 63\n            && definition.operation === 'query') {                                                                     // 64\n            queryDef = definition;                                                                                     // 65\n        }                                                                                                              // 66\n    });                                                                                                                // 67\n    if (!queryDef) {                                                                                                   // 68\n        throw new Error('Must contain a query definition.');                                                           // 69\n    }                                                                                                                  // 70\n    return queryDef;                                                                                                   // 71\n}                                                                                                                      // 72\nexports.getQueryDefinition = getQueryDefinition;                                                                       // 73\nfunction getFragmentDefinition(doc) {                                                                                  // 74\n    if (doc.kind !== 'Document') {                                                                                     // 75\n        throw new Error(\"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    }                                                                                                                  // 77\n    if (doc.definitions.length > 1) {                                                                                  // 78\n        throw new Error('Fragment must have exactly one definition.');                                                 // 79\n    }                                                                                                                  // 80\n    var fragmentDef = doc.definitions[0];                                                                              // 81\n    if (fragmentDef.kind !== 'FragmentDefinition') {                                                                   // 82\n        throw new Error('Must be a fragment definition.');                                                             // 83\n    }                                                                                                                  // 84\n    return fragmentDef;                                                                                                // 85\n}                                                                                                                      // 86\nexports.getFragmentDefinition = getFragmentDefinition;                                                                 // 87\nfunction createFragmentMap(fragments) {                                                                                // 88\n    if (fragments === void 0) { fragments = []; }                                                                      // 89\n    var symTable = {};                                                                                                 // 90\n    fragments.forEach(function (fragment) {                                                                            // 91\n        symTable[fragment.name.value] = fragment;                                                                      // 92\n    });                                                                                                                // 93\n    return symTable;                                                                                                   // 94\n}                                                                                                                      // 95\nexports.createFragmentMap = createFragmentMap;                                                                         // 96\nfunction addFragmentsToDocument(queryDoc, fragments) {                                                                 // 97\n    checkDocument(queryDoc);                                                                                           // 98\n    return assign({}, queryDoc, {                                                                                      // 99\n        definitions: queryDoc.definitions.concat(fragments),                                                           // 100\n    });                                                                                                                // 101\n}                                                                                                                      // 102\nexports.addFragmentsToDocument = addFragmentsToDocument;                                                               // 103\n//# sourceMappingURL=getFromAST.js.map                                                                                 // 104\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"directives.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/queries/directives.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nfunction shouldInclude(selection, variables) {                                                                         // 2\n    if (!variables) {                                                                                                  // 3\n        variables = {};                                                                                                // 4\n    }                                                                                                                  // 5\n    if (!selection.directives) {                                                                                       // 6\n        return true;                                                                                                   // 7\n    }                                                                                                                  // 8\n    var res = true;                                                                                                    // 9\n    selection.directives.forEach(function (directive) {                                                                // 10\n        if (directive.name.value !== 'skip' && directive.name.value !== 'include') {                                   // 11\n            return;                                                                                                    // 12\n        }                                                                                                              // 13\n        var directiveArguments = directive.arguments;                                                                  // 14\n        var directiveName = directive.name.value;                                                                      // 15\n        if (directiveArguments.length !== 1) {                                                                         // 16\n            throw new Error(\"Incorrect number of arguments for the @\" + directiveName + \" directive.\");                // 17\n        }                                                                                                              // 18\n        var ifArgument = directive.arguments[0];                                                                       // 19\n        if (!ifArgument.name || ifArgument.name.value !== 'if') {                                                      // 20\n            throw new Error(\"Invalid argument for the @\" + directiveName + \" directive.\");                             // 21\n        }                                                                                                              // 22\n        var ifValue = directive.arguments[0].value;                                                                    // 23\n        var evaledValue = false;                                                                                       // 24\n        if (!ifValue || ifValue.kind !== 'BooleanValue') {                                                             // 25\n            if (ifValue.kind !== 'Variable') {                                                                         // 26\n                throw new Error(\"Argument for the @\" + directiveName + \" directive must be a variable or a bool ean value.\");\n            }                                                                                                          // 28\n            else {                                                                                                     // 29\n                evaledValue = variables[ifValue.name.value];                                                           // 30\n                if (evaledValue === undefined) {                                                                       // 31\n                    throw new Error(\"Invalid variable referenced in @\" + directiveName + \" directive.\");               // 32\n                }                                                                                                      // 33\n            }                                                                                                          // 34\n        }                                                                                                              // 35\n        else {                                                                                                         // 36\n            evaledValue = ifValue.value;                                                                               // 37\n        }                                                                                                              // 38\n        if (directiveName === 'skip') {                                                                                // 39\n            evaledValue = !evaledValue;                                                                                // 40\n        }                                                                                                              // 41\n        if (!evaledValue) {                                                                                            // 42\n            res = false;                                                                                               // 43\n        }                                                                                                              // 44\n    });                                                                                                                // 45\n    return res;                                                                                                        // 46\n}                                                                                                                      // 47\nexports.shouldInclude = shouldInclude;                                                                                 // 48\n//# sourceMappingURL=directives.js.map                                                                                 // 49\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"store.js\":[\"../actions\",\"../data/storeUtils\",\"lodash.assign\",\"lodash.isequal\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/queries/store.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar actions_1 = require('../actions');                                                                                 // 2\nvar storeUtils_1 = require('../data/storeUtils');                                                                      // 3\nvar assign = require('lodash.assign');                                                                                 // 4\nvar isEqual = require('lodash.isequal');                                                                               // 5\nfunction queries(previousState, action) {                                                                              // 6\n    if (previousState === void 0) { previousState = {}; }                                                              // 7\n    if (actions_1.isQueryInitAction(action)) {                                                                         // 8\n        var newState = assign({}, previousState);                                                                      // 9\n        var previousQuery = previousState[action.queryId];                                                             // 10\n        var previousVariables = void 0;                                                                                // 11\n        if (action.storePreviousVariables && previousQuery) {                                                          // 12\n            if (!isEqual(previousQuery.variables, action.variables)) {                                                 // 13\n                previousVariables = previousQuery.variables;                                                           // 14\n            }                                                                                                          // 15\n        }                                                                                                              // 16\n        newState[action.queryId] = {                                                                                   // 17\n            queryString: action.queryString,                                                                           // 18\n            query: action.query,                                                                                       // 19\n            minimizedQueryString: action.minimizedQueryString,                                                         // 20\n            minimizedQuery: action.minimizedQuery,                                                                     // 21\n            variables: action.variables,                                                                               // 22\n            previousVariables: previousVariables,                                                                      // 23\n            loading: true,                                                                                             // 24\n            stopped: false,                                                                                            // 25\n            networkError: null,                                                                                        // 26\n            graphQLErrors: null,                                                                                       // 27\n            forceFetch: action.forceFetch,                                                                             // 28\n            returnPartialData: action.returnPartialData,                                                               // 29\n            lastRequestId: action.requestId,                                                                           // 30\n            fragmentMap: action.fragmentMap,                                                                           // 31\n        };                                                                                                             // 32\n        return newState;                                                                                               // 33\n    }                                                                                                                  // 34\n    else if (actions_1.isQueryResultAction(action)) {                                                                  // 35\n        if (!previousState[action.queryId]) {                                                                          // 36\n            return previousState;                                                                                      // 37\n        }                                                                                                              // 38\n        if (action.requestId < previousState[action.queryId].lastRequestId) {                                          // 39\n            return previousState;                                                                                      // 40\n        }                                                                                                              // 41\n        var newState = assign({}, previousState);                                                                      // 42\n        var resultHasGraphQLErrors = storeUtils_1.graphQLResultHasError(action.result);                                // 43\n        newState[action.queryId] = assign({}, previousState[action.queryId], {                                         // 44\n            loading: false,                                                                                            // 45\n            networkError: null,                                                                                        // 46\n            graphQLErrors: resultHasGraphQLErrors ? action.result.errors : null,                                       // 47\n            previousVariables: null,                                                                                   // 48\n        });                                                                                                            // 49\n        return newState;                                                                                               // 50\n    }                                                                                                                  // 51\n    else if (actions_1.isQueryErrorAction(action)) {                                                                   // 52\n        if (!previousState[action.queryId]) {                                                                          // 53\n            return previousState;                                                                                      // 54\n        }                                                                                                              // 55\n        if (action.requestId < previousState[action.queryId].lastRequestId) {                                          // 56\n            return previousState;                                                                                      // 57\n        }                                                                                                              // 58\n        var newState = assign({}, previousState);                                                                      // 59\n        newState[action.queryId] = assign({}, previousState[action.queryId], {                                         // 60\n            loading: false,                                                                                            // 61\n            networkError: action.error,                                                                                // 62\n        });                                                                                                            // 63\n        return newState;                                                                                               // 64\n    }                                                                                                                  // 65\n    else if (actions_1.isQueryResultClientAction(action)) {                                                            // 66\n        if (!previousState[action.queryId]) {                                                                          // 67\n            return previousState;                                                                                      // 68\n        }                                                                                                              // 69\n        var newState = assign({}, previousState);                                                                      // 70\n        newState[action.queryId] = assign({}, previousState[action.queryId], {                                         // 71\n            loading: action.complete,                                                                                  // 72\n            networkError: null,                                                                                        // 73\n            previousVariables: null,                                                                                   // 74\n        });                                                                                                            // 75\n        return newState;                                                                                               // 76\n    }                                                                                                                  // 77\n    else if (actions_1.isQueryStopAction(action)) {                                                                    // 78\n        var newState = assign({}, previousState);                                                                      // 79\n        newState[action.queryId] = assign({}, previousState[action.queryId], {                                         // 80\n            loading: false,                                                                                            // 81\n            stopped: true,                                                                                             // 82\n        });                                                                                                            // 83\n        return newState;                                                                                               // 84\n    }                                                                                                                  // 85\n    else if (actions_1.isStoreResetAction(action)) {                                                                   // 86\n        return resetQueryState(previousState, action);                                                                 // 87\n    }                                                                                                                  // 88\n    return previousState;                                                                                              // 89\n}                                                                                                                      // 90\nexports.queries = queries;                                                                                             // 91\nfunction resetQueryState(state, action) {                                                                              // 92\n    var observableQueryIds = action.observableQueryIds;                                                                // 93\n    var newQueries = Object.keys(state).filter(function (queryId) {                                                    // 94\n        return (observableQueryIds.indexOf(queryId) > -1);                                                             // 95\n    }).reduce(function (res, key) {                                                                                    // 96\n        res[key] = state[key];                                                                                         // 97\n        return res;                                                                                                    // 98\n    }, {});                                                                                                            // 99\n    return newQueries;                                                                                                 // 100\n}                                                                                                                      // 101\n//# sourceMappingURL=store.js.map                                                                                      // 102\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"queryTransform.js\":[\"./getFromAST\",\"lodash.clonedeep\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/queries/queryTransform.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar getFromAST_1 = require('./getFromAST');                                                                            // 2\nvar cloneDeep = require('lodash.clonedeep');                                                                           // 3\nfunction addFieldToSelectionSet(fieldName, selectionSet) {                                                             // 4\n    var fieldAst = {                                                                                                   // 5\n        kind: 'Field',                                                                                                 // 6\n        alias: null,                                                                                                   // 7\n        name: {                                                                                                        // 8\n            kind: 'Name',                                                                                              // 9\n            value: fieldName,                                                                                          // 10\n        },                                                                                                             // 11\n    };                                                                                                                 // 12\n    if (selectionSet && selectionSet.selections) {                                                                     // 13\n        var alreadyHasThisField_1 = false;                                                                             // 14\n        selectionSet.selections.forEach(function (selection) {                                                         // 15\n            if (selection.kind === 'Field' && selection.name.value === fieldName) {                                    // 16\n                alreadyHasThisField_1 = true;                                                                          // 17\n            }                                                                                                          // 18\n        });                                                                                                            // 19\n        if (!alreadyHasThisField_1) {                                                                                  // 20\n            selectionSet.selections.push(fieldAst);                                                                    // 21\n        }                                                                                                              // 22\n    }                                                                                                                  // 23\n}                                                                                                                      // 24\nexports.addFieldToSelectionSet = addFieldToSelectionSet;                                                               // 25\nfunction addTypenameToSelectionSet(selectionSet) {                                                                     // 26\n    return addFieldToSelectionSet('__typename', selectionSet);                                                         // 27\n}                                                                                                                      // 28\nexports.addTypenameToSelectionSet = addTypenameToSelectionSet;                                                         // 29\nfunction traverseSelectionSet(selectionSet, queryTransformers, isRoot) {                                               // 30\n    if (isRoot === void 0) { isRoot = false; }                                                                         // 31\n    if (selectionSet && selectionSet.selections) {                                                                     // 32\n        queryTransformers.forEach(function (transformer) {                                                             // 33\n            if (!isRoot) {                                                                                             // 34\n                transformer(selectionSet);                                                                             // 35\n            }                                                                                                          // 36\n            selectionSet.selections.forEach(function (selection) {                                                     // 37\n                if (selection.kind === 'Field' || selection.kind === 'InlineFragment') {                               // 38\n                    traverseSelectionSet(selection.selectionSet, queryTransformers);                                   // 39\n                }                                                                                                      // 40\n            });                                                                                                        // 41\n        });                                                                                                            // 42\n    }                                                                                                                  // 43\n}                                                                                                                      // 44\nfunction applyTransformers(doc, queryTransformers) {                                                                   // 45\n    getFromAST_1.checkDocument(doc);                                                                                   // 46\n    var docClone = cloneDeep(doc);                                                                                     // 47\n    docClone.definitions.forEach(function (definition) {                                                               // 48\n        if (definition.kind === 'OperationDefinition') {                                                               // 49\n            traverseSelectionSet(definition.selectionSet, queryTransformers, true);                                    // 50\n        }                                                                                                              // 51\n        else {                                                                                                         // 52\n            traverseSelectionSet(definition.selectionSet, queryTransformers);                                          // 53\n        }                                                                                                              // 54\n    });                                                                                                                // 55\n    return docClone;                                                                                                   // 56\n}                                                                                                                      // 57\nexports.applyTransformers = applyTransformers;                                                                         // 58\n//# sourceMappingURL=queryTransform.js.map                                                                             // 59\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"data\":{\"storeUtils.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/data/storeUtils.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nfunction isStringValue(value) {                                                                                        // 2\n    return value.kind === 'StringValue';                                                                               // 3\n}                                                                                                                      // 4\nfunction isBooleanValue(value) {                                                                                       // 5\n    return value.kind === 'BooleanValue';                                                                              // 6\n}                                                                                                                      // 7\nfunction isIntValue(value) {                                                                                           // 8\n    return value.kind === 'IntValue';                                                                                  // 9\n}                                                                                                                      // 10\nfunction isFloatValue(value) {                                                                                         // 11\n    return value.kind === 'FloatValue';                                                                                // 12\n}                                                                                                                      // 13\nfunction isVariable(value) {                                                                                           // 14\n    return value.kind === 'Variable';                                                                                  // 15\n}                                                                                                                      // 16\nfunction isObject(value) {                                                                                             // 17\n    return value.kind === 'ObjectValue';                                                                               // 18\n}                                                                                                                      // 19\nfunction isList(value) {                                                                                               // 20\n    return value.kind === 'ListValue';                                                                                 // 21\n}                                                                                                                      // 22\nfunction valueToObjectRepresentation(argObj, name, value, variables) {                                                 // 23\n    if (isIntValue(value) || isFloatValue(value)) {                                                                    // 24\n        argObj[name.value] = Number(value.value);                                                                      // 25\n    }                                                                                                                  // 26\n    else if (isBooleanValue(value) || isStringValue(value)) {                                                          // 27\n        argObj[name.value] = value.value;                                                                              // 28\n    }                                                                                                                  // 29\n    else if (isObject(value)) {                                                                                        // 30\n        var nestedArgObj_1 = {};                                                                                       // 31\n        value.fields.map(function (obj) { return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables); });\n        argObj[name.value] = nestedArgObj_1;                                                                           // 33\n    }                                                                                                                  // 34\n    else if (isVariable(value)) {                                                                                      // 35\n        if (!variables || !(value.name.value in variables)) {                                                          // 36\n            throw new Error(\"The inline argument \\\"\" + value.name.value + \"\\\" is expected as a variable but was not provided.\");\n        }                                                                                                              // 38\n        var variableValue = variables[value.name.value];                                                               // 39\n        argObj[name.value] = variableValue;                                                                            // 40\n    }                                                                                                                  // 41\n    else if (isList(value)) {                                                                                          // 42\n        argObj[name.value] = value.values.map(function (listValue) {                                                   // 43\n            var nestedArgArrayObj = {};                                                                                // 44\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);                                // 45\n            return nestedArgArrayObj[name.value];                                                                      // 46\n        });                                                                                                            // 47\n    }                                                                                                                  // 48\n    else {                                                                                                             // 49\n        throw new Error(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\" is not supported.\\n                    Use variables instead of inline arguments to overcome this limitation.\");\n    }                                                                                                                  // 51\n}                                                                                                                      // 52\nfunction storeKeyNameFromField(field, variables) {                                                                     // 53\n    if (field.arguments && field.arguments.length) {                                                                   // 54\n        var argObj_1 = {};                                                                                             // 55\n        field.arguments.forEach(function (_a) {                                                                        // 56\n            var name = _a.name, value = _a.value;                                                                      // 57\n            return valueToObjectRepresentation(argObj_1, name, value, variables);                                      // 58\n        });                                                                                                            // 59\n        return storeKeyNameFromFieldNameAndArgs(field.name.value, argObj_1);                                           // 60\n    }                                                                                                                  // 61\n    return field.name.value;                                                                                           // 62\n}                                                                                                                      // 63\nexports.storeKeyNameFromField = storeKeyNameFromField;                                                                 // 64\nfunction storeKeyNameFromFieldNameAndArgs(fieldName, args) {                                                           // 65\n    var stringifiedArgs = JSON.stringify(args);                                                                        // 66\n    return fieldName + \"(\" + stringifiedArgs + \")\";                                                                    // 67\n}                                                                                                                      // 68\nexports.storeKeyNameFromFieldNameAndArgs = storeKeyNameFromFieldNameAndArgs;                                           // 69\nfunction resultKeyNameFromField(field) {                                                                               // 70\n    return field.alias ?                                                                                               // 71\n        field.alias.value :                                                                                            // 72\n        field.name.value;                                                                                              // 73\n}                                                                                                                      // 74\nexports.resultKeyNameFromField = resultKeyNameFromField;                                                               // 75\nfunction isField(selection) {                                                                                          // 76\n    return selection.kind === 'Field';                                                                                 // 77\n}                                                                                                                      // 78\nexports.isField = isField;                                                                                             // 79\nfunction isInlineFragment(selection) {                                                                                 // 80\n    return selection.kind === 'InlineFragment';                                                                        // 81\n}                                                                                                                      // 82\nexports.isInlineFragment = isInlineFragment;                                                                           // 83\nfunction graphQLResultHasError(result) {                                                                               // 84\n    return result.errors && result.errors.length;                                                                      // 85\n}                                                                                                                      // 86\nexports.graphQLResultHasError = graphQLResultHasError;                                                                 // 87\n//# sourceMappingURL=storeUtils.js.map                                                                                 // 88\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"store.js\":[\"../actions\",\"./writeToStore\",\"lodash.assign\",\"lodash.isobject\",\"./storeUtils\",\"./mutationResults\",\"./replaceQueryResults\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/data/store.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar actions_1 = require('../actions');                                                                                 // 2\nvar writeToStore_1 = require('./writeToStore');                                                                        // 3\nvar assign = require('lodash.assign');                                                                                 // 4\nvar isObject = require('lodash.isobject');                                                                             // 5\nvar storeUtils_1 = require('./storeUtils');                                                                            // 6\nvar mutationResults_1 = require('./mutationResults');                                                                  // 7\nvar replaceQueryResults_1 = require('./replaceQueryResults');                                                          // 8\nfunction isIdValue(idObject) {                                                                                         // 9\n    return (isObject(idObject) && idObject.type === 'id');                                                             // 10\n}                                                                                                                      // 11\nexports.isIdValue = isIdValue;                                                                                         // 12\nfunction isJsonValue(jsonObject) {                                                                                     // 13\n    return (isObject(jsonObject) && jsonObject.type === 'json');                                                       // 14\n}                                                                                                                      // 15\nexports.isJsonValue = isJsonValue;                                                                                     // 16\nfunction data(previousState, action, queries, mutations, config) {                                                     // 17\n    if (previousState === void 0) { previousState = {}; }                                                              // 18\n    var constAction = action;                                                                                          // 19\n    if (actions_1.isQueryResultAction(action)) {                                                                       // 20\n        if (!queries[action.queryId]) {                                                                                // 21\n            return previousState;                                                                                      // 22\n        }                                                                                                              // 23\n        if (action.requestId < queries[action.queryId].lastRequestId) {                                                // 24\n            return previousState;                                                                                      // 25\n        }                                                                                                              // 26\n        if (!storeUtils_1.graphQLResultHasError(action.result)) {                                                      // 27\n            var queryStoreValue = queries[action.queryId];                                                             // 28\n            var clonedState = assign({}, previousState);                                                               // 29\n            var newState = writeToStore_1.writeSelectionSetToStore({                                                   // 30\n                result: action.result.data,                                                                            // 31\n                dataId: queryStoreValue.minimizedQuery.id,                                                             // 32\n                selectionSet: queryStoreValue.minimizedQuery.selectionSet,                                             // 33\n                variables: queryStoreValue.variables,                                                                  // 34\n                store: clonedState,                                                                                    // 35\n                dataIdFromObject: config.dataIdFromObject,                                                             // 36\n                fragmentMap: queryStoreValue.fragmentMap,                                                              // 37\n            });                                                                                                        // 38\n            return newState;                                                                                           // 39\n        }                                                                                                              // 40\n    }                                                                                                                  // 41\n    else if (actions_1.isMutationResultAction(constAction)) {                                                          // 42\n        if (!constAction.result.errors) {                                                                              // 43\n            var queryStoreValue_1 = mutations[constAction.mutationId];                                                 // 44\n            var clonedState = assign({}, previousState);                                                               // 45\n            var newState_1 = writeToStore_1.writeSelectionSetToStore({                                                 // 46\n                result: constAction.result.data,                                                                       // 47\n                dataId: queryStoreValue_1.mutation.id,                                                                 // 48\n                selectionSet: queryStoreValue_1.mutation.selectionSet,                                                 // 49\n                variables: queryStoreValue_1.variables,                                                                // 50\n                store: clonedState,                                                                                    // 51\n                dataIdFromObject: config.dataIdFromObject,                                                             // 52\n                fragmentMap: queryStoreValue_1.fragmentMap,                                                            // 53\n            });                                                                                                        // 54\n            if (constAction.resultBehaviors) {                                                                         // 55\n                constAction.resultBehaviors.forEach(function (behavior) {                                              // 56\n                    var args = {                                                                                       // 57\n                        behavior: behavior,                                                                            // 58\n                        result: constAction.result,                                                                    // 59\n                        variables: queryStoreValue_1.variables,                                                        // 60\n                        fragmentMap: queryStoreValue_1.fragmentMap,                                                    // 61\n                        selectionSet: queryStoreValue_1.mutation.selectionSet,                                         // 62\n                        config: config,                                                                                // 63\n                    };                                                                                                 // 64\n                    if (mutationResults_1.defaultMutationBehaviorReducers[behavior.type]) {                            // 65\n                        newState_1 = mutationResults_1.defaultMutationBehaviorReducers[behavior.type](newState_1, args);\n                    }                                                                                                  // 67\n                    else if (config.mutationBehaviorReducers[behavior.type]) {                                         // 68\n                        newState_1 = config.mutationBehaviorReducers[behavior.type](newState_1, args);                 // 69\n                    }                                                                                                  // 70\n                    else {                                                                                             // 71\n                        throw new Error(\"No mutation result reducer defined for type \" + behavior.type);               // 72\n                    }                                                                                                  // 73\n                });                                                                                                    // 74\n            }                                                                                                          // 75\n            return newState_1;                                                                                         // 76\n        }                                                                                                              // 77\n    }                                                                                                                  // 78\n    else if (actions_1.isUpdateQueryResultAction(constAction)) {                                                       // 79\n        return replaceQueryResults_1.replaceQueryResults(previousState, constAction, config);                          // 80\n    }                                                                                                                  // 81\n    else if (actions_1.isStoreResetAction(action)) {                                                                   // 82\n        return {};                                                                                                     // 83\n    }                                                                                                                  // 84\n    return previousState;                                                                                              // 85\n}                                                                                                                      // 86\nexports.data = data;                                                                                                   // 87\n//# sourceMappingURL=store.js.map                                                                                      // 88\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"writeToStore.js\":[\"lodash.isarray\",\"lodash.isnull\",\"lodash.isundefined\",\"lodash.isobject\",\"lodash.assign\",\"../queries/getFromAST\",\"./storeUtils\",\"./store\",\"./diffAgainstStore\",\"../queries/directives\",\"../errors\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/data/writeToStore.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar isArray = require('lodash.isarray');                                                                               // 2\nvar isNull = require('lodash.isnull');                                                                                 // 3\nvar isUndefined = require('lodash.isundefined');                                                                       // 4\nvar isObject = require('lodash.isobject');                                                                             // 5\nvar assign = require('lodash.assign');                                                                                 // 6\nvar getFromAST_1 = require('../queries/getFromAST');                                                                   // 7\nvar storeUtils_1 = require('./storeUtils');                                                                            // 8\nvar store_1 = require('./store');                                                                                      // 9\nvar diffAgainstStore_1 = require('./diffAgainstStore');                                                                // 10\nvar directives_1 = require('../queries/directives');                                                                   // 11\nvar errors_1 = require('../errors');                                                                                   // 12\nfunction writeFragmentToStore(_a) {                                                                                    // 13\n    var result = _a.result, fragment = _a.fragment, _b = _a.store, store = _b === void 0 ? {} : _b, variables = _a.variables, _c = _a.dataIdFromObject, dataIdFromObject = _c === void 0 ? null : _c;\n    if (!fragment) {                                                                                                   // 15\n        throw new Error('Must pass fragment.');                                                                        // 16\n    }                                                                                                                  // 17\n    var parsedFragment = getFromAST_1.getFragmentDefinition(fragment);                                                 // 18\n    var selectionSet = parsedFragment.selectionSet;                                                                    // 19\n    if (!result['id']) {                                                                                               // 20\n        throw new Error('Result must have id when writing fragment to store.');                                        // 21\n    }                                                                                                                  // 22\n    return writeSelectionSetToStore({                                                                                  // 23\n        dataId: result['id'],                                                                                          // 24\n        result: result,                                                                                                // 25\n        selectionSet: selectionSet,                                                                                    // 26\n        store: store,                                                                                                  // 27\n        variables: variables,                                                                                          // 28\n        dataIdFromObject: dataIdFromObject,                                                                            // 29\n    });                                                                                                                // 30\n}                                                                                                                      // 31\nexports.writeFragmentToStore = writeFragmentToStore;                                                                   // 32\nfunction writeQueryToStore(_a) {                                                                                       // 33\n    var result = _a.result, query = _a.query, _b = _a.store, store = _b === void 0 ? {} : _b, variables = _a.variables, _c = _a.dataIdFromObject, dataIdFromObject = _c === void 0 ? null : _c, fragmentMap = _a.fragmentMap;\n    var queryDefinition = getFromAST_1.getQueryDefinition(query);                                                      // 35\n    return writeSelectionSetToStore({                                                                                  // 36\n        dataId: 'ROOT_QUERY',                                                                                          // 37\n        result: result,                                                                                                // 38\n        selectionSet: queryDefinition.selectionSet,                                                                    // 39\n        store: store,                                                                                                  // 40\n        variables: variables,                                                                                          // 41\n        dataIdFromObject: dataIdFromObject,                                                                            // 42\n        fragmentMap: fragmentMap,                                                                                      // 43\n    });                                                                                                                // 44\n}                                                                                                                      // 45\nexports.writeQueryToStore = writeQueryToStore;                                                                         // 46\nfunction writeSelectionSetToStore(_a) {                                                                                // 47\n    var result = _a.result, dataId = _a.dataId, selectionSet = _a.selectionSet, _b = _a.store, store = _b === void 0 ? {} : _b, variables = _a.variables, dataIdFromObject = _a.dataIdFromObject, fragmentMap = _a.fragmentMap;\n    if (!fragmentMap) {                                                                                                // 49\n        fragmentMap = {};                                                                                              // 50\n    }                                                                                                                  // 51\n    var fragmentErrors = {};                                                                                           // 52\n    selectionSet.selections.forEach(function (selection) {                                                             // 53\n        var included = directives_1.shouldInclude(selection, variables);                                               // 54\n        if (storeUtils_1.isField(selection)) {                                                                         // 55\n            var resultFieldKey = storeUtils_1.resultKeyNameFromField(selection);                                       // 56\n            var value = result[resultFieldKey];                                                                        // 57\n            if (isUndefined(value) && included) {                                                                      // 58\n                throw new errors_1.ApolloError({                                                                       // 59\n                    errorMessage: \"Can't find field \" + resultFieldKey + \" on result object \" + dataId + \".\",          // 60\n                    extraInfo: {                                                                                       // 61\n                        isFieldError: true,                                                                            // 62\n                    },                                                                                                 // 63\n                });                                                                                                    // 64\n            }                                                                                                          // 65\n            if (!isUndefined(value) && !included) {                                                                    // 66\n                throw new errors_1.ApolloError({                                                                       // 67\n                    errorMessage: \"Found extra field \" + resultFieldKey + \" on result object \" + dataId + \".\",         // 68\n                    extraInfo: {                                                                                       // 69\n                        isFieldError: true,                                                                            // 70\n                    },                                                                                                 // 71\n                });                                                                                                    // 72\n            }                                                                                                          // 73\n            if (!isUndefined(value)) {                                                                                 // 74\n                writeFieldToStore({                                                                                    // 75\n                    dataId: dataId,                                                                                    // 76\n                    value: value,                                                                                      // 77\n                    variables: variables,                                                                              // 78\n                    store: store,                                                                                      // 79\n                    field: selection,                                                                                  // 80\n                    dataIdFromObject: dataIdFromObject,                                                                // 81\n                    fragmentMap: fragmentMap,                                                                          // 82\n                });                                                                                                    // 83\n            }                                                                                                          // 84\n        }                                                                                                              // 85\n        else if (storeUtils_1.isInlineFragment(selection)) {                                                           // 86\n            var typename = selection.typeCondition.name.value;                                                         // 87\n            if (included) {                                                                                            // 88\n                try {                                                                                                  // 89\n                    writeSelectionSetToStore({                                                                         // 90\n                        result: result,                                                                                // 91\n                        selectionSet: selection.selectionSet,                                                          // 92\n                        store: store,                                                                                  // 93\n                        variables: variables,                                                                          // 94\n                        dataId: dataId,                                                                                // 95\n                        dataIdFromObject: dataIdFromObject,                                                            // 96\n                        fragmentMap: fragmentMap,                                                                      // 97\n                    });                                                                                                // 98\n                    if (!fragmentErrors[typename]) {                                                                   // 99\n                        fragmentErrors[typename] = null;                                                               // 100\n                    }                                                                                                  // 101\n                }                                                                                                      // 102\n                catch (e) {                                                                                            // 103\n                    if (e.extraInfo && e.extraInfo.isFieldError) {                                                     // 104\n                        fragmentErrors[typename] = e;                                                                  // 105\n                    }                                                                                                  // 106\n                    else {                                                                                             // 107\n                        throw e;                                                                                       // 108\n                    }                                                                                                  // 109\n                }                                                                                                      // 110\n            }                                                                                                          // 111\n        }                                                                                                              // 112\n        else {                                                                                                         // 113\n            var fragment = fragmentMap[selection.name.value];                                                          // 114\n            if (!fragment) {                                                                                           // 115\n                throw new Error(\"No fragment named \" + selection.name.value + \".\");                                    // 116\n            }                                                                                                          // 117\n            var typename = fragment.typeCondition.name.value;                                                          // 118\n            if (included) {                                                                                            // 119\n                try {                                                                                                  // 120\n                    writeSelectionSetToStore({                                                                         // 121\n                        result: result,                                                                                // 122\n                        selectionSet: fragment.selectionSet,                                                           // 123\n                        store: store,                                                                                  // 124\n                        variables: variables,                                                                          // 125\n                        dataId: dataId,                                                                                // 126\n                        dataIdFromObject: dataIdFromObject,                                                            // 127\n                        fragmentMap: fragmentMap,                                                                      // 128\n                    });                                                                                                // 129\n                    if (!fragmentErrors[typename]) {                                                                   // 130\n                        fragmentErrors[typename] = null;                                                               // 131\n                    }                                                                                                  // 132\n                }                                                                                                      // 133\n                catch (e) {                                                                                            // 134\n                    if (e.extraInfo && e.extraInfo.isFieldError) {                                                     // 135\n                        fragmentErrors[typename] = e;                                                                  // 136\n                    }                                                                                                  // 137\n                    else {                                                                                             // 138\n                        throw e;                                                                                       // 139\n                    }                                                                                                  // 140\n                }                                                                                                      // 141\n            }                                                                                                          // 142\n        }                                                                                                              // 143\n    });                                                                                                                // 144\n    diffAgainstStore_1.handleFragmentErrors(fragmentErrors);                                                           // 145\n    return store;                                                                                                      // 146\n}                                                                                                                      // 147\nexports.writeSelectionSetToStore = writeSelectionSetToStore;                                                           // 148\nfunction isGeneratedId(id) {                                                                                           // 149\n    return (id[0] === '$');                                                                                            // 150\n}                                                                                                                      // 151\nfunction mergeWithGenerated(generatedKey, realKey, cache) {                                                            // 152\n    var generated = cache[generatedKey];                                                                               // 153\n    var real = cache[realKey];                                                                                         // 154\n    Object.keys(generated).forEach(function (key) {                                                                    // 155\n        var value = generated[key];                                                                                    // 156\n        var realValue = real[key];                                                                                     // 157\n        if (store_1.isIdValue(value)                                                                                   // 158\n            && isGeneratedId(value.id)                                                                                 // 159\n            && store_1.isIdValue(realValue)) {                                                                         // 160\n            mergeWithGenerated(value.id, realValue.id, cache);                                                         // 161\n        }                                                                                                              // 162\n        delete cache[generatedKey];                                                                                    // 163\n        cache[realKey] = assign({}, generated, real);                                                                  // 164\n    });                                                                                                                // 165\n}                                                                                                                      // 166\nfunction writeFieldToStore(_a) {                                                                                       // 167\n    var field = _a.field, value = _a.value, variables = _a.variables, store = _a.store, dataId = _a.dataId, dataIdFromObject = _a.dataIdFromObject, fragmentMap = _a.fragmentMap;\n    var storeValue;                                                                                                    // 169\n    var storeFieldName = storeUtils_1.storeKeyNameFromField(field, variables);                                         // 170\n    var shouldMerge = false;                                                                                           // 171\n    var generatedKey;                                                                                                  // 172\n    if ((!field.selectionSet || isNull(value)) && !isObject(value)) {                                                  // 173\n        storeValue = value;                                                                                            // 174\n    }                                                                                                                  // 175\n    else if ((!field.selectionSet || isNull(value)) && isObject(value)) {                                              // 176\n        storeValue = {                                                                                                 // 177\n            type: 'json',                                                                                              // 178\n            json: value,                                                                                               // 179\n        };                                                                                                             // 180\n    }                                                                                                                  // 181\n    else if (isArray(value)) {                                                                                         // 182\n        var thisIdList_1 = [];                                                                                         // 183\n        value.forEach(function (item, index) {                                                                         // 184\n            if (isNull(item)) {                                                                                        // 185\n                thisIdList_1.push(null);                                                                               // 186\n            }                                                                                                          // 187\n            else {                                                                                                     // 188\n                var itemDataId = dataId + \".\" + storeFieldName + \".\" + index;                                          // 189\n                if (dataIdFromObject) {                                                                                // 190\n                    var semanticId = dataIdFromObject(item);                                                           // 191\n                    if (semanticId) {                                                                                  // 192\n                        itemDataId = semanticId;                                                                       // 193\n                    }                                                                                                  // 194\n                }                                                                                                      // 195\n                thisIdList_1.push(itemDataId);                                                                         // 196\n                writeSelectionSetToStore({                                                                             // 197\n                    dataId: itemDataId,                                                                                // 198\n                    result: item,                                                                                      // 199\n                    store: store,                                                                                      // 200\n                    selectionSet: field.selectionSet,                                                                  // 201\n                    variables: variables,                                                                              // 202\n                    dataIdFromObject: dataIdFromObject,                                                                // 203\n                    fragmentMap: fragmentMap,                                                                          // 204\n                });                                                                                                    // 205\n            }                                                                                                          // 206\n        });                                                                                                            // 207\n        storeValue = thisIdList_1;                                                                                     // 208\n    }                                                                                                                  // 209\n    else {                                                                                                             // 210\n        var valueDataId = dataId + \".\" + storeFieldName;                                                               // 211\n        var generated = true;                                                                                          // 212\n        if (!isGeneratedId(valueDataId)) {                                                                             // 213\n            valueDataId = '$' + valueDataId;                                                                           // 214\n        }                                                                                                              // 215\n        if (dataIdFromObject) {                                                                                        // 216\n            var semanticId = dataIdFromObject(value);                                                                  // 217\n            if (semanticId && isGeneratedId(semanticId)) {                                                             // 218\n                throw new Error('IDs returned by dataIdFromObject cannot begin with the \"$\" character.');              // 219\n            }                                                                                                          // 220\n            if (semanticId) {                                                                                          // 221\n                valueDataId = semanticId;                                                                              // 222\n                generated = false;                                                                                     // 223\n            }                                                                                                          // 224\n        }                                                                                                              // 225\n        writeSelectionSetToStore({                                                                                     // 226\n            dataId: valueDataId,                                                                                       // 227\n            result: value,                                                                                             // 228\n            store: store,                                                                                              // 229\n            selectionSet: field.selectionSet,                                                                          // 230\n            variables: variables,                                                                                      // 231\n            dataIdFromObject: dataIdFromObject,                                                                        // 232\n            fragmentMap: fragmentMap,                                                                                  // 233\n        });                                                                                                            // 234\n        storeValue = {                                                                                                 // 235\n            type: 'id',                                                                                                // 236\n            id: valueDataId,                                                                                           // 237\n            generated: generated,                                                                                      // 238\n        };                                                                                                             // 239\n        if (store[dataId] && store[dataId][storeFieldName] !== storeValue) {                                           // 240\n            var escapedId = store[dataId][storeFieldName];                                                             // 241\n            if (store_1.isIdValue(storeValue) && storeValue.generated                                                  // 242\n                && store_1.isIdValue(escapedId) && !escapedId.generated) {                                             // 243\n                throw new errors_1.ApolloError({                                                                       // 244\n                    errorMessage: \"Store error: the application attempted to write an object with no provided id\" +    // 245\n                        (\" but the store already contains an id of \" + escapedId.id + \" for this object.\"),            // 246\n                });                                                                                                    // 247\n            }                                                                                                          // 248\n            if (store_1.isIdValue(escapedId) && escapedId.generated) {                                                 // 249\n                generatedKey = escapedId.id;                                                                           // 250\n                shouldMerge = true;                                                                                    // 251\n            }                                                                                                          // 252\n        }                                                                                                              // 253\n    }                                                                                                                  // 254\n    var newStoreObj = assign({}, store[dataId], (_b = {},                                                              // 255\n        _b[storeFieldName] = storeValue,                                                                               // 256\n        _b                                                                                                             // 257\n    ));                                                                                                                // 258\n    if (shouldMerge) {                                                                                                 // 259\n        mergeWithGenerated(generatedKey, storeValue.id, store);                                                        // 260\n    }                                                                                                                  // 261\n    if (!store[dataId] || storeValue !== store[dataId][storeFieldName]) {                                              // 262\n        store[dataId] = newStoreObj;                                                                                   // 263\n    }                                                                                                                  // 264\n    var _b;                                                                                                            // 265\n}                                                                                                                      // 266\n//# sourceMappingURL=writeToStore.js.map                                                                               // 267\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"diffAgainstStore.js\":[\"lodash.isarray\",\"lodash.isnull\",\"lodash.isobject\",\"lodash.has\",\"lodash.merge\",\"./storeUtils\",\"./store\",\"../queries/getFromAST\",\"../queries/directives\",\"../errors\",\"lodash.flatten\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/data/diffAgainstStore.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar isArray = require('lodash.isarray');                                                                               // 2\nvar isNull = require('lodash.isnull');                                                                                 // 3\nvar isObject = require('lodash.isobject');                                                                             // 4\nvar has = require('lodash.has');                                                                                       // 5\nvar merge = require('lodash.merge');                                                                                   // 6\nvar storeUtils_1 = require('./storeUtils');                                                                            // 7\nvar store_1 = require('./store');                                                                                      // 8\nvar getFromAST_1 = require('../queries/getFromAST');                                                                   // 9\nvar directives_1 = require('../queries/directives');                                                                   // 10\nvar errors_1 = require('../errors');                                                                                   // 11\nvar flatten = require('lodash.flatten');                                                                               // 12\nfunction diffQueryAgainstStore(_a) {                                                                                   // 13\n    var store = _a.store, query = _a.query, variables = _a.variables;                                                  // 14\n    var queryDef = getFromAST_1.getQueryDefinition(query);                                                             // 15\n    return diffSelectionSetAgainstStore({                                                                              // 16\n        store: store,                                                                                                  // 17\n        rootId: 'ROOT_QUERY',                                                                                          // 18\n        selectionSet: queryDef.selectionSet,                                                                           // 19\n        throwOnMissingField: false,                                                                                    // 20\n        variables: variables,                                                                                          // 21\n    });                                                                                                                // 22\n}                                                                                                                      // 23\nexports.diffQueryAgainstStore = diffQueryAgainstStore;                                                                 // 24\nfunction diffFragmentAgainstStore(_a) {                                                                                // 25\n    var store = _a.store, fragment = _a.fragment, rootId = _a.rootId, variables = _a.variables;                        // 26\n    var fragmentDef = getFromAST_1.getFragmentDefinition(fragment);                                                    // 27\n    return diffSelectionSetAgainstStore({                                                                              // 28\n        store: store,                                                                                                  // 29\n        rootId: rootId,                                                                                                // 30\n        selectionSet: fragmentDef.selectionSet,                                                                        // 31\n        throwOnMissingField: false,                                                                                    // 32\n        variables: variables,                                                                                          // 33\n    });                                                                                                                // 34\n}                                                                                                                      // 35\nexports.diffFragmentAgainstStore = diffFragmentAgainstStore;                                                           // 36\nfunction handleFragmentErrors(fragmentErrors) {                                                                        // 37\n    var typenames = Object.keys(fragmentErrors);                                                                       // 38\n    if (typenames.length === 0) {                                                                                      // 39\n        return;                                                                                                        // 40\n    }                                                                                                                  // 41\n    var errorTypes = typenames.filter(function (typename) {                                                            // 42\n        return (fragmentErrors[typename] !== null);                                                                    // 43\n    });                                                                                                                // 44\n    if (errorTypes.length === Object.keys(fragmentErrors).length) {                                                    // 45\n        throw fragmentErrors[errorTypes[0]];                                                                           // 46\n    }                                                                                                                  // 47\n}                                                                                                                      // 48\nexports.handleFragmentErrors = handleFragmentErrors;                                                                   // 49\nfunction diffSelectionSetAgainstStore(_a) {                                                                            // 50\n    var selectionSet = _a.selectionSet, store = _a.store, rootId = _a.rootId, _b = _a.throwOnMissingField, throwOnMissingField = _b === void 0 ? false : _b, variables = _a.variables, fragmentMap = _a.fragmentMap;\n    if (selectionSet.kind !== 'SelectionSet') {                                                                        // 52\n        throw new Error('Must be a selection set.');                                                                   // 53\n    }                                                                                                                  // 54\n    if (!fragmentMap) {                                                                                                // 55\n        fragmentMap = {};                                                                                              // 56\n    }                                                                                                                  // 57\n    var result = {};                                                                                                   // 58\n    var missingFields = [];                                                                                            // 59\n    var fragmentErrors = {};                                                                                           // 60\n    selectionSet.selections.forEach(function (selection) {                                                             // 61\n        var missingFieldPushed = false;                                                                                // 62\n        var fieldResult;                                                                                               // 63\n        var fieldIsMissing;                                                                                            // 64\n        function pushMissingField(missingField) {                                                                      // 65\n            if (!missingFieldPushed) {                                                                                 // 66\n                missingFields.push(missingField);                                                                      // 67\n                missingFieldPushed = true;                                                                             // 68\n            }                                                                                                          // 69\n        }                                                                                                              // 70\n        var included = directives_1.shouldInclude(selection, variables);                                               // 71\n        if (storeUtils_1.isField(selection)) {                                                                         // 72\n            var diffResult = diffFieldAgainstStore({                                                                   // 73\n                field: selection,                                                                                      // 74\n                throwOnMissingField: throwOnMissingField,                                                              // 75\n                variables: variables,                                                                                  // 76\n                rootId: rootId,                                                                                        // 77\n                store: store,                                                                                          // 78\n                fragmentMap: fragmentMap,                                                                              // 79\n                included: included,                                                                                    // 80\n            });                                                                                                        // 81\n            fieldIsMissing = diffResult.isMissing;                                                                     // 82\n            fieldResult = diffResult.result;                                                                           // 83\n            var resultFieldKey = storeUtils_1.resultKeyNameFromField(selection);                                       // 84\n            if (fieldIsMissing) {                                                                                      // 85\n                pushMissingField(selection);                                                                           // 86\n            }                                                                                                          // 87\n            if (included && fieldResult !== undefined) {                                                               // 88\n                result[resultFieldKey] = fieldResult;                                                                  // 89\n            }                                                                                                          // 90\n        }                                                                                                              // 91\n        else if (storeUtils_1.isInlineFragment(selection)) {                                                           // 92\n            var typename = selection.typeCondition.name.value;                                                         // 93\n            if (included) {                                                                                            // 94\n                try {                                                                                                  // 95\n                    var diffResult = diffSelectionSetAgainstStore({                                                    // 96\n                        selectionSet: selection.selectionSet,                                                          // 97\n                        throwOnMissingField: throwOnMissingField,                                                      // 98\n                        variables: variables,                                                                          // 99\n                        rootId: rootId,                                                                                // 100\n                        store: store,                                                                                  // 101\n                        fragmentMap: fragmentMap,                                                                      // 102\n                    });                                                                                                // 103\n                    fieldIsMissing = diffResult.isMissing;                                                             // 104\n                    fieldResult = diffResult.result;                                                                   // 105\n                    if (fieldIsMissing) {                                                                              // 106\n                        pushMissingField(selection);                                                                   // 107\n                    }                                                                                                  // 108\n                    if (isObject(fieldResult)) {                                                                       // 109\n                        merge(result, fieldResult);                                                                    // 110\n                    }                                                                                                  // 111\n                    if (!fragmentErrors[typename]) {                                                                   // 112\n                        fragmentErrors[typename] = null;                                                               // 113\n                    }                                                                                                  // 114\n                }                                                                                                      // 115\n                catch (e) {                                                                                            // 116\n                    if (e.extraInfo && e.extraInfo.isFieldError) {                                                     // 117\n                        fragmentErrors[typename] = e;                                                                  // 118\n                    }                                                                                                  // 119\n                    else {                                                                                             // 120\n                        throw e;                                                                                       // 121\n                    }                                                                                                  // 122\n                }                                                                                                      // 123\n            }                                                                                                          // 124\n        }                                                                                                              // 125\n        else {                                                                                                         // 126\n            var fragment = fragmentMap[selection.name.value];                                                          // 127\n            if (!fragment) {                                                                                           // 128\n                throw new Error(\"No fragment named \" + selection.name.value);                                          // 129\n            }                                                                                                          // 130\n            var typename = fragment.typeCondition.name.value;                                                          // 131\n            if (included) {                                                                                            // 132\n                try {                                                                                                  // 133\n                    var diffResult = diffSelectionSetAgainstStore({                                                    // 134\n                        selectionSet: fragment.selectionSet,                                                           // 135\n                        throwOnMissingField: throwOnMissingField,                                                      // 136\n                        variables: variables,                                                                          // 137\n                        rootId: rootId,                                                                                // 138\n                        store: store,                                                                                  // 139\n                        fragmentMap: fragmentMap,                                                                      // 140\n                    });                                                                                                // 141\n                    fieldIsMissing = diffResult.isMissing;                                                             // 142\n                    fieldResult = diffResult.result;                                                                   // 143\n                    if (fieldIsMissing) {                                                                              // 144\n                        pushMissingField(selection);                                                                   // 145\n                    }                                                                                                  // 146\n                    if (isObject(fieldResult)) {                                                                       // 147\n                        merge(result, fieldResult);                                                                    // 148\n                    }                                                                                                  // 149\n                    if (!fragmentErrors[typename]) {                                                                   // 150\n                        fragmentErrors[typename] = null;                                                               // 151\n                    }                                                                                                  // 152\n                }                                                                                                      // 153\n                catch (e) {                                                                                            // 154\n                    if (e.extraInfo && e.extraInfo.isFieldError) {                                                     // 155\n                        fragmentErrors[typename] = e;                                                                  // 156\n                    }                                                                                                  // 157\n                    else {                                                                                             // 158\n                        throw e;                                                                                       // 159\n                    }                                                                                                  // 160\n                }                                                                                                      // 161\n            }                                                                                                          // 162\n        }                                                                                                              // 163\n    });                                                                                                                // 164\n    if (throwOnMissingField) {                                                                                         // 165\n        handleFragmentErrors(fragmentErrors);                                                                          // 166\n    }                                                                                                                  // 167\n    var isMissing;                                                                                                     // 168\n    var missingSelectionSets;                                                                                          // 169\n    if (missingFields.length) {                                                                                        // 170\n        if (rootId === 'ROOT_QUERY') {                                                                                 // 171\n            var typeName = 'Query';                                                                                    // 172\n            missingSelectionSets = [                                                                                   // 173\n                {                                                                                                      // 174\n                    id: rootId,                                                                                        // 175\n                    typeName: typeName,                                                                                // 176\n                    selectionSet: {                                                                                    // 177\n                        kind: 'SelectionSet',                                                                          // 178\n                        selections: missingFields,                                                                     // 179\n                    },                                                                                                 // 180\n                },                                                                                                     // 181\n            ];                                                                                                         // 182\n        }                                                                                                              // 183\n        else {                                                                                                         // 184\n            isMissing = 'true';                                                                                        // 185\n        }                                                                                                              // 186\n    }                                                                                                                  // 187\n    return {                                                                                                           // 188\n        result: result,                                                                                                // 189\n        isMissing: isMissing,                                                                                          // 190\n        missingSelectionSets: missingSelectionSets,                                                                    // 191\n    };                                                                                                                 // 192\n}                                                                                                                      // 193\nexports.diffSelectionSetAgainstStore = diffSelectionSetAgainstStore;                                                   // 194\nfunction diffFieldAgainstStore(_a) {                                                                                   // 195\n    var field = _a.field, throwOnMissingField = _a.throwOnMissingField, variables = _a.variables, rootId = _a.rootId, store = _a.store, fragmentMap = _a.fragmentMap, _b = _a.included, included = _b === void 0 ? true : _b;\n    var storeObj = store[rootId] || {};                                                                                // 197\n    var storeFieldKey = storeUtils_1.storeKeyNameFromField(field, variables);                                          // 198\n    if (!has(storeObj, storeFieldKey)) {                                                                               // 199\n        if (throwOnMissingField && included) {                                                                         // 200\n            throw new errors_1.ApolloError({                                                                           // 201\n                errorMessage: \"Can't find field \" + storeFieldKey + \" on object (\" + rootId + \") \" + JSON.stringify(storeObj, null, 2) + \".\\nPerhaps you want to use the `returnPartialData` option?\",\n                extraInfo: {                                                                                           // 203\n                    isFieldError: true,                                                                                // 204\n                },                                                                                                     // 205\n            });                                                                                                        // 206\n        }                                                                                                              // 207\n        return {                                                                                                       // 208\n            isMissing: 'true',                                                                                         // 209\n        };                                                                                                             // 210\n    }                                                                                                                  // 211\n    var storeValue = storeObj[storeFieldKey];                                                                          // 212\n    if (!field.selectionSet) {                                                                                         // 213\n        if (store_1.isJsonValue(storeValue)) {                                                                         // 214\n            return {                                                                                                   // 215\n                result: storeValue.json,                                                                               // 216\n            };                                                                                                         // 217\n        }                                                                                                              // 218\n        else {                                                                                                         // 219\n            return {                                                                                                   // 220\n                result: storeValue,                                                                                    // 221\n            };                                                                                                         // 222\n        }                                                                                                              // 223\n    }                                                                                                                  // 224\n    if (isNull(storeValue)) {                                                                                          // 225\n        return {                                                                                                       // 226\n            result: null,                                                                                              // 227\n        };                                                                                                             // 228\n    }                                                                                                                  // 229\n    if (isArray(storeValue)) {                                                                                         // 230\n        var isMissing_1;                                                                                               // 231\n        var result = storeValue.map(function (id) {                                                                    // 232\n            if (isNull(id)) {                                                                                          // 233\n                return null;                                                                                           // 234\n            }                                                                                                          // 235\n            var itemDiffResult = diffSelectionSetAgainstStore({                                                        // 236\n                store: store,                                                                                          // 237\n                throwOnMissingField: throwOnMissingField,                                                              // 238\n                rootId: id,                                                                                            // 239\n                selectionSet: field.selectionSet,                                                                      // 240\n                variables: variables,                                                                                  // 241\n                fragmentMap: fragmentMap,                                                                              // 242\n            });                                                                                                        // 243\n            if (itemDiffResult.isMissing) {                                                                            // 244\n                isMissing_1 = 'true';                                                                                  // 245\n            }                                                                                                          // 246\n            return itemDiffResult.result;                                                                              // 247\n        });                                                                                                            // 248\n        return {                                                                                                       // 249\n            result: result,                                                                                            // 250\n            isMissing: isMissing_1,                                                                                    // 251\n        };                                                                                                             // 252\n    }                                                                                                                  // 253\n    if (store_1.isIdValue(storeValue)) {                                                                               // 254\n        var unescapedId = storeValue.id;                                                                               // 255\n        return diffSelectionSetAgainstStore({                                                                          // 256\n            store: store,                                                                                              // 257\n            throwOnMissingField: throwOnMissingField,                                                                  // 258\n            rootId: unescapedId,                                                                                       // 259\n            selectionSet: field.selectionSet,                                                                          // 260\n            variables: variables,                                                                                      // 261\n            fragmentMap: fragmentMap,                                                                                  // 262\n        });                                                                                                            // 263\n    }                                                                                                                  // 264\n    throw new Error('Unexpected value in the store where the query had a subselection.');                              // 265\n}                                                                                                                      // 266\nfunction collectUsedVariablesFromSelectionSet(selectionSet) {                                                          // 267\n    return uniq(flatten(selectionSet.selections.map(function (selection) {                                             // 268\n        if (storeUtils_1.isField(selection)) {                                                                         // 269\n            return collectUsedVariablesFromField(selection);                                                           // 270\n        }                                                                                                              // 271\n        else if (storeUtils_1.isInlineFragment(selection)) {                                                           // 272\n            return collectUsedVariablesFromSelectionSet(selection.selectionSet);                                       // 273\n        }                                                                                                              // 274\n        else {                                                                                                         // 275\n            return [];                                                                                                 // 276\n        }                                                                                                              // 277\n    })));                                                                                                              // 278\n}                                                                                                                      // 279\nfunction collectUsedVariablesFromDirectives(directives) {                                                              // 280\n    return flatten(directives.map(function (directive) {                                                               // 281\n        if (directive.arguments) {                                                                                     // 282\n            return flatten(directive.arguments.map(function (arg) {                                                    // 283\n                if (arg.kind === 'Argument' && arg.value.kind === 'Variable') {                                        // 284\n                    return [arg.value.name.value];                                                                     // 285\n                }                                                                                                      // 286\n                return [];                                                                                             // 287\n            }));                                                                                                       // 288\n        }                                                                                                              // 289\n        return [];                                                                                                     // 290\n    }));                                                                                                               // 291\n}                                                                                                                      // 292\nfunction collectUsedVariablesFromField(field) {                                                                        // 293\n    var variables = [];                                                                                                // 294\n    if (field.arguments) {                                                                                             // 295\n        variables = flatten(field.arguments.map(function (arg) {                                                       // 296\n            if (arg.value.kind === 'Variable') {                                                                       // 297\n                return [arg.value.name.value];                                                                         // 298\n            }                                                                                                          // 299\n            return [];                                                                                                 // 300\n        }));                                                                                                           // 301\n    }                                                                                                                  // 302\n    if (field.selectionSet) {                                                                                          // 303\n        variables = variables.concat(collectUsedVariablesFromSelectionSet(field.selectionSet));                        // 304\n    }                                                                                                                  // 305\n    if (field.directives) {                                                                                            // 306\n        variables = variables.concat(collectUsedVariablesFromDirectives(field.directives));                            // 307\n    }                                                                                                                  // 308\n    return uniq(variables);                                                                                            // 309\n}                                                                                                                      // 310\nfunction removeUnusedVariablesFromQuery(query) {                                                                       // 311\n    var queryDef = getFromAST_1.getQueryDefinition(query);                                                             // 312\n    var usedVariables = flatten(query.definitions.map(function (def) { return collectUsedVariablesFromSelectionSet(def.selectionSet); }));\n    if (!queryDef.variableDefinitions) {                                                                               // 314\n        return;                                                                                                        // 315\n    }                                                                                                                  // 316\n    var diffedVariableDefinitions = queryDef.variableDefinitions.filter(function (variableDefinition) {                // 317\n        return usedVariables.indexOf(variableDefinition.variable.name.value) !== -1;                                   // 318\n    });                                                                                                                // 319\n    queryDef.variableDefinitions = diffedVariableDefinitions;                                                          // 320\n}                                                                                                                      // 321\nexports.removeUnusedVariablesFromQuery = removeUnusedVariablesFromQuery;                                               // 322\nfunction uniq(array) {                                                                                                 // 323\n    return array.filter(function (item, index, arr) {                                                                  // 324\n        return arr.indexOf(item) === index;                                                                            // 325\n    });                                                                                                                // 326\n}                                                                                                                      // 327\n//# sourceMappingURL=diffAgainstStore.js.map                                                                           // 328\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"mutationResults.js\":[\"lodash.mapvalues\",\"lodash.isarray\",\"lodash.clonedeep\",\"lodash.assign\",\"./replaceQueryResults\",\"./writeToStore\",\"./scopeQuery\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/data/mutationResults.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar mapValues = require('lodash.mapvalues');                                                                           // 2\nvar isArray = require('lodash.isarray');                                                                               // 3\nvar cloneDeep = require('lodash.clonedeep');                                                                           // 4\nvar assign = require('lodash.assign');                                                                                 // 5\nvar replaceQueryResults_1 = require('./replaceQueryResults');                                                          // 6\nvar writeToStore_1 = require('./writeToStore');                                                                        // 7\nvar scopeQuery_1 = require('./scopeQuery');                                                                            // 8\nfunction mutationResultArrayInsertReducer(state, _a) {                                                                 // 9\n    var behavior = _a.behavior, result = _a.result, variables = _a.variables, fragmentMap = _a.fragmentMap, selectionSet = _a.selectionSet, config = _a.config;\n    var _b = behavior, resultPath = _b.resultPath, storePath = _b.storePath, where = _b.where;                         // 11\n    var scopedSelectionSet = scopeQuery_1.scopeSelectionSetToResultPath({                                              // 12\n        selectionSet: selectionSet,                                                                                    // 13\n        fragmentMap: fragmentMap,                                                                                      // 14\n        path: resultPath,                                                                                              // 15\n    });                                                                                                                // 16\n    var scopedResult = scopeQuery_1.scopeJSONToResultPath({                                                            // 17\n        json: result.data,                                                                                             // 18\n        path: resultPath,                                                                                              // 19\n    });                                                                                                                // 20\n    var dataId = config.dataIdFromObject(scopedResult) || generateMutationResultDataId();                              // 21\n    state = writeToStore_1.writeSelectionSetToStore({                                                                  // 22\n        result: scopedResult,                                                                                          // 23\n        dataId: dataId,                                                                                                // 24\n        selectionSet: scopedSelectionSet,                                                                              // 25\n        store: state,                                                                                                  // 26\n        variables: variables,                                                                                          // 27\n        dataIdFromObject: config.dataIdFromObject,                                                                     // 28\n        fragmentMap: fragmentMap,                                                                                      // 29\n    });                                                                                                                // 30\n    var dataIdOfObj = storePath[0], restStorePath = storePath.slice(1);                                                // 31\n    var clonedObj = cloneDeep(state[dataIdOfObj]);                                                                     // 32\n    var array = scopeQuery_1.scopeJSONToResultPath({                                                                   // 33\n        json: clonedObj,                                                                                               // 34\n        path: restStorePath,                                                                                           // 35\n    });                                                                                                                // 36\n    if (where === 'PREPEND') {                                                                                         // 37\n        array.unshift(dataId);                                                                                         // 38\n    }                                                                                                                  // 39\n    else if (where === 'APPEND') {                                                                                     // 40\n        array.push(dataId);                                                                                            // 41\n    }                                                                                                                  // 42\n    else {                                                                                                             // 43\n        throw new Error('Unsupported \"where\" option to ARRAY_INSERT.');                                                // 44\n    }                                                                                                                  // 45\n    return assign(state, (_c = {},                                                                                     // 46\n        _c[dataIdOfObj] = clonedObj,                                                                                   // 47\n        _c                                                                                                             // 48\n    ));                                                                                                                // 49\n    var _c;                                                                                                            // 50\n}                                                                                                                      // 51\nvar currId = 0;                                                                                                        // 52\nfunction generateMutationResultDataId() {                                                                              // 53\n    currId++;                                                                                                          // 54\n    return \"ARRAY_INSERT-gen-id-\" + currId;                                                                            // 55\n}                                                                                                                      // 56\nfunction mutationResultDeleteReducer(state, _a) {                                                                      // 57\n    var behavior = _a.behavior;                                                                                        // 58\n    var dataId = behavior.dataId;                                                                                      // 59\n    delete state[dataId];                                                                                              // 60\n    var newState = mapValues(state, function (storeObj) {                                                              // 61\n        return removeRefsFromStoreObj(storeObj, dataId);                                                               // 62\n    });                                                                                                                // 63\n    return newState;                                                                                                   // 64\n}                                                                                                                      // 65\nfunction removeRefsFromStoreObj(storeObj, dataId) {                                                                    // 66\n    var affected = false;                                                                                              // 67\n    var cleanedObj = mapValues(storeObj, function (value) {                                                            // 68\n        if (value === dataId) {                                                                                        // 69\n            affected = true;                                                                                           // 70\n            return null;                                                                                               // 71\n        }                                                                                                              // 72\n        if (isArray(value)) {                                                                                          // 73\n            var filteredArray = cleanArray(value, dataId);                                                             // 74\n            if (filteredArray !== value) {                                                                             // 75\n                affected = true;                                                                                       // 76\n                return filteredArray;                                                                                  // 77\n            }                                                                                                          // 78\n        }                                                                                                              // 79\n        return value;                                                                                                  // 80\n    });                                                                                                                // 81\n    if (affected) {                                                                                                    // 82\n        return cleanedObj;                                                                                             // 83\n    }                                                                                                                  // 84\n    else {                                                                                                             // 85\n        return storeObj;                                                                                               // 86\n    }                                                                                                                  // 87\n}                                                                                                                      // 88\nfunction cleanArray(originalArray, dataId) {                                                                           // 89\n    if (originalArray.length && isArray(originalArray[0])) {                                                           // 90\n        var modified_1 = false;                                                                                        // 91\n        var filteredArray = originalArray.map(function (nestedArray) {                                                 // 92\n            var nestedFilteredArray = cleanArray(nestedArray, dataId);                                                 // 93\n            if (nestedFilteredArray !== nestedArray) {                                                                 // 94\n                modified_1 = true;                                                                                     // 95\n                return nestedFilteredArray;                                                                            // 96\n            }                                                                                                          // 97\n            return nestedArray;                                                                                        // 98\n        });                                                                                                            // 99\n        if (!modified_1) {                                                                                             // 100\n            return originalArray;                                                                                      // 101\n        }                                                                                                              // 102\n        return filteredArray;                                                                                          // 103\n    }                                                                                                                  // 104\n    else {                                                                                                             // 105\n        var filteredArray = originalArray.filter(function (item) { return item !== dataId; });                         // 106\n        if (filteredArray.length === originalArray.length) {                                                           // 107\n            return originalArray;                                                                                      // 108\n        }                                                                                                              // 109\n        return filteredArray;                                                                                          // 110\n    }                                                                                                                  // 111\n}                                                                                                                      // 112\nexports.cleanArray = cleanArray;                                                                                       // 113\nfunction mutationResultArrayDeleteReducer(state, _a) {                                                                 // 114\n    var behavior = _a.behavior;                                                                                        // 115\n    var _b = behavior, dataId = _b.dataId, storePath = _b.storePath;                                                   // 116\n    var dataIdOfObj = storePath[0], restStorePath = storePath.slice(1);                                                // 117\n    var clonedObj = cloneDeep(state[dataIdOfObj]);                                                                     // 118\n    var array = scopeQuery_1.scopeJSONToResultPath({                                                                   // 119\n        json: clonedObj,                                                                                               // 120\n        path: restStorePath,                                                                                           // 121\n    });                                                                                                                // 122\n    array.splice(array.indexOf(dataId), 1);                                                                            // 123\n    return assign(state, (_c = {},                                                                                     // 124\n        _c[dataIdOfObj] = clonedObj,                                                                                   // 125\n        _c                                                                                                             // 126\n    ));                                                                                                                // 127\n    var _c;                                                                                                            // 128\n}                                                                                                                      // 129\nfunction mutationResultQueryResultReducer(state, _a) {                                                                 // 130\n    var behavior = _a.behavior, config = _a.config;                                                                    // 131\n    return replaceQueryResults_1.replaceQueryResults(state, behavior, config);                                         // 132\n}                                                                                                                      // 133\nexports.mutationResultQueryResultReducer = mutationResultQueryResultReducer;                                           // 134\nexports.defaultMutationBehaviorReducers = {                                                                            // 135\n    'ARRAY_INSERT': mutationResultArrayInsertReducer,                                                                  // 136\n    'DELETE': mutationResultDeleteReducer,                                                                             // 137\n    'ARRAY_DELETE': mutationResultArrayDeleteReducer,                                                                  // 138\n    'QUERY_RESULT': mutationResultQueryResultReducer,                                                                  // 139\n};                                                                                                                     // 140\n//# sourceMappingURL=mutationResults.js.map                                                                            // 141\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"replaceQueryResults.js\":[\"./writeToStore\",\"../queries/getFromAST\",\"lodash.assign\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/data/replaceQueryResults.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar writeToStore_1 = require('./writeToStore');                                                                        // 2\nvar getFromAST_1 = require('../queries/getFromAST');                                                                   // 3\nvar assign = require('lodash.assign');                                                                                 // 4\nfunction replaceQueryResults(state, _a, config) {                                                                      // 5\n    var queryVariables = _a.queryVariables, querySelectionSet = _a.querySelectionSet, queryFragments = _a.queryFragments, newResult = _a.newResult;\n    var clonedState = assign({}, state);                                                                               // 7\n    return writeToStore_1.writeSelectionSetToStore({                                                                   // 8\n        result: newResult,                                                                                             // 9\n        dataId: 'ROOT_QUERY',                                                                                          // 10\n        selectionSet: querySelectionSet,                                                                               // 11\n        variables: queryVariables,                                                                                     // 12\n        store: clonedState,                                                                                            // 13\n        dataIdFromObject: config.dataIdFromObject,                                                                     // 14\n        fragmentMap: getFromAST_1.createFragmentMap(queryFragments),                                                   // 15\n    });                                                                                                                // 16\n}                                                                                                                      // 17\nexports.replaceQueryResults = replaceQueryResults;                                                                     // 18\n//# sourceMappingURL=replaceQueryResults.js.map                                                                        // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"scopeQuery.js\":[\"./storeUtils\",\"lodash.isnumber\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/data/scopeQuery.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar storeUtils_1 = require('./storeUtils');                                                                            // 2\nvar isNumber = require('lodash.isnumber');                                                                             // 3\nfunction scopeJSONToResultPath(_a) {                                                                                   // 4\n    var json = _a.json, path = _a.path;                                                                                // 5\n    var current = json;                                                                                                // 6\n    path.forEach(function (pathSegment) {                                                                              // 7\n        current = current[pathSegment];                                                                                // 8\n    });                                                                                                                // 9\n    return current;                                                                                                    // 10\n}                                                                                                                      // 11\nexports.scopeJSONToResultPath = scopeJSONToResultPath;                                                                 // 12\nfunction scopeSelectionSetToResultPath(_a) {                                                                           // 13\n    var selectionSet = _a.selectionSet, fragmentMap = _a.fragmentMap, path = _a.path;                                  // 14\n    var currSelSet = selectionSet;                                                                                     // 15\n    path                                                                                                               // 16\n        .filter(function (pathSegment) { return !isNumber(pathSegment); })                                             // 17\n        .forEach(function (pathSegment) {                                                                              // 18\n        currSelSet = followOnePathSegment(currSelSet, pathSegment, fragmentMap);                                       // 19\n    });                                                                                                                // 20\n    return currSelSet;                                                                                                 // 21\n}                                                                                                                      // 22\nexports.scopeSelectionSetToResultPath = scopeSelectionSetToResultPath;                                                 // 23\nfunction followOnePathSegment(currSelSet, pathSegment, fragmentMap) {                                                  // 24\n    var matchingFields = getMatchingFields(currSelSet, pathSegment, fragmentMap);                                      // 25\n    if (matchingFields.length < 1) {                                                                                   // 26\n        throw new Error(\"No matching field found in query for path segment: \" + pathSegment);                          // 27\n    }                                                                                                                  // 28\n    if (matchingFields.length > 1) {                                                                                   // 29\n        throw new Error(\"Multiple fields found in query for path segment \\\"\" + pathSegment + \"\\\". Please file an issue on Apollo Client if you run into this situation.\");\n    }                                                                                                                  // 31\n    return matchingFields[0].selectionSet;                                                                             // 32\n}                                                                                                                      // 33\nfunction getMatchingFields(currSelSet, pathSegment, fragmentMap) {                                                     // 34\n    var matching = [];                                                                                                 // 35\n    currSelSet.selections.forEach(function (selection) {                                                               // 36\n        if (storeUtils_1.isField(selection)) {                                                                         // 37\n            if (storeUtils_1.resultKeyNameFromField(selection) === pathSegment) {                                      // 38\n                matching.push(selection);                                                                              // 39\n            }                                                                                                          // 40\n        }                                                                                                              // 41\n        else if (storeUtils_1.isInlineFragment(selection)) {                                                           // 42\n            matching = matching.concat(getMatchingFields(selection.selectionSet, pathSegment, fragmentMap));           // 43\n        }                                                                                                              // 44\n        else {                                                                                                         // 45\n            var fragment = fragmentMap[selection.name.value];                                                          // 46\n            matching = matching.concat(getMatchingFields(fragment.selectionSet, pathSegment, fragmentMap));            // 47\n        }                                                                                                              // 48\n    });                                                                                                                // 49\n    return matching;                                                                                                   // 50\n}                                                                                                                      // 51\n//# sourceMappingURL=scopeQuery.js.map                                                                                 // 52\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"readFromStore.js\":[\"./diffAgainstStore\",\"../queries/getFromAST\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/data/readFromStore.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar diffAgainstStore_1 = require('./diffAgainstStore');                                                                // 2\nvar getFromAST_1 = require('../queries/getFromAST');                                                                   // 3\nfunction readQueryFromStore(_a) {                                                                                      // 4\n    var store = _a.store, query = _a.query, variables = _a.variables, returnPartialData = _a.returnPartialData, fragmentMap = _a.fragmentMap;\n    var queryDef = getFromAST_1.getQueryDefinition(query);                                                             // 6\n    return readSelectionSetFromStore({                                                                                 // 7\n        store: store,                                                                                                  // 8\n        rootId: 'ROOT_QUERY',                                                                                          // 9\n        selectionSet: queryDef.selectionSet,                                                                           // 10\n        variables: variables,                                                                                          // 11\n        returnPartialData: returnPartialData,                                                                          // 12\n        fragmentMap: fragmentMap,                                                                                      // 13\n    });                                                                                                                // 14\n}                                                                                                                      // 15\nexports.readQueryFromStore = readQueryFromStore;                                                                       // 16\nfunction readFragmentFromStore(_a) {                                                                                   // 17\n    var store = _a.store, fragment = _a.fragment, rootId = _a.rootId, variables = _a.variables, returnPartialData = _a.returnPartialData;\n    var fragmentDef = getFromAST_1.getFragmentDefinition(fragment);                                                    // 19\n    return readSelectionSetFromStore({                                                                                 // 20\n        store: store,                                                                                                  // 21\n        rootId: rootId,                                                                                                // 22\n        selectionSet: fragmentDef.selectionSet,                                                                        // 23\n        variables: variables,                                                                                          // 24\n        returnPartialData: returnPartialData,                                                                          // 25\n    });                                                                                                                // 26\n}                                                                                                                      // 27\nexports.readFragmentFromStore = readFragmentFromStore;                                                                 // 28\nfunction readSelectionSetFromStore(_a) {                                                                               // 29\n    var store = _a.store, rootId = _a.rootId, selectionSet = _a.selectionSet, variables = _a.variables, _b = _a.returnPartialData, returnPartialData = _b === void 0 ? false : _b, fragmentMap = _a.fragmentMap;\n    var result = diffAgainstStore_1.diffSelectionSetAgainstStore({                                                     // 31\n        selectionSet: selectionSet,                                                                                    // 32\n        rootId: rootId,                                                                                                // 33\n        store: store,                                                                                                  // 34\n        throwOnMissingField: !returnPartialData,                                                                       // 35\n        variables: variables,                                                                                          // 36\n        fragmentMap: fragmentMap,                                                                                      // 37\n    }).result;                                                                                                         // 38\n    return result;                                                                                                     // 39\n}                                                                                                                      // 40\nexports.readSelectionSetFromStore = readSelectionSetFromStore;                                                         // 41\n//# sourceMappingURL=readFromStore.js.map                                                                              // 42\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"batchedNetworkInterface.js\":[\"./networkInterface\",\"whatwg-fetch\",\"lodash.assign\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/batchedNetworkInterface.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar __extends = (this && this.__extends) || function (d, b) {                                                          // 2\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];                                                             // 3\n    function __() { this.constructor = d; }                                                                            // 4\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());                              // 5\n};                                                                                                                     // 6\nvar networkInterface_1 = require('./networkInterface');                                                                // 7\nrequire('whatwg-fetch');                                                                                               // 8\nvar assign = require('lodash.assign');                                                                                 // 9\nvar HTTPBatchedNetworkInterface = (function (_super) {                                                                 // 10\n    __extends(HTTPBatchedNetworkInterface, _super);                                                                    // 11\n    function HTTPBatchedNetworkInterface(uri, opts) {                                                                  // 12\n        _super.call(this, uri, opts);                                                                                  // 13\n    }                                                                                                                  // 14\n    ;                                                                                                                  // 15\n    HTTPBatchedNetworkInterface.prototype.batchedFetchFromRemoteEndpoint = function (requestsAndOptions) {             // 16\n        var options = {};                                                                                              // 17\n        requestsAndOptions.forEach(function (requestAndOptions) {                                                      // 18\n            assign(options, requestAndOptions.options);                                                                // 19\n        });                                                                                                            // 20\n        var printedRequests = requestsAndOptions.map(function (_a) {                                                   // 21\n            var request = _a.request;                                                                                  // 22\n            return networkInterface_1.printRequest(request);                                                           // 23\n        });                                                                                                            // 24\n        return fetch(this._uri, assign({}, this._opts, options, {                                                      // 25\n            body: JSON.stringify(printedRequests),                                                                     // 26\n            headers: assign({}, options.headers, {                                                                     // 27\n                Accept: '*/*',                                                                                         // 28\n                'Content-Type': 'application/json',                                                                    // 29\n            }),                                                                                                        // 30\n            method: 'POST',                                                                                            // 31\n        }));                                                                                                           // 32\n    };                                                                                                                 // 33\n    ;                                                                                                                  // 34\n    HTTPBatchedNetworkInterface.prototype.batchQuery = function (requests) {                                           // 35\n        var _this = this;                                                                                              // 36\n        var options = assign({}, this._opts);                                                                          // 37\n        var middlewarePromises = [];                                                                                   // 38\n        requests.forEach(function (request) {                                                                          // 39\n            middlewarePromises.push(_this.applyMiddlewares({                                                           // 40\n                request: request,                                                                                      // 41\n                options: options,                                                                                      // 42\n            }));                                                                                                       // 43\n        });                                                                                                            // 44\n        return new Promise(function (resolve, reject) {                                                                // 45\n            Promise.all(middlewarePromises).then(function (requestsAndOptions) {                                       // 46\n                return _this.batchedFetchFromRemoteEndpoint(requestsAndOptions)                                        // 47\n                    .then(function (result) {                                                                          // 48\n                    return result.json();                                                                              // 49\n                })                                                                                                     // 50\n                    .then(function (responses) {                                                                       // 51\n                    var afterwaresPromises = responses.map(function (response, index) {                                // 52\n                        return _this.applyAfterwares({                                                                 // 53\n                            response: response,                                                                        // 54\n                            options: requestsAndOptions[index].options,                                                // 55\n                        });                                                                                            // 56\n                    });                                                                                                // 57\n                    Promise.all(afterwaresPromises).then(function (responsesAndOptions) {                              // 58\n                        var results = [];                                                                              // 59\n                        responsesAndOptions.forEach(function (_a) {                                                    // 60\n                            var response = _a.response;                                                                // 61\n                            results.push(response);                                                                    // 62\n                        });                                                                                            // 63\n                        resolve(results);                                                                              // 64\n                    }).catch(function (error) {                                                                        // 65\n                        reject(error);                                                                                 // 66\n                    });                                                                                                // 67\n                });                                                                                                    // 68\n            }).catch(function (error) {                                                                                // 69\n                reject(error);                                                                                         // 70\n            });                                                                                                        // 71\n        });                                                                                                            // 72\n    };                                                                                                                 // 73\n    return HTTPBatchedNetworkInterface;                                                                                // 74\n}(networkInterface_1.HTTPFetchNetworkInterface));                                                                      // 75\nexports.HTTPBatchedNetworkInterface = HTTPBatchedNetworkInterface;                                                     // 76\n//# sourceMappingURL=batchedNetworkInterface.js.map                                                                    // 77\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"store.js\":[\"redux\",\"./data/store\",\"./queries/store\",\"./mutations/store\",\"./optimistic-data/store\",\"lodash.assign\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/store.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar redux_1 = require('redux');                                                                                        // 2\nvar store_1 = require('./data/store');                                                                                 // 3\nvar store_2 = require('./queries/store');                                                                              // 4\nvar store_3 = require('./mutations/store');                                                                            // 5\nvar store_4 = require('./optimistic-data/store');                                                                      // 6\nvar assign = require('lodash.assign');                                                                                 // 7\nvar crashReporter = function (store) { return function (next) { return function (action) {                             // 8\n    try {                                                                                                              // 9\n        return next(action);                                                                                           // 10\n    }                                                                                                                  // 11\n    catch (err) {                                                                                                      // 12\n        console.error('Caught an exception!', err);                                                                    // 13\n        console.error(err.stack);                                                                                      // 14\n        throw err;                                                                                                     // 15\n    }                                                                                                                  // 16\n}; }; };                                                                                                               // 17\nfunction createApolloReducer(config) {                                                                                 // 18\n    return function apolloReducer(state, action) {                                                                     // 19\n        if (state === void 0) { state = {}; }                                                                          // 20\n        var newState = {                                                                                               // 21\n            queries: store_2.queries(state.queries, action),                                                           // 22\n            mutations: store_3.mutations(state.mutations, action),                                                     // 23\n            data: store_1.data(state.data, action, state.queries, state.mutations, config),                            // 24\n            optimistic: [],                                                                                            // 25\n        };                                                                                                             // 26\n        newState.optimistic = store_4.optimistic(state.optimistic, action, newState, config);                          // 27\n        return newState;                                                                                               // 28\n    };                                                                                                                 // 29\n}                                                                                                                      // 30\nexports.createApolloReducer = createApolloReducer;                                                                     // 31\nfunction createApolloStore(_a) {                                                                                       // 32\n    var _b = _a === void 0 ? {} : _a, _c = _b.reduxRootKey, reduxRootKey = _c === void 0 ? 'apollo' : _c, initialState = _b.initialState, _d = _b.config, config = _d === void 0 ? {} : _d, reportCrashes = _b.reportCrashes;\n    var enhancers = [];                                                                                                // 34\n    if (reportCrashes === undefined) {                                                                                 // 35\n        reportCrashes = true;                                                                                          // 36\n    }                                                                                                                  // 37\n    if (typeof window !== 'undefined') {                                                                               // 38\n        var anyWindow = window;                                                                                        // 39\n        if (anyWindow.devToolsExtension) {                                                                             // 40\n            enhancers.push(anyWindow.devToolsExtension());                                                             // 41\n        }                                                                                                              // 42\n    }                                                                                                                  // 43\n    if (reportCrashes) {                                                                                               // 44\n        enhancers.push(redux_1.applyMiddleware(crashReporter));                                                        // 45\n    }                                                                                                                  // 46\n    var compose = redux_1.compose;                                                                                     // 47\n    return redux_1.createStore(redux_1.combineReducers((_e = {}, _e[reduxRootKey] = createApolloReducer(config), _e)), initialState, compose.apply(void 0, enhancers));\n    var _e;                                                                                                            // 49\n}                                                                                                                      // 50\nexports.createApolloStore = createApolloStore;                                                                         // 51\nfunction getDataWithOptimisticResults(store) {                                                                         // 52\n    if (store.optimistic.length === 0) {                                                                               // 53\n        return store.data;                                                                                             // 54\n    }                                                                                                                  // 55\n    var patches = store.optimistic.map(function (opt) { return opt.data; });                                           // 56\n    return assign.apply(void 0, [{}, store.data].concat(patches));                                                     // 57\n}                                                                                                                      // 58\nexports.getDataWithOptimisticResults = getDataWithOptimisticResults;                                                   // 59\n//# sourceMappingURL=store.js.map                                                                                      // 60\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"actions.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/actions.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nfunction isQueryResultAction(action) {                                                                                 // 2\n    return action.type === 'APOLLO_QUERY_RESULT';                                                                      // 3\n}                                                                                                                      // 4\nexports.isQueryResultAction = isQueryResultAction;                                                                     // 5\nfunction isQueryErrorAction(action) {                                                                                  // 6\n    return action.type === 'APOLLO_QUERY_ERROR';                                                                       // 7\n}                                                                                                                      // 8\nexports.isQueryErrorAction = isQueryErrorAction;                                                                       // 9\nfunction isQueryInitAction(action) {                                                                                   // 10\n    return action.type === 'APOLLO_QUERY_INIT';                                                                        // 11\n}                                                                                                                      // 12\nexports.isQueryInitAction = isQueryInitAction;                                                                         // 13\nfunction isQueryResultClientAction(action) {                                                                           // 14\n    return action.type === 'APOLLO_QUERY_RESULT_CLIENT';                                                               // 15\n}                                                                                                                      // 16\nexports.isQueryResultClientAction = isQueryResultClientAction;                                                         // 17\nfunction isQueryStopAction(action) {                                                                                   // 18\n    return action.type === 'APOLLO_QUERY_STOP';                                                                        // 19\n}                                                                                                                      // 20\nexports.isQueryStopAction = isQueryStopAction;                                                                         // 21\nfunction isMutationInitAction(action) {                                                                                // 22\n    return action.type === 'APOLLO_MUTATION_INIT';                                                                     // 23\n}                                                                                                                      // 24\nexports.isMutationInitAction = isMutationInitAction;                                                                   // 25\nfunction isMutationResultAction(action) {                                                                              // 26\n    return action.type === 'APOLLO_MUTATION_RESULT';                                                                   // 27\n}                                                                                                                      // 28\nexports.isMutationResultAction = isMutationResultAction;                                                               // 29\n;                                                                                                                      // 30\nfunction isMutationErrorAction(action) {                                                                               // 31\n    return action.type === 'APOLLO_MUTATION_ERROR';                                                                    // 32\n}                                                                                                                      // 33\nexports.isMutationErrorAction = isMutationErrorAction;                                                                 // 34\nfunction isUpdateQueryResultAction(action) {                                                                           // 35\n    return action.type === 'APOLLO_UPDATE_QUERY_RESULT';                                                               // 36\n}                                                                                                                      // 37\nexports.isUpdateQueryResultAction = isUpdateQueryResultAction;                                                         // 38\nfunction isStoreResetAction(action) {                                                                                  // 39\n    return action.type === 'APOLLO_STORE_RESET';                                                                       // 40\n}                                                                                                                      // 41\nexports.isStoreResetAction = isStoreResetAction;                                                                       // 42\n//# sourceMappingURL=actions.js.map                                                                                    // 43\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"errors.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/errors.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar __extends = (this && this.__extends) || function (d, b) {                                                          // 2\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];                                                             // 3\n    function __() { this.constructor = d; }                                                                            // 4\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());                              // 5\n};                                                                                                                     // 6\nvar ApolloError = (function (_super) {                                                                                 // 7\n    __extends(ApolloError, _super);                                                                                    // 8\n    function ApolloError(_a) {                                                                                         // 9\n        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        _super.call(this, errorMessage);                                                                               // 11\n        this.graphQLErrors = graphQLErrors;                                                                            // 12\n        this.networkError = networkError;                                                                              // 13\n        this.stack = new Error().stack;                                                                                // 14\n        if (!errorMessage) {                                                                                           // 15\n            this.generateErrorMessage();                                                                               // 16\n        }                                                                                                              // 17\n        else {                                                                                                         // 18\n            this.message = errorMessage;                                                                               // 19\n        }                                                                                                              // 20\n        this.extraInfo = extraInfo;                                                                                    // 21\n    }                                                                                                                  // 22\n    ApolloError.prototype.generateErrorMessage = function () {                                                         // 23\n        if (typeof this.message !== 'undefined' &&                                                                     // 24\n            this.message !== '') {                                                                                     // 25\n            return;                                                                                                    // 26\n        }                                                                                                              // 27\n        var message = '';                                                                                              // 28\n        if (Array.isArray(this.graphQLErrors) && this.graphQLErrors.length !== 0) {                                    // 29\n            this.graphQLErrors.forEach(function (graphQLError) {                                                       // 30\n                message += 'GraphQL error: ' + graphQLError.message + '\\n';                                            // 31\n            });                                                                                                        // 32\n        }                                                                                                              // 33\n        if (this.networkError) {                                                                                       // 34\n            message += 'Network error: ' + this.networkError.message + '\\n';                                           // 35\n        }                                                                                                              // 36\n        message = message.replace(/\\n$/, '');                                                                          // 37\n        this.message = message;                                                                                        // 38\n    };                                                                                                                 // 39\n    return ApolloError;                                                                                                // 40\n}(Error));                                                                                                             // 41\nexports.ApolloError = ApolloError;                                                                                     // 42\n//# sourceMappingURL=errors.js.map                                                                                     // 43\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"mutations\":{\"store.js\":[\"../actions\",\"lodash.assign\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/mutations/store.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar actions_1 = require('../actions');                                                                                 // 2\nvar assign = require('lodash.assign');                                                                                 // 3\nfunction mutations(previousState, action) {                                                                            // 4\n    if (previousState === void 0) { previousState = {}; }                                                              // 5\n    if (actions_1.isMutationInitAction(action)) {                                                                      // 6\n        var newState = assign({}, previousState);                                                                      // 7\n        newState[action.mutationId] = {                                                                                // 8\n            mutationString: action.mutationString,                                                                     // 9\n            mutation: action.mutation,                                                                                 // 10\n            variables: action.variables,                                                                               // 11\n            loading: true,                                                                                             // 12\n            error: null,                                                                                               // 13\n            fragmentMap: action.fragmentMap,                                                                           // 14\n        };                                                                                                             // 15\n        return newState;                                                                                               // 16\n    }                                                                                                                  // 17\n    else if (actions_1.isMutationResultAction(action)) {                                                               // 18\n        var newState = assign({}, previousState);                                                                      // 19\n        newState[action.mutationId] = assign({}, previousState[action.mutationId], {                                   // 20\n            loading: false,                                                                                            // 21\n            error: null,                                                                                               // 22\n        });                                                                                                            // 23\n        return newState;                                                                                               // 24\n    }                                                                                                                  // 25\n    else if (actions_1.isMutationErrorAction(action)) {                                                                // 26\n        var newState = assign({}, previousState);                                                                      // 27\n        newState[action.mutationId] = assign({}, previousState[action.mutationId], {                                   // 28\n            loading: false,                                                                                            // 29\n            error: action.error,                                                                                       // 30\n        });                                                                                                            // 31\n    }                                                                                                                  // 32\n    else if (actions_1.isStoreResetAction(action)) {                                                                   // 33\n        return {};                                                                                                     // 34\n    }                                                                                                                  // 35\n    return previousState;                                                                                              // 36\n}                                                                                                                      // 37\nexports.mutations = mutations;                                                                                         // 38\n//# sourceMappingURL=store.js.map                                                                                      // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"optimistic-data\":{\"store.js\":[\"../actions\",\"../data/store\",\"../store\",\"lodash.assign\",\"lodash.pick\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/optimistic-data/store.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar actions_1 = require('../actions');                                                                                 // 2\nvar store_1 = require('../data/store');                                                                                // 3\nvar store_2 = require('../store');                                                                                     // 4\nvar assign = require('lodash.assign');                                                                                 // 5\nvar pick = require('lodash.pick');                                                                                     // 6\nvar optimisticDefaultState = [];                                                                                       // 7\nfunction optimistic(previousState, action, store, config) {                                                            // 8\n    if (previousState === void 0) { previousState = optimisticDefaultState; }                                          // 9\n    if (actions_1.isMutationInitAction(action) && action.optimisticResponse) {                                         // 10\n        var fakeMutationResultAction = {                                                                               // 11\n            type: 'APOLLO_MUTATION_RESULT',                                                                            // 12\n            result: { data: action.optimisticResponse },                                                               // 13\n            mutationId: action.mutationId,                                                                             // 14\n            resultBehaviors: action.resultBehaviors,                                                                   // 15\n        };                                                                                                             // 16\n        var fakeStore = assign({}, store, { optimistic: previousState });                                              // 17\n        var optimisticData_1 = store_2.getDataWithOptimisticResults(fakeStore);                                        // 18\n        var fakeDataResultState_1 = store_1.data(optimisticData_1, fakeMutationResultAction, store.queries, store.mutations, config);\n        var changedKeys = Object.keys(fakeDataResultState_1).filter(function (key) { return optimisticData_1[key] !== fakeDataResultState_1[key]; });\n        var patch = pick(fakeDataResultState_1, changedKeys);                                                          // 21\n        var optimisticState = {                                                                                        // 22\n            data: patch,                                                                                               // 23\n            mutationId: action.mutationId,                                                                             // 24\n        };                                                                                                             // 25\n        var newState = previousState.concat([optimisticState]);                                                        // 26\n        return newState;                                                                                               // 27\n    }                                                                                                                  // 28\n    else if ((actions_1.isMutationErrorAction(action) || actions_1.isMutationResultAction(action))                     // 29\n        && previousState.some(function (change) { return change.mutationId === action.mutationId; })) {                // 30\n        var newState = previousState.filter(function (change) { return change.mutationId !== action.mutationId; });    // 31\n        return newState;                                                                                               // 32\n    }                                                                                                                  // 33\n    return previousState;                                                                                              // 34\n}                                                                                                                      // 35\nexports.optimistic = optimistic;                                                                                       // 36\n//# sourceMappingURL=store.js.map                                                                                      // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"QueryManager.js\":[\"lodash.forown\",\"lodash.isequal\",\"./store\",\"./queries/getFromAST\",\"./queries/queryTransform\",\"graphql-tag/printer\",\"./data/readFromStore\",\"./data/diffAgainstStore\",\"./queryPrinting\",\"./batching\",\"./scheduler\",\"./util/Observable\",\"./util/errorHandling\",\"./errors\",\"./ObservableQuery\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/QueryManager.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar forOwn = require('lodash.forown');                                                                                 // 2\nvar isEqual = require('lodash.isequal');                                                                               // 3\nvar store_1 = require('./store');                                                                                      // 4\nvar getFromAST_1 = require('./queries/getFromAST');                                                                    // 5\nvar queryTransform_1 = require('./queries/queryTransform');                                                            // 6\nvar printer_1 = require('graphql-tag/printer');                                                                        // 7\nvar readFromStore_1 = require('./data/readFromStore');                                                                 // 8\nvar diffAgainstStore_1 = require('./data/diffAgainstStore');                                                           // 9\nvar queryPrinting_1 = require('./queryPrinting');                                                                      // 10\nvar batching_1 = require('./batching');                                                                                // 11\nvar scheduler_1 = require('./scheduler');                                                                              // 12\nvar Observable_1 = require('./util/Observable');                                                                       // 13\nvar errorHandling_1 = require('./util/errorHandling');                                                                 // 14\nvar errors_1 = require('./errors');                                                                                    // 15\nvar ObservableQuery_1 = require('./ObservableQuery');                                                                  // 16\n;                                                                                                                      // 17\nvar QueryManager = (function () {                                                                                      // 18\n    function QueryManager(_a) {                                                                                        // 19\n        var _this = this;                                                                                              // 20\n        var networkInterface = _a.networkInterface, store = _a.store, reduxRootSelector = _a.reduxRootSelector, queryTransformer = _a.queryTransformer, resultTransformer = _a.resultTransformer, resultComparator = _a.resultComparator, _b = _a.shouldBatch, shouldBatch = _b === void 0 ? false : _b, _c = _a.batchInterval, batchInterval = _c === void 0 ? 10 : _c;\n        this.idCounter = 0;                                                                                            // 22\n        this.networkInterface = networkInterface;                                                                      // 23\n        this.store = store;                                                                                            // 24\n        this.reduxRootSelector = reduxRootSelector;                                                                    // 25\n        this.queryTransformer = queryTransformer;                                                                      // 26\n        this.resultTransformer = resultTransformer;                                                                    // 27\n        this.resultComparator = resultComparator;                                                                      // 28\n        this.pollingTimers = {};                                                                                       // 29\n        this.batchInterval = batchInterval;                                                                            // 30\n        this.queryListeners = {};                                                                                      // 31\n        this.scheduler = new scheduler_1.QueryScheduler({                                                              // 32\n            queryManager: this,                                                                                        // 33\n        });                                                                                                            // 34\n        this.batcher = new batching_1.QueryBatcher({                                                                   // 35\n            shouldBatch: shouldBatch,                                                                                  // 36\n            networkInterface: this.networkInterface,                                                                   // 37\n        });                                                                                                            // 38\n        this.batcher.start(this.batchInterval);                                                                        // 39\n        this.fetchQueryPromises = {};                                                                                  // 40\n        this.observableQueries = {};                                                                                   // 41\n        this.queryIdsByName = {};                                                                                      // 42\n        if (this.store['subscribe']) {                                                                                 // 43\n            var currentStoreData_1;                                                                                    // 44\n            this.store['subscribe'](function () {                                                                      // 45\n                var previousStoreData = currentStoreData_1 || {};                                                      // 46\n                var previousStoreHasData = Object.keys(previousStoreData).length;                                      // 47\n                currentStoreData_1 = _this.getApolloState();                                                           // 48\n                if (isEqual(previousStoreData, currentStoreData_1) && previousStoreHasData) {                          // 49\n                    return;                                                                                            // 50\n                }                                                                                                      // 51\n                _this.broadcastQueries();                                                                              // 52\n            });                                                                                                        // 53\n        }                                                                                                              // 54\n    }                                                                                                                  // 55\n    QueryManager.prototype.broadcastNewStore = function (store) {                                                      // 56\n        this.broadcastQueries();                                                                                       // 57\n    };                                                                                                                 // 58\n    QueryManager.prototype.mutate = function (_a) {                                                                    // 59\n        var _this = this;                                                                                              // 60\n        var mutation = _a.mutation, variables = _a.variables, _b = _a.resultBehaviors, resultBehaviors = _b === void 0 ? [] : _b, _c = _a.fragments, fragments = _c === void 0 ? [] : _c, optimisticResponse = _a.optimisticResponse, updateQueries = _a.updateQueries, _d = _a.refetchQueries, refetchQueries = _d === void 0 ? [] : _d;\n        var mutationId = this.generateQueryId();                                                                       // 62\n        mutation = getFromAST_1.addFragmentsToDocument(mutation, fragments);                                           // 63\n        if (this.queryTransformer) {                                                                                   // 64\n            mutation = queryTransform_1.applyTransformers(mutation, [this.queryTransformer]);                          // 65\n        }                                                                                                              // 66\n        var mutationDef = getFromAST_1.getMutationDefinition(mutation);                                                // 67\n        var mutationString = printer_1.print(mutation);                                                                // 68\n        var queryFragmentMap = getFromAST_1.createFragmentMap(getFromAST_1.getFragmentDefinitions(mutation));          // 69\n        var request = {                                                                                                // 70\n            query: mutation,                                                                                           // 71\n            variables: variables,                                                                                      // 72\n            operationName: getFromAST_1.getOperationName(mutation),                                                    // 73\n        };                                                                                                             // 74\n        var updateQueriesResultBehaviors = !optimisticResponse ? [] :                                                  // 75\n            this.collectResultBehaviorsFromUpdateQueries(updateQueries, { data: optimisticResponse }, true);           // 76\n        this.store.dispatch({                                                                                          // 77\n            type: 'APOLLO_MUTATION_INIT',                                                                              // 78\n            mutationString: mutationString,                                                                            // 79\n            mutation: {                                                                                                // 80\n                id: 'ROOT_MUTATION',                                                                                   // 81\n                typeName: 'Mutation',                                                                                  // 82\n                selectionSet: mutationDef.selectionSet,                                                                // 83\n            },                                                                                                         // 84\n            variables: variables,                                                                                      // 85\n            mutationId: mutationId,                                                                                    // 86\n            fragmentMap: queryFragmentMap,                                                                             // 87\n            optimisticResponse: optimisticResponse,                                                                    // 88\n            resultBehaviors: resultBehaviors.concat(updateQueriesResultBehaviors),                                     // 89\n        });                                                                                                            // 90\n        return new Promise(function (resolve, reject) {                                                                // 91\n            _this.networkInterface.query(request)                                                                      // 92\n                .then(function (result) {                                                                              // 93\n                if (result.errors) {                                                                                   // 94\n                    reject(new errors_1.ApolloError({                                                                  // 95\n                        graphQLErrors: result.errors,                                                                  // 96\n                    }));                                                                                               // 97\n                }                                                                                                      // 98\n                _this.store.dispatch({                                                                                 // 99\n                    type: 'APOLLO_MUTATION_RESULT',                                                                    // 100\n                    result: result,                                                                                    // 101\n                    mutationId: mutationId,                                                                            // 102\n                    resultBehaviors: resultBehaviors.concat(_this.collectResultBehaviorsFromUpdateQueries(updateQueries, result)),\n                });                                                                                                    // 104\n                refetchQueries.forEach(function (name) { _this.refetchQueryByName(name); });                           // 105\n                resolve(_this.transformResult(result));                                                                // 106\n            })                                                                                                         // 107\n                .catch(function (err) {                                                                                // 108\n                _this.store.dispatch({                                                                                 // 109\n                    type: 'APOLLO_MUTATION_ERROR',                                                                     // 110\n                    error: err,                                                                                        // 111\n                    mutationId: mutationId,                                                                            // 112\n                });                                                                                                    // 113\n                reject(new errors_1.ApolloError({                                                                      // 114\n                    networkError: err,                                                                                 // 115\n                }));                                                                                                   // 116\n            });                                                                                                        // 117\n        });                                                                                                            // 118\n    };                                                                                                                 // 119\n    QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {                          // 120\n        var _this = this;                                                                                              // 121\n        var lastResult;                                                                                                // 122\n        return function (queryStoreValue) {                                                                            // 123\n            if (!queryStoreValue) {                                                                                    // 124\n                return;                                                                                                // 125\n            }                                                                                                          // 126\n            var shouldNotifyIfLoading = queryStoreValue.returnPartialData                                              // 127\n                || queryStoreValue.previousVariables;                                                                  // 128\n            if (!queryStoreValue.loading || shouldNotifyIfLoading) {                                                   // 129\n                if (queryStoreValue.graphQLErrors || queryStoreValue.networkError) {                                   // 130\n                    var apolloError = new errors_1.ApolloError({                                                       // 131\n                        graphQLErrors: queryStoreValue.graphQLErrors,                                                  // 132\n                        networkError: queryStoreValue.networkError,                                                    // 133\n                    });                                                                                                // 134\n                    if (observer.error) {                                                                              // 135\n                        observer.error(apolloError);                                                                   // 136\n                    }                                                                                                  // 137\n                    else {                                                                                             // 138\n                        console.error('Unhandled error', apolloError, apolloError.stack);                              // 139\n                    }                                                                                                  // 140\n                }                                                                                                      // 141\n                else {                                                                                                 // 142\n                    try {                                                                                              // 143\n                        var resultFromStore = {                                                                        // 144\n                            data: readFromStore_1.readSelectionSetFromStore({                                          // 145\n                                store: _this.getDataWithOptimisticResults(),                                           // 146\n                                rootId: queryStoreValue.query.id,                                                      // 147\n                                selectionSet: queryStoreValue.query.selectionSet,                                      // 148\n                                variables: queryStoreValue.previousVariables || queryStoreValue.variables,             // 149\n                                returnPartialData: options.returnPartialData || options.noFetch,                       // 150\n                                fragmentMap: queryStoreValue.fragmentMap,                                              // 151\n                            }),                                                                                        // 152\n                            loading: queryStoreValue.loading,                                                          // 153\n                        };                                                                                             // 154\n                        if (observer.next) {                                                                           // 155\n                            if (_this.isDifferentResult(lastResult, resultFromStore)) {                                // 156\n                                lastResult = resultFromStore;                                                          // 157\n                                observer.next(_this.transformResult(resultFromStore));                                 // 158\n                            }                                                                                          // 159\n                        }                                                                                              // 160\n                    }                                                                                                  // 161\n                    catch (error) {                                                                                    // 162\n                        if (observer.error) {                                                                          // 163\n                            observer.error(error);                                                                     // 164\n                        }                                                                                              // 165\n                    }                                                                                                  // 166\n                }                                                                                                      // 167\n            }                                                                                                          // 168\n        };                                                                                                             // 169\n    };                                                                                                                 // 170\n    QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {                                          // 171\n        if (shouldSubscribe === void 0) { shouldSubscribe = true; }                                                    // 172\n        getFromAST_1.getQueryDefinition(options.query);                                                                // 173\n        var observableQuery = new ObservableQuery_1.ObservableQuery({                                                  // 174\n            scheduler: this.scheduler,                                                                                 // 175\n            options: options,                                                                                          // 176\n            shouldSubscribe: shouldSubscribe,                                                                          // 177\n        });                                                                                                            // 178\n        return observableQuery;                                                                                        // 179\n    };                                                                                                                 // 180\n    QueryManager.prototype.query = function (options) {                                                                // 181\n        var _this = this;                                                                                              // 182\n        if (options.returnPartialData) {                                                                               // 183\n            throw new Error('returnPartialData option only supported on watchQuery.');                                 // 184\n        }                                                                                                              // 185\n        if (options.query.kind !== 'Document') {                                                                       // 186\n            throw new Error('You must wrap the query string in a \"gql\" tag.');                                         // 187\n        }                                                                                                              // 188\n        var requestId = this.idCounter;                                                                                // 189\n        var resPromise = new Promise(function (resolve, reject) {                                                      // 190\n            _this.addFetchQueryPromise(requestId, resPromise, resolve, reject);                                        // 191\n            return _this.watchQuery(options, false).result().then(function (result) {                                  // 192\n                _this.removeFetchQueryPromise(requestId);                                                              // 193\n                resolve(result);                                                                                       // 194\n            }).catch(function (error) {                                                                                // 195\n                _this.removeFetchQueryPromise(requestId);                                                              // 196\n                reject(error);                                                                                         // 197\n            });                                                                                                        // 198\n        });                                                                                                            // 199\n        return resPromise;                                                                                             // 200\n    };                                                                                                                 // 201\n    QueryManager.prototype.fetchQuery = function (queryId, options) {                                                  // 202\n        return this.fetchQueryOverInterface(queryId, options);                                                         // 203\n    };                                                                                                                 // 204\n    QueryManager.prototype.generateQueryId = function () {                                                             // 205\n        var queryId = this.idCounter.toString();                                                                       // 206\n        this.idCounter++;                                                                                              // 207\n        return queryId;                                                                                                // 208\n    };                                                                                                                 // 209\n    QueryManager.prototype.stopQueryInStore = function (queryId) {                                                     // 210\n        this.store.dispatch({                                                                                          // 211\n            type: 'APOLLO_QUERY_STOP',                                                                                 // 212\n            queryId: queryId,                                                                                          // 213\n        });                                                                                                            // 214\n    };                                                                                                                 // 215\n    ;                                                                                                                  // 216\n    QueryManager.prototype.getApolloState = function () {                                                              // 217\n        return this.reduxRootSelector(this.store.getState());                                                          // 218\n    };                                                                                                                 // 219\n    QueryManager.prototype.getDataWithOptimisticResults = function () {                                                // 220\n        return store_1.getDataWithOptimisticResults(this.getApolloState());                                            // 221\n    };                                                                                                                 // 222\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {                                           // 223\n        this.queryListeners[queryId] = this.queryListeners[queryId] || [];                                             // 224\n        this.queryListeners[queryId].push(listener);                                                                   // 225\n    };                                                                                                                 // 226\n    QueryManager.prototype.addFetchQueryPromise = function (requestId, promise, resolve, reject) {                     // 227\n        this.fetchQueryPromises[requestId.toString()] = { promise: promise, resolve: resolve, reject: reject };        // 228\n    };                                                                                                                 // 229\n    QueryManager.prototype.removeFetchQueryPromise = function (requestId) {                                            // 230\n        delete this.fetchQueryPromises[requestId.toString()];                                                          // 231\n    };                                                                                                                 // 232\n    QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {                                  // 233\n        this.observableQueries[queryId] = { observableQuery: observableQuery, subscriptions: [] };                     // 234\n        var queryDef = getFromAST_1.getQueryDefinition(observableQuery.options.query);                                 // 235\n        if (queryDef.name && queryDef.name.value) {                                                                    // 236\n            var queryName = getFromAST_1.getQueryDefinition(observableQuery.options.query).name.value;                 // 237\n            this.queryIdsByName[queryName] = this.queryIdsByName[queryName] || [];                                     // 238\n            this.queryIdsByName[queryName].push(observableQuery.queryId);                                              // 239\n        }                                                                                                              // 240\n    };                                                                                                                 // 241\n    QueryManager.prototype.addQuerySubscription = function (queryId, querySubscription) {                              // 242\n        if (this.observableQueries.hasOwnProperty(queryId)) {                                                          // 243\n            this.observableQueries[queryId].subscriptions.push(querySubscription);                                     // 244\n        }                                                                                                              // 245\n        else {                                                                                                         // 246\n            this.observableQueries[queryId] = {                                                                        // 247\n                observableQuery: null,                                                                                 // 248\n                subscriptions: [querySubscription],                                                                    // 249\n            };                                                                                                         // 250\n        }                                                                                                              // 251\n    };                                                                                                                 // 252\n    QueryManager.prototype.removeObservableQuery = function (queryId) {                                                // 253\n        var observableQuery = this.observableQueries[queryId].observableQuery;                                         // 254\n        var queryName = getFromAST_1.getQueryDefinition(observableQuery.options.query).name.value;                     // 255\n        delete this.observableQueries[queryId];                                                                        // 256\n        this.queryIdsByName[queryName] = this.queryIdsByName[queryName].filter(function (val) {                        // 257\n            return !(observableQuery.queryId === val);                                                                 // 258\n        });                                                                                                            // 259\n    };                                                                                                                 // 260\n    QueryManager.prototype.resetStore = function () {                                                                  // 261\n        var _this = this;                                                                                              // 262\n        Object.keys(this.fetchQueryPromises).forEach(function (key) {                                                  // 263\n            var reject = _this.fetchQueryPromises[key].reject;                                                         // 264\n            reject(new Error('Store reset while query was in flight.'));                                               // 265\n        });                                                                                                            // 266\n        this.store.dispatch({                                                                                          // 267\n            type: 'APOLLO_STORE_RESET',                                                                                // 268\n            observableQueryIds: Object.keys(this.observableQueries),                                                   // 269\n        });                                                                                                            // 270\n        Object.keys(this.observableQueries).forEach(function (queryId) {                                               // 271\n            if (!_this.observableQueries[queryId].observableQuery.options.noFetch) {                                   // 272\n                _this.observableQueries[queryId].observableQuery.refetch();                                            // 273\n            }                                                                                                          // 274\n        });                                                                                                            // 275\n    };                                                                                                                 // 276\n    QueryManager.prototype.startQuery = function (queryId, options, listener) {                                        // 277\n        this.addQueryListener(queryId, listener);                                                                      // 278\n        if (!options.pollInterval) {                                                                                   // 279\n            this.fetchQuery(queryId, options);                                                                         // 280\n        }                                                                                                              // 281\n        return queryId;                                                                                                // 282\n    };                                                                                                                 // 283\n    QueryManager.prototype.startGraphQLSubscription = function (options) {                                             // 284\n        var _this = this;                                                                                              // 285\n        var query = options.query, variables = options.variables, _a = options.fragments, fragments = _a === void 0 ? [] : _a;\n        var queryDoc = getFromAST_1.addFragmentsToDocument(query, fragments);                                          // 287\n        if (this.queryTransformer) {                                                                                   // 288\n            queryDoc = queryTransform_1.applyTransformers(queryDoc, [this.queryTransformer]);                          // 289\n        }                                                                                                              // 290\n        var request = {                                                                                                // 291\n            query: queryDoc,                                                                                           // 292\n            variables: variables,                                                                                      // 293\n            operationName: getFromAST_1.getOperationName(queryDoc),                                                    // 294\n        };                                                                                                             // 295\n        var subId;                                                                                                     // 296\n        var observers = [];                                                                                            // 297\n        return new Observable_1.Observable(function (observer) {                                                       // 298\n            observers.push(observer);                                                                                  // 299\n            if (observers.length === 1) {                                                                              // 300\n                var handler = function (error, result) {                                                               // 301\n                    if (error) {                                                                                       // 302\n                        observers.forEach(function (obs) {                                                             // 303\n                            obs.error(error);                                                                          // 304\n                        });                                                                                            // 305\n                    }                                                                                                  // 306\n                    else {                                                                                             // 307\n                        observers.forEach(function (obs) {                                                             // 308\n                            obs.next(result);                                                                          // 309\n                        });                                                                                            // 310\n                    }                                                                                                  // 311\n                };                                                                                                     // 312\n                subId = _this.networkInterface.subscribe(request, handler);                                            // 313\n            }                                                                                                          // 314\n            return {                                                                                                   // 315\n                unsubscribe: function () {                                                                             // 316\n                    observers = observers.filter(function (obs) { return obs !== observer; });                         // 317\n                    if (observers.length === 0) {                                                                      // 318\n                        _this.networkInterface.unsubscribe(subId);                                                     // 319\n                    }                                                                                                  // 320\n                },                                                                                                     // 321\n                _networkSubscriptionId: subId,                                                                         // 322\n            };                                                                                                         // 323\n        });                                                                                                            // 324\n    };                                                                                                                 // 325\n    ;                                                                                                                  // 326\n    QueryManager.prototype.stopQuery = function (queryId) {                                                            // 327\n        delete this.queryListeners[queryId];                                                                           // 328\n        this.stopQueryInStore(queryId);                                                                                // 329\n    };                                                                                                                 // 330\n    QueryManager.prototype.getCurrentQueryResult = function (observableQuery, isOptimistic) {                          // 331\n        if (isOptimistic === void 0) { isOptimistic = false; }                                                         // 332\n        var _a = this.getQueryParts(observableQuery), queryVariables = _a.queryVariables, querySelectionSet = _a.querySelectionSet, queryFragments = _a.queryFragments;\n        var queryOptions = observableQuery.options;                                                                    // 334\n        var readOptions = {                                                                                            // 335\n            store: isOptimistic ? this.getDataWithOptimisticResults() : this.getApolloState().data,                    // 336\n            rootId: 'ROOT_QUERY',                                                                                      // 337\n            selectionSet: querySelectionSet,                                                                           // 338\n            variables: queryVariables,                                                                                 // 339\n            fragmentMap: getFromAST_1.createFragmentMap(queryFragments || []),                                         // 340\n            returnPartialData: false,                                                                                  // 341\n        };                                                                                                             // 342\n        try {                                                                                                          // 343\n            var data = readFromStore_1.readSelectionSetFromStore(readOptions);                                         // 344\n            return { data: data, partial: false };                                                                     // 345\n        }                                                                                                              // 346\n        catch (e) {                                                                                                    // 347\n            if (queryOptions.returnPartialData || queryOptions.noFetch) {                                              // 348\n                try {                                                                                                  // 349\n                    readOptions.returnPartialData = true;                                                              // 350\n                    var data = readFromStore_1.readSelectionSetFromStore(readOptions);                                 // 351\n                    return { data: data, partial: true };                                                              // 352\n                }                                                                                                      // 353\n                catch (e) {                                                                                            // 354\n                }                                                                                                      // 355\n            }                                                                                                          // 356\n            return { data: {}, partial: true };                                                                        // 357\n        }                                                                                                              // 358\n    };                                                                                                                 // 359\n    QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable, isOptimistic) {                 // 360\n        if (isOptimistic === void 0) { isOptimistic = false; }                                                         // 361\n        var observableQuery;                                                                                           // 362\n        if (typeof queryIdOrObservable === 'string') {                                                                 // 363\n            if (!this.observableQueries[queryIdOrObservable]) {                                                        // 364\n                throw new Error(\"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);                 // 365\n            }                                                                                                          // 366\n            observableQuery = this.observableQueries[queryIdOrObservable].observableQuery;                             // 367\n        }                                                                                                              // 368\n        else {                                                                                                         // 369\n            observableQuery = queryIdOrObservable;                                                                     // 370\n        }                                                                                                              // 371\n        var _a = this.getQueryParts(observableQuery), queryVariables = _a.queryVariables, querySelectionSet = _a.querySelectionSet, queryFragments = _a.queryFragments;\n        var data = this.getCurrentQueryResult(observableQuery, isOptimistic).data;                                     // 373\n        return {                                                                                                       // 374\n            previousResult: data,                                                                                      // 375\n            queryVariables: queryVariables,                                                                            // 376\n            querySelectionSet: querySelectionSet,                                                                      // 377\n            queryFragments: queryFragments,                                                                            // 378\n        };                                                                                                             // 379\n    };                                                                                                                 // 380\n    QueryManager.prototype.transformResult = function (result) {                                                       // 381\n        if (!this.resultTransformer) {                                                                                 // 382\n            return result;                                                                                             // 383\n        }                                                                                                              // 384\n        else {                                                                                                         // 385\n            return this.resultTransformer(result);                                                                     // 386\n        }                                                                                                              // 387\n    };                                                                                                                 // 388\n    QueryManager.prototype.getQueryParts = function (observableQuery) {                                                // 389\n        var queryOptions = observableQuery.options;                                                                    // 390\n        var fragments = queryOptions.fragments;                                                                        // 391\n        var queryDefinition = getFromAST_1.getQueryDefinition(queryOptions.query);                                     // 392\n        if (this.queryTransformer) {                                                                                   // 393\n            var doc = {                                                                                                // 394\n                kind: 'Document',                                                                                      // 395\n                definitions: [                                                                                         // 396\n                    queryDefinition                                                                                    // 397\n                ].concat((fragments || [])),                                                                           // 398\n            };                                                                                                         // 399\n            var transformedDoc = queryTransform_1.applyTransformers(doc, [this.queryTransformer]);                     // 400\n            queryDefinition = getFromAST_1.getQueryDefinition(transformedDoc);                                         // 401\n            fragments = getFromAST_1.getFragmentDefinitions(transformedDoc);                                           // 402\n        }                                                                                                              // 403\n        return {                                                                                                       // 404\n            queryVariables: queryOptions.variables,                                                                    // 405\n            querySelectionSet: queryDefinition.selectionSet,                                                           // 406\n            queryFragments: fragments,                                                                                 // 407\n        };                                                                                                             // 408\n    };                                                                                                                 // 409\n    QueryManager.prototype.collectResultBehaviorsFromUpdateQueries = function (updateQueries, mutationResult, isOptimistic) {\n        var _this = this;                                                                                              // 411\n        if (isOptimistic === void 0) { isOptimistic = false; }                                                         // 412\n        if (!updateQueries) {                                                                                          // 413\n            return [];                                                                                                 // 414\n        }                                                                                                              // 415\n        var resultBehaviors = [];                                                                                      // 416\n        Object.keys(updateQueries).forEach(function (queryName) {                                                      // 417\n            var reducer = updateQueries[queryName];                                                                    // 418\n            var queryIds = _this.queryIdsByName[queryName];                                                            // 419\n            if (!queryIds) {                                                                                           // 420\n                return;                                                                                                // 421\n            }                                                                                                          // 422\n            queryIds.forEach(function (queryId) {                                                                      // 423\n                var _a = _this.getQueryWithPreviousResult(queryId, isOptimistic), previousResult = _a.previousResult, queryVariables = _a.queryVariables, querySelectionSet = _a.querySelectionSet, queryFragments = _a.queryFragments;\n                var newResult = errorHandling_1.tryFunctionOrLogError(function () { return reducer(previousResult, {   // 425\n                    mutationResult: mutationResult,                                                                    // 426\n                    queryName: queryName,                                                                              // 427\n                    queryVariables: queryVariables,                                                                    // 428\n                }); });                                                                                                // 429\n                if (newResult) {                                                                                       // 430\n                    resultBehaviors.push({                                                                             // 431\n                        type: 'QUERY_RESULT',                                                                          // 432\n                        newResult: newResult,                                                                          // 433\n                        queryVariables: queryVariables,                                                                // 434\n                        querySelectionSet: querySelectionSet,                                                          // 435\n                        queryFragments: queryFragments,                                                                // 436\n                    });                                                                                                // 437\n                }                                                                                                      // 438\n            });                                                                                                        // 439\n        });                                                                                                            // 440\n        return resultBehaviors;                                                                                        // 441\n    };                                                                                                                 // 442\n    QueryManager.prototype.transformQueryDocument = function (options) {                                               // 443\n        var query = options.query, _a = options.fragments, fragments = _a === void 0 ? [] : _a;                        // 444\n        var queryDoc = getFromAST_1.addFragmentsToDocument(query, fragments);                                          // 445\n        if (this.queryTransformer) {                                                                                   // 446\n            queryDoc = queryTransform_1.applyTransformers(queryDoc, [this.queryTransformer]);                          // 447\n        }                                                                                                              // 448\n        return {                                                                                                       // 449\n            queryDoc: queryDoc,                                                                                        // 450\n            fragmentMap: getFromAST_1.createFragmentMap(getFromAST_1.getFragmentDefinitions(queryDoc)),                // 451\n        };                                                                                                             // 452\n    };                                                                                                                 // 453\n    QueryManager.prototype.handleDiffQuery = function (_a) {                                                           // 454\n        var queryDef = _a.queryDef, rootId = _a.rootId, variables = _a.variables, fragmentMap = _a.fragmentMap, noFetch = _a.noFetch;\n        var _b = diffAgainstStore_1.diffSelectionSetAgainstStore({                                                     // 456\n            selectionSet: queryDef.selectionSet,                                                                       // 457\n            store: this.reduxRootSelector(this.store.getState()).data,                                                 // 458\n            throwOnMissingField: false,                                                                                // 459\n            rootId: rootId,                                                                                            // 460\n            variables: variables,                                                                                      // 461\n            fragmentMap: fragmentMap,                                                                                  // 462\n        }), missingSelectionSets = _b.missingSelectionSets, result = _b.result;                                        // 463\n        var initialResult = result;                                                                                    // 464\n        var diffedQuery;                                                                                               // 465\n        if (missingSelectionSets && missingSelectionSets.length && !noFetch) {                                         // 466\n            diffedQuery = queryPrinting_1.queryDocument({                                                              // 467\n                missingSelectionSets: missingSelectionSets,                                                            // 468\n                variableDefinitions: queryDef.variableDefinitions,                                                     // 469\n                name: queryDef.name,                                                                                   // 470\n                fragmentMap: fragmentMap,                                                                              // 471\n            });                                                                                                        // 472\n            diffAgainstStore_1.removeUnusedVariablesFromQuery(diffedQuery);                                            // 473\n        }                                                                                                              // 474\n        return {                                                                                                       // 475\n            diffedQuery: diffedQuery,                                                                                  // 476\n            initialResult: initialResult,                                                                              // 477\n        };                                                                                                             // 478\n    };                                                                                                                 // 479\n    QueryManager.prototype.fetchRequest = function (_a) {                                                              // 480\n        var _this = this;                                                                                              // 481\n        var requestId = _a.requestId, queryId = _a.queryId, query = _a.query, querySS = _a.querySS, options = _a.options, fragmentMap = _a.fragmentMap;\n        var variables = options.variables, noFetch = options.noFetch, returnPartialData = options.returnPartialData;   // 483\n        var request = {                                                                                                // 484\n            query: query,                                                                                              // 485\n            variables: variables,                                                                                      // 486\n            operationName: getFromAST_1.getOperationName(query),                                                       // 487\n        };                                                                                                             // 488\n        var fetchRequest = {                                                                                           // 489\n            options: { query: query, variables: variables },                                                           // 490\n            queryId: queryId,                                                                                          // 491\n            operationName: request.operationName,                                                                      // 492\n        };                                                                                                             // 493\n        var retPromise = new Promise(function (resolve, reject) {                                                      // 494\n            _this.addFetchQueryPromise(requestId, retPromise, resolve, reject);                                        // 495\n            return _this.batcher.enqueueRequest(fetchRequest)                                                          // 496\n                .then(function (result) {                                                                              // 497\n                _this.store.dispatch({                                                                                 // 498\n                    type: 'APOLLO_QUERY_RESULT',                                                                       // 499\n                    result: result,                                                                                    // 500\n                    queryId: queryId,                                                                                  // 501\n                    requestId: requestId,                                                                              // 502\n                });                                                                                                    // 503\n                _this.removeFetchQueryPromise(requestId);                                                              // 504\n                return result;                                                                                         // 505\n            }).then(function () {                                                                                      // 506\n                var resultFromStore;                                                                                   // 507\n                try {                                                                                                  // 508\n                    resultFromStore = readFromStore_1.readSelectionSetFromStore({                                      // 509\n                        store: _this.getApolloState().data,                                                            // 510\n                        rootId: querySS.id,                                                                            // 511\n                        selectionSet: querySS.selectionSet,                                                            // 512\n                        variables: variables,                                                                          // 513\n                        returnPartialData: returnPartialData || noFetch,                                               // 514\n                        fragmentMap: fragmentMap,                                                                      // 515\n                    });                                                                                                // 516\n                }                                                                                                      // 517\n                catch (e) { }                                                                                          // 518\n                _this.removeFetchQueryPromise(requestId);                                                              // 519\n                resolve({ data: resultFromStore, loading: false });                                                    // 520\n            }).catch(function (error) {                                                                                // 521\n                _this.store.dispatch({                                                                                 // 522\n                    type: 'APOLLO_QUERY_ERROR',                                                                        // 523\n                    error: error,                                                                                      // 524\n                    queryId: queryId,                                                                                  // 525\n                    requestId: requestId,                                                                              // 526\n                });                                                                                                    // 527\n                _this.removeFetchQueryPromise(requestId);                                                              // 528\n            });                                                                                                        // 529\n        });                                                                                                            // 530\n        return retPromise;                                                                                             // 531\n    };                                                                                                                 // 532\n    QueryManager.prototype.fetchQueryOverInterface = function (queryId, options) {                                     // 533\n        var variables = options.variables, _a = options.forceFetch, forceFetch = _a === void 0 ? false : _a, _b = options.returnPartialData, returnPartialData = _b === void 0 ? false : _b, _c = options.noFetch, noFetch = _c === void 0 ? false : _c;\n        var _d = this.transformQueryDocument(options), queryDoc = _d.queryDoc, fragmentMap = _d.fragmentMap;           // 535\n        var queryDef = getFromAST_1.getQueryDefinition(queryDoc);                                                      // 536\n        var queryString = printer_1.print(queryDoc);                                                                   // 537\n        var querySS = {                                                                                                // 538\n            id: 'ROOT_QUERY',                                                                                          // 539\n            typeName: 'Query',                                                                                         // 540\n            selectionSet: queryDef.selectionSet,                                                                       // 541\n        };                                                                                                             // 542\n        var minimizedQueryString = queryString;                                                                        // 543\n        var minimizedQuery = querySS;                                                                                  // 544\n        var minimizedQueryDoc = queryDoc;                                                                              // 545\n        var storeResult;                                                                                               // 546\n        if (!forceFetch) {                                                                                             // 547\n            var _e = this.handleDiffQuery({                                                                            // 548\n                queryDef: queryDef,                                                                                    // 549\n                rootId: querySS.id,                                                                                    // 550\n                variables: variables,                                                                                  // 551\n                fragmentMap: fragmentMap,                                                                              // 552\n                noFetch: noFetch,                                                                                      // 553\n            }), diffedQuery = _e.diffedQuery, initialResult = _e.initialResult;                                        // 554\n            storeResult = initialResult;                                                                               // 555\n            if (diffedQuery) {                                                                                         // 556\n                minimizedQueryDoc = diffedQuery;                                                                       // 557\n                minimizedQueryString = printer_1.print(minimizedQueryDoc);                                             // 558\n                minimizedQuery = {                                                                                     // 559\n                    id: querySS.id,                                                                                    // 560\n                    typeName: 'Query',                                                                                 // 561\n                    selectionSet: getFromAST_1.getQueryDefinition(diffedQuery).selectionSet,                           // 562\n                };                                                                                                     // 563\n            }                                                                                                          // 564\n            else {                                                                                                     // 565\n                minimizedQueryDoc = null;                                                                              // 566\n                minimizedQueryString = null;                                                                           // 567\n                minimizedQuery = null;                                                                                 // 568\n            }                                                                                                          // 569\n        }                                                                                                              // 570\n        var requestId = this.generateRequestId();                                                                      // 571\n        var shouldFetch = minimizedQuery && !noFetch;                                                                  // 572\n        this.store.dispatch({                                                                                          // 573\n            type: 'APOLLO_QUERY_INIT',                                                                                 // 574\n            queryString: queryString,                                                                                  // 575\n            query: querySS,                                                                                            // 576\n            minimizedQueryString: minimizedQueryString,                                                                // 577\n            minimizedQuery: minimizedQuery,                                                                            // 578\n            variables: variables,                                                                                      // 579\n            forceFetch: forceFetch,                                                                                    // 580\n            returnPartialData: returnPartialData || noFetch,                                                           // 581\n            queryId: queryId,                                                                                          // 582\n            requestId: requestId,                                                                                      // 583\n            fragmentMap: fragmentMap,                                                                                  // 584\n            storePreviousVariables: shouldFetch,                                                                       // 585\n        });                                                                                                            // 586\n        if (!shouldFetch || returnPartialData) {                                                                       // 587\n            this.store.dispatch({                                                                                      // 588\n                type: 'APOLLO_QUERY_RESULT_CLIENT',                                                                    // 589\n                result: { data: storeResult },                                                                         // 590\n                variables: variables,                                                                                  // 591\n                query: querySS,                                                                                        // 592\n                complete: !!minimizedQuery,                                                                            // 593\n                queryId: queryId,                                                                                      // 594\n            });                                                                                                        // 595\n        }                                                                                                              // 596\n        if (shouldFetch) {                                                                                             // 597\n            return this.fetchRequest({                                                                                 // 598\n                requestId: requestId,                                                                                  // 599\n                queryId: queryId,                                                                                      // 600\n                query: minimizedQueryDoc,                                                                              // 601\n                querySS: minimizedQuery,                                                                               // 602\n                options: options,                                                                                      // 603\n                fragmentMap: fragmentMap,                                                                              // 604\n            });                                                                                                        // 605\n        }                                                                                                              // 606\n        return Promise.resolve({ data: storeResult });                                                                 // 607\n    };                                                                                                                 // 608\n    QueryManager.prototype.refetchQueryByName = function (queryName) {                                                 // 609\n        var _this = this;                                                                                              // 610\n        var refetchedQueries = this.queryIdsByName[queryName];                                                         // 611\n        if (refetchedQueries === undefined) {                                                                          // 612\n            console.warn(\"Warning: unknown query with name \" + queryName + \" asked to refetch\");                       // 613\n        }                                                                                                              // 614\n        else {                                                                                                         // 615\n            refetchedQueries.forEach(function (queryId) {                                                              // 616\n                _this.observableQueries[queryId].observableQuery.refetch();                                            // 617\n            });                                                                                                        // 618\n        }                                                                                                              // 619\n    };                                                                                                                 // 620\n    QueryManager.prototype.isDifferentResult = function (lastResult, newResult) {                                      // 621\n        var comparator = this.resultComparator || isEqual;                                                             // 622\n        return !comparator(lastResult, newResult);                                                                     // 623\n    };                                                                                                                 // 624\n    QueryManager.prototype.broadcastQueries = function () {                                                            // 625\n        var queries = this.getApolloState().queries;                                                                   // 626\n        forOwn(this.queryListeners, function (listeners, queryId) {                                                    // 627\n            listeners.forEach(function (listener) {                                                                    // 628\n                if (listener) {                                                                                        // 629\n                    var queryStoreValue = queries[queryId];                                                            // 630\n                    listener(queryStoreValue);                                                                         // 631\n                }                                                                                                      // 632\n            });                                                                                                        // 633\n        });                                                                                                            // 634\n    };                                                                                                                 // 635\n    QueryManager.prototype.generateRequestId = function () {                                                           // 636\n        var requestId = this.idCounter;                                                                                // 637\n        this.idCounter++;                                                                                              // 638\n        return requestId;                                                                                              // 639\n    };                                                                                                                 // 640\n    return QueryManager;                                                                                               // 641\n}());                                                                                                                  // 642\nexports.QueryManager = QueryManager;                                                                                   // 643\n//# sourceMappingURL=QueryManager.js.map                                                                               // 644\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"queryPrinting.js\":[\"graphql-tag/printer\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/queryPrinting.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar printer_1 = require('graphql-tag/printer');                                                                        // 2\nfunction printQueryForMissingData(options) {                                                                           // 3\n    return printQueryFromDefinition(queryDefinition(options));                                                         // 4\n}                                                                                                                      // 5\nexports.printQueryForMissingData = printQueryForMissingData;                                                           // 6\nfunction printQueryFromDefinition(queryDef) {                                                                          // 7\n    var queryDocumentAst = {                                                                                           // 8\n        kind: 'Document',                                                                                              // 9\n        definitions: [                                                                                                 // 10\n            queryDef,                                                                                                  // 11\n        ],                                                                                                             // 12\n    };                                                                                                                 // 13\n    return printer_1.print(queryDocumentAst);                                                                          // 14\n}                                                                                                                      // 15\nexports.printQueryFromDefinition = printQueryFromDefinition;                                                           // 16\nfunction queryDocument(_a) {                                                                                           // 17\n    var missingSelectionSets = _a.missingSelectionSets, _b = _a.variableDefinitions, variableDefinitions = _b === void 0 ? null : _b, _c = _a.name, name = _c === void 0 ? null : _c, fragmentMap = _a.fragmentMap;\n    var doc = {                                                                                                        // 19\n        kind: 'Document',                                                                                              // 20\n        definitions: [],                                                                                               // 21\n    };                                                                                                                 // 22\n    var opDefinition = queryDefinition({                                                                               // 23\n        missingSelectionSets: missingSelectionSets,                                                                    // 24\n        variableDefinitions: variableDefinitions,                                                                      // 25\n        name: name,                                                                                                    // 26\n    });                                                                                                                // 27\n    doc.definitions = [opDefinition];                                                                                  // 28\n    Object.keys(fragmentMap).forEach(function (key) {                                                                  // 29\n        doc.definitions.push(fragmentMap[key]);                                                                        // 30\n    });                                                                                                                // 31\n    return doc;                                                                                                        // 32\n}                                                                                                                      // 33\nexports.queryDocument = queryDocument;                                                                                 // 34\nfunction queryDefinition(_a) {                                                                                         // 35\n    var missingSelectionSets = _a.missingSelectionSets, _b = _a.variableDefinitions, variableDefinitions = _b === void 0 ? null : _b, _c = _a.name, name = _c === void 0 ? null : _c;\n    var selections = [];                                                                                               // 37\n    missingSelectionSets.forEach(function (missingSelectionSet, ii) {                                                  // 38\n        if (missingSelectionSet.id === 'CANNOT_REFETCH') {                                                             // 39\n            throw new Error('diffAgainstStore did not merge selection sets correctly');                                // 40\n        }                                                                                                              // 41\n        if (missingSelectionSet.id !== 'ROOT_QUERY') {                                                                 // 42\n            throw new Error('Only root query selections supported.');                                                  // 43\n        }                                                                                                              // 44\n        missingSelectionSet.selectionSet.selections.forEach(function (selection) {                                     // 45\n            selections.push(selection);                                                                                // 46\n        });                                                                                                            // 47\n    });                                                                                                                // 48\n    return {                                                                                                           // 49\n        kind: 'OperationDefinition',                                                                                   // 50\n        operation: 'query',                                                                                            // 51\n        name: name,                                                                                                    // 52\n        variableDefinitions: variableDefinitions,                                                                      // 53\n        directives: [],                                                                                                // 54\n        selectionSet: {                                                                                                // 55\n            kind: 'SelectionSet',                                                                                      // 56\n            selections: selections,                                                                                    // 57\n        },                                                                                                             // 58\n    };                                                                                                                 // 59\n}                                                                                                                      // 60\nexports.queryDefinition = queryDefinition;                                                                             // 61\n//# sourceMappingURL=queryPrinting.js.map                                                                              // 62\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"batching.js\":[\"lodash.clonedeep\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/batching.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar cloneDeep = require('lodash.clonedeep');                                                                           // 2\n;                                                                                                                      // 3\nvar QueryBatcher = (function () {                                                                                      // 4\n    function QueryBatcher(_a) {                                                                                        // 5\n        var shouldBatch = _a.shouldBatch, networkInterface = _a.networkInterface;                                      // 6\n        this.queuedRequests = [];                                                                                      // 7\n        this.shouldBatch = shouldBatch;                                                                                // 8\n        this.queuedRequests = [];                                                                                      // 9\n        this.networkInterface = networkInterface;                                                                      // 10\n    }                                                                                                                  // 11\n    QueryBatcher.prototype.enqueueRequest = function (request) {                                                       // 12\n        this.queuedRequests.push(request);                                                                             // 13\n        request.promise = new Promise(function (resolve, reject) {                                                     // 14\n            request.resolve = resolve;                                                                                 // 15\n            request.reject = reject;                                                                                   // 16\n        });                                                                                                            // 17\n        if (!this.shouldBatch) {                                                                                       // 18\n            this.consumeQueue();                                                                                       // 19\n        }                                                                                                              // 20\n        return request.promise;                                                                                        // 21\n    };                                                                                                                 // 22\n    QueryBatcher.prototype.consumeQueue = function () {                                                                // 23\n        var _this = this;                                                                                              // 24\n        if (this.queuedRequests.length < 1) {                                                                          // 25\n            return undefined;                                                                                          // 26\n        }                                                                                                              // 27\n        var requests = this.queuedRequests.map(function (queuedRequest) {                                              // 28\n            return {                                                                                                   // 29\n                query: queuedRequest.options.query,                                                                    // 30\n                variables: queuedRequest.options.variables,                                                            // 31\n                operationName: queuedRequest.operationName,                                                            // 32\n            };                                                                                                         // 33\n        });                                                                                                            // 34\n        var promises = [];                                                                                             // 35\n        var resolvers = [];                                                                                            // 36\n        var rejecters = [];                                                                                            // 37\n        this.queuedRequests.forEach(function (fetchRequest, index) {                                                   // 38\n            promises.push(fetchRequest.promise);                                                                       // 39\n            resolvers.push(fetchRequest.resolve);                                                                      // 40\n            rejecters.push(fetchRequest.reject);                                                                       // 41\n        });                                                                                                            // 42\n        if (this.shouldBatch) {                                                                                        // 43\n            this.queuedRequests = [];                                                                                  // 44\n            var batchedPromise = this.networkInterface.batchQuery(requests);                                           // 45\n            batchedPromise.then(function (results) {                                                                   // 46\n                results.forEach(function (result, index) {                                                             // 47\n                    resolvers[index](result);                                                                          // 48\n                });                                                                                                    // 49\n            }).catch(function (error) {                                                                                // 50\n                rejecters.forEach(function (rejecter, index) {                                                         // 51\n                    rejecters[index](error);                                                                           // 52\n                });                                                                                                    // 53\n            });                                                                                                        // 54\n            return promises;                                                                                           // 55\n        }                                                                                                              // 56\n        else {                                                                                                         // 57\n            var clonedRequests = cloneDeep(this.queuedRequests);                                                       // 58\n            this.queuedRequests = [];                                                                                  // 59\n            clonedRequests.forEach(function (fetchRequest, index) {                                                    // 60\n                _this.networkInterface.query(requests[index]).then(function (result) {                                 // 61\n                    resolvers[index](result);                                                                          // 62\n                }).catch(function (reason) {                                                                           // 63\n                    rejecters[index](reason);                                                                          // 64\n                });                                                                                                    // 65\n            });                                                                                                        // 66\n            return promises;                                                                                           // 67\n        }                                                                                                              // 68\n    };                                                                                                                 // 69\n    QueryBatcher.prototype.start = function (pollInterval) {                                                           // 70\n        var _this = this;                                                                                              // 71\n        if (this.shouldBatch) {                                                                                        // 72\n            this.pollInterval = pollInterval;                                                                          // 73\n            this.pollTimer = setInterval(function () {                                                                 // 74\n                _this.consumeQueue();                                                                                  // 75\n            }, this.pollInterval);                                                                                     // 76\n        }                                                                                                              // 77\n    };                                                                                                                 // 78\n    QueryBatcher.prototype.stop = function () {                                                                        // 79\n        if (this.pollTimer) {                                                                                          // 80\n            clearInterval(this.pollTimer);                                                                             // 81\n        }                                                                                                              // 82\n    };                                                                                                                 // 83\n    return QueryBatcher;                                                                                               // 84\n}());                                                                                                                  // 85\nexports.QueryBatcher = QueryBatcher;                                                                                   // 86\n//# sourceMappingURL=batching.js.map                                                                                   // 87\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"scheduler.js\":[\"./ObservableQuery\",\"lodash.assign\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/scheduler.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar ObservableQuery_1 = require('./ObservableQuery');                                                                  // 2\nvar assign = require('lodash.assign');                                                                                 // 3\nvar QueryScheduler = (function () {                                                                                    // 4\n    function QueryScheduler(_a) {                                                                                      // 5\n        var queryManager = _a.queryManager;                                                                            // 6\n        this.queryManager = queryManager;                                                                              // 7\n        this.pollingTimers = {};                                                                                       // 8\n        this.inFlightQueries = {};                                                                                     // 9\n        this.registeredQueries = {};                                                                                   // 10\n        this.intervalQueries = {};                                                                                     // 11\n    }                                                                                                                  // 12\n    QueryScheduler.prototype.checkInFlight = function (queryId) {                                                      // 13\n        return this.inFlightQueries.hasOwnProperty(queryId);                                                           // 14\n    };                                                                                                                 // 15\n    QueryScheduler.prototype.fetchQuery = function (queryId, options) {                                                // 16\n        var _this = this;                                                                                              // 17\n        return new Promise(function (resolve, reject) {                                                                // 18\n            _this.queryManager.fetchQuery(queryId, options).then(function (result) {                                   // 19\n                _this.removeInFlight(queryId);                                                                         // 20\n                resolve(result);                                                                                       // 21\n            }).catch(function (error) {                                                                                // 22\n                _this.removeInFlight(queryId);                                                                         // 23\n                reject(error);                                                                                         // 24\n            });                                                                                                        // 25\n            _this.addInFlight(queryId, options);                                                                       // 26\n        });                                                                                                            // 27\n    };                                                                                                                 // 28\n    QueryScheduler.prototype.startPollingQuery = function (options, queryId, firstFetch, listener) {                   // 29\n        if (firstFetch === void 0) { firstFetch = true; }                                                              // 30\n        if (!options.pollInterval) {                                                                                   // 31\n            throw new Error('Attempted to start a polling query without a polling interval.');                         // 32\n        }                                                                                                              // 33\n        this.registeredQueries[queryId] = options;                                                                     // 34\n        if (firstFetch) {                                                                                              // 35\n            this.fetchQuery(queryId, options);                                                                         // 36\n        }                                                                                                              // 37\n        if (listener) {                                                                                                // 38\n            this.queryManager.addQueryListener(queryId, listener);                                                     // 39\n        }                                                                                                              // 40\n        this.addQueryOnInterval(queryId, options);                                                                     // 41\n        return queryId;                                                                                                // 42\n    };                                                                                                                 // 43\n    QueryScheduler.prototype.stopPollingQuery = function (queryId) {                                                   // 44\n        delete this.registeredQueries[queryId];                                                                        // 45\n    };                                                                                                                 // 46\n    QueryScheduler.prototype.fetchQueriesOnInterval = function (interval) {                                            // 47\n        var _this = this;                                                                                              // 48\n        this.intervalQueries[interval] = this.intervalQueries[interval].filter(function (queryId) {                    // 49\n            if (!_this.registeredQueries.hasOwnProperty(queryId)) {                                                    // 50\n                return false;                                                                                          // 51\n            }                                                                                                          // 52\n            if (_this.checkInFlight(queryId)) {                                                                        // 53\n                return true;                                                                                           // 54\n            }                                                                                                          // 55\n            var queryOptions = _this.registeredQueries[queryId];                                                       // 56\n            var pollingOptions = assign({}, queryOptions);                                                             // 57\n            pollingOptions.forceFetch = true;                                                                          // 58\n            _this.fetchQuery(queryId, pollingOptions);                                                                 // 59\n            return true;                                                                                               // 60\n        });                                                                                                            // 61\n        if (this.intervalQueries[interval].length === 0) {                                                             // 62\n            clearInterval(this.pollingTimers[interval]);                                                               // 63\n        }                                                                                                              // 64\n    };                                                                                                                 // 65\n    QueryScheduler.prototype.addQueryOnInterval = function (queryId, queryOptions) {                                   // 66\n        var _this = this;                                                                                              // 67\n        var interval = queryOptions.pollInterval;                                                                      // 68\n        if (this.intervalQueries.hasOwnProperty(interval.toString()) && this.intervalQueries[interval].length > 0) {   // 69\n            this.intervalQueries[interval].push(queryId);                                                              // 70\n        }                                                                                                              // 71\n        else {                                                                                                         // 72\n            this.intervalQueries[interval] = [queryId];                                                                // 73\n            this.pollingTimers[interval] = setInterval(function () {                                                   // 74\n                _this.fetchQueriesOnInterval(interval);                                                                // 75\n            }, interval);                                                                                              // 76\n        }                                                                                                              // 77\n    };                                                                                                                 // 78\n    QueryScheduler.prototype.registerPollingQuery = function (queryOptions) {                                          // 79\n        if (!queryOptions.pollInterval) {                                                                              // 80\n            throw new Error('Attempted to register a non-polling query with the scheduler.');                          // 81\n        }                                                                                                              // 82\n        return new ObservableQuery_1.ObservableQuery({                                                                 // 83\n            scheduler: this,                                                                                           // 84\n            options: queryOptions,                                                                                     // 85\n        });                                                                                                            // 86\n    };                                                                                                                 // 87\n    QueryScheduler.prototype.addInFlight = function (queryId, options) {                                               // 88\n        this.inFlightQueries[queryId] = options;                                                                       // 89\n    };                                                                                                                 // 90\n    QueryScheduler.prototype.removeInFlight = function (queryId) {                                                     // 91\n        delete this.inFlightQueries[queryId];                                                                          // 92\n    };                                                                                                                 // 93\n    return QueryScheduler;                                                                                             // 94\n}());                                                                                                                  // 95\nexports.QueryScheduler = QueryScheduler;                                                                               // 96\n//# sourceMappingURL=scheduler.js.map                                                                                  // 97\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ObservableQuery.js\":[\"./util/Observable\",\"./util/errorHandling\",\"lodash.assign\",\"lodash.isequal\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/ObservableQuery.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar __extends = (this && this.__extends) || function (d, b) {                                                          // 2\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];                                                             // 3\n    function __() { this.constructor = d; }                                                                            // 4\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());                              // 5\n};                                                                                                                     // 6\nvar Observable_1 = require('./util/Observable');                                                                       // 7\nvar errorHandling_1 = require('./util/errorHandling');                                                                 // 8\nvar assign = require('lodash.assign');                                                                                 // 9\nvar isEqual = require('lodash.isequal');                                                                               // 10\nvar ObservableQuery = (function (_super) {                                                                             // 11\n    __extends(ObservableQuery, _super);                                                                                // 12\n    function ObservableQuery(_a) {                                                                                     // 13\n        var _this = this;                                                                                              // 14\n        var scheduler = _a.scheduler, options = _a.options, _b = _a.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;\n        var queryManager = scheduler.queryManager;                                                                     // 16\n        var queryId = queryManager.generateQueryId();                                                                  // 17\n        var isPollingQuery = !!options.pollInterval;                                                                   // 18\n        var subscriberFunction = function (observer) {                                                                 // 19\n            var retQuerySubscription = {                                                                               // 20\n                unsubscribe: function () {                                                                             // 21\n                    if (isPollingQuery) {                                                                              // 22\n                        scheduler.stopPollingQuery(queryId);                                                           // 23\n                    }                                                                                                  // 24\n                    queryManager.stopQuery(queryId);                                                                   // 25\n                },                                                                                                     // 26\n            };                                                                                                         // 27\n            if (shouldSubscribe) {                                                                                     // 28\n                queryManager.addObservableQuery(queryId, _this);                                                       // 29\n                queryManager.addQuerySubscription(queryId, retQuerySubscription);                                      // 30\n            }                                                                                                          // 31\n            if (isPollingQuery) {                                                                                      // 32\n                if (_this.options.noFetch) {                                                                           // 33\n                    throw new Error('noFetch option should not use query polling.');                                   // 34\n                }                                                                                                      // 35\n                _this.scheduler.startPollingQuery(_this.options, queryId);                                             // 36\n            }                                                                                                          // 37\n            queryManager.startQuery(queryId, _this.options, queryManager.queryListenerForObserver(queryId, _this.options, observer));\n            return retQuerySubscription;                                                                               // 39\n        };                                                                                                             // 40\n        _super.call(this, subscriberFunction);                                                                         // 41\n        this.options = options;                                                                                        // 42\n        this.variables = this.options.variables || {};                                                                 // 43\n        this.scheduler = scheduler;                                                                                    // 44\n        this.queryManager = queryManager;                                                                              // 45\n        this.queryId = queryId;                                                                                        // 46\n        this.refetch = function (variables) {                                                                          // 47\n            _this.variables = assign({}, _this.variables, variables);                                                  // 48\n            if (_this.options.noFetch) {                                                                               // 49\n                throw new Error('noFetch option should not use query refetch.');                                       // 50\n            }                                                                                                          // 51\n            return _this.queryManager.fetchQuery(_this.queryId, assign(_this.options, {                                // 52\n                forceFetch: true,                                                                                      // 53\n                variables: _this.variables,                                                                            // 54\n            }))                                                                                                        // 55\n                .then(function (result) { return _this.queryManager.transformResult(result); });                       // 56\n        };                                                                                                             // 57\n        this.setOptions = function (opts) {                                                                            // 58\n            _this.options = assign({}, _this.options, opts);                                                           // 59\n            if (opts.pollInterval) {                                                                                   // 60\n                _this.startPolling(opts.pollInterval);                                                                 // 61\n            }                                                                                                          // 62\n            else if (opts.pollInterval === 0) {                                                                        // 63\n                _this.stopPolling();                                                                                   // 64\n            }                                                                                                          // 65\n            return _this.setVariables(opts.variables);                                                                 // 66\n        };                                                                                                             // 67\n        this.setVariables = function (variables) {                                                                     // 68\n            var newVariables = assign({}, _this.variables, variables);                                                 // 69\n            if (isEqual(newVariables, _this.variables)) {                                                              // 70\n                return _this.result();                                                                                 // 71\n            }                                                                                                          // 72\n            else {                                                                                                     // 73\n                _this.variables = newVariables;                                                                        // 74\n                return _this.queryManager.fetchQuery(_this.queryId, assign(_this.options, {                            // 75\n                    variables: _this.variables,                                                                        // 76\n                }))                                                                                                    // 77\n                    .then(function (result) { return _this.queryManager.transformResult(result); });                   // 78\n            }                                                                                                          // 79\n        };                                                                                                             // 80\n        this.fetchMore = function (fetchMoreOptions) {                                                                 // 81\n            return Promise.resolve()                                                                                   // 82\n                .then(function () {                                                                                    // 83\n                var qid = _this.queryManager.generateQueryId();                                                        // 84\n                var combinedOptions = null;                                                                            // 85\n                if (fetchMoreOptions.query) {                                                                          // 86\n                    combinedOptions = fetchMoreOptions;                                                                // 87\n                }                                                                                                      // 88\n                else {                                                                                                 // 89\n                    var variables = assign({}, _this.variables, fetchMoreOptions.variables);                           // 90\n                    combinedOptions = assign({}, _this.options, fetchMoreOptions, {                                    // 91\n                        variables: variables,                                                                          // 92\n                    });                                                                                                // 93\n                }                                                                                                      // 94\n                combinedOptions = assign({}, combinedOptions, {                                                        // 95\n                    forceFetch: true,                                                                                  // 96\n                });                                                                                                    // 97\n                return _this.queryManager.fetchQuery(qid, combinedOptions);                                            // 98\n            })                                                                                                         // 99\n                .then(function (fetchMoreResult) {                                                                     // 100\n                var reducer = fetchMoreOptions.updateQuery;                                                            // 101\n                var mapFn = function (previousResult, _a) {                                                            // 102\n                    var queryVariables = _a.queryVariables;                                                            // 103\n                    return reducer(previousResult, {                                                                   // 104\n                        fetchMoreResult: fetchMoreResult,                                                              // 105\n                        queryVariables: queryVariables,                                                                // 106\n                    });                                                                                                // 107\n                };                                                                                                     // 108\n                _this.updateQuery(mapFn);                                                                              // 109\n                return fetchMoreResult;                                                                                // 110\n            });                                                                                                        // 111\n        };                                                                                                             // 112\n        this.updateQuery = function (mapFn) {                                                                          // 113\n            var _a = _this.queryManager.getQueryWithPreviousResult(_this.queryId), previousResult = _a.previousResult, queryVariables = _a.queryVariables, querySelectionSet = _a.querySelectionSet, _b = _a.queryFragments, queryFragments = _b === void 0 ? [] : _b;\n            var newResult = errorHandling_1.tryFunctionOrLogError(function () { return mapFn(previousResult, { queryVariables: queryVariables }); });\n            if (newResult) {                                                                                           // 116\n                _this.queryManager.store.dispatch({                                                                    // 117\n                    type: 'APOLLO_UPDATE_QUERY_RESULT',                                                                // 118\n                    newResult: newResult,                                                                              // 119\n                    queryVariables: queryVariables,                                                                    // 120\n                    querySelectionSet: querySelectionSet,                                                              // 121\n                    queryFragments: queryFragments,                                                                    // 122\n                });                                                                                                    // 123\n            }                                                                                                          // 124\n        };                                                                                                             // 125\n        this.stopPolling = function () {                                                                               // 126\n            if (isPollingQuery) {                                                                                      // 127\n                _this.scheduler.stopPollingQuery(_this.queryId);                                                       // 128\n            }                                                                                                          // 129\n        };                                                                                                             // 130\n        this.startPolling = function (pollInterval) {                                                                  // 131\n            if (_this.options.noFetch) {                                                                               // 132\n                throw new Error('noFetch option should not use query polling.');                                       // 133\n            }                                                                                                          // 134\n            if (isPollingQuery) {                                                                                      // 135\n                _this.scheduler.stopPollingQuery(_this.queryId);                                                       // 136\n            }                                                                                                          // 137\n            _this.options.pollInterval = pollInterval;                                                                 // 138\n            _this.scheduler.startPollingQuery(_this.options, _this.queryId, false);                                    // 139\n        };                                                                                                             // 140\n    }                                                                                                                  // 141\n    ObservableQuery.prototype.result = function () {                                                                   // 142\n        var _this = this;                                                                                              // 143\n        return new Promise(function (resolve, reject) {                                                                // 144\n            var subscription = _this.subscribe({                                                                       // 145\n                next: function (result) {                                                                              // 146\n                    resolve(result);                                                                                   // 147\n                    setTimeout(function () {                                                                           // 148\n                        subscription.unsubscribe();                                                                    // 149\n                    }, 0);                                                                                             // 150\n                },                                                                                                     // 151\n                error: function (error) {                                                                              // 152\n                    reject(error);                                                                                     // 153\n                },                                                                                                     // 154\n            });                                                                                                        // 155\n        });                                                                                                            // 156\n    };                                                                                                                 // 157\n    ObservableQuery.prototype.currentResult = function () {                                                            // 158\n        var _a = this.queryManager.getCurrentQueryResult(this), data = _a.data, partial = _a.partial;                  // 159\n        var queryStoreValue = this.queryManager.getApolloState().queries[this.queryId];                                // 160\n        var queryLoading = !queryStoreValue || queryStoreValue.loading;                                                // 161\n        var loading = (this.options.forceFetch && queryLoading)                                                        // 162\n            || (partial && !this.options.noFetch);                                                                     // 163\n        return { data: data, loading: loading };                                                                       // 164\n    };                                                                                                                 // 165\n    return ObservableQuery;                                                                                            // 166\n}(Observable_1.Observable));                                                                                           // 167\nexports.ObservableQuery = ObservableQuery;                                                                             // 168\n//# sourceMappingURL=ObservableQuery.js.map                                                                            // 169\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"util\":{\"Observable.js\":[\"symbol-observable\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/util/Observable.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nvar symbol_observable_1 = require('symbol-observable');                                                                // 2\nfunction isSubscription(subscription) {                                                                                // 3\n    return subscription.unsubscribe !== undefined;                                                                     // 4\n}                                                                                                                      // 5\nvar Observable = (function () {                                                                                        // 6\n    function Observable(subscriberFunction) {                                                                          // 7\n        this.subscriberFunction = subscriberFunction;                                                                  // 8\n    }                                                                                                                  // 9\n    Observable.prototype[symbol_observable_1.default] = function () {                                                  // 10\n        return this;                                                                                                   // 11\n    };                                                                                                                 // 12\n    Observable.prototype.subscribe = function (observer) {                                                             // 13\n        var subscriptionOrCleanupFunction = this.subscriberFunction(observer);                                         // 14\n        if (isSubscription(subscriptionOrCleanupFunction)) {                                                           // 15\n            return subscriptionOrCleanupFunction;                                                                      // 16\n        }                                                                                                              // 17\n        else {                                                                                                         // 18\n            return {                                                                                                   // 19\n                unsubscribe: subscriptionOrCleanupFunction,                                                            // 20\n            };                                                                                                         // 21\n        }                                                                                                              // 22\n    };                                                                                                                 // 23\n    return Observable;                                                                                                 // 24\n}());                                                                                                                  // 25\nexports.Observable = Observable;                                                                                       // 26\n//# sourceMappingURL=Observable.js.map                                                                                 // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"errorHandling.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/apollo-client/util/errorHandling.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\nfunction tryFunctionOrLogError(f) {                                                                                    // 2\n    try {                                                                                                              // 3\n        return f();                                                                                                    // 4\n    }                                                                                                                  // 5\n    catch (e) {                                                                                                        // 6\n        if (console.error) {                                                                                           // 7\n            console.error(e);                                                                                          // 8\n        }                                                                                                              // 9\n    }                                                                                                                  // 10\n}                                                                                                                      // 11\nexports.tryFunctionOrLogError = tryFunctionOrLogError;                                                                 // 12\n//# sourceMappingURL=errorHandling.js.map                                                                              // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"graphql-tag\":{\"printer.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/graphql-tag/printer.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports =                                                                                                       // 1\n/******/ (function(modules) { // webpackBootstrap                                                                      // 2\n/******/ \t// The module cache                                                                                          // 3\n/******/ \tvar installedModules = {};                                                                                   // 4\n                                                                                                                       // 5\n/******/ \t// The require function                                                                                      // 6\n/******/ \tfunction __webpack_require__(moduleId) {                                                                     // 7\n                                                                                                                       // 8\n/******/ \t\t// Check if module is in cache                                                                              // 9\n/******/ \t\tif(installedModules[moduleId])                                                                              // 10\n/******/ \t\t\treturn installedModules[moduleId].exports;                                                                 // 11\n                                                                                                                       // 12\n/******/ \t\t// Create a new module (and put it into the cache)                                                          // 13\n/******/ \t\tvar module = installedModules[moduleId] = {                                                                 // 14\n/******/ \t\t\texports: {},                                                                                               // 15\n/******/ \t\t\tid: moduleId,                                                                                              // 16\n/******/ \t\t\tloaded: false                                                                                              // 17\n/******/ \t\t};                                                                                                          // 18\n                                                                                                                       // 19\n/******/ \t\t// Execute the module function                                                                              // 20\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);                        // 21\n                                                                                                                       // 22\n/******/ \t\t// Flag the module as loaded                                                                                // 23\n/******/ \t\tmodule.loaded = true;                                                                                       // 24\n                                                                                                                       // 25\n/******/ \t\t// Return the exports of the module                                                                         // 26\n/******/ \t\treturn module.exports;                                                                                      // 27\n/******/ \t}                                                                                                            // 28\n                                                                                                                       // 29\n                                                                                                                       // 30\n/******/ \t// expose the modules object (__webpack_modules__)                                                           // 31\n/******/ \t__webpack_require__.m = modules;                                                                             // 32\n                                                                                                                       // 33\n/******/ \t// expose the module cache                                                                                   // 34\n/******/ \t__webpack_require__.c = installedModules;                                                                    // 35\n                                                                                                                       // 36\n/******/ \t// __webpack_public_path__                                                                                   // 37\n/******/ \t__webpack_require__.p = \"\";                                                                                  // 38\n                                                                                                                       // 39\n/******/ \t// Load entry module and return exports                                                                      // 40\n/******/ \treturn __webpack_require__(0);                                                                               // 41\n/******/ })                                                                                                            // 42\n/************************************************************************/                                             // 43\n/******/ ([                                                                                                            // 44\n/* 0 */                                                                                                                // 45\n/***/ function(module, exports, __webpack_require__) {                                                                 // 46\n                                                                                                                       // 47\n\tmodule.exports = __webpack_require__(1);                                                                              // 48\n                                                                                                                       // 49\n                                                                                                                       // 50\n/***/ },                                                                                                               // 51\n/* 1 */                                                                                                                // 52\n/***/ function(module, exports, __webpack_require__) {                                                                 // 53\n                                                                                                                       // 54\n\t'use strict';                                                                                                         // 55\n                                                                                                                       // 56\n\tObject.defineProperty(exports, \"__esModule\", {                                                                        // 57\n\t  value: true                                                                                                         // 58\n\t});                                                                                                                   // 59\n                                                                                                                       // 60\n\tvar _stringify = __webpack_require__(2);                                                                              // 61\n                                                                                                                       // 62\n\tvar _stringify2 = _interopRequireDefault(_stringify);                                                                 // 63\n                                                                                                                       // 64\n\texports.print = print;                                                                                                // 65\n                                                                                                                       // 66\n\tvar _visitor = __webpack_require__(5);                                                                                // 67\n                                                                                                                       // 68\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                       // 69\n                                                                                                                       // 70\n\t/**                                                                                                                   // 71\n\t * Converts an AST into a string, using one set of reasonable                                                         // 72\n\t * formatting rules.                                                                                                  // 73\n\t */                                                                                                                   // 74\n\tfunction print(ast) {                                                                                                 // 75\n\t  return (0, _visitor.visit)(ast, { leave: printDocASTReducer });                                                     // 76\n\t} /**                                                                                                                 // 77\n\t   *  Copyright (c) 2015, Facebook, Inc.                                                                              // 78\n\t   *  All rights reserved.                                                                                            // 79\n\t   *                                                                                                                  // 80\n\t   *  This source code is licensed under the BSD-style license found in the                                           // 81\n\t   *  LICENSE file in the root directory of this source tree. An additional grant                                     // 82\n\t   *  of patent rights can be found in the PATENTS file in the same directory.                                        // 83\n\t   */                                                                                                                 // 84\n                                                                                                                       // 85\n\tvar printDocASTReducer = {                                                                                            // 86\n\t  Name: function Name(node) {                                                                                         // 87\n\t    return node.value;                                                                                                // 88\n\t  },                                                                                                                  // 89\n\t  Variable: function Variable(node) {                                                                                 // 90\n\t    return '$' + node.name;                                                                                           // 91\n\t  },                                                                                                                  // 92\n                                                                                                                       // 93\n\t  // Document                                                                                                         // 94\n                                                                                                                       // 95\n\t  Document: function Document(node) {                                                                                 // 96\n\t    return join(node.definitions, '\\n\\n') + '\\n';                                                                     // 97\n\t  },                                                                                                                  // 98\n                                                                                                                       // 99\n\t  OperationDefinition: function OperationDefinition(node) {                                                           // 100\n\t    var op = node.operation;                                                                                          // 101\n\t    var name = node.name;                                                                                             // 102\n\t    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');                                               // 103\n\t    var directives = join(node.directives, ' ');                                                                      // 104\n\t    var selectionSet = node.selectionSet;                                                                             // 105\n\t    // Anonymous queries with no directives or variable definitions can use                                           // 106\n\t    // the query short form.                                                                                          // 107\n\t    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n\t  },                                                                                                                  // 109\n                                                                                                                       // 110\n                                                                                                                       // 111\n\t  VariableDefinition: function VariableDefinition(_ref) {                                                             // 112\n\t    var variable = _ref.variable;                                                                                     // 113\n\t    var type = _ref.type;                                                                                             // 114\n\t    var defaultValue = _ref.defaultValue;                                                                             // 115\n\t    return variable + ': ' + type + wrap(' = ', defaultValue);                                                        // 116\n\t  },                                                                                                                  // 117\n                                                                                                                       // 118\n\t  SelectionSet: function SelectionSet(_ref2) {                                                                        // 119\n\t    var selections = _ref2.selections;                                                                                // 120\n\t    return block(selections);                                                                                         // 121\n\t  },                                                                                                                  // 122\n                                                                                                                       // 123\n\t  Field: function Field(_ref3) {                                                                                      // 124\n\t    var alias = _ref3.alias;                                                                                          // 125\n\t    var name = _ref3.name;                                                                                            // 126\n\t    var args = _ref3.arguments;                                                                                       // 127\n\t    var directives = _ref3.directives;                                                                                // 128\n\t    var selectionSet = _ref3.selectionSet;                                                                            // 129\n\t    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');\n\t  },                                                                                                                  // 131\n                                                                                                                       // 132\n\t  Argument: function Argument(_ref4) {                                                                                // 133\n\t    var name = _ref4.name;                                                                                            // 134\n\t    var value = _ref4.value;                                                                                          // 135\n\t    return name + ': ' + value;                                                                                       // 136\n\t  },                                                                                                                  // 137\n                                                                                                                       // 138\n\t  // Fragments                                                                                                        // 139\n                                                                                                                       // 140\n\t  FragmentSpread: function FragmentSpread(_ref5) {                                                                    // 141\n\t    var name = _ref5.name;                                                                                            // 142\n\t    var directives = _ref5.directives;                                                                                // 143\n\t    return '...' + name + wrap(' ', join(directives, ' '));                                                           // 144\n\t  },                                                                                                                  // 145\n                                                                                                                       // 146\n\t  InlineFragment: function InlineFragment(_ref6) {                                                                    // 147\n\t    var typeCondition = _ref6.typeCondition;                                                                          // 148\n\t    var directives = _ref6.directives;                                                                                // 149\n\t    var selectionSet = _ref6.selectionSet;                                                                            // 150\n\t    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');                       // 151\n\t  },                                                                                                                  // 152\n                                                                                                                       // 153\n\t  FragmentDefinition: function FragmentDefinition(_ref7) {                                                            // 154\n\t    var name = _ref7.name;                                                                                            // 155\n\t    var typeCondition = _ref7.typeCondition;                                                                          // 156\n\t    var directives = _ref7.directives;                                                                                // 157\n\t    var selectionSet = _ref7.selectionSet;                                                                            // 158\n\t    return 'fragment ' + name + ' on ' + typeCondition + ' ' + wrap('', join(directives, ' '), ' ') + selectionSet;   // 159\n\t  },                                                                                                                  // 160\n                                                                                                                       // 161\n\t  // Value                                                                                                            // 162\n                                                                                                                       // 163\n\t  IntValue: function IntValue(_ref8) {                                                                                // 164\n\t    var value = _ref8.value;                                                                                          // 165\n\t    return value;                                                                                                     // 166\n\t  },                                                                                                                  // 167\n\t  FloatValue: function FloatValue(_ref9) {                                                                            // 168\n\t    var value = _ref9.value;                                                                                          // 169\n\t    return value;                                                                                                     // 170\n\t  },                                                                                                                  // 171\n\t  StringValue: function StringValue(_ref10) {                                                                         // 172\n\t    var value = _ref10.value;                                                                                         // 173\n\t    return (0, _stringify2.default)(value);                                                                           // 174\n\t  },                                                                                                                  // 175\n\t  BooleanValue: function BooleanValue(_ref11) {                                                                       // 176\n\t    var value = _ref11.value;                                                                                         // 177\n\t    return (0, _stringify2.default)(value);                                                                           // 178\n\t  },                                                                                                                  // 179\n\t  EnumValue: function EnumValue(_ref12) {                                                                             // 180\n\t    var value = _ref12.value;                                                                                         // 181\n\t    return value;                                                                                                     // 182\n\t  },                                                                                                                  // 183\n\t  ListValue: function ListValue(_ref13) {                                                                             // 184\n\t    var values = _ref13.values;                                                                                       // 185\n\t    return '[' + join(values, ', ') + ']';                                                                            // 186\n\t  },                                                                                                                  // 187\n\t  ObjectValue: function ObjectValue(_ref14) {                                                                         // 188\n\t    var fields = _ref14.fields;                                                                                       // 189\n\t    return '{' + join(fields, ', ') + '}';                                                                            // 190\n\t  },                                                                                                                  // 191\n\t  ObjectField: function ObjectField(_ref15) {                                                                         // 192\n\t    var name = _ref15.name;                                                                                           // 193\n\t    var value = _ref15.value;                                                                                         // 194\n\t    return name + ': ' + value;                                                                                       // 195\n\t  },                                                                                                                  // 196\n                                                                                                                       // 197\n\t  // Directive                                                                                                        // 198\n                                                                                                                       // 199\n\t  Directive: function Directive(_ref16) {                                                                             // 200\n\t    var name = _ref16.name;                                                                                           // 201\n\t    var args = _ref16.arguments;                                                                                      // 202\n\t    return '@' + name + wrap('(', join(args, ', '), ')');                                                             // 203\n\t  },                                                                                                                  // 204\n                                                                                                                       // 205\n\t  // Type                                                                                                             // 206\n                                                                                                                       // 207\n\t  NamedType: function NamedType(_ref17) {                                                                             // 208\n\t    var name = _ref17.name;                                                                                           // 209\n\t    return name;                                                                                                      // 210\n\t  },                                                                                                                  // 211\n\t  ListType: function ListType(_ref18) {                                                                               // 212\n\t    var type = _ref18.type;                                                                                           // 213\n\t    return '[' + type + ']';                                                                                          // 214\n\t  },                                                                                                                  // 215\n\t  NonNullType: function NonNullType(_ref19) {                                                                         // 216\n\t    var type = _ref19.type;                                                                                           // 217\n\t    return type + '!';                                                                                                // 218\n\t  },                                                                                                                  // 219\n                                                                                                                       // 220\n\t  // Type System Definitions                                                                                          // 221\n                                                                                                                       // 222\n\t  SchemaDefinition: function SchemaDefinition(_ref20) {                                                               // 223\n\t    var directives = _ref20.directives;                                                                               // 224\n\t    var operationTypes = _ref20.operationTypes;                                                                       // 225\n\t    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');                                       // 226\n\t  },                                                                                                                  // 227\n                                                                                                                       // 228\n\t  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {                                                 // 229\n\t    var operation = _ref21.operation;                                                                                 // 230\n\t    var type = _ref21.type;                                                                                           // 231\n\t    return operation + ': ' + type;                                                                                   // 232\n\t  },                                                                                                                  // 233\n                                                                                                                       // 234\n\t  ScalarTypeDefinition: function ScalarTypeDefinition(_ref22) {                                                       // 235\n\t    var name = _ref22.name;                                                                                           // 236\n\t    var directives = _ref22.directives;                                                                               // 237\n\t    return join(['scalar', name, join(directives, ' ')], ' ');                                                        // 238\n\t  },                                                                                                                  // 239\n                                                                                                                       // 240\n\t  ObjectTypeDefinition: function ObjectTypeDefinition(_ref23) {                                                       // 241\n\t    var name = _ref23.name;                                                                                           // 242\n\t    var interfaces = _ref23.interfaces;                                                                               // 243\n\t    var directives = _ref23.directives;                                                                               // 244\n\t    var fields = _ref23.fields;                                                                                       // 245\n\t    return join(['type', name, wrap('implements ', join(interfaces, ', ')), join(directives, ' '), block(fields)], ' ');\n\t  },                                                                                                                  // 247\n                                                                                                                       // 248\n\t  FieldDefinition: function FieldDefinition(_ref24) {                                                                 // 249\n\t    var name = _ref24.name;                                                                                           // 250\n\t    var args = _ref24.arguments;                                                                                      // 251\n\t    var type = _ref24.type;                                                                                           // 252\n\t    var directives = _ref24.directives;                                                                               // 253\n\t    return name + wrap('(', join(args, ', '), ')') + ': ' + type + wrap(' ', join(directives, ' '));                  // 254\n\t  },                                                                                                                  // 255\n                                                                                                                       // 256\n\t  InputValueDefinition: function InputValueDefinition(_ref25) {                                                       // 257\n\t    var name = _ref25.name;                                                                                           // 258\n\t    var type = _ref25.type;                                                                                           // 259\n\t    var defaultValue = _ref25.defaultValue;                                                                           // 260\n\t    var directives = _ref25.directives;                                                                               // 261\n\t    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');                          // 262\n\t  },                                                                                                                  // 263\n                                                                                                                       // 264\n\t  InterfaceTypeDefinition: function InterfaceTypeDefinition(_ref26) {                                                 // 265\n\t    var name = _ref26.name;                                                                                           // 266\n\t    var directives = _ref26.directives;                                                                               // 267\n\t    var fields = _ref26.fields;                                                                                       // 268\n\t    return join(['interface', name, join(directives, ' '), block(fields)], ' ');                                      // 269\n\t  },                                                                                                                  // 270\n                                                                                                                       // 271\n\t  UnionTypeDefinition: function UnionTypeDefinition(_ref27) {                                                         // 272\n\t    var name = _ref27.name;                                                                                           // 273\n\t    var directives = _ref27.directives;                                                                               // 274\n\t    var types = _ref27.types;                                                                                         // 275\n\t    return join(['union', name, join(directives, ' '), '= ' + join(types, ' | ')], ' ');                              // 276\n\t  },                                                                                                                  // 277\n                                                                                                                       // 278\n\t  EnumTypeDefinition: function EnumTypeDefinition(_ref28) {                                                           // 279\n\t    var name = _ref28.name;                                                                                           // 280\n\t    var directives = _ref28.directives;                                                                               // 281\n\t    var values = _ref28.values;                                                                                       // 282\n\t    return join(['enum', name, join(directives, ' '), block(values)], ' ');                                           // 283\n\t  },                                                                                                                  // 284\n                                                                                                                       // 285\n\t  EnumValueDefinition: function EnumValueDefinition(_ref29) {                                                         // 286\n\t    var name = _ref29.name;                                                                                           // 287\n\t    var directives = _ref29.directives;                                                                               // 288\n\t    return join([name, join(directives, ' ')], ' ');                                                                  // 289\n\t  },                                                                                                                  // 290\n                                                                                                                       // 291\n\t  InputObjectTypeDefinition: function InputObjectTypeDefinition(_ref30) {                                             // 292\n\t    var name = _ref30.name;                                                                                           // 293\n\t    var directives = _ref30.directives;                                                                               // 294\n\t    var fields = _ref30.fields;                                                                                       // 295\n\t    return join(['input', name, join(directives, ' '), block(fields)], ' ');                                          // 296\n\t  },                                                                                                                  // 297\n                                                                                                                       // 298\n\t  TypeExtensionDefinition: function TypeExtensionDefinition(_ref31) {                                                 // 299\n\t    var definition = _ref31.definition;                                                                               // 300\n\t    return 'extend ' + definition;                                                                                    // 301\n\t  },                                                                                                                  // 302\n                                                                                                                       // 303\n\t  DirectiveDefinition: function DirectiveDefinition(_ref32) {                                                         // 304\n\t    var name = _ref32.name;                                                                                           // 305\n\t    var args = _ref32.arguments;                                                                                      // 306\n\t    var locations = _ref32.locations;                                                                                 // 307\n\t    return 'directive @' + name + wrap('(', join(args, ', '), ')') + ' on ' + join(locations, ' | ');                 // 308\n\t  }                                                                                                                   // 309\n\t};                                                                                                                    // 310\n                                                                                                                       // 311\n\t/**                                                                                                                   // 312\n\t * Given maybeArray, print an empty string if it is null or empty, otherwise                                          // 313\n\t * print all items together separated by separator if provided                                                        // 314\n\t */                                                                                                                   // 315\n\tfunction join(maybeArray, separator) {                                                                                // 316\n\t  return maybeArray ? maybeArray.filter(function (x) {                                                                // 317\n\t    return x;                                                                                                         // 318\n\t  }).join(separator || '') : '';                                                                                      // 319\n\t}                                                                                                                     // 320\n                                                                                                                       // 321\n\t/**                                                                                                                   // 322\n\t * Given array, print each item on its own line, wrapped in an                                                        // 323\n\t * indented \"{ }\" block.                                                                                              // 324\n\t */                                                                                                                   // 325\n\tfunction block(array) {                                                                                               // 326\n\t  return array && array.length !== 0 ? indent('{\\n' + join(array, '\\n')) + '\\n}' : '{}';                              // 327\n\t}                                                                                                                     // 328\n                                                                                                                       // 329\n\t/**                                                                                                                   // 330\n\t * If maybeString is not null or empty, then wrap with start and end, otherwise                                       // 331\n\t * print an empty string.                                                                                             // 332\n\t */                                                                                                                   // 333\n\tfunction wrap(start, maybeString, end) {                                                                              // 334\n\t  return maybeString ? start + maybeString + (end || '') : '';                                                        // 335\n\t}                                                                                                                     // 336\n                                                                                                                       // 337\n\tfunction indent(maybeString) {                                                                                        // 338\n\t  return maybeString && maybeString.replace(/\\n/g, '\\n  ');                                                           // 339\n\t}                                                                                                                     // 340\n                                                                                                                       // 341\n/***/ },                                                                                                               // 342\n/* 2 */                                                                                                                // 343\n/***/ function(module, exports, __webpack_require__) {                                                                 // 344\n                                                                                                                       // 345\n\tmodule.exports = { \"default\": __webpack_require__(3), __esModule: true };                                             // 346\n                                                                                                                       // 347\n/***/ },                                                                                                               // 348\n/* 3 */                                                                                                                // 349\n/***/ function(module, exports, __webpack_require__) {                                                                 // 350\n                                                                                                                       // 351\n\tvar core  = __webpack_require__(4)                                                                                    // 352\n\t  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});                                                   // 353\n\tmodule.exports = function stringify(it){ // eslint-disable-line no-unused-vars                                        // 354\n\t  return $JSON.stringify.apply($JSON, arguments);                                                                     // 355\n\t};                                                                                                                    // 356\n                                                                                                                       // 357\n/***/ },                                                                                                               // 358\n/* 4 */                                                                                                                // 359\n/***/ function(module, exports) {                                                                                      // 360\n                                                                                                                       // 361\n\tvar core = module.exports = {version: '2.4.0'};                                                                       // 362\n\tif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef                                                 // 363\n                                                                                                                       // 364\n/***/ },                                                                                                               // 365\n/* 5 */                                                                                                                // 366\n/***/ function(module, exports, __webpack_require__) {                                                                 // 367\n                                                                                                                       // 368\n\t'use strict';                                                                                                         // 369\n                                                                                                                       // 370\n\tObject.defineProperty(exports, \"__esModule\", {                                                                        // 371\n\t  value: true                                                                                                         // 372\n\t});                                                                                                                   // 373\n\texports.BREAK = exports.QueryDocumentKeys = undefined;                                                                // 374\n                                                                                                                       // 375\n\tvar _stringify = __webpack_require__(2);                                                                              // 376\n                                                                                                                       // 377\n\tvar _stringify2 = _interopRequireDefault(_stringify);                                                                 // 378\n                                                                                                                       // 379\n\tvar _slicedToArray2 = __webpack_require__(6);                                                                         // 380\n                                                                                                                       // 381\n\tvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);                                                        // 382\n                                                                                                                       // 383\n\texports.visit = visit;                                                                                                // 384\n\texports.visitInParallel = visitInParallel;                                                                            // 385\n\texports.visitWithTypeInfo = visitWithTypeInfo;                                                                        // 386\n                                                                                                                       // 387\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                       // 388\n                                                                                                                       // 389\n\t/**                                                                                                                   // 390\n\t *  Copyright (c) 2015, Facebook, Inc.                                                                                // 391\n\t *  All rights reserved.                                                                                              // 392\n\t *                                                                                                                    // 393\n\t *  This source code is licensed under the BSD-style license found in the                                             // 394\n\t *  LICENSE file in the root directory of this source tree. An additional grant                                       // 395\n\t *  of patent rights can be found in the PATENTS file in the same directory.                                          // 396\n\t */                                                                                                                   // 397\n                                                                                                                       // 398\n\tvar QueryDocumentKeys = exports.QueryDocumentKeys = {                                                                 // 399\n\t  Name: [],                                                                                                           // 400\n                                                                                                                       // 401\n\t  Document: ['definitions'],                                                                                          // 402\n\t  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],                                 // 403\n\t  VariableDefinition: ['variable', 'type', 'defaultValue'],                                                           // 404\n\t  Variable: ['name'],                                                                                                 // 405\n\t  SelectionSet: ['selections'],                                                                                       // 406\n\t  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],                                                // 407\n\t  Argument: ['name', 'value'],                                                                                        // 408\n                                                                                                                       // 409\n\t  FragmentSpread: ['name', 'directives'],                                                                             // 410\n\t  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],                                                    // 411\n\t  FragmentDefinition: ['name', 'typeCondition', 'directives', 'selectionSet'],                                        // 412\n                                                                                                                       // 413\n\t  IntValue: [],                                                                                                       // 414\n\t  FloatValue: [],                                                                                                     // 415\n\t  StringValue: [],                                                                                                    // 416\n\t  BooleanValue: [],                                                                                                   // 417\n\t  EnumValue: [],                                                                                                      // 418\n\t  ListValue: ['values'],                                                                                              // 419\n\t  ObjectValue: ['fields'],                                                                                            // 420\n\t  ObjectField: ['name', 'value'],                                                                                     // 421\n                                                                                                                       // 422\n\t  Directive: ['name', 'arguments'],                                                                                   // 423\n                                                                                                                       // 424\n\t  NamedType: ['name'],                                                                                                // 425\n\t  ListType: ['type'],                                                                                                 // 426\n\t  NonNullType: ['type'],                                                                                              // 427\n                                                                                                                       // 428\n\t  SchemaDefinition: ['directives', 'operationTypes'],                                                                 // 429\n\t  OperationTypeDefinition: ['type'],                                                                                  // 430\n                                                                                                                       // 431\n\t  ScalarTypeDefinition: ['name', 'directives'],                                                                       // 432\n\t  ObjectTypeDefinition: ['name', 'interfaces', 'directives', 'fields'],                                               // 433\n\t  FieldDefinition: ['name', 'arguments', 'type', 'directives'],                                                       // 434\n\t  InputValueDefinition: ['name', 'type', 'defaultValue', 'directives'],                                               // 435\n\t  InterfaceTypeDefinition: ['name', 'directives', 'fields'],                                                          // 436\n\t  UnionTypeDefinition: ['name', 'directives', 'types'],                                                               // 437\n\t  EnumTypeDefinition: ['name', 'directives', 'values'],                                                               // 438\n\t  EnumValueDefinition: ['name', 'directives'],                                                                        // 439\n\t  InputObjectTypeDefinition: ['name', 'directives', 'fields'],                                                        // 440\n                                                                                                                       // 441\n\t  TypeExtensionDefinition: ['definition'],                                                                            // 442\n                                                                                                                       // 443\n\t  DirectiveDefinition: ['name', 'arguments', 'locations']                                                             // 444\n\t};                                                                                                                    // 445\n                                                                                                                       // 446\n\tvar BREAK = exports.BREAK = {};                                                                                       // 447\n                                                                                                                       // 448\n\t/**                                                                                                                   // 449\n\t * visit() will walk through an AST using a depth first traversal, calling                                            // 450\n\t * the visitor's enter function at each node in the traversal, and calling the                                        // 451\n\t * leave function after visiting that node and all of its child nodes.                                                // 452\n\t *                                                                                                                    // 453\n\t * By returning different values from the enter and leave functions, the                                              // 454\n\t * behavior of the visitor can be altered, including skipping over a sub-tree of                                      // 455\n\t * the AST (by returning false), editing the AST by returning a value or null                                         // 456\n\t * to remove the value, or to stop the whole traversal by returning BREAK.                                            // 457\n\t *                                                                                                                    // 458\n\t * When using visit() to edit an AST, the original AST will not be modified, and                                      // 459\n\t * a new version of the AST with the changes applied will be returned from the                                        // 460\n\t * visit function.                                                                                                    // 461\n\t *                                                                                                                    // 462\n\t *     const editedAST = visit(ast, {                                                                                 // 463\n\t *       enter(node, key, parent, path, ancestors) {                                                                  // 464\n\t *         // @return                                                                                                 // 465\n\t *         //   undefined: no action                                                                                  // 466\n\t *         //   false: skip visiting this node                                                                        // 467\n\t *         //   visitor.BREAK: stop visiting altogether                                                               // 468\n\t *         //   null: delete this node                                                                                // 469\n\t *         //   any value: replace this node with the returned value                                                  // 470\n\t *       },                                                                                                           // 471\n\t *       leave(node, key, parent, path, ancestors) {                                                                  // 472\n\t *         // @return                                                                                                 // 473\n\t *         //   undefined: no action                                                                                  // 474\n\t *         //   false: no action                                                                                      // 475\n\t *         //   visitor.BREAK: stop visiting altogether                                                               // 476\n\t *         //   null: delete this node                                                                                // 477\n\t *         //   any value: replace this node with the returned value                                                  // 478\n\t *       }                                                                                                            // 479\n\t *     });                                                                                                            // 480\n\t *                                                                                                                    // 481\n\t * Alternatively to providing enter() and leave() functions, a visitor can                                            // 482\n\t * instead provide functions named the same as the kinds of AST nodes, or                                             // 483\n\t * enter/leave visitors at a named key, leading to four permutations of                                               // 484\n\t * visitor API:                                                                                                       // 485\n\t *                                                                                                                    // 486\n\t * 1) Named visitors triggered when entering a node a specific kind.                                                  // 487\n\t *                                                                                                                    // 488\n\t *     visit(ast, {                                                                                                   // 489\n\t *       Kind(node) {                                                                                                 // 490\n\t *         // enter the \"Kind\" node                                                                                   // 491\n\t *       }                                                                                                            // 492\n\t *     })                                                                                                             // 493\n\t *                                                                                                                    // 494\n\t * 2) Named visitors that trigger upon entering and leaving a node of                                                 // 495\n\t *    a specific kind.                                                                                                // 496\n\t *                                                                                                                    // 497\n\t *     visit(ast, {                                                                                                   // 498\n\t *       Kind: {                                                                                                      // 499\n\t *         enter(node) {                                                                                              // 500\n\t *           // enter the \"Kind\" node                                                                                 // 501\n\t *         }                                                                                                          // 502\n\t *         leave(node) {                                                                                              // 503\n\t *           // leave the \"Kind\" node                                                                                 // 504\n\t *         }                                                                                                          // 505\n\t *       }                                                                                                            // 506\n\t *     })                                                                                                             // 507\n\t *                                                                                                                    // 508\n\t * 3) Generic visitors that trigger upon entering and leaving any node.                                               // 509\n\t *                                                                                                                    // 510\n\t *     visit(ast, {                                                                                                   // 511\n\t *       enter(node) {                                                                                                // 512\n\t *         // enter any node                                                                                          // 513\n\t *       },                                                                                                           // 514\n\t *       leave(node) {                                                                                                // 515\n\t *         // leave any node                                                                                          // 516\n\t *       }                                                                                                            // 517\n\t *     })                                                                                                             // 518\n\t *                                                                                                                    // 519\n\t * 4) Parallel visitors for entering and leaving nodes of a specific kind.                                            // 520\n\t *                                                                                                                    // 521\n\t *     visit(ast, {                                                                                                   // 522\n\t *       enter: {                                                                                                     // 523\n\t *         Kind(node) {                                                                                               // 524\n\t *           // enter the \"Kind\" node                                                                                 // 525\n\t *         }                                                                                                          // 526\n\t *       },                                                                                                           // 527\n\t *       leave: {                                                                                                     // 528\n\t *         Kind(node) {                                                                                               // 529\n\t *           // leave the \"Kind\" node                                                                                 // 530\n\t *         }                                                                                                          // 531\n\t *       }                                                                                                            // 532\n\t *     })                                                                                                             // 533\n\t */                                                                                                                   // 534\n\tfunction visit(root, visitor, keyMap) {                                                                               // 535\n\t  var visitorKeys = keyMap || QueryDocumentKeys;                                                                      // 536\n                                                                                                                       // 537\n\t  var stack = void 0;                                                                                                 // 538\n\t  var inArray = Array.isArray(root);                                                                                  // 539\n\t  var keys = [root];                                                                                                  // 540\n\t  var index = -1;                                                                                                     // 541\n\t  var edits = [];                                                                                                     // 542\n\t  var parent = void 0;                                                                                                // 543\n\t  var path = [];                                                                                                      // 544\n\t  var ancestors = [];                                                                                                 // 545\n\t  var newRoot = root;                                                                                                 // 546\n                                                                                                                       // 547\n\t  do {                                                                                                                // 548\n\t    index++;                                                                                                          // 549\n\t    var isLeaving = index === keys.length;                                                                            // 550\n\t    var key = void 0;                                                                                                 // 551\n\t    var node = void 0;                                                                                                // 552\n\t    var isEdited = isLeaving && edits.length !== 0;                                                                   // 553\n\t    if (isLeaving) {                                                                                                  // 554\n\t      key = ancestors.length === 0 ? undefined : path.pop();                                                          // 555\n\t      node = parent;                                                                                                  // 556\n\t      parent = ancestors.pop();                                                                                       // 557\n\t      if (isEdited) {                                                                                                 // 558\n\t        if (inArray) {                                                                                                // 559\n\t          node = node.slice();                                                                                        // 560\n\t        } else {                                                                                                      // 561\n\t          var clone = {};                                                                                             // 562\n\t          for (var k in node) {                                                                                       // 563\n\t            if (node.hasOwnProperty(k)) {                                                                             // 564\n\t              clone[k] = node[k];                                                                                     // 565\n\t            }                                                                                                         // 566\n\t          }                                                                                                           // 567\n\t          node = clone;                                                                                               // 568\n\t        }                                                                                                             // 569\n\t        var editOffset = 0;                                                                                           // 570\n\t        for (var ii = 0; ii < edits.length; ii++) {                                                                   // 571\n\t          var _edits$ii = (0, _slicedToArray3.default)(edits[ii], 1);                                                 // 572\n                                                                                                                       // 573\n\t          var editKey = _edits$ii[0];                                                                                 // 574\n                                                                                                                       // 575\n\t          var _edits$ii2 = (0, _slicedToArray3.default)(edits[ii], 2);                                                // 576\n                                                                                                                       // 577\n\t          var editValue = _edits$ii2[1];                                                                              // 578\n                                                                                                                       // 579\n\t          if (inArray) {                                                                                              // 580\n\t            editKey -= editOffset;                                                                                    // 581\n\t          }                                                                                                           // 582\n\t          if (inArray && editValue === null) {                                                                        // 583\n\t            node.splice(editKey, 1);                                                                                  // 584\n\t            editOffset++;                                                                                             // 585\n\t          } else {                                                                                                    // 586\n\t            node[editKey] = editValue;                                                                                // 587\n\t          }                                                                                                           // 588\n\t        }                                                                                                             // 589\n\t      }                                                                                                               // 590\n\t      index = stack.index;                                                                                            // 591\n\t      keys = stack.keys;                                                                                              // 592\n\t      edits = stack.edits;                                                                                            // 593\n\t      inArray = stack.inArray;                                                                                        // 594\n\t      stack = stack.prev;                                                                                             // 595\n\t    } else {                                                                                                          // 596\n\t      key = parent ? inArray ? index : keys[index] : undefined;                                                       // 597\n\t      node = parent ? parent[key] : newRoot;                                                                          // 598\n\t      if (node === null || node === undefined) {                                                                      // 599\n\t        continue;                                                                                                     // 600\n\t      }                                                                                                               // 601\n\t      if (parent) {                                                                                                   // 602\n\t        path.push(key);                                                                                               // 603\n\t      }                                                                                                               // 604\n\t    }                                                                                                                 // 605\n                                                                                                                       // 606\n\t    var result = void 0;                                                                                              // 607\n\t    if (!Array.isArray(node)) {                                                                                       // 608\n\t      if (!isNode(node)) {                                                                                            // 609\n\t        throw new Error('Invalid AST Node: ' + (0, _stringify2.default)(node));                                       // 610\n\t      }                                                                                                               // 611\n\t      var visitFn = getVisitFn(visitor, node.kind, isLeaving);                                                        // 612\n\t      if (visitFn) {                                                                                                  // 613\n\t        result = visitFn.call(visitor, node, key, parent, path, ancestors);                                           // 614\n                                                                                                                       // 615\n\t        if (result === BREAK) {                                                                                       // 616\n\t          break;                                                                                                      // 617\n\t        }                                                                                                             // 618\n                                                                                                                       // 619\n\t        if (result === false) {                                                                                       // 620\n\t          if (!isLeaving) {                                                                                           // 621\n\t            path.pop();                                                                                               // 622\n\t            continue;                                                                                                 // 623\n\t          }                                                                                                           // 624\n\t        } else if (result !== undefined) {                                                                            // 625\n\t          edits.push([key, result]);                                                                                  // 626\n\t          if (!isLeaving) {                                                                                           // 627\n\t            if (isNode(result)) {                                                                                     // 628\n\t              node = result;                                                                                          // 629\n\t            } else {                                                                                                  // 630\n\t              path.pop();                                                                                             // 631\n\t              continue;                                                                                               // 632\n\t            }                                                                                                         // 633\n\t          }                                                                                                           // 634\n\t        }                                                                                                             // 635\n\t      }                                                                                                               // 636\n\t    }                                                                                                                 // 637\n                                                                                                                       // 638\n\t    if (result === undefined && isEdited) {                                                                           // 639\n\t      edits.push([key, node]);                                                                                        // 640\n\t    }                                                                                                                 // 641\n                                                                                                                       // 642\n\t    if (!isLeaving) {                                                                                                 // 643\n\t      stack = { inArray: inArray, index: index, keys: keys, edits: edits, prev: stack };                              // 644\n\t      inArray = Array.isArray(node);                                                                                  // 645\n\t      keys = inArray ? node : visitorKeys[node.kind] || [];                                                           // 646\n\t      index = -1;                                                                                                     // 647\n\t      edits = [];                                                                                                     // 648\n\t      if (parent) {                                                                                                   // 649\n\t        ancestors.push(parent);                                                                                       // 650\n\t      }                                                                                                               // 651\n\t      parent = node;                                                                                                  // 652\n\t    }                                                                                                                 // 653\n\t  } while (stack !== undefined);                                                                                      // 654\n                                                                                                                       // 655\n\t  if (edits.length !== 0) {                                                                                           // 656\n\t    newRoot = edits[edits.length - 1][1];                                                                             // 657\n\t  }                                                                                                                   // 658\n                                                                                                                       // 659\n\t  return newRoot;                                                                                                     // 660\n\t}                                                                                                                     // 661\n                                                                                                                       // 662\n\tfunction isNode(maybeNode) {                                                                                          // 663\n\t  return maybeNode && typeof maybeNode.kind === 'string';                                                             // 664\n\t}                                                                                                                     // 665\n                                                                                                                       // 666\n\t/**                                                                                                                   // 667\n\t * Creates a new visitor instance which delegates to many visitors to run in                                          // 668\n\t * parallel. Each visitor will be visited for each node before moving on.                                             // 669\n\t *                                                                                                                    // 670\n\t * If a prior visitor edits a node, no following visitors will see that node.                                         // 671\n\t */                                                                                                                   // 672\n\tfunction visitInParallel(visitors) {                                                                                  // 673\n\t  var skipping = new Array(visitors.length);                                                                          // 674\n                                                                                                                       // 675\n\t  return {                                                                                                            // 676\n\t    enter: function enter(node) {                                                                                     // 677\n\t      for (var i = 0; i < visitors.length; i++) {                                                                     // 678\n\t        if (!skipping[i]) {                                                                                           // 679\n\t          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */false);                                          // 680\n\t          if (fn) {                                                                                                   // 681\n\t            var result = fn.apply(visitors[i], arguments);                                                            // 682\n\t            if (result === false) {                                                                                   // 683\n\t              skipping[i] = node;                                                                                     // 684\n\t            } else if (result === BREAK) {                                                                            // 685\n\t              skipping[i] = BREAK;                                                                                    // 686\n\t            } else if (result !== undefined) {                                                                        // 687\n\t              return result;                                                                                          // 688\n\t            }                                                                                                         // 689\n\t          }                                                                                                           // 690\n\t        }                                                                                                             // 691\n\t      }                                                                                                               // 692\n\t    },                                                                                                                // 693\n\t    leave: function leave(node) {                                                                                     // 694\n\t      for (var i = 0; i < visitors.length; i++) {                                                                     // 695\n\t        if (!skipping[i]) {                                                                                           // 696\n\t          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */true);                                           // 697\n\t          if (fn) {                                                                                                   // 698\n\t            var result = fn.apply(visitors[i], arguments);                                                            // 699\n\t            if (result === BREAK) {                                                                                   // 700\n\t              skipping[i] = BREAK;                                                                                    // 701\n\t            } else if (result !== undefined && result !== false) {                                                    // 702\n\t              return result;                                                                                          // 703\n\t            }                                                                                                         // 704\n\t          }                                                                                                           // 705\n\t        } else if (skipping[i] === node) {                                                                            // 706\n\t          skipping[i] = null;                                                                                         // 707\n\t        }                                                                                                             // 708\n\t      }                                                                                                               // 709\n\t    }                                                                                                                 // 710\n\t  };                                                                                                                  // 711\n\t}                                                                                                                     // 712\n                                                                                                                       // 713\n\t/**                                                                                                                   // 714\n\t * Creates a new visitor instance which maintains a provided TypeInfo instance                                        // 715\n\t * along with visiting visitor.                                                                                       // 716\n\t */                                                                                                                   // 717\n\tfunction visitWithTypeInfo(typeInfo, visitor) {                                                                       // 718\n\t  return {                                                                                                            // 719\n\t    enter: function enter(node) {                                                                                     // 720\n\t      typeInfo.enter(node);                                                                                           // 721\n\t      var fn = getVisitFn(visitor, node.kind, /* isLeaving */false);                                                  // 722\n\t      if (fn) {                                                                                                       // 723\n\t        var result = fn.apply(visitor, arguments);                                                                    // 724\n\t        if (result !== undefined) {                                                                                   // 725\n\t          typeInfo.leave(node);                                                                                       // 726\n\t          if (isNode(result)) {                                                                                       // 727\n\t            typeInfo.enter(result);                                                                                   // 728\n\t          }                                                                                                           // 729\n\t        }                                                                                                             // 730\n\t        return result;                                                                                                // 731\n\t      }                                                                                                               // 732\n\t    },                                                                                                                // 733\n\t    leave: function leave(node) {                                                                                     // 734\n\t      var fn = getVisitFn(visitor, node.kind, /* isLeaving */true);                                                   // 735\n\t      var result = void 0;                                                                                            // 736\n\t      if (fn) {                                                                                                       // 737\n\t        result = fn.apply(visitor, arguments);                                                                        // 738\n\t      }                                                                                                               // 739\n\t      typeInfo.leave(node);                                                                                           // 740\n\t      return result;                                                                                                  // 741\n\t    }                                                                                                                 // 742\n\t  };                                                                                                                  // 743\n\t}                                                                                                                     // 744\n                                                                                                                       // 745\n\t/**                                                                                                                   // 746\n\t * Given a visitor instance, if it is leaving or not, and a node kind, return                                         // 747\n\t * the function the visitor runtime should call.                                                                      // 748\n\t */                                                                                                                   // 749\n\tfunction getVisitFn(visitor, kind, isLeaving) {                                                                       // 750\n\t  var kindVisitor = visitor[kind];                                                                                    // 751\n\t  if (kindVisitor) {                                                                                                  // 752\n\t    if (!isLeaving && typeof kindVisitor === 'function') {                                                            // 753\n\t      // { Kind() {} }                                                                                                // 754\n\t      return kindVisitor;                                                                                             // 755\n\t    }                                                                                                                 // 756\n\t    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;                                      // 757\n\t    if (typeof kindSpecificVisitor === 'function') {                                                                  // 758\n\t      // { Kind: { enter() {}, leave() {} } }                                                                         // 759\n\t      return kindSpecificVisitor;                                                                                     // 760\n\t    }                                                                                                                 // 761\n\t  } else {                                                                                                            // 762\n\t    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;                                                  // 763\n\t    if (specificVisitor) {                                                                                            // 764\n\t      if (typeof specificVisitor === 'function') {                                                                    // 765\n\t        // { enter() {}, leave() {} }                                                                                 // 766\n\t        return specificVisitor;                                                                                       // 767\n\t      }                                                                                                               // 768\n\t      var specificKindVisitor = specificVisitor[kind];                                                                // 769\n\t      if (typeof specificKindVisitor === 'function') {                                                                // 770\n\t        // { enter: { Kind() {} }, leave: { Kind() {} } }                                                             // 771\n\t        return specificKindVisitor;                                                                                   // 772\n\t      }                                                                                                               // 773\n\t    }                                                                                                                 // 774\n\t  }                                                                                                                   // 775\n\t}                                                                                                                     // 776\n                                                                                                                       // 777\n/***/ },                                                                                                               // 778\n/* 6 */                                                                                                                // 779\n/***/ function(module, exports, __webpack_require__) {                                                                 // 780\n                                                                                                                       // 781\n\t\"use strict\";                                                                                                         // 782\n                                                                                                                       // 783\n\texports.__esModule = true;                                                                                            // 784\n                                                                                                                       // 785\n\tvar _isIterable2 = __webpack_require__(7);                                                                            // 786\n                                                                                                                       // 787\n\tvar _isIterable3 = _interopRequireDefault(_isIterable2);                                                              // 788\n                                                                                                                       // 789\n\tvar _getIterator2 = __webpack_require__(58);                                                                          // 790\n                                                                                                                       // 791\n\tvar _getIterator3 = _interopRequireDefault(_getIterator2);                                                            // 792\n                                                                                                                       // 793\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                       // 794\n                                                                                                                       // 795\n\texports.default = function () {                                                                                       // 796\n\t  function sliceIterator(arr, i) {                                                                                    // 797\n\t    var _arr = [];                                                                                                    // 798\n\t    var _n = true;                                                                                                    // 799\n\t    var _d = false;                                                                                                   // 800\n\t    var _e = undefined;                                                                                               // 801\n                                                                                                                       // 802\n\t    try {                                                                                                             // 803\n\t      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {                  // 804\n\t        _arr.push(_s.value);                                                                                          // 805\n                                                                                                                       // 806\n\t        if (i && _arr.length === i) break;                                                                            // 807\n\t      }                                                                                                               // 808\n\t    } catch (err) {                                                                                                   // 809\n\t      _d = true;                                                                                                      // 810\n\t      _e = err;                                                                                                       // 811\n\t    } finally {                                                                                                       // 812\n\t      try {                                                                                                           // 813\n\t        if (!_n && _i[\"return\"]) _i[\"return\"]();                                                                      // 814\n\t      } finally {                                                                                                     // 815\n\t        if (_d) throw _e;                                                                                             // 816\n\t      }                                                                                                               // 817\n\t    }                                                                                                                 // 818\n                                                                                                                       // 819\n\t    return _arr;                                                                                                      // 820\n\t  }                                                                                                                   // 821\n                                                                                                                       // 822\n\t  return function (arr, i) {                                                                                          // 823\n\t    if (Array.isArray(arr)) {                                                                                         // 824\n\t      return arr;                                                                                                     // 825\n\t    } else if ((0, _isIterable3.default)(Object(arr))) {                                                              // 826\n\t      return sliceIterator(arr, i);                                                                                   // 827\n\t    } else {                                                                                                          // 828\n\t      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");                                    // 829\n\t    }                                                                                                                 // 830\n\t  };                                                                                                                  // 831\n\t}();                                                                                                                  // 832\n                                                                                                                       // 833\n/***/ },                                                                                                               // 834\n/* 7 */                                                                                                                // 835\n/***/ function(module, exports, __webpack_require__) {                                                                 // 836\n                                                                                                                       // 837\n\tmodule.exports = { \"default\": __webpack_require__(8), __esModule: true };                                             // 838\n                                                                                                                       // 839\n/***/ },                                                                                                               // 840\n/* 8 */                                                                                                                // 841\n/***/ function(module, exports, __webpack_require__) {                                                                 // 842\n                                                                                                                       // 843\n\t__webpack_require__(9);                                                                                               // 844\n\t__webpack_require__(54);                                                                                              // 845\n\tmodule.exports = __webpack_require__(56);                                                                             // 846\n                                                                                                                       // 847\n/***/ },                                                                                                               // 848\n/* 9 */                                                                                                                // 849\n/***/ function(module, exports, __webpack_require__) {                                                                 // 850\n                                                                                                                       // 851\n\t__webpack_require__(10);                                                                                              // 852\n\tvar global        = __webpack_require__(21)                                                                           // 853\n\t  , hide          = __webpack_require__(24)                                                                           // 854\n\t  , Iterators     = __webpack_require__(13)                                                                           // 855\n\t  , TO_STRING_TAG = __webpack_require__(51)('toStringTag');                                                           // 856\n                                                                                                                       // 857\n\tfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n\t  var NAME       = collections[i]                                                                                     // 859\n\t    , Collection = global[NAME]                                                                                       // 860\n\t    , proto      = Collection && Collection.prototype;                                                                // 861\n\t  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);                                                 // 862\n\t  Iterators[NAME] = Iterators.Array;                                                                                  // 863\n\t}                                                                                                                     // 864\n                                                                                                                       // 865\n/***/ },                                                                                                               // 866\n/* 10 */                                                                                                               // 867\n/***/ function(module, exports, __webpack_require__) {                                                                 // 868\n                                                                                                                       // 869\n\t'use strict';                                                                                                         // 870\n\tvar addToUnscopables = __webpack_require__(11)                                                                        // 871\n\t  , step             = __webpack_require__(12)                                                                        // 872\n\t  , Iterators        = __webpack_require__(13)                                                                        // 873\n\t  , toIObject        = __webpack_require__(14);                                                                       // 874\n                                                                                                                       // 875\n\t// 22.1.3.4 Array.prototype.entries()                                                                                 // 876\n\t// 22.1.3.13 Array.prototype.keys()                                                                                   // 877\n\t// 22.1.3.29 Array.prototype.values()                                                                                 // 878\n\t// 22.1.3.30 Array.prototype[@@iterator]()                                                                            // 879\n\tmodule.exports = __webpack_require__(18)(Array, 'Array', function(iterated, kind){                                    // 880\n\t  this._t = toIObject(iterated); // target                                                                            // 881\n\t  this._i = 0;                   // next index                                                                        // 882\n\t  this._k = kind;                // kind                                                                              // 883\n\t// 22.1.5.2.1 %ArrayIteratorPrototype%.next()                                                                         // 884\n\t}, function(){                                                                                                        // 885\n\t  var O     = this._t                                                                                                 // 886\n\t    , kind  = this._k                                                                                                 // 887\n\t    , index = this._i++;                                                                                              // 888\n\t  if(!O || index >= O.length){                                                                                        // 889\n\t    this._t = undefined;                                                                                              // 890\n\t    return step(1);                                                                                                   // 891\n\t  }                                                                                                                   // 892\n\t  if(kind == 'keys'  )return step(0, index);                                                                          // 893\n\t  if(kind == 'values')return step(0, O[index]);                                                                       // 894\n\t  return step(0, [index, O[index]]);                                                                                  // 895\n\t}, 'values');                                                                                                         // 896\n                                                                                                                       // 897\n\t// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)                                                // 898\n\tIterators.Arguments = Iterators.Array;                                                                                // 899\n                                                                                                                       // 900\n\taddToUnscopables('keys');                                                                                             // 901\n\taddToUnscopables('values');                                                                                           // 902\n\taddToUnscopables('entries');                                                                                          // 903\n                                                                                                                       // 904\n/***/ },                                                                                                               // 905\n/* 11 */                                                                                                               // 906\n/***/ function(module, exports) {                                                                                      // 907\n                                                                                                                       // 908\n\tmodule.exports = function(){ /* empty */ };                                                                           // 909\n                                                                                                                       // 910\n/***/ },                                                                                                               // 911\n/* 12 */                                                                                                               // 912\n/***/ function(module, exports) {                                                                                      // 913\n                                                                                                                       // 914\n\tmodule.exports = function(done, value){                                                                               // 915\n\t  return {value: value, done: !!done};                                                                                // 916\n\t};                                                                                                                    // 917\n                                                                                                                       // 918\n/***/ },                                                                                                               // 919\n/* 13 */                                                                                                               // 920\n/***/ function(module, exports) {                                                                                      // 921\n                                                                                                                       // 922\n\tmodule.exports = {};                                                                                                  // 923\n                                                                                                                       // 924\n/***/ },                                                                                                               // 925\n/* 14 */                                                                                                               // 926\n/***/ function(module, exports, __webpack_require__) {                                                                 // 927\n                                                                                                                       // 928\n\t// to indexed object, toObject with fallback for non-array-like ES3 strings                                           // 929\n\tvar IObject = __webpack_require__(15)                                                                                 // 930\n\t  , defined = __webpack_require__(17);                                                                                // 931\n\tmodule.exports = function(it){                                                                                        // 932\n\t  return IObject(defined(it));                                                                                        // 933\n\t};                                                                                                                    // 934\n                                                                                                                       // 935\n/***/ },                                                                                                               // 936\n/* 15 */                                                                                                               // 937\n/***/ function(module, exports, __webpack_require__) {                                                                 // 938\n                                                                                                                       // 939\n\t// fallback for non-array-like ES3 and non-enumerable old V8 strings                                                  // 940\n\tvar cof = __webpack_require__(16);                                                                                    // 941\n\tmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){                                         // 942\n\t  return cof(it) == 'String' ? it.split('') : Object(it);                                                             // 943\n\t};                                                                                                                    // 944\n                                                                                                                       // 945\n/***/ },                                                                                                               // 946\n/* 16 */                                                                                                               // 947\n/***/ function(module, exports) {                                                                                      // 948\n                                                                                                                       // 949\n\tvar toString = {}.toString;                                                                                           // 950\n                                                                                                                       // 951\n\tmodule.exports = function(it){                                                                                        // 952\n\t  return toString.call(it).slice(8, -1);                                                                              // 953\n\t};                                                                                                                    // 954\n                                                                                                                       // 955\n/***/ },                                                                                                               // 956\n/* 17 */                                                                                                               // 957\n/***/ function(module, exports) {                                                                                      // 958\n                                                                                                                       // 959\n\t// 7.2.1 RequireObjectCoercible(argument)                                                                             // 960\n\tmodule.exports = function(it){                                                                                        // 961\n\t  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);                                                  // 962\n\t  return it;                                                                                                          // 963\n\t};                                                                                                                    // 964\n                                                                                                                       // 965\n/***/ },                                                                                                               // 966\n/* 18 */                                                                                                               // 967\n/***/ function(module, exports, __webpack_require__) {                                                                 // 968\n                                                                                                                       // 969\n\t'use strict';                                                                                                         // 970\n\tvar LIBRARY        = __webpack_require__(19)                                                                          // 971\n\t  , $export        = __webpack_require__(20)                                                                          // 972\n\t  , redefine       = __webpack_require__(34)                                                                          // 973\n\t  , hide           = __webpack_require__(24)                                                                          // 974\n\t  , has            = __webpack_require__(35)                                                                          // 975\n\t  , Iterators      = __webpack_require__(13)                                                                          // 976\n\t  , $iterCreate    = __webpack_require__(36)                                                                          // 977\n\t  , setToStringTag = __webpack_require__(50)                                                                          // 978\n\t  , getPrototypeOf = __webpack_require__(52)                                                                          // 979\n\t  , ITERATOR       = __webpack_require__(51)('iterator')                                                              // 980\n\t  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`                       // 981\n\t  , FF_ITERATOR    = '@@iterator'                                                                                     // 982\n\t  , KEYS           = 'keys'                                                                                           // 983\n\t  , VALUES         = 'values';                                                                                        // 984\n                                                                                                                       // 985\n\tvar returnThis = function(){ return this; };                                                                          // 986\n                                                                                                                       // 987\n\tmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){                                    // 988\n\t  $iterCreate(Constructor, NAME, next);                                                                               // 989\n\t  var getMethod = function(kind){                                                                                     // 990\n\t    if(!BUGGY && kind in proto)return proto[kind];                                                                    // 991\n\t    switch(kind){                                                                                                     // 992\n\t      case KEYS: return function keys(){ return new Constructor(this, kind); };                                       // 993\n\t      case VALUES: return function values(){ return new Constructor(this, kind); };                                   // 994\n\t    } return function entries(){ return new Constructor(this, kind); };                                               // 995\n\t  };                                                                                                                  // 996\n\t  var TAG        = NAME + ' Iterator'                                                                                 // 997\n\t    , DEF_VALUES = DEFAULT == VALUES                                                                                  // 998\n\t    , VALUES_BUG = false                                                                                              // 999\n\t    , proto      = Base.prototype                                                                                     // 1000\n\t    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]                                 // 1001\n\t    , $default   = $native || getMethod(DEFAULT)                                                                      // 1002\n\t    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined                                // 1003\n\t    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native                                               // 1004\n\t    , methods, key, IteratorPrototype;                                                                                // 1005\n\t  // Fix native                                                                                                       // 1006\n\t  if($anyNative){                                                                                                     // 1007\n\t    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));                                                    // 1008\n\t    if(IteratorPrototype !== Object.prototype){                                                                       // 1009\n\t      // Set @@toStringTag to native iterators                                                                        // 1010\n\t      setToStringTag(IteratorPrototype, TAG, true);                                                                   // 1011\n\t      // fix for some old engines                                                                                     // 1012\n\t      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);                 // 1013\n\t    }                                                                                                                 // 1014\n\t  }                                                                                                                   // 1015\n\t  // fix Array#{values, @@iterator}.name in V8 / FF                                                                   // 1016\n\t  if(DEF_VALUES && $native && $native.name !== VALUES){                                                               // 1017\n\t    VALUES_BUG = true;                                                                                                // 1018\n\t    $default = function values(){ return $native.call(this); };                                                       // 1019\n\t  }                                                                                                                   // 1020\n\t  // Define iterator                                                                                                  // 1021\n\t  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){                                              // 1022\n\t    hide(proto, ITERATOR, $default);                                                                                  // 1023\n\t  }                                                                                                                   // 1024\n\t  // Plug for library                                                                                                 // 1025\n\t  Iterators[NAME] = $default;                                                                                         // 1026\n\t  Iterators[TAG]  = returnThis;                                                                                       // 1027\n\t  if(DEFAULT){                                                                                                        // 1028\n\t    methods = {                                                                                                       // 1029\n\t      values:  DEF_VALUES ? $default : getMethod(VALUES),                                                             // 1030\n\t      keys:    IS_SET     ? $default : getMethod(KEYS),                                                               // 1031\n\t      entries: $entries                                                                                               // 1032\n\t    };                                                                                                                // 1033\n\t    if(FORCED)for(key in methods){                                                                                    // 1034\n\t      if(!(key in proto))redefine(proto, key, methods[key]);                                                          // 1035\n\t    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);                                     // 1036\n\t  }                                                                                                                   // 1037\n\t  return methods;                                                                                                     // 1038\n\t};                                                                                                                    // 1039\n                                                                                                                       // 1040\n/***/ },                                                                                                               // 1041\n/* 19 */                                                                                                               // 1042\n/***/ function(module, exports) {                                                                                      // 1043\n                                                                                                                       // 1044\n\tmodule.exports = true;                                                                                                // 1045\n                                                                                                                       // 1046\n/***/ },                                                                                                               // 1047\n/* 20 */                                                                                                               // 1048\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1049\n                                                                                                                       // 1050\n\tvar global    = __webpack_require__(21)                                                                               // 1051\n\t  , core      = __webpack_require__(4)                                                                                // 1052\n\t  , ctx       = __webpack_require__(22)                                                                               // 1053\n\t  , hide      = __webpack_require__(24)                                                                               // 1054\n\t  , PROTOTYPE = 'prototype';                                                                                          // 1055\n                                                                                                                       // 1056\n\tvar $export = function(type, name, source){                                                                           // 1057\n\t  var IS_FORCED = type & $export.F                                                                                    // 1058\n\t    , IS_GLOBAL = type & $export.G                                                                                    // 1059\n\t    , IS_STATIC = type & $export.S                                                                                    // 1060\n\t    , IS_PROTO  = type & $export.P                                                                                    // 1061\n\t    , IS_BIND   = type & $export.B                                                                                    // 1062\n\t    , IS_WRAP   = type & $export.W                                                                                    // 1063\n\t    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})                                                  // 1064\n\t    , expProto  = exports[PROTOTYPE]                                                                                  // 1065\n\t    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]                     // 1066\n\t    , key, own, out;                                                                                                  // 1067\n\t  if(IS_GLOBAL)source = name;                                                                                         // 1068\n\t  for(key in source){                                                                                                 // 1069\n\t    // contains in native                                                                                             // 1070\n\t    own = !IS_FORCED && target && target[key] !== undefined;                                                          // 1071\n\t    if(own && key in exports)continue;                                                                                // 1072\n\t    // export native or passed                                                                                        // 1073\n\t    out = own ? target[key] : source[key];                                                                            // 1074\n\t    // prevent global pollution for namespaces                                                                        // 1075\n\t    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]                                        // 1076\n\t    // bind timers to global for call from export context                                                             // 1077\n\t    : IS_BIND && own ? ctx(out, global)                                                                               // 1078\n\t    // wrap global constructors for prevent change them in library                                                    // 1079\n\t    : IS_WRAP && target[key] == out ? (function(C){                                                                   // 1080\n\t      var F = function(a, b, c){                                                                                      // 1081\n\t        if(this instanceof C){                                                                                        // 1082\n\t          switch(arguments.length){                                                                                   // 1083\n\t            case 0: return new C;                                                                                     // 1084\n\t            case 1: return new C(a);                                                                                  // 1085\n\t            case 2: return new C(a, b);                                                                               // 1086\n\t          } return new C(a, b, c);                                                                                    // 1087\n\t        } return C.apply(this, arguments);                                                                            // 1088\n\t      };                                                                                                              // 1089\n\t      F[PROTOTYPE] = C[PROTOTYPE];                                                                                    // 1090\n\t      return F;                                                                                                       // 1091\n\t    // make static versions for prototype methods                                                                     // 1092\n\t    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;                                   // 1093\n\t    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%                                                      // 1094\n\t    if(IS_PROTO){                                                                                                     // 1095\n\t      (exports.virtual || (exports.virtual = {}))[key] = out;                                                         // 1096\n\t      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%                                                  // 1097\n\t      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);                                     // 1098\n\t    }                                                                                                                 // 1099\n\t  }                                                                                                                   // 1100\n\t};                                                                                                                    // 1101\n\t// type bitmap                                                                                                        // 1102\n\t$export.F = 1;   // forced                                                                                            // 1103\n\t$export.G = 2;   // global                                                                                            // 1104\n\t$export.S = 4;   // static                                                                                            // 1105\n\t$export.P = 8;   // proto                                                                                             // 1106\n\t$export.B = 16;  // bind                                                                                              // 1107\n\t$export.W = 32;  // wrap                                                                                              // 1108\n\t$export.U = 64;  // safe                                                                                              // 1109\n\t$export.R = 128; // real proto method for `library`                                                                   // 1110\n\tmodule.exports = $export;                                                                                             // 1111\n                                                                                                                       // 1112\n/***/ },                                                                                                               // 1113\n/* 21 */                                                                                                               // 1114\n/***/ function(module, exports) {                                                                                      // 1115\n                                                                                                                       // 1116\n\t// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028                                               // 1117\n\tvar global = module.exports = typeof window != 'undefined' && window.Math == Math                                     // 1118\n\t  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();                      // 1119\n\tif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef                                               // 1120\n                                                                                                                       // 1121\n/***/ },                                                                                                               // 1122\n/* 22 */                                                                                                               // 1123\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1124\n                                                                                                                       // 1125\n\t// optional / simple context binding                                                                                  // 1126\n\tvar aFunction = __webpack_require__(23);                                                                              // 1127\n\tmodule.exports = function(fn, that, length){                                                                          // 1128\n\t  aFunction(fn);                                                                                                      // 1129\n\t  if(that === undefined)return fn;                                                                                    // 1130\n\t  switch(length){                                                                                                     // 1131\n\t    case 1: return function(a){                                                                                       // 1132\n\t      return fn.call(that, a);                                                                                        // 1133\n\t    };                                                                                                                // 1134\n\t    case 2: return function(a, b){                                                                                    // 1135\n\t      return fn.call(that, a, b);                                                                                     // 1136\n\t    };                                                                                                                // 1137\n\t    case 3: return function(a, b, c){                                                                                 // 1138\n\t      return fn.call(that, a, b, c);                                                                                  // 1139\n\t    };                                                                                                                // 1140\n\t  }                                                                                                                   // 1141\n\t  return function(/* ...args */){                                                                                     // 1142\n\t    return fn.apply(that, arguments);                                                                                 // 1143\n\t  };                                                                                                                  // 1144\n\t};                                                                                                                    // 1145\n                                                                                                                       // 1146\n/***/ },                                                                                                               // 1147\n/* 23 */                                                                                                               // 1148\n/***/ function(module, exports) {                                                                                      // 1149\n                                                                                                                       // 1150\n\tmodule.exports = function(it){                                                                                        // 1151\n\t  if(typeof it != 'function')throw TypeError(it + ' is not a function!');                                             // 1152\n\t  return it;                                                                                                          // 1153\n\t};                                                                                                                    // 1154\n                                                                                                                       // 1155\n/***/ },                                                                                                               // 1156\n/* 24 */                                                                                                               // 1157\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1158\n                                                                                                                       // 1159\n\tvar dP         = __webpack_require__(25)                                                                              // 1160\n\t  , createDesc = __webpack_require__(33);                                                                             // 1161\n\tmodule.exports = __webpack_require__(29) ? function(object, key, value){                                              // 1162\n\t  return dP.f(object, key, createDesc(1, value));                                                                     // 1163\n\t} : function(object, key, value){                                                                                     // 1164\n\t  object[key] = value;                                                                                                // 1165\n\t  return object;                                                                                                      // 1166\n\t};                                                                                                                    // 1167\n                                                                                                                       // 1168\n/***/ },                                                                                                               // 1169\n/* 25 */                                                                                                               // 1170\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1171\n                                                                                                                       // 1172\n\tvar anObject       = __webpack_require__(26)                                                                          // 1173\n\t  , IE8_DOM_DEFINE = __webpack_require__(28)                                                                          // 1174\n\t  , toPrimitive    = __webpack_require__(32)                                                                          // 1175\n\t  , dP             = Object.defineProperty;                                                                           // 1176\n                                                                                                                       // 1177\n\texports.f = __webpack_require__(29) ? Object.defineProperty : function defineProperty(O, P, Attributes){              // 1178\n\t  anObject(O);                                                                                                        // 1179\n\t  P = toPrimitive(P, true);                                                                                           // 1180\n\t  anObject(Attributes);                                                                                               // 1181\n\t  if(IE8_DOM_DEFINE)try {                                                                                             // 1182\n\t    return dP(O, P, Attributes);                                                                                      // 1183\n\t  } catch(e){ /* empty */ }                                                                                           // 1184\n\t  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');                          // 1185\n\t  if('value' in Attributes)O[P] = Attributes.value;                                                                   // 1186\n\t  return O;                                                                                                           // 1187\n\t};                                                                                                                    // 1188\n                                                                                                                       // 1189\n/***/ },                                                                                                               // 1190\n/* 26 */                                                                                                               // 1191\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1192\n                                                                                                                       // 1193\n\tvar isObject = __webpack_require__(27);                                                                               // 1194\n\tmodule.exports = function(it){                                                                                        // 1195\n\t  if(!isObject(it))throw TypeError(it + ' is not an object!');                                                        // 1196\n\t  return it;                                                                                                          // 1197\n\t};                                                                                                                    // 1198\n                                                                                                                       // 1199\n/***/ },                                                                                                               // 1200\n/* 27 */                                                                                                               // 1201\n/***/ function(module, exports) {                                                                                      // 1202\n                                                                                                                       // 1203\n\tmodule.exports = function(it){                                                                                        // 1204\n\t  return typeof it === 'object' ? it !== null : typeof it === 'function';                                             // 1205\n\t};                                                                                                                    // 1206\n                                                                                                                       // 1207\n/***/ },                                                                                                               // 1208\n/* 28 */                                                                                                               // 1209\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1210\n                                                                                                                       // 1211\n\tmodule.exports = !__webpack_require__(29) && !__webpack_require__(30)(function(){                                     // 1212\n\t  return Object.defineProperty(__webpack_require__(31)('div'), 'a', {get: function(){ return 7; }}).a != 7;           // 1213\n\t});                                                                                                                   // 1214\n                                                                                                                       // 1215\n/***/ },                                                                                                               // 1216\n/* 29 */                                                                                                               // 1217\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1218\n                                                                                                                       // 1219\n\t// Thank's IE8 for his funny defineProperty                                                                           // 1220\n\tmodule.exports = !__webpack_require__(30)(function(){                                                                 // 1221\n\t  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;                                       // 1222\n\t});                                                                                                                   // 1223\n                                                                                                                       // 1224\n/***/ },                                                                                                               // 1225\n/* 30 */                                                                                                               // 1226\n/***/ function(module, exports) {                                                                                      // 1227\n                                                                                                                       // 1228\n\tmodule.exports = function(exec){                                                                                      // 1229\n\t  try {                                                                                                               // 1230\n\t    return !!exec();                                                                                                  // 1231\n\t  } catch(e){                                                                                                         // 1232\n\t    return true;                                                                                                      // 1233\n\t  }                                                                                                                   // 1234\n\t};                                                                                                                    // 1235\n                                                                                                                       // 1236\n/***/ },                                                                                                               // 1237\n/* 31 */                                                                                                               // 1238\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1239\n                                                                                                                       // 1240\n\tvar isObject = __webpack_require__(27)                                                                                // 1241\n\t  , document = __webpack_require__(21).document                                                                       // 1242\n\t  // in old IE typeof document.createElement is 'object'                                                              // 1243\n\t  , is = isObject(document) && isObject(document.createElement);                                                      // 1244\n\tmodule.exports = function(it){                                                                                        // 1245\n\t  return is ? document.createElement(it) : {};                                                                        // 1246\n\t};                                                                                                                    // 1247\n                                                                                                                       // 1248\n/***/ },                                                                                                               // 1249\n/* 32 */                                                                                                               // 1250\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1251\n                                                                                                                       // 1252\n\t// 7.1.1 ToPrimitive(input [, PreferredType])                                                                         // 1253\n\tvar isObject = __webpack_require__(27);                                                                               // 1254\n\t// instead of the ES6 spec version, we didn't implement @@toPrimitive case                                            // 1255\n\t// and the second argument - flag - preferred type is a string                                                        // 1256\n\tmodule.exports = function(it, S){                                                                                     // 1257\n\t  if(!isObject(it))return it;                                                                                         // 1258\n\t  var fn, val;                                                                                                        // 1259\n\t  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;                         // 1260\n\t  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;                               // 1261\n\t  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;                        // 1262\n\t  throw TypeError(\"Can't convert object to primitive value\");                                                         // 1263\n\t};                                                                                                                    // 1264\n                                                                                                                       // 1265\n/***/ },                                                                                                               // 1266\n/* 33 */                                                                                                               // 1267\n/***/ function(module, exports) {                                                                                      // 1268\n                                                                                                                       // 1269\n\tmodule.exports = function(bitmap, value){                                                                             // 1270\n\t  return {                                                                                                            // 1271\n\t    enumerable  : !(bitmap & 1),                                                                                      // 1272\n\t    configurable: !(bitmap & 2),                                                                                      // 1273\n\t    writable    : !(bitmap & 4),                                                                                      // 1274\n\t    value       : value                                                                                               // 1275\n\t  };                                                                                                                  // 1276\n\t};                                                                                                                    // 1277\n                                                                                                                       // 1278\n/***/ },                                                                                                               // 1279\n/* 34 */                                                                                                               // 1280\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1281\n                                                                                                                       // 1282\n\tmodule.exports = __webpack_require__(24);                                                                             // 1283\n                                                                                                                       // 1284\n/***/ },                                                                                                               // 1285\n/* 35 */                                                                                                               // 1286\n/***/ function(module, exports) {                                                                                      // 1287\n                                                                                                                       // 1288\n\tvar hasOwnProperty = {}.hasOwnProperty;                                                                               // 1289\n\tmodule.exports = function(it, key){                                                                                   // 1290\n\t  return hasOwnProperty.call(it, key);                                                                                // 1291\n\t};                                                                                                                    // 1292\n                                                                                                                       // 1293\n/***/ },                                                                                                               // 1294\n/* 36 */                                                                                                               // 1295\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1296\n                                                                                                                       // 1297\n\t'use strict';                                                                                                         // 1298\n\tvar create         = __webpack_require__(37)                                                                          // 1299\n\t  , descriptor     = __webpack_require__(33)                                                                          // 1300\n\t  , setToStringTag = __webpack_require__(50)                                                                          // 1301\n\t  , IteratorPrototype = {};                                                                                           // 1302\n                                                                                                                       // 1303\n\t// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()                                                                       // 1304\n\t__webpack_require__(24)(IteratorPrototype, __webpack_require__(51)('iterator'), function(){ return this; });          // 1305\n                                                                                                                       // 1306\n\tmodule.exports = function(Constructor, NAME, next){                                                                   // 1307\n\t  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});                                     // 1308\n\t  setToStringTag(Constructor, NAME + ' Iterator');                                                                    // 1309\n\t};                                                                                                                    // 1310\n                                                                                                                       // 1311\n/***/ },                                                                                                               // 1312\n/* 37 */                                                                                                               // 1313\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1314\n                                                                                                                       // 1315\n\t// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                // 1316\n\tvar anObject    = __webpack_require__(26)                                                                             // 1317\n\t  , dPs         = __webpack_require__(38)                                                                             // 1318\n\t  , enumBugKeys = __webpack_require__(48)                                                                             // 1319\n\t  , IE_PROTO    = __webpack_require__(45)('IE_PROTO')                                                                 // 1320\n\t  , Empty       = function(){ /* empty */ }                                                                           // 1321\n\t  , PROTOTYPE   = 'prototype';                                                                                        // 1322\n                                                                                                                       // 1323\n\t// Create object with fake `null` prototype: use iframe Object with cleared prototype                                 // 1324\n\tvar createDict = function(){                                                                                          // 1325\n\t  // Thrash, waste and sodomy: IE GC bug                                                                              // 1326\n\t  var iframe = __webpack_require__(31)('iframe')                                                                      // 1327\n\t    , i      = enumBugKeys.length                                                                                     // 1328\n\t    , gt     = '>'                                                                                                    // 1329\n\t    , iframeDocument;                                                                                                 // 1330\n\t  iframe.style.display = 'none';                                                                                      // 1331\n\t  __webpack_require__(49).appendChild(iframe);                                                                        // 1332\n\t  iframe.src = 'javascript:'; // eslint-disable-line no-script-url                                                    // 1333\n\t  // createDict = iframe.contentWindow.Object;                                                                        // 1334\n\t  // html.removeChild(iframe);                                                                                        // 1335\n\t  iframeDocument = iframe.contentWindow.document;                                                                     // 1336\n\t  iframeDocument.open();                                                                                              // 1337\n\t  iframeDocument.write('<script>document.F=Object</script' + gt);                                                     // 1338\n\t  iframeDocument.close();                                                                                             // 1339\n\t  createDict = iframeDocument.F;                                                                                      // 1340\n\t  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];                                                             // 1341\n\t  return createDict();                                                                                                // 1342\n\t};                                                                                                                    // 1343\n                                                                                                                       // 1344\n\tmodule.exports = Object.create || function create(O, Properties){                                                     // 1345\n\t  var result;                                                                                                         // 1346\n\t  if(O !== null){                                                                                                     // 1347\n\t    Empty[PROTOTYPE] = anObject(O);                                                                                   // 1348\n\t    result = new Empty;                                                                                               // 1349\n\t    Empty[PROTOTYPE] = null;                                                                                          // 1350\n\t    // add \"__proto__\" for Object.getPrototypeOf polyfill                                                             // 1351\n\t    result[IE_PROTO] = O;                                                                                             // 1352\n\t  } else result = createDict();                                                                                       // 1353\n\t  return Properties === undefined ? result : dPs(result, Properties);                                                 // 1354\n\t};                                                                                                                    // 1355\n                                                                                                                       // 1356\n/***/ },                                                                                                               // 1357\n/* 38 */                                                                                                               // 1358\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1359\n                                                                                                                       // 1360\n\tvar dP       = __webpack_require__(25)                                                                                // 1361\n\t  , anObject = __webpack_require__(26)                                                                                // 1362\n\t  , getKeys  = __webpack_require__(39);                                                                               // 1363\n                                                                                                                       // 1364\n\tmodule.exports = __webpack_require__(29) ? Object.defineProperties : function defineProperties(O, Properties){        // 1365\n\t  anObject(O);                                                                                                        // 1366\n\t  var keys   = getKeys(Properties)                                                                                    // 1367\n\t    , length = keys.length                                                                                            // 1368\n\t    , i = 0                                                                                                           // 1369\n\t    , P;                                                                                                              // 1370\n\t  while(length > i)dP.f(O, P = keys[i++], Properties[P]);                                                             // 1371\n\t  return O;                                                                                                           // 1372\n\t};                                                                                                                    // 1373\n                                                                                                                       // 1374\n/***/ },                                                                                                               // 1375\n/* 39 */                                                                                                               // 1376\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1377\n                                                                                                                       // 1378\n\t// 19.1.2.14 / 15.2.3.14 Object.keys(O)                                                                               // 1379\n\tvar $keys       = __webpack_require__(40)                                                                             // 1380\n\t  , enumBugKeys = __webpack_require__(48);                                                                            // 1381\n                                                                                                                       // 1382\n\tmodule.exports = Object.keys || function keys(O){                                                                     // 1383\n\t  return $keys(O, enumBugKeys);                                                                                       // 1384\n\t};                                                                                                                    // 1385\n                                                                                                                       // 1386\n/***/ },                                                                                                               // 1387\n/* 40 */                                                                                                               // 1388\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1389\n                                                                                                                       // 1390\n\tvar has          = __webpack_require__(35)                                                                            // 1391\n\t  , toIObject    = __webpack_require__(14)                                                                            // 1392\n\t  , arrayIndexOf = __webpack_require__(41)(false)                                                                     // 1393\n\t  , IE_PROTO     = __webpack_require__(45)('IE_PROTO');                                                               // 1394\n                                                                                                                       // 1395\n\tmodule.exports = function(object, names){                                                                             // 1396\n\t  var O      = toIObject(object)                                                                                      // 1397\n\t    , i      = 0                                                                                                      // 1398\n\t    , result = []                                                                                                     // 1399\n\t    , key;                                                                                                            // 1400\n\t  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);                                                    // 1401\n\t  // Don't enum bug & hidden keys                                                                                     // 1402\n\t  while(names.length > i)if(has(O, key = names[i++])){                                                                // 1403\n\t    ~arrayIndexOf(result, key) || result.push(key);                                                                   // 1404\n\t  }                                                                                                                   // 1405\n\t  return result;                                                                                                      // 1406\n\t};                                                                                                                    // 1407\n                                                                                                                       // 1408\n/***/ },                                                                                                               // 1409\n/* 41 */                                                                                                               // 1410\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1411\n                                                                                                                       // 1412\n\t// false -> Array#indexOf                                                                                             // 1413\n\t// true  -> Array#includes                                                                                            // 1414\n\tvar toIObject = __webpack_require__(14)                                                                               // 1415\n\t  , toLength  = __webpack_require__(42)                                                                               // 1416\n\t  , toIndex   = __webpack_require__(44);                                                                              // 1417\n\tmodule.exports = function(IS_INCLUDES){                                                                               // 1418\n\t  return function($this, el, fromIndex){                                                                              // 1419\n\t    var O      = toIObject($this)                                                                                     // 1420\n\t      , length = toLength(O.length)                                                                                   // 1421\n\t      , index  = toIndex(fromIndex, length)                                                                           // 1422\n\t      , value;                                                                                                        // 1423\n\t    // Array#includes uses SameValueZero equality algorithm                                                           // 1424\n\t    if(IS_INCLUDES && el != el)while(length > index){                                                                 // 1425\n\t      value = O[index++];                                                                                             // 1426\n\t      if(value != value)return true;                                                                                  // 1427\n\t    // Array#toIndex ignores holes, Array#includes - not                                                              // 1428\n\t    } else for(;length > index; index++)if(IS_INCLUDES || index in O){                                                // 1429\n\t      if(O[index] === el)return IS_INCLUDES || index || 0;                                                            // 1430\n\t    } return !IS_INCLUDES && -1;                                                                                      // 1431\n\t  };                                                                                                                  // 1432\n\t};                                                                                                                    // 1433\n                                                                                                                       // 1434\n/***/ },                                                                                                               // 1435\n/* 42 */                                                                                                               // 1436\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1437\n                                                                                                                       // 1438\n\t// 7.1.15 ToLength                                                                                                    // 1439\n\tvar toInteger = __webpack_require__(43)                                                                               // 1440\n\t  , min       = Math.min;                                                                                             // 1441\n\tmodule.exports = function(it){                                                                                        // 1442\n\t  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991                     // 1443\n\t};                                                                                                                    // 1444\n                                                                                                                       // 1445\n/***/ },                                                                                                               // 1446\n/* 43 */                                                                                                               // 1447\n/***/ function(module, exports) {                                                                                      // 1448\n                                                                                                                       // 1449\n\t// 7.1.4 ToInteger                                                                                                    // 1450\n\tvar ceil  = Math.ceil                                                                                                 // 1451\n\t  , floor = Math.floor;                                                                                               // 1452\n\tmodule.exports = function(it){                                                                                        // 1453\n\t  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);                                                           // 1454\n\t};                                                                                                                    // 1455\n                                                                                                                       // 1456\n/***/ },                                                                                                               // 1457\n/* 44 */                                                                                                               // 1458\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1459\n                                                                                                                       // 1460\n\tvar toInteger = __webpack_require__(43)                                                                               // 1461\n\t  , max       = Math.max                                                                                              // 1462\n\t  , min       = Math.min;                                                                                             // 1463\n\tmodule.exports = function(index, length){                                                                             // 1464\n\t  index = toInteger(index);                                                                                           // 1465\n\t  return index < 0 ? max(index + length, 0) : min(index, length);                                                     // 1466\n\t};                                                                                                                    // 1467\n                                                                                                                       // 1468\n/***/ },                                                                                                               // 1469\n/* 45 */                                                                                                               // 1470\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1471\n                                                                                                                       // 1472\n\tvar shared = __webpack_require__(46)('keys')                                                                          // 1473\n\t  , uid    = __webpack_require__(47);                                                                                 // 1474\n\tmodule.exports = function(key){                                                                                       // 1475\n\t  return shared[key] || (shared[key] = uid(key));                                                                     // 1476\n\t};                                                                                                                    // 1477\n                                                                                                                       // 1478\n/***/ },                                                                                                               // 1479\n/* 46 */                                                                                                               // 1480\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1481\n                                                                                                                       // 1482\n\tvar global = __webpack_require__(21)                                                                                  // 1483\n\t  , SHARED = '__core-js_shared__'                                                                                     // 1484\n\t  , store  = global[SHARED] || (global[SHARED] = {});                                                                 // 1485\n\tmodule.exports = function(key){                                                                                       // 1486\n\t  return store[key] || (store[key] = {});                                                                             // 1487\n\t};                                                                                                                    // 1488\n                                                                                                                       // 1489\n/***/ },                                                                                                               // 1490\n/* 47 */                                                                                                               // 1491\n/***/ function(module, exports) {                                                                                      // 1492\n                                                                                                                       // 1493\n\tvar id = 0                                                                                                            // 1494\n\t  , px = Math.random();                                                                                               // 1495\n\tmodule.exports = function(key){                                                                                       // 1496\n\t  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));                              // 1497\n\t};                                                                                                                    // 1498\n                                                                                                                       // 1499\n/***/ },                                                                                                               // 1500\n/* 48 */                                                                                                               // 1501\n/***/ function(module, exports) {                                                                                      // 1502\n                                                                                                                       // 1503\n\t// IE 8- don't enum bug keys                                                                                          // 1504\n\tmodule.exports = (                                                                                                    // 1505\n\t  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'                     // 1506\n\t).split(',');                                                                                                         // 1507\n                                                                                                                       // 1508\n/***/ },                                                                                                               // 1509\n/* 49 */                                                                                                               // 1510\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1511\n                                                                                                                       // 1512\n\tmodule.exports = __webpack_require__(21).document && document.documentElement;                                        // 1513\n                                                                                                                       // 1514\n/***/ },                                                                                                               // 1515\n/* 50 */                                                                                                               // 1516\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1517\n                                                                                                                       // 1518\n\tvar def = __webpack_require__(25).f                                                                                   // 1519\n\t  , has = __webpack_require__(35)                                                                                     // 1520\n\t  , TAG = __webpack_require__(51)('toStringTag');                                                                     // 1521\n                                                                                                                       // 1522\n\tmodule.exports = function(it, tag, stat){                                                                             // 1523\n\t  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});                   // 1524\n\t};                                                                                                                    // 1525\n                                                                                                                       // 1526\n/***/ },                                                                                                               // 1527\n/* 51 */                                                                                                               // 1528\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1529\n                                                                                                                       // 1530\n\tvar store      = __webpack_require__(46)('wks')                                                                       // 1531\n\t  , uid        = __webpack_require__(47)                                                                              // 1532\n\t  , Symbol     = __webpack_require__(21).Symbol                                                                       // 1533\n\t  , USE_SYMBOL = typeof Symbol == 'function';                                                                         // 1534\n                                                                                                                       // 1535\n\tvar $exports = module.exports = function(name){                                                                       // 1536\n\t  return store[name] || (store[name] =                                                                                // 1537\n\t    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));                                     // 1538\n\t};                                                                                                                    // 1539\n                                                                                                                       // 1540\n\t$exports.store = store;                                                                                               // 1541\n                                                                                                                       // 1542\n/***/ },                                                                                                               // 1543\n/* 52 */                                                                                                               // 1544\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1545\n                                                                                                                       // 1546\n\t// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)                                                                       // 1547\n\tvar has         = __webpack_require__(35)                                                                             // 1548\n\t  , toObject    = __webpack_require__(53)                                                                             // 1549\n\t  , IE_PROTO    = __webpack_require__(45)('IE_PROTO')                                                                 // 1550\n\t  , ObjectProto = Object.prototype;                                                                                   // 1551\n                                                                                                                       // 1552\n\tmodule.exports = Object.getPrototypeOf || function(O){                                                                // 1553\n\t  O = toObject(O);                                                                                                    // 1554\n\t  if(has(O, IE_PROTO))return O[IE_PROTO];                                                                             // 1555\n\t  if(typeof O.constructor == 'function' && O instanceof O.constructor){                                               // 1556\n\t    return O.constructor.prototype;                                                                                   // 1557\n\t  } return O instanceof Object ? ObjectProto : null;                                                                  // 1558\n\t};                                                                                                                    // 1559\n                                                                                                                       // 1560\n/***/ },                                                                                                               // 1561\n/* 53 */                                                                                                               // 1562\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1563\n                                                                                                                       // 1564\n\t// 7.1.13 ToObject(argument)                                                                                          // 1565\n\tvar defined = __webpack_require__(17);                                                                                // 1566\n\tmodule.exports = function(it){                                                                                        // 1567\n\t  return Object(defined(it));                                                                                         // 1568\n\t};                                                                                                                    // 1569\n                                                                                                                       // 1570\n/***/ },                                                                                                               // 1571\n/* 54 */                                                                                                               // 1572\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1573\n                                                                                                                       // 1574\n\t'use strict';                                                                                                         // 1575\n\tvar $at  = __webpack_require__(55)(true);                                                                             // 1576\n                                                                                                                       // 1577\n\t// 21.1.3.27 String.prototype[@@iterator]()                                                                           // 1578\n\t__webpack_require__(18)(String, 'String', function(iterated){                                                         // 1579\n\t  this._t = String(iterated); // target                                                                               // 1580\n\t  this._i = 0;                // next index                                                                           // 1581\n\t// 21.1.5.2.1 %StringIteratorPrototype%.next()                                                                        // 1582\n\t}, function(){                                                                                                        // 1583\n\t  var O     = this._t                                                                                                 // 1584\n\t    , index = this._i                                                                                                 // 1585\n\t    , point;                                                                                                          // 1586\n\t  if(index >= O.length)return {value: undefined, done: true};                                                         // 1587\n\t  point = $at(O, index);                                                                                              // 1588\n\t  this._i += point.length;                                                                                            // 1589\n\t  return {value: point, done: false};                                                                                 // 1590\n\t});                                                                                                                   // 1591\n                                                                                                                       // 1592\n/***/ },                                                                                                               // 1593\n/* 55 */                                                                                                               // 1594\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1595\n                                                                                                                       // 1596\n\tvar toInteger = __webpack_require__(43)                                                                               // 1597\n\t  , defined   = __webpack_require__(17);                                                                              // 1598\n\t// true  -> String#at                                                                                                 // 1599\n\t// false -> String#codePointAt                                                                                        // 1600\n\tmodule.exports = function(TO_STRING){                                                                                 // 1601\n\t  return function(that, pos){                                                                                         // 1602\n\t    var s = String(defined(that))                                                                                     // 1603\n\t      , i = toInteger(pos)                                                                                            // 1604\n\t      , l = s.length                                                                                                  // 1605\n\t      , a, b;                                                                                                         // 1606\n\t    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;                                                             // 1607\n\t    a = s.charCodeAt(i);                                                                                              // 1608\n\t    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff                // 1609\n\t      ? TO_STRING ? s.charAt(i) : a                                                                                   // 1610\n\t      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;                                  // 1611\n\t  };                                                                                                                  // 1612\n\t};                                                                                                                    // 1613\n                                                                                                                       // 1614\n/***/ },                                                                                                               // 1615\n/* 56 */                                                                                                               // 1616\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1617\n                                                                                                                       // 1618\n\tvar classof   = __webpack_require__(57)                                                                               // 1619\n\t  , ITERATOR  = __webpack_require__(51)('iterator')                                                                   // 1620\n\t  , Iterators = __webpack_require__(13);                                                                              // 1621\n\tmodule.exports = __webpack_require__(4).isIterable = function(it){                                                    // 1622\n\t  var O = Object(it);                                                                                                 // 1623\n\t  return O[ITERATOR] !== undefined                                                                                    // 1624\n\t    || '@@iterator' in O                                                                                              // 1625\n\t    || Iterators.hasOwnProperty(classof(O));                                                                          // 1626\n\t};                                                                                                                    // 1627\n                                                                                                                       // 1628\n/***/ },                                                                                                               // 1629\n/* 57 */                                                                                                               // 1630\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1631\n                                                                                                                       // 1632\n\t// getting tag from 19.1.3.6 Object.prototype.toString()                                                              // 1633\n\tvar cof = __webpack_require__(16)                                                                                     // 1634\n\t  , TAG = __webpack_require__(51)('toStringTag')                                                                      // 1635\n\t  // ES3 wrong here                                                                                                   // 1636\n\t  , ARG = cof(function(){ return arguments; }()) == 'Arguments';                                                      // 1637\n                                                                                                                       // 1638\n\t// fallback for IE11 Script Access Denied error                                                                       // 1639\n\tvar tryGet = function(it, key){                                                                                       // 1640\n\t  try {                                                                                                               // 1641\n\t    return it[key];                                                                                                   // 1642\n\t  } catch(e){ /* empty */ }                                                                                           // 1643\n\t};                                                                                                                    // 1644\n                                                                                                                       // 1645\n\tmodule.exports = function(it){                                                                                        // 1646\n\t  var O, T, B;                                                                                                        // 1647\n\t  return it === undefined ? 'Undefined' : it === null ? 'Null'                                                        // 1648\n\t    // @@toStringTag case                                                                                             // 1649\n\t    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T                                                        // 1650\n\t    // builtinTag case                                                                                                // 1651\n\t    : ARG ? cof(O)                                                                                                    // 1652\n\t    // ES3 arguments fallback                                                                                         // 1653\n\t    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;                                    // 1654\n\t};                                                                                                                    // 1655\n                                                                                                                       // 1656\n/***/ },                                                                                                               // 1657\n/* 58 */                                                                                                               // 1658\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1659\n                                                                                                                       // 1660\n\tmodule.exports = { \"default\": __webpack_require__(59), __esModule: true };                                            // 1661\n                                                                                                                       // 1662\n/***/ },                                                                                                               // 1663\n/* 59 */                                                                                                               // 1664\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1665\n                                                                                                                       // 1666\n\t__webpack_require__(9);                                                                                               // 1667\n\t__webpack_require__(54);                                                                                              // 1668\n\tmodule.exports = __webpack_require__(60);                                                                             // 1669\n                                                                                                                       // 1670\n/***/ },                                                                                                               // 1671\n/* 60 */                                                                                                               // 1672\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1673\n                                                                                                                       // 1674\n\tvar anObject = __webpack_require__(26)                                                                                // 1675\n\t  , get      = __webpack_require__(61);                                                                               // 1676\n\tmodule.exports = __webpack_require__(4).getIterator = function(it){                                                   // 1677\n\t  var iterFn = get(it);                                                                                               // 1678\n\t  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');                                           // 1679\n\t  return anObject(iterFn.call(it));                                                                                   // 1680\n\t};                                                                                                                    // 1681\n                                                                                                                       // 1682\n/***/ },                                                                                                               // 1683\n/* 61 */                                                                                                               // 1684\n/***/ function(module, exports, __webpack_require__) {                                                                 // 1685\n                                                                                                                       // 1686\n\tvar classof   = __webpack_require__(57)                                                                               // 1687\n\t  , ITERATOR  = __webpack_require__(51)('iterator')                                                                   // 1688\n\t  , Iterators = __webpack_require__(13);                                                                              // 1689\n\tmodule.exports = __webpack_require__(4).getIteratorMethod = function(it){                                             // 1690\n\t  if(it != undefined)return it[ITERATOR]                                                                              // 1691\n\t    || it['@@iterator']                                                                                               // 1692\n\t    || Iterators[classof(it)];                                                                                        // 1693\n\t};                                                                                                                    // 1694\n                                                                                                                       // 1695\n/***/ }                                                                                                                // 1696\n/******/ ]);                                                                                                           // 1697\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/modules/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.modules = exports, {\n  meteorInstall: meteorInstall,\n  Buffer: Buffer,\n  process: process\n});\n\n})();\n","servePath":"/packages/modules.js","sourceMap":{"version":3,"sources":["/packages/modules/client.js","/packages/modules/buffer.js","/packages/modules/css.js","/packages/modules/install-packages.js","/packages/modules/process.js","/packages/modules/stubs.js","node_modules/meteor/modules/node_modules/reify/lib/runtime.js","node_modules/meteor/modules/node_modules/reify/lib/entry.js","node_modules/meteor/modules/node_modules/reify/lib/utils.js","node_modules/meteor-node-stubs/package.json","node_modules/meteor-node-stubs/index.js","node_modules/meteor-node-stubs/map.json","node_modules/meteor-node-stubs/deps/buffer.js","node_modules/meteor-node-stubs/deps/process.js","node_modules/meteor-node-stubs/deps/domain.js","node_modules/meteor-node-stubs/node_modules/buffer/package.json","node_modules/meteor-node-stubs/node_modules/buffer/index.js","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/base64-js/package.json","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/base64-js/lib/b64.js","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/ieee754/package.json","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/ieee754/index.js","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/isarray/package.json","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/isarray/index.js","node_modules/meteor-node-stubs/node_modules/process/browser.js","node_modules/meteor-node-stubs/node_modules/domain-browser/package.json","node_modules/meteor-node-stubs/node_modules/domain-browser/index.js","node_modules/meteor-node-stubs/node_modules/events/package.json","node_modules/meteor-node-stubs/node_modules/events/events.js","node_modules/apollo-client/package.json","node_modules/apollo-client/index.js","node_modules/apollo-client/networkInterface.js","node_modules/apollo-client/node_modules/lodash.isstring/package.json","node_modules/apollo-client/node_modules/lodash.isstring/index.js","node_modules/apollo-client/node_modules/lodash.assign/package.json","node_modules/apollo-client/node_modules/lodash.assign/index.js","node_modules/apollo-client/node_modules/lodash.mapvalues/package.json","node_modules/apollo-client/node_modules/lodash.mapvalues/index.js","node_modules/apollo-client/node_modules/whatwg-fetch/package.json","node_modules/apollo-client/node_modules/whatwg-fetch/fetch.js","node_modules/apollo-client/node_modules/lodash.countby/package.json","node_modules/apollo-client/node_modules/lodash.countby/index.js","node_modules/apollo-client/node_modules/lodash.identity/package.json","node_modules/apollo-client/node_modules/lodash.identity/index.js","node_modules/apollo-client/node_modules/lodash.clonedeep/package.json","node_modules/apollo-client/node_modules/lodash.clonedeep/index.js","node_modules/apollo-client/node_modules/lodash.isarray/package.json","node_modules/apollo-client/node_modules/lodash.isarray/index.js","node_modules/apollo-client/node_modules/lodash.isnull/package.json","node_modules/apollo-client/node_modules/lodash.isnull/index.js","node_modules/apollo-client/node_modules/lodash.isundefined/package.json","node_modules/apollo-client/node_modules/lodash.isundefined/index.js","node_modules/apollo-client/node_modules/redux/package.json","node_modules/apollo-client/node_modules/redux/lib/index.js","node_modules/apollo-client/node_modules/redux/lib/createStore.js","node_modules/apollo-client/node_modules/redux/lib/combineReducers.js","node_modules/apollo-client/node_modules/redux/lib/utils/warning.js","node_modules/apollo-client/node_modules/redux/lib/bindActionCreators.js","node_modules/apollo-client/node_modules/redux/lib/applyMiddleware.js","node_modules/apollo-client/node_modules/redux/lib/compose.js","node_modules/apollo-client/node_modules/redux/node_modules/lodash/isPlainObject.js","node_modules/apollo-client/node_modules/redux/node_modules/lodash/_getPrototype.js","node_modules/apollo-client/node_modules/redux/node_modules/lodash/_overArg.js","node_modules/apollo-client/node_modules/redux/node_modules/lodash/isObjectLike.js","node_modules/apollo-client/node_modules/symbol-observable/package.json","node_modules/apollo-client/node_modules/symbol-observable/index.js","node_modules/apollo-client/node_modules/symbol-observable/lib/index.js","node_modules/apollo-client/node_modules/symbol-observable/lib/ponyfill.js","node_modules/apollo-client/node_modules/lodash.isobject/package.json","node_modules/apollo-client/node_modules/lodash.isobject/index.js","node_modules/apollo-client/node_modules/lodash.has/package.json","node_modules/apollo-client/node_modules/lodash.has/index.js","node_modules/apollo-client/node_modules/lodash.merge/package.json","node_modules/apollo-client/node_modules/lodash.merge/index.js","node_modules/apollo-client/node_modules/lodash.flatten/package.json","node_modules/apollo-client/node_modules/lodash.flatten/index.js","node_modules/apollo-client/node_modules/lodash.isnumber/package.json","node_modules/apollo-client/node_modules/lodash.isnumber/index.js","node_modules/apollo-client/node_modules/lodash.isequal/package.json","node_modules/apollo-client/node_modules/lodash.isequal/index.js","node_modules/apollo-client/node_modules/lodash.pick/package.json","node_modules/apollo-client/node_modules/lodash.pick/index.js","node_modules/apollo-client/node_modules/lodash.forown/package.json","node_modules/apollo-client/node_modules/lodash.forown/index.js","node_modules/apollo-client/batching/queryMerging.js","node_modules/apollo-client/queries/getFromAST.js","node_modules/apollo-client/queries/directives.js","node_modules/apollo-client/queries/store.js","node_modules/apollo-client/queries/queryTransform.js","node_modules/apollo-client/data/storeUtils.js","node_modules/apollo-client/data/store.js","node_modules/apollo-client/data/writeToStore.js","node_modules/apollo-client/data/diffAgainstStore.js","node_modules/apollo-client/data/mutationResults.js","node_modules/apollo-client/data/replaceQueryResults.js","node_modules/apollo-client/data/scopeQuery.js","node_modules/apollo-client/data/readFromStore.js","node_modules/apollo-client/batchedNetworkInterface.js","node_modules/apollo-client/store.js","node_modules/apollo-client/actions.js","node_modules/apollo-client/errors.js","node_modules/apollo-client/mutations/store.js","node_modules/apollo-client/optimistic-data/store.js","node_modules/apollo-client/QueryManager.js","node_modules/apollo-client/queryPrinting.js","node_modules/apollo-client/batching.js","node_modules/apollo-client/scheduler.js","node_modules/apollo-client/ObservableQuery.js","node_modules/apollo-client/util/Observable.js","node_modules/apollo-client/util/errorHandling.js","node_modules/graphql-tag/printer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;ACPA;AACA;AACA;AACA,2H;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrxCA;AACA,2H;;;;;;;;;;;ACDA;AACA,2H;;;;;;;;;;;ACDA;AACA,2H;;;;;;;;;;;ACDA;AACA;AACA;AACA,2H;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8H;;;;;;;;;;;ACh7CA;AACA;AACA;AACA,2H;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AC7GA;AACA;AACA;AACA,2H;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACpFA;AACA;AACA;AACA,2H;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC3FA;AACA;AACA;AACA,2H;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrEA;AACA;AACA;AACA,2H;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AC1SA;AACA;AACA;AACA,2H;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACnxnxujbzEA;AACA;AACA,2H;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC5BA;AACA;AACA,2H;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8H;;;;;;;;;;;ACptDA;AACA;AACA,2H;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnCA;AACA;AACA,2H;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC9BA;AACA;AACA,2H;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC9BA;AACA;AACA;AACA,2H;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACpQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AC7IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC7BA;AACA;AACA,2H;;;;;;;;;;;ACFA;AACA,2H;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtBA;AACA;AACA,2H;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrjkpjnvftfvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AChrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AC1QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACvlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACpnoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AChxfile":"/packages/modules.js","sourcesContent":["require(\"./install-packages.js\");\nrequire(\"./stubs.js\");\nrequire(\"./buffer.js\");\nrequire(\"./process.js\");\nrequire(\"reify/lib/runtime\").enable(module.constructor);\n\nexports.addStyles = require(\"./css\").addStyles;\n","try {\n  Buffer = global.Buffer || require(\"buffer\").Buffer;\n} catch (noBuffer) {}\n","var doc = document;\nvar head = doc.getElementsByTagName(\"head\").item(0);\n\nexports.addStyles = function (css) {\n  var style = doc.createElement(\"style\");\n\n  style.setAttribute(\"type\", \"text/css\");\n\n  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx\n  var internetExplorerSheetObject =\n    style.sheet || // Edge/IE11.\n    style.styleSheet; // Older IEs.\n\n  if (internetExplorerSheetObject) {\n    internetExplorerSheetObject.cssText = css;\n  } else {\n    style.appendChild(doc.createTextNode(css));\n  }\n\n  return head.appendChild(style);\n};\n","function install(name, mainModule) {\n  var meteorDir = {};\n\n  // Given a package name <name>, install a stub module in the\n  // /node_modules/meteor directory called <name>.js, so that\n  // require.resolve(\"meteor/<name>\") will always return\n  // /node_modules/meteor/<name>.js instead of something like\n  // /node_modules/meteor/<name>/index.js, in the rare but possible event\n  // that the package contains a file called index.js (#6590).\n\n  if (mainModule) {\n    meteorDir[name + \".js\"] = [mainModule, function (require, e, module) {\n      module.exports = require(mainModule);\n    }];\n  } else {\n    // back compat with old Meteor packages\n    meteorDir[name + \".js\"] = function (r, e, module) {\n      module.exports = Package[name];\n    };\n  }\n\n  meteorInstall({\n    node_modules: {\n      meteor: meteorDir\n    }\n  });\n}\n\n// This file will be modified during computeJsOutputFilesMap to include\n// install(<name>) calls for every Meteor package.\n\ninstall(\"underscore\");\ninstall(\"meteor\");\ninstall(\"meteor-base\");\ninstall(\"mobile-experience\");\ninstall(\"modules-runtime\");\ninstall(\"modules\", \"meteor/modules/client.js\");\ninstall(\"es5-shim\", \"meteor/es5-shim/client.js\");\ninstall(\"promise\", \"meteor/promise/client.js\");\ninstall(\"ecmascript-runtime\", \"meteor/ecmascript-runtime/runtime.js\");\ninstall(\"babel-compiler\");\ninstall(\"ecmascript\");\ninstall(\"base64\");\ninstall(\"ejson\");\ninstall(\"id-map\");\ninstall(\"ordered-dict\");\ninstall(\"tracker\");\ninstall(\"babel-runtime\");\ninstall(\"random\");\ninstall(\"mongo-id\");\ninstall(\"diff-sequence\");\ninstall(\"geojson-utils\", \"meteor/geojson-utils/main.js\");\ninstall(\"minimongo\");\ninstall(\"check\", \"meteor/check/match.js\");\ninstall(\"retry\");\ninstall(\"ddp-common\");\ninstall(\"reload\");\ninstall(\"ddp-client\");\ninstall(\"ddp\");\ninstall(\"ddp-server\");\ninstall(\"allow-deny\");\ninstall(\"mongo\");\ninstall(\"blaze-html-templates\");\ninstall(\"reactive-dict\");\ninstall(\"session\");\ninstall(\"jquery\", \"meteor/jquery/main.js\");\ninstall(\"audit-argument-checks\");\ninstall(\"standard-minifier-css\");\ninstall(\"standard-minifier-js\");\ninstall(\"shell-server\");\ninstall(\"deps\");\ninstall(\"aldeed:simple-schema\");\ninstall(\"ddp-rate-limiter\");\ninstall(\"localstorage\");\ninstall(\"callback-hook\");\ninstall(\"htmljs\");\ninstall(\"observe-sequence\");\ninstall(\"reactive-var\");\ninstall(\"blaze\");\ninstall(\"accounts-base\", \"meteor/accounts-base/client_main.js\");\ninstall(\"tmeasday:check-npm-versions\", \"meteor/tmeasday:check-npm-versions/check-npm-versions.js\");\ninstall(\"apollo\", \"meteor/apollo/main-client.js\");\ninstall(\"webapp\");\ninstall(\"livedata\");\ninstall(\"hot-code-push\");\ninstall(\"spacebars\");\ninstall(\"templating\");\ninstall(\"launch-screen\");\ninstall(\"ui\");\ninstall(\"autoupdate\");\ninstall(\"mdg:validation-error\");\ninstall(\"service-configuration\");\n","try {\n  // The application can run `npm install process` to provide its own\n  // process stub; otherwise this module will provide a partial stub.\n  process = global.process || require(\"process\");\n} catch (noProcess) {\n  process = {};\n}\n\nif (Meteor.isServer) {\n  // Make require(\"process\") work on the server in all versions of Node.\n  meteorInstall({\n    node_modules: {\n      \"process.js\": function (r, e, module) {\n        module.exports = process;\n      }\n    }\n  });\n} else {\n  process.platform = \"browser\";\n  process.nextTick = process.nextTick || Meteor._setImmediate;\n}\n\nif (typeof process.env !== \"object\") {\n  process.env = {};\n}\n\n_.extend(process.env, meteorEnv);\n","try {\n  // When meteor-node-stubs is installed in the application's root\n  // node_modules directory, requiring it here installs aliases for stubs\n  // for all Node built-in modules, such as fs, util, and http.\n  require(\"meteor-node-stubs\");\n} catch (noStubs) {}\n","var Entry = require(\"./entry.js\").Entry;\nvar utils = require(\"./utils.js\");\n\nexports.enable = function (Module) {\n  var Mp = Module.prototype;\n\n  if (typeof Mp.import === \"function\" &&\n      typeof Mp.export === \"function\") {\n    // If the Mp.{import,export} methods have already been\n    // defined, abandon reification immediately.\n    return Module;\n  }\n\n  // Platform-specific code should implement this method however\n  // appropriate. Module.prototype.resolve(id) should return an absolute\n  // version of the given module identifier, like require.resolve.\n  Mp.resolve = Mp.resolve || function resolve(id) {\n    throw new Error(\"Module.prototype.resolve not implemented\");\n  };\n\n  // Platform-specific code should find a way to call this method whenever\n  // the module system is about to return module.exports from require. This\n  // might happen more than once per module, in case of dependency cycles,\n  // so we want Module.prototype.runModuleSetters to run each time.\n  Mp.runModuleSetters = function runModuleSetters(valueToPassThrough) {\n    var entry = Entry.get(this.id);\n    if (entry) {\n      entry.runModuleSetters(this);\n    }\n\n    // Assignments to exported local variables get wrapped with calls to\n    // module.runModuleSetters, so module.runModuleSetters returns the\n    // valueToPassThrough parameter to allow the value of the original\n    // expression to pass through. For example,\n    //\n    //   export var a = 1;\n    //   console.log(a += 3);\n    //\n    // becomes\n    //\n    //   module.export(\"a\", () => a);\n    //   var a = 1;\n    //   console.log(module.runModuleSetters(a += 3));\n    //\n    // This ensures module.runModuleSetters runs immediately after the\n    // assignment, and does not interfere with the larger computation.\n    return valueToPassThrough;\n  };\n\n  function setESModule(module) {\n    var exports = module.exports;\n    if (exports && typeof exports === \"object\") {\n      exports.__esModule = true;\n    }\n  }\n\n  Mp.import = function (id, setters) {\n    var module = this;\n    setESModule(module);\n\n    var absoluteId = module.resolve(id);\n\n    if (setters && typeof setters === \"object\") {\n      var entry = Entry.getOrCreate(absoluteId);\n      entry.addSetters(module, setters);\n    }\n\n    var countBefore = entry && entry.runCount;\n    var exports = typeof module.require === \"function\"\n      ? module.require(absoluteId)\n      : require(absoluteId);\n\n    if (entry && entry.runCount === countBefore) {\n      // If require(absoluteId) didn't run any setters for this entry,\n      // perhaps because it's not the first time this module has been\n      // required, run the setters now using an object that passes as the\n      // real module object.\n      entry.runModuleSetters({\n        id: absoluteId,\n        exports: exports,\n        getExportByName: Mp.getExportByName\n      });\n    }\n  };\n\n  // Register getter functions for local variables in the scope of an\n  // export statement. The keys of the getters object are exported names,\n  // and the values are functions that return local values.\n  Mp.export = function (getters) {\n    var module = this;\n    setESModule(module);\n\n    if (utils.isPlainObject(getters)) {\n      Entry.getOrCreate(module.id).addGetters(getters);\n    }\n\n    if (module.loaded) {\n      // If the module has already been evaluated, then we need to trigger\n      // another round of entry.runModuleSetters calls, which begins by\n      // calling entry.runModuleGetters(module).\n      module.runModuleSetters();\n    }\n  };\n\n  // This method can be overridden by client code to implement custom export\n  // naming logic. The current implementation works well with Babel's\n  // __esModule convention.\n  Mp.getExportByName = function (name) {\n    var exports = this.exports;\n\n    if (name === \"*\") {\n      return exports;\n    }\n\n    if (name === \"default\" &&\n        ! (exports &&\n           typeof exports === \"object\" &&\n           exports.__esModule &&\n           \"default\" in exports)) {\n      return exports;\n    }\n\n    return exports && exports[name];\n  };\n\n  return Module;\n};\n","var hasOwn = Object.prototype.hasOwnProperty;\nvar entryMap = Object.create(null);\nvar utils = require(\"./utils.js\");\n\nfunction Entry(id) {\n  // Same as module.id for this module.\n  this.id = id;\n  // The number of times this.runModuleSetters has been called.\n  this.runCount = 0;\n  // Setters for assigning to local variables in parent modules.\n  this.setters = Object.create(null);\n  // Getters for local variables exported from this module.\n  this.getters = Object.create(null);\n}\n\nvar Ep = Entry.prototype;\n\nEntry.get = function (id) {\n  return entryMap[id] || null;\n};\n\nEntry.getOrCreate = function (id) {\n  return entryMap[id] = entryMap[id] || new Entry(id);\n};\n\nEp.addSetters = function (parent, setters) {\n  var entry = this;\n\n  Object.keys(setters).forEach(function (name) {\n    var setter = setters[name];\n    if (typeof setter === \"function\" &&\n        // Ignore any requests for the exports.__esModule property.\"\n        name !== \"__esModule\") {\n      setter.parent = parent;\n      (entry.setters[name] =\n       entry.setters[name] || []\n      ).push(setter);\n    }\n  });\n};\n\nEp.addGetters = function (getters) {\n  var entry = this;\n  Object.keys(getters).forEach(function (name) {\n    var getter = getters[name];\n    if (typeof getter === \"function\" &&\n        // Ignore any requests for the exports.__esModule property.\"\n        name !== \"__esModule\") {\n      // Should this throw if hasOwn.call(this.getters, name)?\n      entry.getters[name] = getter;\n    }\n  });\n};\n\nfunction runModuleSetters(module) {\n  var entry = entryMap[module.id];\n  if (entry) {\n    entry.runModuleSetters(module);\n  }\n}\n\nfunction runModuleGetters(module) {\n  var entry = entryMap[module.id];\n  return entry ? entry.runModuleGetters(module) : 0;\n}\n\nEp.runModuleGetters = function (module) {\n  var entry = this;\n  var changeCount = 0;\n\n  Object.keys(entry.getters).forEach(function (name) {\n    if (entry.runGetter(module, name)) {\n      ++changeCount;\n    }\n  });\n\n  return changeCount;\n};\n\n// Returns true iff the getter updated module.exports with a new value.\nEp.runGetter = function (module, name) {\n  if (! hasOwn.call(this.getters, name)) {\n    return false;\n  }\n\n  var getter = this.getters[name];\n  try {\n    var value = getter.call(module);\n  } catch (e) {}\n  var exports = module.exports;\n\n  if (! hasOwn.call(exports, name) ||\n      exports[name] !== value) {\n    // We update module.exports[name] with the current value so that\n    // CommonJS require calls remain consistent with module.import.\n    exports[name] = value;\n    return true;\n  }\n\n  return false;\n};\n\n// Called whenever module.exports might have changed, to trigger any\n// setters associated with the newly exported values.\nEp.runModuleSetters = function (module) {\n  var entry = this;\n  var names = Object.keys(entry.setters);\n\n  // Make sure module.exports is up to date before we call\n  // module.getExportByName(name).\n  entry.runModuleGetters(module);\n\n  // Invoke the given callback once for every (setter, value, name) triple\n  // that needs to be called. Note that forEachSetter does not call any\n  // setters itself, only the given callback.\n  function forEachSetter(callback, context) {\n    names.forEach(function (name) {\n      entry.setters[name].forEach(function (setter) {\n        var value = module.getExportByName(name);\n        if (name === \"*\") {\n          Object.keys(value).forEach(function (name) {\n            call(setter, value[name], name);\n          });\n        } else {\n          call(setter, value, name);\n        }\n      });\n    });\n\n    function call(setter, value, name) {\n      if (name === \"__esModule\") {\n        // Ignore setters asking for module.exports.__esModule.\n        return;\n      }\n\n      setter.last = setter.last || Object.create(null);\n\n      if (! hasOwn.call(setter.last, name) ||\n          setter.last[name] !== value) {\n        // Only invoke the callback if we have not called this setter\n        // (with a value of this name) before, or the current value is\n        // different from the last value we passed to this setter.\n        return callback.apply(context, arguments);\n      }\n    }\n  }\n\n  // Every three elements of this list form a (setter, value, name) triple\n  // that needs to be invoked.\n  var settersToCall = [];\n\n  // Lazily-initialized objects mapping parent module identifiers to\n  // relevant parent module objects and snapshots of their exports.\n  var relevantParents;\n  var parentSnapshots;\n\n  // Take snapshots of setter.parent.exports for any setters that we are\n  // planning to call, so that we can later determine if calling the\n  // setters modified any of those exports objects.\n  forEachSetter(function (setter, value, name) {\n    var parent = setter.parent;\n    parentSnapshots = parentSnapshots || Object.create(null);\n    if (! hasOwn.call(parentSnapshots, parent.id)) {\n      relevantParents = relevantParents || Object.create(null);\n      relevantParents[parent.id] = parent;\n      if (utils.isPlainObject(parent.exports)) {\n        // If parent.exports is an object, make a shallow clone of it so\n        // that we can see if it changes as a result of calling setters.\n        parentSnapshots[parent.id] = utils.assign({}, parent.exports);\n      } else {\n        // If parent.exports is not an object, the \"snapshot\" is just the\n        // value of parent.exports.\n        parentSnapshots[parent.id] = parent.exports;\n      }\n    }\n\n    // Push three elements at a time to avoid creating wrapper arrays for\n    // each (setter, value, name) triple. Note the i += 3 below.\n    settersToCall.push(setter, value, name);\n  });\n\n  // Now call all the setters that we decided we need to call.\n  for (var i = 0; i < settersToCall.length; i += 3) {\n    var setter = settersToCall[i];\n    var value = settersToCall[i + 1];\n    var name = settersToCall[i + 2];\n    setter.call(module, setter.last[name] = value, name);\n  }\n\n  ++entry.runCount;\n\n  if (! relevantParents) {\n    // If we never called takeSnapshot, then we can avoid checking\n    // relevantParents and parentSnapshots below.\n    return;\n  }\n\n  // If any of the setters updated the module.exports of a parent module,\n  // or updated local variables that are exported by that parent module,\n  // then we must re-run any setters registered by that parent module.\n  Object.keys(relevantParents).forEach(function (id) {\n    var parent = relevantParents[id];\n\n    if (runModuleGetters(parent) > 0) {\n      return runModuleSetters(parent);\n    }\n\n    var exports = parent.exports;\n    var snapshot = parentSnapshots[parent.id];\n    if (utils.shallowObjEqual(exports, snapshot)) {\n      // If parent.exports have not changed since we took the snapshot,\n      // then we do not need to run the parent's setters.\n      return;\n    }\n\n    runModuleSetters(parent);\n  });\n};\n\nexports.Entry = Entry;\n","var hasOwn = Object.prototype.hasOwnProperty;\nvar objToStr = Object.prototype.toString;\nvar objStr = objToStr.call({});\n\nfunction isPlainObject(value) {\n  return objToStr.call(value) === objStr;\n}\nexports.isPlainObject = isPlainObject;\n\nexports.assign = Object.assign || function (obj) {\n  var argc = arguments.length;\n  for (var i = 1; i < argc; ++i) {\n    var arg = arguments[i];\n    if (arg && typeof arg === \"object\") {\n      var keys = Object.keys(arg);\n      for (var k = 0; k < keys.length; ++k) {\n        var key = keys[k];\n        obj[key] = arg[key];\n      }\n    }\n  }\n  return obj;\n};\n\nexports.shallowObjEqual = function(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (! isPlainObject(a) ||\n      ! isPlainObject(b)) {\n    return false;\n  }\n\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b);\n\n  if (aKeys.length !== bKeys.length) {\n    return false;\n  }\n\n  return aKeys.every(function (key) {\n    return hasOwn.call(b, key) &&\n      a[key] === b[key];\n  });\n};\n","exports.name = \"meteor-node-stubs\";\nexports.version = \"0.2.3\";\nexports.main = \"index.js\";\n","var map = require(\"./map.json\");\nvar meteorAliases = {};\n\nObject.keys(map).forEach(function (id) {\n  if (typeof map[id] === \"string\") {\n    try {\n      exports[id] = meteorAliases[id + \".js\"] =\n        require.resolve(map[id]);\n    } catch (e) {\n      // Resolution can fail at runtime if the stub was not included in the\n      // bundle because nothing depended on it.\n    }\n  } else {\n    exports[id] = map[id];\n    meteorAliases[id + \".js\"] = function(){};\n  }\n});\n\nif (typeof meteorInstall === \"function\") {\n  meteorInstall({\n    // Install the aliases into a node_modules directory one level up from\n    // the root directory, so that they do not clutter the namespace\n    // available to apps and packages.\n    \"..\": {\n      node_modules: meteorAliases\n    }\n  });\n}\n","module.exports = {\n  \"assert\": \"assert/\",\n  \"buffer\": \"buffer/\",\n  \"child_process\": null,\n  \"cluster\": null,\n  \"console\": \"console-browserify\",\n  \"constants\": \"constants-browserify\",\n  \"crypto\": \"crypto-browserify\",\n  \"dgram\": null,\n  \"dns\": null,\n  \"domain\": \"domain-browser\",\n  \"events\": \"events/\",\n  \"fs\": null,\n  \"http\": \"http-browserify\",\n  \"https\": \"https-browserify\",\n  \"module\": null,\n  \"net\": null,\n  \"os\": \"os-browserify/browser.js\",\n  \"path\": \"path-browserify\",\n  \"process\": \"process/browser.js\",\n  \"punycode\": \"punycode/\",\n  \"querystring\": \"querystring-es3/\",\n  \"readline\": null,\n  \"repl\": null,\n  \"stream\": \"stream-browserify\",\n  \"_stream_duplex\": \"readable-stream/duplex.js\",\n  \"_stream_passthrough\": \"readable-stream/passthrough.js\",\n  \"_stream_readable\": \"readable-stream/readable.js\",\n  \"_stream_transform\": \"readable-stream/transform.js\",\n  \"_stream_writable\": \"readable-stream/writable.js\",\n  \"string_decoder\": \"string_decoder/\",\n  \"sys\": \"util/util.js\",\n  \"timers\": \"timers-browserify\",\n  \"tls\": null,\n  \"tty\": \"tty-browserify\",\n  \"url\": \"url/\",\n  \"util\": \"util/util.js\",\n  \"vm\": \"vm-browserify\",\n  \"zlib\": \"browserify-zlib\"\n};\n","require(\"buffer/\");\n","require(\"process/browser.js\");\n","require(\"domain-browser\");\n","exports.name = \"buffer\";\nexports.version = \"4.5.1\";\nexports.main = \"index.js\";\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar rootParent = {}\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\nfunction Buffer (arg) {\n  if (!(this instanceof Buffer)) {\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n    return new Buffer(arg)\n  }\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    this.length = 0\n    this.parent = undefined\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    return fromNumber(this, arg)\n  }\n\n  // Slightly less common case.\n  if (typeof arg === 'string') {\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n  }\n\n  // Unusual.\n  return fromObject(this, arg)\n}\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction fromNumber (that, length) {\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < length; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\n  // Assumption: byteLength() return value is always < kMaxLength.\n  var length = byteLength(string, encoding) | 0\n  that = allocate(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromObject (that, object) {\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\n  if (isArray(object)) return fromArray(that, object)\n\n  if (object == null) {\n    throw new TypeError('must start with number, buffer, array or string')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined') {\n    if (object.buffer instanceof ArrayBuffer) {\n      return fromTypedArray(that, object)\n    }\n    if (object instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, object)\n    }\n  }\n\n  if (object.length) return fromArrayLike(that, object)\n\n  return fromJsonObject(that, object)\n}\n\nfunction fromBuffer (that, buffer) {\n  var length = checked(buffer.length) | 0\n  that = allocate(that, length)\n  buffer.copy(that, 0, 0, length)\n  return that\n}\n\nfunction fromArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Duplicate of fromArray() to keep fromArray() monomorphic.\nfunction fromTypedArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  // Truncating the elements is probably not what people expect from typed\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n  // of the old Buffer constructor.\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(array)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromTypedArray(that, new Uint8Array(array))\n  }\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n// Returns a zero-length buffer for inputs that don't conform to the spec.\nfunction fromJsonObject (that, object) {\n  var array\n  var length = 0\n\n  if (object.type === 'Buffer' && isArray(object.data)) {\n    array = object.data\n    length = checked(array.length) | 0\n  }\n  that = allocate(that, length)\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n} else {\n  // pre-set for values that may exist in the future\n  Buffer.prototype.length = undefined\n  Buffer.prototype.parent = undefined\n}\n\nfunction allocate (that, length) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that.length = length\n  }\n\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n  if (fromPool) that.parent = rootParent\n\n  return that\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (subject, encoding) {\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\n  var buf = new Buffer(subject, encoding)\n  delete buf.parent\n  return buf\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buf = new Buffer(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nfunction byteLength (string, encoding) {\n  if (typeof string !== 'string') string = '' + string\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  start = start | 0\n  end = end === undefined || end === Infinity ? this.length : end | 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  return Buffer.compare(this, b)\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    if (val.length === 0) return -1 // special case: looking for empty string always fails\n    return String.prototype.indexOf.call(this, val, byteOffset)\n  }\n  if (Buffer.isBuffer(val)) {\n    return arrayIndexOf(this, val, byteOffset)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset)\n  }\n\n  function arrayIndexOf (arr, val, byteOffset) {\n    var foundIndex = -1\n    for (var i = 0; byteOffset + i < arr.length; i++) {\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n      } else {\n        foundIndex = -1\n      }\n    }\n    return -1\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) throw new Error('Invalid hex string')\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    var swap = encoding\n    encoding = offset\n    offset = length | 0\n    length = swap\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  if (newBuf.length) newBuf.parent = this.parent || this\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n  if (offset < 0) throw new RangeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function fill (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new RangeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n","exports.name = \"base64-js\";\nexports.version = \"1.1.2\";\nexports.main = \"lib/b64.js\";\n","'use strict'\n\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nfunction init () {\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i]\n    revLookup[code.charCodeAt(i)] = i\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62\n  revLookup['_'.charCodeAt(0)] = 63\n}\n\ninit()\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","exports.name = \"ieee754\";\nexports.version = \"1.1.6\";\nexports.main = \"index.js\";\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","exports.name = \"isarray\";\nexports.version = \"1.0.0\";\nexports.main = \"index.js\";\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","exports.name = \"domain-browser\";\nexports.version = \"1.1.7\";\nexports.main = \"./index.js\";\n","// This file should be ES5 compatible\n/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */\n'use strict'\nmodule.exports = (function () {\n\t// Import Events\n\tvar events = require('events')\n\n\t// Export Domain\n\tvar domain = {}\n\tdomain.createDomain = domain.create = function () {\n\t\tvar d = new events.EventEmitter()\n\n\t\tfunction emitError (e) {\n\t\t\td.emit('error', e)\n\t\t}\n\n\t\td.add = function (emitter) {\n\t\t\temitter.on('error', emitError)\n\t\t}\n\t\td.remove = function (emitter) {\n\t\t\temitter.removeListener('error', emitError)\n\t\t}\n\t\td.bind = function (fn) {\n\t\t\treturn function () {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments)\n\t\t\t\ttry {\n\t\t\t\t\tfn.apply(null, args)\n\t\t\t\t}\n\t\t\t\tcatch (err) {\n\t\t\t\t\temitError(err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\td.intercept = function (fn) {\n\t\t\treturn function (err) {\n\t\t\t\tif ( err ) {\n\t\t\t\t\temitError(err)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar args = Array.prototype.slice.call(arguments, 1)\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfn.apply(null, args)\n\t\t\t\t\t}\n\t\t\t\t\tcatch (err) {\n\t\t\t\t\t\temitError(err)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\td.run = function (fn) {\n\t\t\ttry {\n\t\t\t\tfn()\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\temitError(err)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\t\td.dispose = function () {\n\t\t\tthis.removeAllListeners()\n\t\t\treturn this\n\t\t}\n\t\td.enter = d.exit = function () {\n\t\t\treturn this\n\t\t}\n\t\treturn d\n\t}\n\treturn domain\n}).call(this)\n","exports.name = \"events\";\nexports.version = \"1.1.0\";\nexports.main = \"./events.js\";\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","exports.name = \"apollo-client\";\nexports.version = \"0.4.20\";\nexports.main = \"index.js\";\n","\"use strict\";\nvar networkInterface_1 = require('./networkInterface');\nexports.createNetworkInterface = networkInterface_1.createNetworkInterface;\nexports.addQueryMerging = networkInterface_1.addQueryMerging;\nvar printer_1 = require('graphql-tag/printer');\nexports.printAST = printer_1.print;\nvar store_1 = require('./store');\nexports.createApolloStore = store_1.createApolloStore;\nexports.createApolloReducer = store_1.createApolloReducer;\nvar QueryManager_1 = require('./QueryManager');\nvar ObservableQuery_1 = require('./ObservableQuery');\nexports.ObservableQuery = ObservableQuery_1.ObservableQuery;\nvar readFromStore_1 = require('./data/readFromStore');\nexports.readQueryFromStore = readFromStore_1.readQueryFromStore;\nexports.readFragmentFromStore = readFromStore_1.readFragmentFromStore;\nvar writeToStore_1 = require('./data/writeToStore');\nexports.writeQueryToStore = writeToStore_1.writeQueryToStore;\nexports.writeFragmentToStore = writeToStore_1.writeFragmentToStore;\nvar queryTransform_1 = require('./queries/queryTransform');\nexports.addTypename = queryTransform_1.addTypenameToSelectionSet;\nvar storeUtils_1 = require('./data/storeUtils');\nvar getFromAST_1 = require('./queries/getFromAST');\nexports.createFragmentMap = getFromAST_1.createFragmentMap;\nvar errors_1 = require('./errors');\nexports.ApolloError = errors_1.ApolloError;\nvar isUndefined = require('lodash.isundefined');\nvar assign = require('lodash.assign');\nvar flatten = require('lodash.flatten');\nvar isString = require('lodash.isstring');\nvar DEFAULT_REDUX_ROOT_KEY = 'apollo';\nexports.fragmentDefinitionsMap = {};\nvar printFragmentWarnings = true;\nfunction createFragment(doc, fragments) {\n    if (fragments === void 0) { fragments = []; }\n    fragments = flatten(fragments);\n    var fragmentDefinitions = getFromAST_1.getFragmentDefinitions(doc);\n    fragmentDefinitions.forEach(function (fragmentDefinition) {\n        var fragmentName = fragmentDefinition.name.value;\n        if (exports.fragmentDefinitionsMap.hasOwnProperty(fragmentName) &&\n            exports.fragmentDefinitionsMap[fragmentName].indexOf(fragmentDefinition) === -1) {\n            if (printFragmentWarnings) {\n                console.warn(\"Warning: fragment with name \" + fragmentDefinition.name.value + \" already exists.\\nApollo Client enforces all fragment names across your application to be unique; read more about\\nthis in the docs: http://docs.apollostack.com/\");\n            }\n            exports.fragmentDefinitionsMap[fragmentName].push(fragmentDefinition);\n        }\n        else if (!exports.fragmentDefinitionsMap.hasOwnProperty(fragmentName)) {\n            exports.fragmentDefinitionsMap[fragmentName] = [fragmentDefinition];\n        }\n    });\n    return fragments.concat(fragmentDefinitions);\n}\nexports.createFragment = createFragment;\nfunction disableFragmentWarnings() {\n    printFragmentWarnings = false;\n}\nexports.disableFragmentWarnings = disableFragmentWarnings;\nfunction enableFragmentWarnings() {\n    printFragmentWarnings = true;\n}\nexports.enableFragmentWarnings = enableFragmentWarnings;\nfunction clearFragmentDefinitions() {\n    exports.fragmentDefinitionsMap = {};\n}\nexports.clearFragmentDefinitions = clearFragmentDefinitions;\nfunction defaultReduxRootSelector(state) {\n    return state[DEFAULT_REDUX_ROOT_KEY];\n}\nvar ApolloClient = (function () {\n    function ApolloClient(_a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, networkInterface = _b.networkInterface, reduxRootKey = _b.reduxRootKey, reduxRootSelector = _b.reduxRootSelector, initialState = _b.initialState, dataIdFromObject = _b.dataIdFromObject, queryTransformer = _b.queryTransformer, resultTransformer = _b.resultTransformer, resultComparator = _b.resultComparator, _c = _b.shouldBatch, shouldBatch = _c === void 0 ? false : _c, _d = _b.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _b.ssrForceFetchDelay, ssrForceFetchDelay = _e === void 0 ? 0 : _e, _f = _b.mutationBehaviorReducers, mutationBehaviorReducers = _f === void 0 ? {} : _f, batchInterval = _b.batchInterval;\n        this.middleware = function () {\n            return function (store) {\n                _this.setStore(store);\n                return function (next) { return function (action) {\n                    var returnValue = next(action);\n                    _this.queryManager.broadcastNewStore(store.getState());\n                    return returnValue;\n                }; };\n            };\n        };\n        if (reduxRootKey && reduxRootSelector) {\n            throw new Error('Both \"reduxRootKey\" and \"reduxRootSelector\" are configured, but only one of two is allowed.');\n        }\n        if (reduxRootKey) {\n            console.warn('\"reduxRootKey\" option is deprecated and might be removed in the upcoming versions, ' +\n                'please use the \"reduxRootSelector\" instead.');\n            this.reduxRootKey = reduxRootKey;\n        }\n        if (!reduxRootSelector && reduxRootKey) {\n            this.reduxRootSelector = function (state) { return state[reduxRootKey]; };\n        }\n        else if (isString(reduxRootSelector)) {\n            this.reduxRootKey = reduxRootSelector;\n            this.reduxRootSelector = function (state) { return state[reduxRootSelector]; };\n        }\n        else if (typeof reduxRootSelector === 'function') {\n            this.reduxRootSelector = reduxRootSelector;\n        }\n        else {\n            this.reduxRootSelector = null;\n        }\n        this.initialState = initialState ? initialState : {};\n        this.networkInterface = networkInterface ? networkInterface :\n            networkInterface_1.createNetworkInterface('/graphql');\n        this.queryTransformer = queryTransformer;\n        this.resultTransformer = resultTransformer;\n        this.resultComparator = resultComparator;\n        this.shouldBatch = shouldBatch;\n        this.shouldForceFetch = !(ssrMode || ssrForceFetchDelay > 0);\n        this.dataId = dataIdFromObject;\n        this.fieldWithArgs = storeUtils_1.storeKeyNameFromFieldNameAndArgs;\n        this.batchInterval = batchInterval;\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return _this.shouldForceFetch = true; }, ssrForceFetchDelay);\n        }\n        this.reducerConfig = {\n            dataIdFromObject: dataIdFromObject,\n            mutationBehaviorReducers: mutationBehaviorReducers,\n        };\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.setStore = this.setStore.bind(this);\n    }\n    ApolloClient.prototype.watchQuery = function (options) {\n        this.initStore();\n        if (!this.shouldForceFetch && options.forceFetch) {\n            options = assign({}, options, {\n                forceFetch: false,\n            });\n        }\n        createFragment(options.query);\n        return this.queryManager.watchQuery(options);\n    };\n    ;\n    ApolloClient.prototype.query = function (options) {\n        this.initStore();\n        if (!this.shouldForceFetch && options.forceFetch) {\n            options = assign({}, options, {\n                forceFetch: false,\n            });\n        }\n        createFragment(options.query);\n        return this.queryManager.query(options);\n    };\n    ;\n    ApolloClient.prototype.mutate = function (options) {\n        this.initStore();\n        return this.queryManager.mutate(options);\n    };\n    ;\n    ApolloClient.prototype.subscribe = function (options) {\n        this.initStore();\n        return this.queryManager.startGraphQLSubscription(options);\n    };\n    ApolloClient.prototype.reducer = function () {\n        return store_1.createApolloReducer(this.reducerConfig);\n    };\n    ApolloClient.prototype.initStore = function () {\n        if (this.store) {\n            return;\n        }\n        if (this.reduxRootSelector) {\n            throw new Error('Cannot initialize the store because \"reduxRootSelector\" or \"reduxRootKey\" is provided. ' +\n                'They should only be used when the store is created outside of the client. ' +\n                'This may lead to unexpected results when querying the store internally. ' +\n                \"Please remove that option from ApolloClient constructor.\");\n        }\n        this.setStore(store_1.createApolloStore({\n            reduxRootKey: DEFAULT_REDUX_ROOT_KEY,\n            initialState: this.initialState,\n            config: this.reducerConfig,\n        }));\n        this.reduxRootKey = DEFAULT_REDUX_ROOT_KEY;\n    };\n    ;\n    ApolloClient.prototype.resetStore = function () {\n        this.queryManager.resetStore();\n    };\n    ;\n    ApolloClient.prototype.setStore = function (store) {\n        var reduxRootSelector;\n        if (this.reduxRootSelector) {\n            reduxRootSelector = this.reduxRootSelector;\n        }\n        else {\n            reduxRootSelector = defaultReduxRootSelector;\n            this.reduxRootKey = DEFAULT_REDUX_ROOT_KEY;\n        }\n        if (isUndefined(reduxRootSelector(store.getState()))) {\n            throw new Error('Existing store does not use apolloReducer. Please make sure the store ' +\n                'is properly configured and \"reduxRootSelector\" is correctly specified.');\n        }\n        this.store = store;\n        this.queryManager = new QueryManager_1.QueryManager({\n            networkInterface: this.networkInterface,\n            reduxRootSelector: reduxRootSelector,\n            store: store,\n            queryTransformer: this.queryTransformer,\n            resultTransformer: this.resultTransformer,\n            resultComparator: this.resultComparator,\n            shouldBatch: this.shouldBatch,\n            batchInterval: this.batchInterval,\n        });\n    };\n    ;\n    return ApolloClient;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = ApolloClient;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar isString = require('lodash.isstring');\nvar assign = require('lodash.assign');\nvar mapValues = require('lodash.mapvalues');\nrequire('whatwg-fetch');\nvar printer_1 = require('graphql-tag/printer');\nvar queryMerging_1 = require('./batching/queryMerging');\nfunction addQueryMerging(networkInterface) {\n    return assign(networkInterface, {\n        batchQuery: function (requests) {\n            if (requests.length === 1) {\n                return this.query(requests[0]).then(function (result) {\n                    return Promise.resolve([result]);\n                });\n            }\n            var composedRequest = queryMerging_1.mergeRequests(requests);\n            return this.query(composedRequest).then(function (composedResult) {\n                return queryMerging_1.unpackMergedResult(composedResult, requests);\n            });\n        },\n    });\n}\nexports.addQueryMerging = addQueryMerging;\nfunction printRequest(request) {\n    return mapValues(request, function (val, key) {\n        return key === 'query' ? printer_1.print(val) : val;\n    });\n}\nexports.printRequest = printRequest;\nvar HTTPFetchNetworkInterface = (function () {\n    function HTTPFetchNetworkInterface(uri, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (!uri) {\n            throw new Error('A remote enpdoint is required for a network layer');\n        }\n        if (!isString(uri)) {\n            throw new Error('Remote endpoint must be a string');\n        }\n        this._uri = uri;\n        this._opts = assign({}, opts);\n        this._middlewares = [];\n        this._afterwares = [];\n    }\n    HTTPFetchNetworkInterface.prototype.applyMiddlewares = function (_a) {\n        var _this = this;\n        var request = _a.request, options = _a.options;\n        return new Promise(function (resolve, reject) {\n            var queue = function (funcs, scope) {\n                var next = function () {\n                    if (funcs.length > 0) {\n                        var f = funcs.shift();\n                        f.applyMiddleware.apply(scope, [{ request: request, options: options }, next]);\n                    }\n                    else {\n                        resolve({\n                            request: request,\n                            options: options,\n                        });\n                    }\n                };\n                next();\n            };\n            queue(_this._middlewares.slice(), _this);\n        });\n    };\n    HTTPFetchNetworkInterface.prototype.applyAfterwares = function (_a) {\n        var _this = this;\n        var response = _a.response, options = _a.options;\n        return new Promise(function (resolve, reject) {\n            var queue = function (funcs, scope) {\n                var next = function () {\n                    if (funcs.length > 0) {\n                        var f = funcs.shift();\n                        f.applyAfterware.apply(scope, [{ response: response, options: options }, next]);\n                    }\n                    else {\n                        resolve({\n                            response: response,\n                            options: options,\n                        });\n                    }\n                };\n                next();\n            };\n            queue(_this._afterwares.slice(), _this);\n        });\n    };\n    HTTPFetchNetworkInterface.prototype.fetchFromRemoteEndpoint = function (_a) {\n        var request = _a.request, options = _a.options;\n        return fetch(this._uri, assign({}, this._opts, {\n            body: JSON.stringify(printRequest(request)),\n            method: 'POST',\n        }, options, {\n            headers: assign({}, {\n                Accept: '*/*',\n                'Content-Type': 'application/json',\n            }, options.headers),\n        }));\n    };\n    ;\n    HTTPFetchNetworkInterface.prototype.query = function (request) {\n        var _this = this;\n        var options = assign({}, this._opts);\n        return this.applyMiddlewares({\n            request: request,\n            options: options,\n        }).then(this.fetchFromRemoteEndpoint.bind(this))\n            .then(function (response) {\n            _this.applyAfterwares({\n                response: response,\n                options: options,\n            });\n            return response;\n        })\n            .then(function (result) { return result.json(); })\n            .then(function (payload) {\n            if (!payload.hasOwnProperty('data') && !payload.hasOwnProperty('errors')) {\n                throw new Error(\"Server response was missing for query '\" + request.debugName + \"'.\");\n            }\n            else {\n                return payload;\n            }\n        });\n    };\n    ;\n    HTTPFetchNetworkInterface.prototype.use = function (middlewares) {\n        var _this = this;\n        middlewares.map(function (middleware) {\n            if (typeof middleware.applyMiddleware === 'function') {\n                _this._middlewares.push(middleware);\n            }\n            else {\n                throw new Error('Middleware must implement the applyMiddleware function');\n            }\n        });\n    };\n    HTTPFetchNetworkInterface.prototype.useAfter = function (afterwares) {\n        var _this = this;\n        afterwares.map(function (afterware) {\n            if (typeof afterware.applyAfterware === 'function') {\n                _this._afterwares.push(afterware);\n            }\n            else {\n                throw new Error('Afterware must implement the applyAfterware function');\n            }\n        });\n    };\n    return HTTPFetchNetworkInterface;\n}());\nexports.HTTPFetchNetworkInterface = HTTPFetchNetworkInterface;\nvar batchedNetworkInterface_1 = require('./batchedNetworkInterface');\nfunction createNetworkInterface(interfaceOpts, backOpts) {\n    if (backOpts === void 0) { backOpts = {}; }\n    if (isString(interfaceOpts) || !interfaceOpts) {\n        var uri = interfaceOpts;\n        return addQueryMerging(new HTTPFetchNetworkInterface(uri, backOpts));\n    }\n    else {\n        var _a = interfaceOpts, _b = _a.transportBatching, transportBatching = _b === void 0 ? false : _b, _c = _a.opts, opts = _c === void 0 ? {} : _c, uri = _a.uri;\n        if (transportBatching) {\n            return new batchedNetworkInterface_1.HTTPBatchedNetworkInterface(uri, opts);\n        }\n        else {\n            return addQueryMerging(new HTTPFetchNetworkInterface(uri, opts));\n        }\n    }\n}\nexports.createNetworkInterface = createNetworkInterface;\n//# sourceMappingURL=networkInterface.js.map","exports.name = \"lodash.isstring\";\nexports.version = \"4.0.1\";\n","/**\n * lodash 4.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @type Function\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);\n}\n\nmodule.exports = isString;\n","exports.name = \"lodash.assign\";\nexports.version = \"4.2.0\";\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max;\n\n/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */\nvar nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = assign;\n","exports.name = \"lodash.mapvalues\";\nexports.version = \"4.6.0\";\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for comparison styles. */\nvar UNORDERED_COMPARE_FLAG = 1,\n    PARTIAL_COMPARE_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values ? values.length : 0;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {boolean} [bitmask] The bitmask of comparison flags.\n *  The bitmask may be composed of the following flags:\n *     1 - Unordered comparison\n *     2 - Partial comparison\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, customizer, bitmask, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = getTag(object);\n    objTag = objTag == argsTag ? objectTag : objTag;\n  }\n  if (!othIsArr) {\n    othTag = getTag(other);\n    othTag = othTag == argsTag ? objectTag : othTag;\n  }\n  var objIsObj = objTag == objectTag && !isHostObject(object),\n      othIsObj = othTag == objectTag && !isHostObject(other),\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)\n      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n  }\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n  };\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!seen.has(othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n              return seen.add(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, customizer, bitmask, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= UNORDERED_COMPARE_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      objProps = keys(object),\n      objLength = objProps.length,\n      othProps = keys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var result,\n      index = -1,\n      length = path.length;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result) {\n    return result;\n  }\n  var length = object ? object.length : 0;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    result[key] = iteratee(value, key, object);\n  });\n  return result;\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = mapValues;\n","exports.name = \"whatwg-fetch\";\nexports.version = \"1.0.0\";\nexports.main = \"fetch.js\";\n","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (!body) {\n        this._bodyText = ''\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n        // Only support ArrayBuffers for POST method.\n        // Receiving ArrayBuffers happens via Blobs, instead.\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = input\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request\n      if (Request.prototype.isPrototypeOf(input) && !init) {\n        request = input\n      } else {\n        request = new Request(input, init)\n      }\n\n      var xhr = new XMLHttpRequest()\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","exports.name = \"lodash.countby\";\nexports.version = \"4.6.0\";\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for comparison styles. */\nvar UNORDERED_COMPARE_FLAG = 1,\n    PARTIAL_COMPARE_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values ? values.length : 0;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {boolean} [bitmask] The bitmask of comparison flags.\n *  The bitmask may be composed of the following flags:\n *     1 - Unordered comparison\n *     2 - Partial comparison\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, customizer, bitmask, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = getTag(object);\n    objTag = objTag == argsTag ? objectTag : objTag;\n  }\n  if (!othIsArr) {\n    othTag = getTag(other);\n    othTag = othTag == argsTag ? objectTag : othTag;\n  }\n  var objIsObj = objTag == objectTag && !isHostObject(object),\n      othIsObj = othTag == objectTag && !isHostObject(other),\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)\n      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n  }\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n  };\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!seen.has(othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n              return seen.add(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, customizer, bitmask, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= UNORDERED_COMPARE_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      objProps = keys(object),\n      objLength = objProps.length,\n      othProps = keys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var result,\n      index = -1,\n      length = path.length;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result) {\n    return result;\n  }\n  var length = object ? object.length : 0;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The corresponding value of\n * each key is the number of times the key was returned by `iteratee`. The\n * iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity]\n *  The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.countBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': 1, '6': 2 }\n *\n * // The `_.property` iteratee shorthand.\n * _.countBy(['one', 'two', 'three'], 'length');\n * // => { '3': 2, '5': 1 }\n */\nvar countBy = createAggregator(function(result, value, key) {\n  hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);\n});\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = countBy;\n","exports.name = \"lodash.identity\";\nexports.version = \"3.0.0\";\n","/**\n * lodash 3.0.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * This method returns the first argument provided to it.\n *\n * @static\n * @memberOf _\n * @category Utility\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'user': 'fred' };\n * _.identity(object) === object;\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","exports.name = \"lodash.clonedeep\";\nexports.version = \"4.5.0\";\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","exports.name = \"lodash.isarray\";\nexports.version = \"4.0.0\";\n","/**\n * lodash 4.0.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @type Function\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","exports.name = \"lodash.isnull\";\nexports.version = \"3.0.0\";\n","/**\n * lodash 3.0.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Checks if `value` is `null`.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n * @example\n *\n * _.isNull(null);\n * // => true\n *\n * _.isNull(void 0);\n * // => false\n */\nfunction isNull(value) {\n  return value === null;\n}\n\nmodule.exports = isNull;\n","exports.name = \"lodash.isundefined\";\nexports.version = \"3.0.1\";\n","/**\n * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nmodule.exports = isUndefined;\n","exports.name = \"redux\";\nexports.version = \"3.6.0\";\nexports.main = \"lib/index.js\";\n","'use strict';\n\nexports.__esModule = true;\nexports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;\n\nvar _createStore = require('./createStore');\n\nvar _createStore2 = _interopRequireDefault(_createStore);\n\nvar _combineReducers = require('./combineReducers');\n\nvar _combineReducers2 = _interopRequireDefault(_combineReducers);\n\nvar _bindActionCreators = require('./bindActionCreators');\n\nvar _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);\n\nvar _applyMiddleware = require('./applyMiddleware');\n\nvar _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);\n\nvar _compose = require('./compose');\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _warning = require('./utils/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/*\n* This is a dummy function to check if the function name has been altered by minification.\n* If the function has been minified and NODE_ENV !== 'production', warn the user.\n*/\nfunction isCrushed() {}\n\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  (0, _warning2['default'])('You are currently using minified code outside of NODE_ENV === \\'production\\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');\n}\n\nexports.createStore = _createStore2['default'];\nexports.combineReducers = _combineReducers2['default'];\nexports.bindActionCreators = _bindActionCreators2['default'];\nexports.applyMiddleware = _applyMiddleware2['default'];\nexports.compose = _compose2['default'];","'use strict';\n\nexports.__esModule = true;\nexports.ActionTypes = undefined;\nexports['default'] = createStore;\n\nvar _isPlainObject = require('lodash/isPlainObject');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nvar _symbolObservable = require('symbol-observable');\n\nvar _symbolObservable2 = _interopRequireDefault(_symbolObservable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar ActionTypes = exports.ActionTypes = {\n  INIT: '@@redux/INIT'\n};\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} enhancer The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n  function getState() {\n    return currentState;\n  }\n\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected listener to be a function.');\n    }\n\n    var isSubscribed = true;\n\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      isSubscribed = false;\n\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n    };\n  }\n\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n  function dispatch(action) {\n    if (!(0, _isPlainObject2['default'])(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i]();\n    }\n\n    return action;\n  }\n\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n\n    currentReducer = nextReducer;\n    dispatch({ type: ActionTypes.INIT });\n  }\n\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/zenparsing/es-observable\n   */\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object') {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return { unsubscribe: unsubscribe };\n      }\n    }, _ref[_symbolObservable2['default']] = function () {\n      return this;\n    }, _ref;\n  }\n\n  // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n  dispatch({ type: ActionTypes.INIT });\n\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[_symbolObservable2['default']] = observable, _ref2;\n}","'use strict';\n\nexports.__esModule = true;\nexports['default'] = combineReducers;\n\nvar _createStore = require('./createStore');\n\nvar _isPlainObject = require('lodash/isPlainObject');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nvar _warning = require('./utils/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionName = actionType && '\"' + actionType.toString() + '\"' || 'an action';\n\n  return 'Given action ' + actionName + ', reducer \"' + key + '\" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state.';\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!(0, _isPlainObject2['default'])(inputState)) {\n    return 'The ' + argumentName + ' has unexpected type of \"' + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + '\". Expected argument to be an object with the following ' + ('keys: \"' + reducerKeys.join('\", \"') + '\"');\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n\n  if (unexpectedKeys.length > 0) {\n    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('\"' + unexpectedKeys.join('\", \"') + '\" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('\"' + reducerKeys.join('\", \"') + '\". Unexpected keys will be ignored.');\n  }\n}\n\nfunction assertReducerSanity(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error('Reducer \"' + key + '\" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');\n    }\n\n    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');\n    if (typeof reducer(undefined, { type: type }) === 'undefined') {\n      throw new Error('Reducer \"' + key + '\" returned undefined when probed with a random type. ' + ('Don\\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in \"redux/*\" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');\n    }\n  });\n}\n\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        (0, _warning2['default'])('No reducer provided for key \"' + key + '\"');\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n  var finalReducerKeys = Object.keys(finalReducers);\n\n  if (process.env.NODE_ENV !== 'production') {\n    var unexpectedKeyCache = {};\n  }\n\n  var sanityError;\n  try {\n    assertReducerSanity(finalReducers);\n  } catch (e) {\n    sanityError = e;\n  }\n\n  return function combination() {\n    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n    var action = arguments[1];\n\n    if (sanityError) {\n      throw sanityError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n      if (warningMessage) {\n        (0, _warning2['default'])(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n    for (var i = 0; i < finalReducerKeys.length; i++) {\n      var key = finalReducerKeys[i];\n      var reducer = finalReducers[key];\n      var previousStateForKey = state[key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(key, action);\n        throw new Error(errorMessage);\n      }\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    return hasChanged ? nextState : state;\n  };\n}","'use strict';\n\nexports.__esModule = true;\nexports['default'] = warning;\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n    /* eslint-disable no-empty */\n  } catch (e) {}\n  /* eslint-enable no-empty */\n}","'use strict';\n\nexports.__esModule = true;\nexports['default'] = bindActionCreators;\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(undefined, arguments));\n  };\n}\n\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass a single function as the first argument,\n * and get a function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?');\n  }\n\n  var keys = Object.keys(actionCreators);\n  var boundActionCreators = {};\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var actionCreator = actionCreators[key];\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n  return boundActionCreators;\n}","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports['default'] = applyMiddleware;\n\nvar _compose = require('./compose');\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function (reducer, preloadedState, enhancer) {\n      var store = createStore(reducer, preloadedState, enhancer);\n      var _dispatch = store.dispatch;\n      var chain = [];\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch(action) {\n          return _dispatch(action);\n        }\n      };\n      chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = _compose2['default'].apply(undefined, chain)(store.dispatch);\n\n      return _extends({}, store, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = compose;\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\n\nfunction compose() {\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  var last = funcs[funcs.length - 1];\n  var rest = funcs.slice(0, -1);\n  return function () {\n    return rest.reduceRight(function (composed, f) {\n      return f(composed);\n    }, last.apply(undefined, arguments));\n  };\n}","var getPrototype = require('./_getPrototype'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || objectToString.call(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return (typeof Ctor == 'function' &&\n    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n}\n\nmodule.exports = isPlainObject;\n","var overArg = require('./_overArg');\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nmodule.exports = getPrototype;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","exports.name = \"symbol-observable\";\nexports.version = \"1.0.2\";\n","module.exports = require('./lib/index');\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _ponyfill = require('./ponyfill');\n\nvar _ponyfill2 = _interopRequireDefault(_ponyfill);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar root = undefined; /* global window */\n\nif (typeof global !== 'undefined') {\n\troot = global;\n} else if (typeof window !== 'undefined') {\n\troot = window;\n}\n\nvar result = (0, _ponyfill2['default'])(root);\nexports['default'] = result;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports['default'] = symbolObservablePonyfill;\nfunction symbolObservablePonyfill(root) {\n\tvar result;\n\tvar _Symbol = root.Symbol;\n\n\tif (typeof _Symbol === 'function') {\n\t\tif (_Symbol.observable) {\n\t\t\tresult = _Symbol.observable;\n\t\t} else {\n\t\t\tresult = _Symbol('observable');\n\t\t\t_Symbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};","exports.name = \"lodash.isobject\";\nexports.version = \"3.0.2\";\n","/**\n * lodash 3.0.2 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","exports.name = \"lodash.has\";\nexports.version = \"4.5.2\";\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var result,\n      index = -1,\n      length = path.length;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result) {\n    return result;\n  }\n  var length = object ? object.length : 0;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nmodule.exports = has;\n","exports.name = \"lodash.merge\";\nexports.version = \"4.6.0\";\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max;\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (typeof key == 'number' && value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  if (!(isArray(source) || isTypedArray(source))) {\n    var props = baseKeysIn(source);\n  }\n  arrayEach(props || source, function(srcValue, key) {\n    if (props) {\n      key = srcValue;\n      srcValue = source[key];\n    }\n    if (isObject(srcValue)) {\n      stack || (stack = new Stack);\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(object[key], srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  });\n}\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = object[key],\n      srcValue = source[key],\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    newValue = srcValue;\n    if (isArray(srcValue) || isTypedArray(srcValue)) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else {\n        isCommon = false;\n        newValue = baseClone(srcValue, true);\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n        isCommon = false;\n        newValue = baseClone(srcValue, true);\n      }\n      else {\n        newValue = objValue;\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) ||\n      objectToString.call(value) != objectTag || isHostObject(value)) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return (typeof Ctor == 'function' &&\n    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = merge;\n","exports.name = \"lodash.flatten\";\nexports.version = \"4.4.0\";\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array ? array.length : 0;\n  return length ? baseFlatten(array, 1) : [];\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\nmodule.exports = flatten;\n","exports.name = \"lodash.isnumber\";\nexports.version = \"3.0.3\";\n","/**\n * lodash 3.0.3 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified\n * as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && objectToString.call(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n","exports.name = \"lodash.isequal\";\nexports.version = \"4.4.0\";\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for comparison styles. */\nvar UNORDERED_COMPARE_FLAG = 1,\n    PARTIAL_COMPARE_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values ? values.length : 0;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {boolean} [bitmask] The bitmask of comparison flags.\n *  The bitmask may be composed of the following flags:\n *     1 - Unordered comparison\n *     2 - Partial comparison\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, customizer, bitmask, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = getTag(object);\n    objTag = objTag == argsTag ? objectTag : objTag;\n  }\n  if (!othIsArr) {\n    othTag = getTag(other);\n    othTag = othTag == argsTag ? objectTag : othTag;\n  }\n  var objIsObj = objTag == objectTag && !isHostObject(object),\n      othIsObj = othTag == objectTag && !isHostObject(other),\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)\n      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n  }\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!seen.has(othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n              return seen.add(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, customizer, bitmask, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= UNORDERED_COMPARE_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      objProps = keys(object),\n      objLength = objProps.length,\n      othProps = keys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are **not** supported.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = isEqual;\n","exports.name = \"lodash.pick\";\nexports.version = \"4.4.0\";\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} props The property identifiers to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, props) {\n  object = Object(object);\n  return basePickBy(object, props, function(value, key) {\n    return key in object;\n  });\n}\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} props The property identifiers to pick from.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, props, predicate) {\n  var index = -1,\n      length = props.length,\n      result = {};\n\n  while (++index < length) {\n    var key = props[index],\n        value = object[key];\n\n    if (predicate(value, key)) {\n      result[key] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [props] The property identifiers to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = baseRest(function(object, props) {\n  return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));\n});\n\nmodule.exports = pick;\n","exports.name = \"lodash.forown\";\nexports.version = \"4.4.0\";\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Iterates over own enumerable string keyed properties of an object and\n * invokes `iteratee` for each property. The iteratee is invoked with three\n * arguments: (value, key, object). Iteratee functions may exit iteration\n * early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forOwnRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forOwn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forOwn(object, iteratee) {\n  return object && baseForOwn(object, typeof iteratee == 'function' ? iteratee : identity);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = forOwn;\n","\"use strict\";\nvar getFromAST_1 = require('../queries/getFromAST');\nvar storeUtils_1 = require('../data/storeUtils');\nvar assign = require('lodash.assign');\nvar cloneDeep = require('lodash.clonedeep');\nvar isArray = require('lodash.isarray');\nvar isNull = require('lodash.isnull');\nvar isUndefined = require('lodash.isundefined');\nfunction mergeRequests(requests) {\n    var rootQueryDoc = createEmptyRootQueryDoc();\n    var rootVariables;\n    requests.forEach(function (request, requestIndex) {\n        request = cloneDeep(request);\n        rootQueryDoc = addQueryToRoot(rootQueryDoc, request.query, requestIndex);\n        if (request.variables) {\n            rootVariables = addVariablesToRoot(rootVariables, request.variables, request.query, requestIndex);\n        }\n    });\n    var rootRequest = {\n        debugName: '___composed',\n        query: rootQueryDoc,\n        variables: rootVariables,\n    };\n    return rootRequest;\n}\nexports.mergeRequests = mergeRequests;\nfunction unpackMergedResult(result, childRequests) {\n    var resultArray = childRequests.map(function (request, index) {\n        var unpackedData = unpackDataForRequest({\n            request: request,\n            data: result.data,\n            selectionSet: getFromAST_1.getQueryDefinition(request.query).selectionSet,\n            queryIndex: index,\n            startIndex: 0,\n            fragmentMap: getFromAST_1.createFragmentMap(getFromAST_1.getFragmentDefinitions(request.query)),\n            topLevel: true,\n        }).unpackedData;\n        return assign({}, result, { data: unpackedData });\n    });\n    return resultArray;\n}\nexports.unpackMergedResult = unpackMergedResult;\nfunction unpackDataForRequest(_a) {\n    var request = _a.request, data = _a.data, selectionSet = _a.selectionSet, queryIndex = _a.queryIndex, startIndex = _a.startIndex, fragmentMap = _a.fragmentMap, topLevel = _a.topLevel;\n    if (!selectionSet) {\n        return {\n            newIndex: startIndex,\n            unpackedData: {},\n        };\n    }\n    var unpackedData = {};\n    var currIndex = startIndex;\n    selectionSet.selections.forEach(function (selection) {\n        if (selection.kind === 'Field') {\n            var field = selection;\n            var realName = storeUtils_1.resultKeyNameFromField(field);\n            var aliasName = getOperationDefinitionName(getFromAST_1.getQueryDefinition(request.query), queryIndex);\n            var stringKey = topLevel ? aliasName + \"___fieldIndex_\" + currIndex : realName;\n            if (topLevel) {\n                currIndex += 1;\n            }\n            var childData = isNull(data) ? null : data[stringKey];\n            var resData = childData;\n            if (field.selectionSet && field.selectionSet.selections.length > 0) {\n                var fieldOpts_1 = {\n                    request: request,\n                    data: childData,\n                    selectionSet: field.selectionSet,\n                    queryIndex: queryIndex,\n                    fragmentMap: fragmentMap,\n                    startIndex: currIndex,\n                    topLevel: false,\n                };\n                if (isNull(childData)) {\n                    var selectionRet = unpackDataForRequest(assign(fieldOpts_1, {\n                        startIndex: currIndex,\n                    }));\n                    currIndex = selectionRet.newIndex;\n                    resData = childData;\n                }\n                else if (isArray(childData)) {\n                    var resUnpacked_1 = [];\n                    var newIndex_1 = 0;\n                    childData.forEach(function (dataObject) {\n                        var selectionRet = unpackDataForRequest(assign(fieldOpts_1, {\n                            data: dataObject,\n                            startIndex: currIndex,\n                        }));\n                        newIndex_1 = selectionRet.newIndex;\n                        resUnpacked_1.push(selectionRet.unpackedData);\n                    });\n                    currIndex = newIndex_1;\n                    resData = resUnpacked_1;\n                }\n                else {\n                    var selectionRet = unpackDataForRequest(assign(fieldOpts_1, { startIndex: currIndex }));\n                    resData = selectionRet.unpackedData;\n                    currIndex = selectionRet.newIndex;\n                }\n            }\n            if (!isUndefined(childData)) {\n                unpackedData[realName] = resData;\n            }\n        }\n        else if (selection.kind === 'InlineFragment') {\n            var inlineFragment = selection;\n            var ret = unpackDataForRequest({\n                request: request,\n                data: data,\n                selectionSet: inlineFragment.selectionSet,\n                queryIndex: queryIndex,\n                startIndex: currIndex,\n                fragmentMap: fragmentMap,\n                topLevel: topLevel,\n            });\n            assign(unpackedData, ret.unpackedData);\n            currIndex = ret.newIndex;\n        }\n        else if (selection.kind === 'FragmentSpread') {\n            var fragmentSpread = selection;\n            var fragment = fragmentMap[fragmentSpread.name.value];\n            var fragmentRet = unpackDataForRequest({\n                request: request,\n                data: data,\n                selectionSet: fragment.selectionSet,\n                queryIndex: queryIndex,\n                startIndex: currIndex,\n                fragmentMap: fragmentMap,\n                topLevel: true,\n            });\n            assign(unpackedData, fragmentRet.unpackedData);\n            currIndex = fragmentRet.newIndex;\n        }\n    });\n    return {\n        newIndex: currIndex,\n        unpackedData: unpackedData,\n    };\n}\nexports.unpackDataForRequest = unpackDataForRequest;\nfunction mergeQueryDocuments(childQueryDocs) {\n    var rootQueryDoc = createEmptyRootQueryDoc();\n    childQueryDocs.forEach(function (childQueryDoc, childQueryDocIndex) {\n        rootQueryDoc = addQueryToRoot(rootQueryDoc, childQueryDoc, childQueryDocIndex);\n    });\n    return rootQueryDoc;\n}\nexports.mergeQueryDocuments = mergeQueryDocuments;\nfunction addVariablesToRoot(rootVariables, childVariables, childQueryDoc, childQueryDocIndex) {\n    var aliasName = getOperationDefinitionName(getFromAST_1.getQueryDefinition(childQueryDoc), childQueryDocIndex);\n    var aliasedChildVariables = addPrefixToVariables(aliasName + '___', childVariables);\n    return assign({}, rootVariables, aliasedChildVariables);\n}\nexports.addVariablesToRoot = addVariablesToRoot;\nfunction addQueryToRoot(rootQueryDoc, childQueryDoc, childQueryDocIndex) {\n    var aliasName = getOperationDefinitionName(getFromAST_1.getQueryDefinition(childQueryDoc), childQueryDocIndex);\n    var aliasedChild = applyAliasNameToDocument(childQueryDoc, aliasName);\n    var aliasedChildQueryDef = getFromAST_1.getQueryDefinition(aliasedChild);\n    var aliasedChildFragmentDefs = getFromAST_1.getFragmentDefinitions(aliasedChild);\n    var rootQueryDef = getFromAST_1.getQueryDefinition(rootQueryDoc);\n    rootQueryDoc.definitions = rootQueryDoc.definitions.concat(aliasedChildFragmentDefs);\n    rootQueryDef.selectionSet.selections =\n        rootQueryDef.selectionSet.selections.concat(aliasedChildQueryDef.selectionSet.selections);\n    rootQueryDef.variableDefinitions =\n        rootQueryDef.variableDefinitions.concat(aliasedChildQueryDef.variableDefinitions);\n    return rootQueryDoc;\n}\nexports.addQueryToRoot = addQueryToRoot;\nfunction createEmptyRootQueryDoc(rootQueryName) {\n    if (!rootQueryName) {\n        rootQueryName = '___composed';\n    }\n    return {\n        kind: 'Document',\n        definitions: [\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                name: {\n                    kind: 'Name',\n                    value: rootQueryName,\n                },\n                variableDefinitions: [],\n                directives: [],\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [],\n                },\n            },\n        ],\n    };\n}\nexports.createEmptyRootQueryDoc = createEmptyRootQueryDoc;\nfunction renameFragmentSpreads(selSet, aliasName) {\n    if (selSet && selSet.selections) {\n        selSet.selections = selSet.selections.map(function (selection) {\n            if (selection.kind === 'FragmentSpread') {\n                var fragmentSpread = selection;\n                fragmentSpread.name.value = getFragmentAliasName(fragmentSpread, aliasName);\n                return fragmentSpread;\n            }\n            else {\n                var withSelSet = selection;\n                withSelSet.selectionSet = renameFragmentSpreads(withSelSet.selectionSet, aliasName);\n                return selection;\n            }\n        });\n    }\n    return selSet;\n}\nexports.renameFragmentSpreads = renameFragmentSpreads;\nfunction renameVariablesInArgument(argument, aliasName) {\n    if (argument.kind === 'Argument' &&\n        argument.value.kind === 'Variable') {\n        var varx = argument.value;\n        argument.value.name.value = getVariableAliasName(varx, aliasName);\n    }\n    return argument;\n}\nfunction renameVariables(selSet, aliasName) {\n    if (selSet && selSet.selections) {\n        selSet.selections = selSet.selections.map(function (selection) {\n            if (selection.kind === 'Field') {\n                var field = selection;\n                if (field.arguments) {\n                    field.arguments = field.arguments.map(function (argument) {\n                        return renameVariablesInArgument(argument, aliasName);\n                    });\n                }\n                if (field.directives) {\n                    field.directives = field.directives.map(function (directive) {\n                        if (directive.arguments) {\n                            directive.arguments = directive.arguments.map(function (argument) {\n                                return renameVariablesInArgument(argument, aliasName);\n                            });\n                        }\n                        return directive;\n                    });\n                }\n                field.selectionSet = renameVariables(field.selectionSet, aliasName);\n                return field;\n            }\n            else if (selection.kind === 'InlineFragment') {\n                var inlineFragment = selection;\n                inlineFragment.selectionSet = renameVariables(inlineFragment.selectionSet, aliasName);\n                return inlineFragment;\n            }\n            return selection;\n        });\n    }\n    return selSet;\n}\nexports.renameVariables = renameVariables;\nfunction applyAliasNameToVariableDefinition(vDef, aliasName) {\n    if (containsMarker(vDef.variable.name.value)) {\n        throw new Error(\"Variable definition for \" + vDef.variable.name.value + \" contains \\\"___\\\"\");\n    }\n    vDef.variable.name.value = getVariableAliasName(vDef.variable, aliasName);\n    return vDef;\n}\nexports.applyAliasNameToVariableDefinition = applyAliasNameToVariableDefinition;\nfunction applyAliasNameToDocument(document, aliasName) {\n    document.definitions = document.definitions.map(function (definition) {\n        var operationOrFragmentDef = definition;\n        operationOrFragmentDef.selectionSet =\n            renameFragmentSpreads(operationOrFragmentDef.selectionSet, aliasName);\n        operationOrFragmentDef.selectionSet =\n            renameVariables(operationOrFragmentDef.selectionSet, aliasName);\n        return operationOrFragmentDef;\n    });\n    var currStartIndex = 0;\n    document.definitions = document.definitions.map(function (definition) {\n        if (definition.kind === 'OperationDefinition' &&\n            definition.operation === 'query') {\n            var operationDef = definition;\n            if (operationDef.variableDefinitions) {\n                operationDef.variableDefinitions =\n                    operationDef.variableDefinitions.map(function (vDef) {\n                        return applyAliasNameToVariableDefinition(vDef, aliasName);\n                    });\n            }\n            var retDef = applyAliasNameToTopLevelFields(operationDef, aliasName, currStartIndex);\n            currStartIndex += operationDef.selectionSet.selections.length;\n            return retDef;\n        }\n        else if (definition.kind === 'FragmentDefinition') {\n            var fragmentDef = definition;\n            var retDef = applyAliasNameToFragment(fragmentDef, aliasName, currStartIndex);\n            currStartIndex += fragmentDef.selectionSet.selections.length;\n            return retDef;\n        }\n        else {\n            throw new Error('Cannot apply alias names to documents that contain mutations.');\n        }\n    });\n    return document;\n}\nexports.applyAliasNameToDocument = applyAliasNameToDocument;\nfunction applyAliasNameToFragment(fragment, aliasName, startIndex) {\n    if (containsMarker(fragment.name.value)) {\n        throw new Error(\"Fragment \" + fragment.name.value + \" contains \\\"___\\\"\");\n    }\n    fragment.name.value = getFragmentAliasName(fragment, aliasName);\n    fragment.selectionSet.selections =\n        applyAliasNameToSelections(fragment.selectionSet.selections, aliasName, startIndex).res;\n    return fragment;\n}\nexports.applyAliasNameToFragment = applyAliasNameToFragment;\nfunction applyAliasNameToTopLevelFields(childQuery, aliasName, startIndex) {\n    childQuery.selectionSet.selections =\n        applyAliasNameToSelections(childQuery.selectionSet.selections, aliasName, startIndex).res;\n    return childQuery;\n}\nexports.applyAliasNameToTopLevelFields = applyAliasNameToTopLevelFields;\nfunction getVariableAliasName(varNode, aliasName) {\n    return aliasName + \"___\" + varNode.name.value;\n}\nexports.getVariableAliasName = getVariableAliasName;\nfunction getFragmentAliasName(fragment, queryAliasName) {\n    return queryAliasName + \"___\" + fragment.name.value;\n}\nexports.getFragmentAliasName = getFragmentAliasName;\nfunction getOperationDefinitionName(operationDef, requestIndex) {\n    var operationDefName = '';\n    if (operationDef.name) {\n        operationDefName = operationDef.name.value;\n    }\n    return \"___\" + operationDefName + \"___requestIndex_\" + requestIndex;\n}\nexports.getOperationDefinitionName = getOperationDefinitionName;\nfunction aliasField(field, alias) {\n    if (containsMarker(field.name.value)) {\n        throw new Error(\"Field \" + field.name.value + \" contains \\\"___\\\".\");\n    }\n    field.alias = {\n        kind: 'Name',\n        value: alias,\n    };\n    return field;\n}\nexports.aliasField = aliasField;\nfunction addPrefixToQuery(prefix, query) {\n    if (query.name) {\n        query.name.value = prefix + query.name.value;\n    }\n    return query;\n}\nexports.addPrefixToQuery = addPrefixToQuery;\nfunction addPrefixToVariables(prefix, variables) {\n    var newVariables = {};\n    Object.keys(variables).forEach(function (variableName) {\n        newVariables[prefix + variableName] = variables[variableName];\n    });\n    return newVariables;\n}\nexports.addPrefixToVariables = addPrefixToVariables;\nfunction applyAliasNameToSelections(selections, aliasName, startIndex) {\n    var currIndex = startIndex;\n    var res = selections.map(function (selection) {\n        if (selection.kind === 'Field') {\n            var aliasedField = aliasField(selection, aliasName + \"___fieldIndex_\" + currIndex);\n            currIndex += 1;\n            return aliasedField;\n        }\n        else if (selection.kind === 'InlineFragment') {\n            var inlineFragment = selection;\n            var ret = applyAliasNameToSelections(inlineFragment.selectionSet.selections, aliasName, currIndex);\n            inlineFragment.selectionSet.selections = ret.res;\n            currIndex = ret.newIndex;\n            return inlineFragment;\n        }\n        else {\n            return selection;\n        }\n    });\n    return {\n        res: res,\n        newIndex: currIndex,\n    };\n}\nfunction containsMarker(name) {\n    return name.indexOf('___') > -1;\n}\n//# sourceMappingURL=queryMerging.js.map","\"use strict\";\nvar assign = require('lodash.assign');\nvar countBy = require('lodash.countby');\nvar identity = require('lodash.identity');\nfunction getMutationDefinition(doc) {\n    checkDocument(doc);\n    var mutationDef = null;\n    doc.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition'\n            && definition.operation === 'mutation') {\n            mutationDef = definition;\n        }\n    });\n    if (!mutationDef) {\n        throw new Error('Must contain a mutation definition.');\n    }\n    return mutationDef;\n}\nexports.getMutationDefinition = getMutationDefinition;\nfunction checkDocument(doc) {\n    if (doc.kind !== 'Document') {\n        throw new Error(\"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    }\n    var definitionTypes = doc.definitions.map(function (definition) {\n        if (definition.kind !== 'OperationDefinition' && definition.kind !== 'FragmentDefinition') {\n            throw new Error(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n        }\n        return definition.kind;\n    });\n    var typeCounts = countBy(definitionTypes, identity);\n    if (typeCounts['OperationDefinition'] > 1) {\n        throw new Error('Queries must have exactly one operation definition.');\n    }\n}\nexports.checkDocument = checkDocument;\nfunction getOperationName(doc) {\n    var res = '';\n    doc.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition'\n            && definition.name) {\n            res = definition.name.value;\n        }\n    });\n    return res;\n}\nexports.getOperationName = getOperationName;\nfunction getFragmentDefinitions(doc) {\n    var fragmentDefinitions = doc.definitions.filter(function (definition) {\n        if (definition.kind === 'FragmentDefinition') {\n            return true;\n        }\n        else {\n            return false;\n        }\n    });\n    return fragmentDefinitions;\n}\nexports.getFragmentDefinitions = getFragmentDefinitions;\nfunction getQueryDefinition(doc) {\n    checkDocument(doc);\n    var queryDef = null;\n    doc.definitions.map(function (definition) {\n        if (definition.kind === 'OperationDefinition'\n            && definition.operation === 'query') {\n            queryDef = definition;\n        }\n    });\n    if (!queryDef) {\n        throw new Error('Must contain a query definition.');\n    }\n    return queryDef;\n}\nexports.getQueryDefinition = getQueryDefinition;\nfunction getFragmentDefinition(doc) {\n    if (doc.kind !== 'Document') {\n        throw new Error(\"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    }\n    if (doc.definitions.length > 1) {\n        throw new Error('Fragment must have exactly one definition.');\n    }\n    var fragmentDef = doc.definitions[0];\n    if (fragmentDef.kind !== 'FragmentDefinition') {\n        throw new Error('Must be a fragment definition.');\n    }\n    return fragmentDef;\n}\nexports.getFragmentDefinition = getFragmentDefinition;\nfunction createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nexports.createFragmentMap = createFragmentMap;\nfunction addFragmentsToDocument(queryDoc, fragments) {\n    checkDocument(queryDoc);\n    return assign({}, queryDoc, {\n        definitions: queryDoc.definitions.concat(fragments),\n    });\n}\nexports.addFragmentsToDocument = addFragmentsToDocument;\n//# sourceMappingURL=getFromAST.js.map","\"use strict\";\nfunction shouldInclude(selection, variables) {\n    if (!variables) {\n        variables = {};\n    }\n    if (!selection.directives) {\n        return true;\n    }\n    var res = true;\n    selection.directives.forEach(function (directive) {\n        if (directive.name.value !== 'skip' && directive.name.value !== 'include') {\n            return;\n        }\n        var directiveArguments = directive.arguments;\n        var directiveName = directive.name.value;\n        if (directiveArguments.length !== 1) {\n            throw new Error(\"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n        }\n        var ifArgument = directive.arguments[0];\n        if (!ifArgument.name || ifArgument.name.value !== 'if') {\n            throw new Error(\"Invalid argument for the @\" + directiveName + \" directive.\");\n        }\n        var ifValue = directive.arguments[0].value;\n        var evaledValue = false;\n        if (!ifValue || ifValue.kind !== 'BooleanValue') {\n            if (ifValue.kind !== 'Variable') {\n                throw new Error(\"Argument for the @\" + directiveName + \" directive must be a variable or a bool ean value.\");\n            }\n            else {\n                evaledValue = variables[ifValue.name.value];\n                if (evaledValue === undefined) {\n                    throw new Error(\"Invalid variable referenced in @\" + directiveName + \" directive.\");\n                }\n            }\n        }\n        else {\n            evaledValue = ifValue.value;\n        }\n        if (directiveName === 'skip') {\n            evaledValue = !evaledValue;\n        }\n        if (!evaledValue) {\n            res = false;\n        }\n    });\n    return res;\n}\nexports.shouldInclude = shouldInclude;\n//# sourceMappingURL=directives.js.map","\"use strict\";\nvar actions_1 = require('../actions');\nvar storeUtils_1 = require('../data/storeUtils');\nvar assign = require('lodash.assign');\nvar isEqual = require('lodash.isequal');\nfunction queries(previousState, action) {\n    if (previousState === void 0) { previousState = {}; }\n    if (actions_1.isQueryInitAction(action)) {\n        var newState = assign({}, previousState);\n        var previousQuery = previousState[action.queryId];\n        var previousVariables = void 0;\n        if (action.storePreviousVariables && previousQuery) {\n            if (!isEqual(previousQuery.variables, action.variables)) {\n                previousVariables = previousQuery.variables;\n            }\n        }\n        newState[action.queryId] = {\n            queryString: action.queryString,\n            query: action.query,\n            minimizedQueryString: action.minimizedQueryString,\n            minimizedQuery: action.minimizedQuery,\n            variables: action.variables,\n            previousVariables: previousVariables,\n            loading: true,\n            stopped: false,\n            networkError: null,\n            graphQLErrors: null,\n            forceFetch: action.forceFetch,\n            returnPartialData: action.returnPartialData,\n            lastRequestId: action.requestId,\n            fragmentMap: action.fragmentMap,\n        };\n        return newState;\n    }\n    else if (actions_1.isQueryResultAction(action)) {\n        if (!previousState[action.queryId]) {\n            return previousState;\n        }\n        if (action.requestId < previousState[action.queryId].lastRequestId) {\n            return previousState;\n        }\n        var newState = assign({}, previousState);\n        var resultHasGraphQLErrors = storeUtils_1.graphQLResultHasError(action.result);\n        newState[action.queryId] = assign({}, previousState[action.queryId], {\n            loading: false,\n            networkError: null,\n            graphQLErrors: resultHasGraphQLErrors ? action.result.errors : null,\n            previousVariables: null,\n        });\n        return newState;\n    }\n    else if (actions_1.isQueryErrorAction(action)) {\n        if (!previousState[action.queryId]) {\n            return previousState;\n        }\n        if (action.requestId < previousState[action.queryId].lastRequestId) {\n            return previousState;\n        }\n        var newState = assign({}, previousState);\n        newState[action.queryId] = assign({}, previousState[action.queryId], {\n            loading: false,\n            networkError: action.error,\n        });\n        return newState;\n    }\n    else if (actions_1.isQueryResultClientAction(action)) {\n        if (!previousState[action.queryId]) {\n            return previousState;\n        }\n        var newState = assign({}, previousState);\n        newState[action.queryId] = assign({}, previousState[action.queryId], {\n            loading: action.complete,\n            networkError: null,\n            previousVariables: null,\n        });\n        return newState;\n    }\n    else if (actions_1.isQueryStopAction(action)) {\n        var newState = assign({}, previousState);\n        newState[action.queryId] = assign({}, previousState[action.queryId], {\n            loading: false,\n            stopped: true,\n        });\n        return newState;\n    }\n    else if (actions_1.isStoreResetAction(action)) {\n        return resetQueryState(previousState, action);\n    }\n    return previousState;\n}\nexports.queries = queries;\nfunction resetQueryState(state, action) {\n    var observableQueryIds = action.observableQueryIds;\n    var newQueries = Object.keys(state).filter(function (queryId) {\n        return (observableQueryIds.indexOf(queryId) > -1);\n    }).reduce(function (res, key) {\n        res[key] = state[key];\n        return res;\n    }, {});\n    return newQueries;\n}\n//# sourceMappingURL=store.js.map","\"use strict\";\nvar getFromAST_1 = require('./getFromAST');\nvar cloneDeep = require('lodash.clonedeep');\nfunction addFieldToSelectionSet(fieldName, selectionSet) {\n    var fieldAst = {\n        kind: 'Field',\n        alias: null,\n        name: {\n            kind: 'Name',\n            value: fieldName,\n        },\n    };\n    if (selectionSet && selectionSet.selections) {\n        var alreadyHasThisField_1 = false;\n        selectionSet.selections.forEach(function (selection) {\n            if (selection.kind === 'Field' && selection.name.value === fieldName) {\n                alreadyHasThisField_1 = true;\n            }\n        });\n        if (!alreadyHasThisField_1) {\n            selectionSet.selections.push(fieldAst);\n        }\n    }\n}\nexports.addFieldToSelectionSet = addFieldToSelectionSet;\nfunction addTypenameToSelectionSet(selectionSet) {\n    return addFieldToSelectionSet('__typename', selectionSet);\n}\nexports.addTypenameToSelectionSet = addTypenameToSelectionSet;\nfunction traverseSelectionSet(selectionSet, queryTransformers, isRoot) {\n    if (isRoot === void 0) { isRoot = false; }\n    if (selectionSet && selectionSet.selections) {\n        queryTransformers.forEach(function (transformer) {\n            if (!isRoot) {\n                transformer(selectionSet);\n            }\n            selectionSet.selections.forEach(function (selection) {\n                if (selection.kind === 'Field' || selection.kind === 'InlineFragment') {\n                    traverseSelectionSet(selection.selectionSet, queryTransformers);\n                }\n            });\n        });\n    }\n}\nfunction applyTransformers(doc, queryTransformers) {\n    getFromAST_1.checkDocument(doc);\n    var docClone = cloneDeep(doc);\n    docClone.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            traverseSelectionSet(definition.selectionSet, queryTransformers, true);\n        }\n        else {\n            traverseSelectionSet(definition.selectionSet, queryTransformers);\n        }\n    });\n    return docClone;\n}\nexports.applyTransformers = applyTransformers;\n//# sourceMappingURL=queryTransform.js.map","\"use strict\";\nfunction isStringValue(value) {\n    return value.kind === 'StringValue';\n}\nfunction isBooleanValue(value) {\n    return value.kind === 'BooleanValue';\n}\nfunction isIntValue(value) {\n    return value.kind === 'IntValue';\n}\nfunction isFloatValue(value) {\n    return value.kind === 'FloatValue';\n}\nfunction isVariable(value) {\n    return value.kind === 'Variable';\n}\nfunction isObject(value) {\n    return value.kind === 'ObjectValue';\n}\nfunction isList(value) {\n    return value.kind === 'ListValue';\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObject(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) { return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables); });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        if (!variables || !(value.name.value in variables)) {\n            throw new Error(\"The inline argument \\\"\" + value.name.value + \"\\\" is expected as a variable but was not provided.\");\n        }\n        var variableValue = variables[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isList(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else {\n        throw new Error(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\" is not supported.\\n                    Use variables instead of inline arguments to overcome this limitation.\");\n    }\n}\nfunction storeKeyNameFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return storeKeyNameFromFieldNameAndArgs(field.name.value, argObj_1);\n    }\n    return field.name.value;\n}\nexports.storeKeyNameFromField = storeKeyNameFromField;\nfunction storeKeyNameFromFieldNameAndArgs(fieldName, args) {\n    var stringifiedArgs = JSON.stringify(args);\n    return fieldName + \"(\" + stringifiedArgs + \")\";\n}\nexports.storeKeyNameFromFieldNameAndArgs = storeKeyNameFromFieldNameAndArgs;\nfunction resultKeyNameFromField(field) {\n    return field.alias ?\n        field.alias.value :\n        field.name.value;\n}\nexports.resultKeyNameFromField = resultKeyNameFromField;\nfunction isField(selection) {\n    return selection.kind === 'Field';\n}\nexports.isField = isField;\nfunction isInlineFragment(selection) {\n    return selection.kind === 'InlineFragment';\n}\nexports.isInlineFragment = isInlineFragment;\nfunction graphQLResultHasError(result) {\n    return result.errors && result.errors.length;\n}\nexports.graphQLResultHasError = graphQLResultHasError;\n//# sourceMappingURL=storeUtils.js.map","\"use strict\";\nvar actions_1 = require('../actions');\nvar writeToStore_1 = require('./writeToStore');\nvar assign = require('lodash.assign');\nvar isObject = require('lodash.isobject');\nvar storeUtils_1 = require('./storeUtils');\nvar mutationResults_1 = require('./mutationResults');\nvar replaceQueryResults_1 = require('./replaceQueryResults');\nfunction isIdValue(idObject) {\n    return (isObject(idObject) && idObject.type === 'id');\n}\nexports.isIdValue = isIdValue;\nfunction isJsonValue(jsonObject) {\n    return (isObject(jsonObject) && jsonObject.type === 'json');\n}\nexports.isJsonValue = isJsonValue;\nfunction data(previousState, action, queries, mutations, config) {\n    if (previousState === void 0) { previousState = {}; }\n    var constAction = action;\n    if (actions_1.isQueryResultAction(action)) {\n        if (!queries[action.queryId]) {\n            return previousState;\n        }\n        if (action.requestId < queries[action.queryId].lastRequestId) {\n            return previousState;\n        }\n        if (!storeUtils_1.graphQLResultHasError(action.result)) {\n            var queryStoreValue = queries[action.queryId];\n            var clonedState = assign({}, previousState);\n            var newState = writeToStore_1.writeSelectionSetToStore({\n                result: action.result.data,\n                dataId: queryStoreValue.minimizedQuery.id,\n                selectionSet: queryStoreValue.minimizedQuery.selectionSet,\n                variables: queryStoreValue.variables,\n                store: clonedState,\n                dataIdFromObject: config.dataIdFromObject,\n                fragmentMap: queryStoreValue.fragmentMap,\n            });\n            return newState;\n        }\n    }\n    else if (actions_1.isMutationResultAction(constAction)) {\n        if (!constAction.result.errors) {\n            var queryStoreValue_1 = mutations[constAction.mutationId];\n            var clonedState = assign({}, previousState);\n            var newState_1 = writeToStore_1.writeSelectionSetToStore({\n                result: constAction.result.data,\n                dataId: queryStoreValue_1.mutation.id,\n                selectionSet: queryStoreValue_1.mutation.selectionSet,\n                variables: queryStoreValue_1.variables,\n                store: clonedState,\n                dataIdFromObject: config.dataIdFromObject,\n                fragmentMap: queryStoreValue_1.fragmentMap,\n            });\n            if (constAction.resultBehaviors) {\n                constAction.resultBehaviors.forEach(function (behavior) {\n                    var args = {\n                        behavior: behavior,\n                        result: constAction.result,\n                        variables: queryStoreValue_1.variables,\n                        fragmentMap: queryStoreValue_1.fragmentMap,\n                        selectionSet: queryStoreValue_1.mutation.selectionSet,\n                        config: config,\n                    };\n                    if (mutationResults_1.defaultMutationBehaviorReducers[behavior.type]) {\n                        newState_1 = mutationResults_1.defaultMutationBehaviorReducers[behavior.type](newState_1, args);\n                    }\n                    else if (config.mutationBehaviorReducers[behavior.type]) {\n                        newState_1 = config.mutationBehaviorReducers[behavior.type](newState_1, args);\n                    }\n                    else {\n                        throw new Error(\"No mutation result reducer defined for type \" + behavior.type);\n                    }\n                });\n            }\n            return newState_1;\n        }\n    }\n    else if (actions_1.isUpdateQueryResultAction(constAction)) {\n        return replaceQueryResults_1.replaceQueryResults(previousState, constAction, config);\n    }\n    else if (actions_1.isStoreResetAction(action)) {\n        return {};\n    }\n    return previousState;\n}\nexports.data = data;\n//# sourceMappingURL=store.js.map","\"use strict\";\nvar isArray = require('lodash.isarray');\nvar isNull = require('lodash.isnull');\nvar isUndefined = require('lodash.isundefined');\nvar isObject = require('lodash.isobject');\nvar assign = require('lodash.assign');\nvar getFromAST_1 = require('../queries/getFromAST');\nvar storeUtils_1 = require('./storeUtils');\nvar store_1 = require('./store');\nvar diffAgainstStore_1 = require('./diffAgainstStore');\nvar directives_1 = require('../queries/directives');\nvar errors_1 = require('../errors');\nfunction writeFragmentToStore(_a) {\n    var result = _a.result, fragment = _a.fragment, _b = _a.store, store = _b === void 0 ? {} : _b, variables = _a.variables, _c = _a.dataIdFromObject, dataIdFromObject = _c === void 0 ? null : _c;\n    if (!fragment) {\n        throw new Error('Must pass fragment.');\n    }\n    var parsedFragment = getFromAST_1.getFragmentDefinition(fragment);\n    var selectionSet = parsedFragment.selectionSet;\n    if (!result['id']) {\n        throw new Error('Result must have id when writing fragment to store.');\n    }\n    return writeSelectionSetToStore({\n        dataId: result['id'],\n        result: result,\n        selectionSet: selectionSet,\n        store: store,\n        variables: variables,\n        dataIdFromObject: dataIdFromObject,\n    });\n}\nexports.writeFragmentToStore = writeFragmentToStore;\nfunction writeQueryToStore(_a) {\n    var result = _a.result, query = _a.query, _b = _a.store, store = _b === void 0 ? {} : _b, variables = _a.variables, _c = _a.dataIdFromObject, dataIdFromObject = _c === void 0 ? null : _c, fragmentMap = _a.fragmentMap;\n    var queryDefinition = getFromAST_1.getQueryDefinition(query);\n    return writeSelectionSetToStore({\n        dataId: 'ROOT_QUERY',\n        result: result,\n        selectionSet: queryDefinition.selectionSet,\n        store: store,\n        variables: variables,\n        dataIdFromObject: dataIdFromObject,\n        fragmentMap: fragmentMap,\n    });\n}\nexports.writeQueryToStore = writeQueryToStore;\nfunction writeSelectionSetToStore(_a) {\n    var result = _a.result, dataId = _a.dataId, selectionSet = _a.selectionSet, _b = _a.store, store = _b === void 0 ? {} : _b, variables = _a.variables, dataIdFromObject = _a.dataIdFromObject, fragmentMap = _a.fragmentMap;\n    if (!fragmentMap) {\n        fragmentMap = {};\n    }\n    var fragmentErrors = {};\n    selectionSet.selections.forEach(function (selection) {\n        var included = directives_1.shouldInclude(selection, variables);\n        if (storeUtils_1.isField(selection)) {\n            var resultFieldKey = storeUtils_1.resultKeyNameFromField(selection);\n            var value = result[resultFieldKey];\n            if (isUndefined(value) && included) {\n                throw new errors_1.ApolloError({\n                    errorMessage: \"Can't find field \" + resultFieldKey + \" on result object \" + dataId + \".\",\n                    extraInfo: {\n                        isFieldError: true,\n                    },\n                });\n            }\n            if (!isUndefined(value) && !included) {\n                throw new errors_1.ApolloError({\n                    errorMessage: \"Found extra field \" + resultFieldKey + \" on result object \" + dataId + \".\",\n                    extraInfo: {\n                        isFieldError: true,\n                    },\n                });\n            }\n            if (!isUndefined(value)) {\n                writeFieldToStore({\n                    dataId: dataId,\n                    value: value,\n                    variables: variables,\n                    store: store,\n                    field: selection,\n                    dataIdFromObject: dataIdFromObject,\n                    fragmentMap: fragmentMap,\n                });\n            }\n        }\n        else if (storeUtils_1.isInlineFragment(selection)) {\n            var typename = selection.typeCondition.name.value;\n            if (included) {\n                try {\n                    writeSelectionSetToStore({\n                        result: result,\n                        selectionSet: selection.selectionSet,\n                        store: store,\n                        variables: variables,\n                        dataId: dataId,\n                        dataIdFromObject: dataIdFromObject,\n                        fragmentMap: fragmentMap,\n                    });\n                    if (!fragmentErrors[typename]) {\n                        fragmentErrors[typename] = null;\n                    }\n                }\n                catch (e) {\n                    if (e.extraInfo && e.extraInfo.isFieldError) {\n                        fragmentErrors[typename] = e;\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n        }\n        else {\n            var fragment = fragmentMap[selection.name.value];\n            if (!fragment) {\n                throw new Error(\"No fragment named \" + selection.name.value + \".\");\n            }\n            var typename = fragment.typeCondition.name.value;\n            if (included) {\n                try {\n                    writeSelectionSetToStore({\n                        result: result,\n                        selectionSet: fragment.selectionSet,\n                        store: store,\n                        variables: variables,\n                        dataId: dataId,\n                        dataIdFromObject: dataIdFromObject,\n                        fragmentMap: fragmentMap,\n                    });\n                    if (!fragmentErrors[typename]) {\n                        fragmentErrors[typename] = null;\n                    }\n                }\n                catch (e) {\n                    if (e.extraInfo && e.extraInfo.isFieldError) {\n                        fragmentErrors[typename] = e;\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n        }\n    });\n    diffAgainstStore_1.handleFragmentErrors(fragmentErrors);\n    return store;\n}\nexports.writeSelectionSetToStore = writeSelectionSetToStore;\nfunction isGeneratedId(id) {\n    return (id[0] === '$');\n}\nfunction mergeWithGenerated(generatedKey, realKey, cache) {\n    var generated = cache[generatedKey];\n    var real = cache[realKey];\n    Object.keys(generated).forEach(function (key) {\n        var value = generated[key];\n        var realValue = real[key];\n        if (store_1.isIdValue(value)\n            && isGeneratedId(value.id)\n            && store_1.isIdValue(realValue)) {\n            mergeWithGenerated(value.id, realValue.id, cache);\n        }\n        delete cache[generatedKey];\n        cache[realKey] = assign({}, generated, real);\n    });\n}\nfunction writeFieldToStore(_a) {\n    var field = _a.field, value = _a.value, variables = _a.variables, store = _a.store, dataId = _a.dataId, dataIdFromObject = _a.dataIdFromObject, fragmentMap = _a.fragmentMap;\n    var storeValue;\n    var storeFieldName = storeUtils_1.storeKeyNameFromField(field, variables);\n    var shouldMerge = false;\n    var generatedKey;\n    if ((!field.selectionSet || isNull(value)) && !isObject(value)) {\n        storeValue = value;\n    }\n    else if ((!field.selectionSet || isNull(value)) && isObject(value)) {\n        storeValue = {\n            type: 'json',\n            json: value,\n        };\n    }\n    else if (isArray(value)) {\n        var thisIdList_1 = [];\n        value.forEach(function (item, index) {\n            if (isNull(item)) {\n                thisIdList_1.push(null);\n            }\n            else {\n                var itemDataId = dataId + \".\" + storeFieldName + \".\" + index;\n                if (dataIdFromObject) {\n                    var semanticId = dataIdFromObject(item);\n                    if (semanticId) {\n                        itemDataId = semanticId;\n                    }\n                }\n                thisIdList_1.push(itemDataId);\n                writeSelectionSetToStore({\n                    dataId: itemDataId,\n                    result: item,\n                    store: store,\n                    selectionSet: field.selectionSet,\n                    variables: variables,\n                    dataIdFromObject: dataIdFromObject,\n                    fragmentMap: fragmentMap,\n                });\n            }\n        });\n        storeValue = thisIdList_1;\n    }\n    else {\n        var valueDataId = dataId + \".\" + storeFieldName;\n        var generated = true;\n        if (!isGeneratedId(valueDataId)) {\n            valueDataId = '$' + valueDataId;\n        }\n        if (dataIdFromObject) {\n            var semanticId = dataIdFromObject(value);\n            if (semanticId && isGeneratedId(semanticId)) {\n                throw new Error('IDs returned by dataIdFromObject cannot begin with the \"$\" character.');\n            }\n            if (semanticId) {\n                valueDataId = semanticId;\n                generated = false;\n            }\n        }\n        writeSelectionSetToStore({\n            dataId: valueDataId,\n            result: value,\n            store: store,\n            selectionSet: field.selectionSet,\n            variables: variables,\n            dataIdFromObject: dataIdFromObject,\n            fragmentMap: fragmentMap,\n        });\n        storeValue = {\n            type: 'id',\n            id: valueDataId,\n            generated: generated,\n        };\n        if (store[dataId] && store[dataId][storeFieldName] !== storeValue) {\n            var escapedId = store[dataId][storeFieldName];\n            if (store_1.isIdValue(storeValue) && storeValue.generated\n                && store_1.isIdValue(escapedId) && !escapedId.generated) {\n                throw new errors_1.ApolloError({\n                    errorMessage: \"Store error: the application attempted to write an object with no provided id\" +\n                        (\" but the store already contains an id of \" + escapedId.id + \" for this object.\"),\n                });\n            }\n            if (store_1.isIdValue(escapedId) && escapedId.generated) {\n                generatedKey = escapedId.id;\n                shouldMerge = true;\n            }\n        }\n    }\n    var newStoreObj = assign({}, store[dataId], (_b = {},\n        _b[storeFieldName] = storeValue,\n        _b\n    ));\n    if (shouldMerge) {\n        mergeWithGenerated(generatedKey, storeValue.id, store);\n    }\n    if (!store[dataId] || storeValue !== store[dataId][storeFieldName]) {\n        store[dataId] = newStoreObj;\n    }\n    var _b;\n}\n//# sourceMappingURL=writeToStore.js.map","\"use strict\";\nvar isArray = require('lodash.isarray');\nvar isNull = require('lodash.isnull');\nvar isObject = require('lodash.isobject');\nvar has = require('lodash.has');\nvar merge = require('lodash.merge');\nvar storeUtils_1 = require('./storeUtils');\nvar store_1 = require('./store');\nvar getFromAST_1 = require('../queries/getFromAST');\nvar directives_1 = require('../queries/directives');\nvar errors_1 = require('../errors');\nvar flatten = require('lodash.flatten');\nfunction diffQueryAgainstStore(_a) {\n    var store = _a.store, query = _a.query, variables = _a.variables;\n    var queryDef = getFromAST_1.getQueryDefinition(query);\n    return diffSelectionSetAgainstStore({\n        store: store,\n        rootId: 'ROOT_QUERY',\n        selectionSet: queryDef.selectionSet,\n        throwOnMissingField: false,\n        variables: variables,\n    });\n}\nexports.diffQueryAgainstStore = diffQueryAgainstStore;\nfunction diffFragmentAgainstStore(_a) {\n    var store = _a.store, fragment = _a.fragment, rootId = _a.rootId, variables = _a.variables;\n    var fragmentDef = getFromAST_1.getFragmentDefinition(fragment);\n    return diffSelectionSetAgainstStore({\n        store: store,\n        rootId: rootId,\n        selectionSet: fragmentDef.selectionSet,\n        throwOnMissingField: false,\n        variables: variables,\n    });\n}\nexports.diffFragmentAgainstStore = diffFragmentAgainstStore;\nfunction handleFragmentErrors(fragmentErrors) {\n    var typenames = Object.keys(fragmentErrors);\n    if (typenames.length === 0) {\n        return;\n    }\n    var errorTypes = typenames.filter(function (typename) {\n        return (fragmentErrors[typename] !== null);\n    });\n    if (errorTypes.length === Object.keys(fragmentErrors).length) {\n        throw fragmentErrors[errorTypes[0]];\n    }\n}\nexports.handleFragmentErrors = handleFragmentErrors;\nfunction diffSelectionSetAgainstStore(_a) {\n    var selectionSet = _a.selectionSet, store = _a.store, rootId = _a.rootId, _b = _a.throwOnMissingField, throwOnMissingField = _b === void 0 ? false : _b, variables = _a.variables, fragmentMap = _a.fragmentMap;\n    if (selectionSet.kind !== 'SelectionSet') {\n        throw new Error('Must be a selection set.');\n    }\n    if (!fragmentMap) {\n        fragmentMap = {};\n    }\n    var result = {};\n    var missingFields = [];\n    var fragmentErrors = {};\n    selectionSet.selections.forEach(function (selection) {\n        var missingFieldPushed = false;\n        var fieldResult;\n        var fieldIsMissing;\n        function pushMissingField(missingField) {\n            if (!missingFieldPushed) {\n                missingFields.push(missingField);\n                missingFieldPushed = true;\n            }\n        }\n        var included = directives_1.shouldInclude(selection, variables);\n        if (storeUtils_1.isField(selection)) {\n            var diffResult = diffFieldAgainstStore({\n                field: selection,\n                throwOnMissingField: throwOnMissingField,\n                variables: variables,\n                rootId: rootId,\n                store: store,\n                fragmentMap: fragmentMap,\n                included: included,\n            });\n            fieldIsMissing = diffResult.isMissing;\n            fieldResult = diffResult.result;\n            var resultFieldKey = storeUtils_1.resultKeyNameFromField(selection);\n            if (fieldIsMissing) {\n                pushMissingField(selection);\n            }\n            if (included && fieldResult !== undefined) {\n                result[resultFieldKey] = fieldResult;\n            }\n        }\n        else if (storeUtils_1.isInlineFragment(selection)) {\n            var typename = selection.typeCondition.name.value;\n            if (included) {\n                try {\n                    var diffResult = diffSelectionSetAgainstStore({\n                        selectionSet: selection.selectionSet,\n                        throwOnMissingField: throwOnMissingField,\n                        variables: variables,\n                        rootId: rootId,\n                        store: store,\n                        fragmentMap: fragmentMap,\n                    });\n                    fieldIsMissing = diffResult.isMissing;\n                    fieldResult = diffResult.result;\n                    if (fieldIsMissing) {\n                        pushMissingField(selection);\n                    }\n                    if (isObject(fieldResult)) {\n                        merge(result, fieldResult);\n                    }\n                    if (!fragmentErrors[typename]) {\n                        fragmentErrors[typename] = null;\n                    }\n                }\n                catch (e) {\n                    if (e.extraInfo && e.extraInfo.isFieldError) {\n                        fragmentErrors[typename] = e;\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n        }\n        else {\n            var fragment = fragmentMap[selection.name.value];\n            if (!fragment) {\n                throw new Error(\"No fragment named \" + selection.name.value);\n            }\n            var typename = fragment.typeCondition.name.value;\n            if (included) {\n                try {\n                    var diffResult = diffSelectionSetAgainstStore({\n                        selectionSet: fragment.selectionSet,\n                        throwOnMissingField: throwOnMissingField,\n                        variables: variables,\n                        rootId: rootId,\n                        store: store,\n                        fragmentMap: fragmentMap,\n                    });\n                    fieldIsMissing = diffResult.isMissing;\n                    fieldResult = diffResult.result;\n                    if (fieldIsMissing) {\n                        pushMissingField(selection);\n                    }\n                    if (isObject(fieldResult)) {\n                        merge(result, fieldResult);\n                    }\n                    if (!fragmentErrors[typename]) {\n                        fragmentErrors[typename] = null;\n                    }\n                }\n                catch (e) {\n                    if (e.extraInfo && e.extraInfo.isFieldError) {\n                        fragmentErrors[typename] = e;\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n        }\n    });\n    if (throwOnMissingField) {\n        handleFragmentErrors(fragmentErrors);\n    }\n    var isMissing;\n    var missingSelectionSets;\n    if (missingFields.length) {\n        if (rootId === 'ROOT_QUERY') {\n            var typeName = 'Query';\n            missingSelectionSets = [\n                {\n                    id: rootId,\n                    typeName: typeName,\n                    selectionSet: {\n                        kind: 'SelectionSet',\n                        selections: missingFields,\n                    },\n                },\n            ];\n        }\n        else {\n            isMissing = 'true';\n        }\n    }\n    return {\n        result: result,\n        isMissing: isMissing,\n        missingSelectionSets: missingSelectionSets,\n    };\n}\nexports.diffSelectionSetAgainstStore = diffSelectionSetAgainstStore;\nfunction diffFieldAgainstStore(_a) {\n    var field = _a.field, throwOnMissingField = _a.throwOnMissingField, variables = _a.variables, rootId = _a.rootId, store = _a.store, fragmentMap = _a.fragmentMap, _b = _a.included, included = _b === void 0 ? true : _b;\n    var storeObj = store[rootId] || {};\n    var storeFieldKey = storeUtils_1.storeKeyNameFromField(field, variables);\n    if (!has(storeObj, storeFieldKey)) {\n        if (throwOnMissingField && included) {\n            throw new errors_1.ApolloError({\n                errorMessage: \"Can't find field \" + storeFieldKey + \" on object (\" + rootId + \") \" + JSON.stringify(storeObj, null, 2) + \".\\nPerhaps you want to use the `returnPartialData` option?\",\n                extraInfo: {\n                    isFieldError: true,\n                },\n            });\n        }\n        return {\n            isMissing: 'true',\n        };\n    }\n    var storeValue = storeObj[storeFieldKey];\n    if (!field.selectionSet) {\n        if (store_1.isJsonValue(storeValue)) {\n            return {\n                result: storeValue.json,\n            };\n        }\n        else {\n            return {\n                result: storeValue,\n            };\n        }\n    }\n    if (isNull(storeValue)) {\n        return {\n            result: null,\n        };\n    }\n    if (isArray(storeValue)) {\n        var isMissing_1;\n        var result = storeValue.map(function (id) {\n            if (isNull(id)) {\n                return null;\n            }\n            var itemDiffResult = diffSelectionSetAgainstStore({\n                store: store,\n                throwOnMissingField: throwOnMissingField,\n                rootId: id,\n                selectionSet: field.selectionSet,\n                variables: variables,\n                fragmentMap: fragmentMap,\n            });\n            if (itemDiffResult.isMissing) {\n                isMissing_1 = 'true';\n            }\n            return itemDiffResult.result;\n        });\n        return {\n            result: result,\n            isMissing: isMissing_1,\n        };\n    }\n    if (store_1.isIdValue(storeValue)) {\n        var unescapedId = storeValue.id;\n        return diffSelectionSetAgainstStore({\n            store: store,\n            throwOnMissingField: throwOnMissingField,\n            rootId: unescapedId,\n            selectionSet: field.selectionSet,\n            variables: variables,\n            fragmentMap: fragmentMap,\n        });\n    }\n    throw new Error('Unexpected value in the store where the query had a subselection.');\n}\nfunction collectUsedVariablesFromSelectionSet(selectionSet) {\n    return uniq(flatten(selectionSet.selections.map(function (selection) {\n        if (storeUtils_1.isField(selection)) {\n            return collectUsedVariablesFromField(selection);\n        }\n        else if (storeUtils_1.isInlineFragment(selection)) {\n            return collectUsedVariablesFromSelectionSet(selection.selectionSet);\n        }\n        else {\n            return [];\n        }\n    })));\n}\nfunction collectUsedVariablesFromDirectives(directives) {\n    return flatten(directives.map(function (directive) {\n        if (directive.arguments) {\n            return flatten(directive.arguments.map(function (arg) {\n                if (arg.kind === 'Argument' && arg.value.kind === 'Variable') {\n                    return [arg.value.name.value];\n                }\n                return [];\n            }));\n        }\n        return [];\n    }));\n}\nfunction collectUsedVariablesFromField(field) {\n    var variables = [];\n    if (field.arguments) {\n        variables = flatten(field.arguments.map(function (arg) {\n            if (arg.value.kind === 'Variable') {\n                return [arg.value.name.value];\n            }\n            return [];\n        }));\n    }\n    if (field.selectionSet) {\n        variables = variables.concat(collectUsedVariablesFromSelectionSet(field.selectionSet));\n    }\n    if (field.directives) {\n        variables = variables.concat(collectUsedVariablesFromDirectives(field.directives));\n    }\n    return uniq(variables);\n}\nfunction removeUnusedVariablesFromQuery(query) {\n    var queryDef = getFromAST_1.getQueryDefinition(query);\n    var usedVariables = flatten(query.definitions.map(function (def) { return collectUsedVariablesFromSelectionSet(def.selectionSet); }));\n    if (!queryDef.variableDefinitions) {\n        return;\n    }\n    var diffedVariableDefinitions = queryDef.variableDefinitions.filter(function (variableDefinition) {\n        return usedVariables.indexOf(variableDefinition.variable.name.value) !== -1;\n    });\n    queryDef.variableDefinitions = diffedVariableDefinitions;\n}\nexports.removeUnusedVariablesFromQuery = removeUnusedVariablesFromQuery;\nfunction uniq(array) {\n    return array.filter(function (item, index, arr) {\n        return arr.indexOf(item) === index;\n    });\n}\n//# sourceMappingURL=diffAgainstStore.js.map","\"use strict\";\nvar mapValues = require('lodash.mapvalues');\nvar isArray = require('lodash.isarray');\nvar cloneDeep = require('lodash.clonedeep');\nvar assign = require('lodash.assign');\nvar replaceQueryResults_1 = require('./replaceQueryResults');\nvar writeToStore_1 = require('./writeToStore');\nvar scopeQuery_1 = require('./scopeQuery');\nfunction mutationResultArrayInsertReducer(state, _a) {\n    var behavior = _a.behavior, result = _a.result, variables = _a.variables, fragmentMap = _a.fragmentMap, selectionSet = _a.selectionSet, config = _a.config;\n    var _b = behavior, resultPath = _b.resultPath, storePath = _b.storePath, where = _b.where;\n    var scopedSelectionSet = scopeQuery_1.scopeSelectionSetToResultPath({\n        selectionSet: selectionSet,\n        fragmentMap: fragmentMap,\n        path: resultPath,\n    });\n    var scopedResult = scopeQuery_1.scopeJSONToResultPath({\n        json: result.data,\n        path: resultPath,\n    });\n    var dataId = config.dataIdFromObject(scopedResult) || generateMutationResultDataId();\n    state = writeToStore_1.writeSelectionSetToStore({\n        result: scopedResult,\n        dataId: dataId,\n        selectionSet: scopedSelectionSet,\n        store: state,\n        variables: variables,\n        dataIdFromObject: config.dataIdFromObject,\n        fragmentMap: fragmentMap,\n    });\n    var dataIdOfObj = storePath[0], restStorePath = storePath.slice(1);\n    var clonedObj = cloneDeep(state[dataIdOfObj]);\n    var array = scopeQuery_1.scopeJSONToResultPath({\n        json: clonedObj,\n        path: restStorePath,\n    });\n    if (where === 'PREPEND') {\n        array.unshift(dataId);\n    }\n    else if (where === 'APPEND') {\n        array.push(dataId);\n    }\n    else {\n        throw new Error('Unsupported \"where\" option to ARRAY_INSERT.');\n    }\n    return assign(state, (_c = {},\n        _c[dataIdOfObj] = clonedObj,\n        _c\n    ));\n    var _c;\n}\nvar currId = 0;\nfunction generateMutationResultDataId() {\n    currId++;\n    return \"ARRAY_INSERT-gen-id-\" + currId;\n}\nfunction mutationResultDeleteReducer(state, _a) {\n    var behavior = _a.behavior;\n    var dataId = behavior.dataId;\n    delete state[dataId];\n    var newState = mapValues(state, function (storeObj) {\n        return removeRefsFromStoreObj(storeObj, dataId);\n    });\n    return newState;\n}\nfunction removeRefsFromStoreObj(storeObj, dataId) {\n    var affected = false;\n    var cleanedObj = mapValues(storeObj, function (value) {\n        if (value === dataId) {\n            affected = true;\n            return null;\n        }\n        if (isArray(value)) {\n            var filteredArray = cleanArray(value, dataId);\n            if (filteredArray !== value) {\n                affected = true;\n                return filteredArray;\n            }\n        }\n        return value;\n    });\n    if (affected) {\n        return cleanedObj;\n    }\n    else {\n        return storeObj;\n    }\n}\nfunction cleanArray(originalArray, dataId) {\n    if (originalArray.length && isArray(originalArray[0])) {\n        var modified_1 = false;\n        var filteredArray = originalArray.map(function (nestedArray) {\n            var nestedFilteredArray = cleanArray(nestedArray, dataId);\n            if (nestedFilteredArray !== nestedArray) {\n                modified_1 = true;\n                return nestedFilteredArray;\n            }\n            return nestedArray;\n        });\n        if (!modified_1) {\n            return originalArray;\n        }\n        return filteredArray;\n    }\n    else {\n        var filteredArray = originalArray.filter(function (item) { return item !== dataId; });\n        if (filteredArray.length === originalArray.length) {\n            return originalArray;\n        }\n        return filteredArray;\n    }\n}\nexports.cleanArray = cleanArray;\nfunction mutationResultArrayDeleteReducer(state, _a) {\n    var behavior = _a.behavior;\n    var _b = behavior, dataId = _b.dataId, storePath = _b.storePath;\n    var dataIdOfObj = storePath[0], restStorePath = storePath.slice(1);\n    var clonedObj = cloneDeep(state[dataIdOfObj]);\n    var array = scopeQuery_1.scopeJSONToResultPath({\n        json: clonedObj,\n        path: restStorePath,\n    });\n    array.splice(array.indexOf(dataId), 1);\n    return assign(state, (_c = {},\n        _c[dataIdOfObj] = clonedObj,\n        _c\n    ));\n    var _c;\n}\nfunction mutationResultQueryResultReducer(state, _a) {\n    var behavior = _a.behavior, config = _a.config;\n    return replaceQueryResults_1.replaceQueryResults(state, behavior, config);\n}\nexports.mutationResultQueryResultReducer = mutationResultQueryResultReducer;\nexports.defaultMutationBehaviorReducers = {\n    'ARRAY_INSERT': mutationResultArrayInsertReducer,\n    'DELETE': mutationResultDeleteReducer,\n    'ARRAY_DELETE': mutationResultArrayDeleteReducer,\n    'QUERY_RESULT': mutationResultQueryResultReducer,\n};\n//# sourceMappingURL=mutationResults.js.map","\"use strict\";\nvar writeToStore_1 = require('./writeToStore');\nvar getFromAST_1 = require('../queries/getFromAST');\nvar assign = require('lodash.assign');\nfunction replaceQueryResults(state, _a, config) {\n    var queryVariables = _a.queryVariables, querySelectionSet = _a.querySelectionSet, queryFragments = _a.queryFragments, newResult = _a.newResult;\n    var clonedState = assign({}, state);\n    return writeToStore_1.writeSelectionSetToStore({\n        result: newResult,\n        dataId: 'ROOT_QUERY',\n        selectionSet: querySelectionSet,\n        variables: queryVariables,\n        store: clonedState,\n        dataIdFromObject: config.dataIdFromObject,\n        fragmentMap: getFromAST_1.createFragmentMap(queryFragments),\n    });\n}\nexports.replaceQueryResults = replaceQueryResults;\n//# sourceMappingURL=replaceQueryResults.js.map","\"use strict\";\nvar storeUtils_1 = require('./storeUtils');\nvar isNumber = require('lodash.isnumber');\nfunction scopeJSONToResultPath(_a) {\n    var json = _a.json, path = _a.path;\n    var current = json;\n    path.forEach(function (pathSegment) {\n        current = current[pathSegment];\n    });\n    return current;\n}\nexports.scopeJSONToResultPath = scopeJSONToResultPath;\nfunction scopeSelectionSetToResultPath(_a) {\n    var selectionSet = _a.selectionSet, fragmentMap = _a.fragmentMap, path = _a.path;\n    var currSelSet = selectionSet;\n    path\n        .filter(function (pathSegment) { return !isNumber(pathSegment); })\n        .forEach(function (pathSegment) {\n        currSelSet = followOnePathSegment(currSelSet, pathSegment, fragmentMap);\n    });\n    return currSelSet;\n}\nexports.scopeSelectionSetToResultPath = scopeSelectionSetToResultPath;\nfunction followOnePathSegment(currSelSet, pathSegment, fragmentMap) {\n    var matchingFields = getMatchingFields(currSelSet, pathSegment, fragmentMap);\n    if (matchingFields.length < 1) {\n        throw new Error(\"No matching field found in query for path segment: \" + pathSegment);\n    }\n    if (matchingFields.length > 1) {\n        throw new Error(\"Multiple fields found in query for path segment \\\"\" + pathSegment + \"\\\". Please file an issue on Apollo Client if you run into this situation.\");\n    }\n    return matchingFields[0].selectionSet;\n}\nfunction getMatchingFields(currSelSet, pathSegment, fragmentMap) {\n    var matching = [];\n    currSelSet.selections.forEach(function (selection) {\n        if (storeUtils_1.isField(selection)) {\n            if (storeUtils_1.resultKeyNameFromField(selection) === pathSegment) {\n                matching.push(selection);\n            }\n        }\n        else if (storeUtils_1.isInlineFragment(selection)) {\n            matching = matching.concat(getMatchingFields(selection.selectionSet, pathSegment, fragmentMap));\n        }\n        else {\n            var fragment = fragmentMap[selection.name.value];\n            matching = matching.concat(getMatchingFields(fragment.selectionSet, pathSegment, fragmentMap));\n        }\n    });\n    return matching;\n}\n//# sourceMappingURL=scopeQuery.js.map","\"use strict\";\nvar diffAgainstStore_1 = require('./diffAgainstStore');\nvar getFromAST_1 = require('../queries/getFromAST');\nfunction readQueryFromStore(_a) {\n    var store = _a.store, query = _a.query, variables = _a.variables, returnPartialData = _a.returnPartialData, fragmentMap = _a.fragmentMap;\n    var queryDef = getFromAST_1.getQueryDefinition(query);\n    return readSelectionSetFromStore({\n        store: store,\n        rootId: 'ROOT_QUERY',\n        selectionSet: queryDef.selectionSet,\n        variables: variables,\n        returnPartialData: returnPartialData,\n        fragmentMap: fragmentMap,\n    });\n}\nexports.readQueryFromStore = readQueryFromStore;\nfunction readFragmentFromStore(_a) {\n    var store = _a.store, fragment = _a.fragment, rootId = _a.rootId, variables = _a.variables, returnPartialData = _a.returnPartialData;\n    var fragmentDef = getFromAST_1.getFragmentDefinition(fragment);\n    return readSelectionSetFromStore({\n        store: store,\n        rootId: rootId,\n        selectionSet: fragmentDef.selectionSet,\n        variables: variables,\n        returnPartialData: returnPartialData,\n    });\n}\nexports.readFragmentFromStore = readFragmentFromStore;\nfunction readSelectionSetFromStore(_a) {\n    var store = _a.store, rootId = _a.rootId, selectionSet = _a.selectionSet, variables = _a.variables, _b = _a.returnPartialData, returnPartialData = _b === void 0 ? false : _b, fragmentMap = _a.fragmentMap;\n    var result = diffAgainstStore_1.diffSelectionSetAgainstStore({\n        selectionSet: selectionSet,\n        rootId: rootId,\n        store: store,\n        throwOnMissingField: !returnPartialData,\n        variables: variables,\n        fragmentMap: fragmentMap,\n    }).result;\n    return result;\n}\nexports.readSelectionSetFromStore = readSelectionSetFromStore;\n//# sourceMappingURL=readFromStore.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar networkInterface_1 = require('./networkInterface');\nrequire('whatwg-fetch');\nvar assign = require('lodash.assign');\nvar HTTPBatchedNetworkInterface = (function (_super) {\n    __extends(HTTPBatchedNetworkInterface, _super);\n    function HTTPBatchedNetworkInterface(uri, opts) {\n        _super.call(this, uri, opts);\n    }\n    ;\n    HTTPBatchedNetworkInterface.prototype.batchedFetchFromRemoteEndpoint = function (requestsAndOptions) {\n        var options = {};\n        requestsAndOptions.forEach(function (requestAndOptions) {\n            assign(options, requestAndOptions.options);\n        });\n        var printedRequests = requestsAndOptions.map(function (_a) {\n            var request = _a.request;\n            return networkInterface_1.printRequest(request);\n        });\n        return fetch(this._uri, assign({}, this._opts, options, {\n            body: JSON.stringify(printedRequests),\n            headers: assign({}, options.headers, {\n                Accept: '*/*',\n                'Content-Type': 'application/json',\n            }),\n            method: 'POST',\n        }));\n    };\n    ;\n    HTTPBatchedNetworkInterface.prototype.batchQuery = function (requests) {\n        var _this = this;\n        var options = assign({}, this._opts);\n        var middlewarePromises = [];\n        requests.forEach(function (request) {\n            middlewarePromises.push(_this.applyMiddlewares({\n                request: request,\n                options: options,\n            }));\n        });\n        return new Promise(function (resolve, reject) {\n            Promise.all(middlewarePromises).then(function (requestsAndOptions) {\n                return _this.batchedFetchFromRemoteEndpoint(requestsAndOptions)\n                    .then(function (result) {\n                    return result.json();\n                })\n                    .then(function (responses) {\n                    var afterwaresPromises = responses.map(function (response, index) {\n                        return _this.applyAfterwares({\n                            response: response,\n                            options: requestsAndOptions[index].options,\n                        });\n                    });\n                    Promise.all(afterwaresPromises).then(function (responsesAndOptions) {\n                        var results = [];\n                        responsesAndOptions.forEach(function (_a) {\n                            var response = _a.response;\n                            results.push(response);\n                        });\n                        resolve(results);\n                    }).catch(function (error) {\n                        reject(error);\n                    });\n                });\n            }).catch(function (error) {\n                reject(error);\n            });\n        });\n    };\n    return HTTPBatchedNetworkInterface;\n}(networkInterface_1.HTTPFetchNetworkInterface));\nexports.HTTPBatchedNetworkInterface = HTTPBatchedNetworkInterface;\n//# sourceMappingURL=batchedNetworkInterface.js.map","\"use strict\";\nvar redux_1 = require('redux');\nvar store_1 = require('./data/store');\nvar store_2 = require('./queries/store');\nvar store_3 = require('./mutations/store');\nvar store_4 = require('./optimistic-data/store');\nvar assign = require('lodash.assign');\nvar crashReporter = function (store) { return function (next) { return function (action) {\n    try {\n        return next(action);\n    }\n    catch (err) {\n        console.error('Caught an exception!', err);\n        console.error(err.stack);\n        throw err;\n    }\n}; }; };\nfunction createApolloReducer(config) {\n    return function apolloReducer(state, action) {\n        if (state === void 0) { state = {}; }\n        var newState = {\n            queries: store_2.queries(state.queries, action),\n            mutations: store_3.mutations(state.mutations, action),\n            data: store_1.data(state.data, action, state.queries, state.mutations, config),\n            optimistic: [],\n        };\n        newState.optimistic = store_4.optimistic(state.optimistic, action, newState, config);\n        return newState;\n    };\n}\nexports.createApolloReducer = createApolloReducer;\nfunction createApolloStore(_a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.reduxRootKey, reduxRootKey = _c === void 0 ? 'apollo' : _c, initialState = _b.initialState, _d = _b.config, config = _d === void 0 ? {} : _d, reportCrashes = _b.reportCrashes;\n    var enhancers = [];\n    if (reportCrashes === undefined) {\n        reportCrashes = true;\n    }\n    if (typeof window !== 'undefined') {\n        var anyWindow = window;\n        if (anyWindow.devToolsExtension) {\n            enhancers.push(anyWindow.devToolsExtension());\n        }\n    }\n    if (reportCrashes) {\n        enhancers.push(redux_1.applyMiddleware(crashReporter));\n    }\n    var compose = redux_1.compose;\n    return redux_1.createStore(redux_1.combineReducers((_e = {}, _e[reduxRootKey] = createApolloReducer(config), _e)), initialState, compose.apply(void 0, enhancers));\n    var _e;\n}\nexports.createApolloStore = createApolloStore;\nfunction getDataWithOptimisticResults(store) {\n    if (store.optimistic.length === 0) {\n        return store.data;\n    }\n    var patches = store.optimistic.map(function (opt) { return opt.data; });\n    return assign.apply(void 0, [{}, store.data].concat(patches));\n}\nexports.getDataWithOptimisticResults = getDataWithOptimisticResults;\n//# sourceMappingURL=store.js.map","\"use strict\";\nfunction isQueryResultAction(action) {\n    return action.type === 'APOLLO_QUERY_RESULT';\n}\nexports.isQueryResultAction = isQueryResultAction;\nfunction isQueryErrorAction(action) {\n    return action.type === 'APOLLO_QUERY_ERROR';\n}\nexports.isQueryErrorAction = isQueryErrorAction;\nfunction isQueryInitAction(action) {\n    return action.type === 'APOLLO_QUERY_INIT';\n}\nexports.isQueryInitAction = isQueryInitAction;\nfunction isQueryResultClientAction(action) {\n    return action.type === 'APOLLO_QUERY_RESULT_CLIENT';\n}\nexports.isQueryResultClientAction = isQueryResultClientAction;\nfunction isQueryStopAction(action) {\n    return action.type === 'APOLLO_QUERY_STOP';\n}\nexports.isQueryStopAction = isQueryStopAction;\nfunction isMutationInitAction(action) {\n    return action.type === 'APOLLO_MUTATION_INIT';\n}\nexports.isMutationInitAction = isMutationInitAction;\nfunction isMutationResultAction(action) {\n    return action.type === 'APOLLO_MUTATION_RESULT';\n}\nexports.isMutationResultAction = isMutationResultAction;\n;\nfunction isMutationErrorAction(action) {\n    return action.type === 'APOLLO_MUTATION_ERROR';\n}\nexports.isMutationErrorAction = isMutationErrorAction;\nfunction isUpdateQueryResultAction(action) {\n    return action.type === 'APOLLO_UPDATE_QUERY_RESULT';\n}\nexports.isUpdateQueryResultAction = isUpdateQueryResultAction;\nfunction isStoreResetAction(action) {\n    return action.type === 'APOLLO_STORE_RESET';\n}\nexports.isStoreResetAction = isStoreResetAction;\n//# sourceMappingURL=actions.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ApolloError = (function (_super) {\n    __extends(ApolloError, _super);\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        _super.call(this, errorMessage);\n        this.graphQLErrors = graphQLErrors;\n        this.networkError = networkError;\n        this.stack = new Error().stack;\n        if (!errorMessage) {\n            this.generateErrorMessage();\n        }\n        else {\n            this.message = errorMessage;\n        }\n        this.extraInfo = extraInfo;\n    }\n    ApolloError.prototype.generateErrorMessage = function () {\n        if (typeof this.message !== 'undefined' &&\n            this.message !== '') {\n            return;\n        }\n        var message = '';\n        if (Array.isArray(this.graphQLErrors) && this.graphQLErrors.length !== 0) {\n            this.graphQLErrors.forEach(function (graphQLError) {\n                message += 'GraphQL error: ' + graphQLError.message + '\\n';\n            });\n        }\n        if (this.networkError) {\n            message += 'Network error: ' + this.networkError.message + '\\n';\n        }\n        message = message.replace(/\\n$/, '');\n        this.message = message;\n    };\n    return ApolloError;\n}(Error));\nexports.ApolloError = ApolloError;\n//# sourceMappingURL=errors.js.map","\"use strict\";\nvar actions_1 = require('../actions');\nvar assign = require('lodash.assign');\nfunction mutations(previousState, action) {\n    if (previousState === void 0) { previousState = {}; }\n    if (actions_1.isMutationInitAction(action)) {\n        var newState = assign({}, previousState);\n        newState[action.mutationId] = {\n            mutationString: action.mutationString,\n            mutation: action.mutation,\n            variables: action.variables,\n            loading: true,\n            error: null,\n            fragmentMap: action.fragmentMap,\n        };\n        return newState;\n    }\n    else if (actions_1.isMutationResultAction(action)) {\n        var newState = assign({}, previousState);\n        newState[action.mutationId] = assign({}, previousState[action.mutationId], {\n            loading: false,\n            error: null,\n        });\n        return newState;\n    }\n    else if (actions_1.isMutationErrorAction(action)) {\n        var newState = assign({}, previousState);\n        newState[action.mutationId] = assign({}, previousState[action.mutationId], {\n            loading: false,\n            error: action.error,\n        });\n    }\n    else if (actions_1.isStoreResetAction(action)) {\n        return {};\n    }\n    return previousState;\n}\nexports.mutations = mutations;\n//# sourceMappingURL=store.js.map","\"use strict\";\nvar actions_1 = require('../actions');\nvar store_1 = require('../data/store');\nvar store_2 = require('../store');\nvar assign = require('lodash.assign');\nvar pick = require('lodash.pick');\nvar optimisticDefaultState = [];\nfunction optimistic(previousState, action, store, config) {\n    if (previousState === void 0) { previousState = optimisticDefaultState; }\n    if (actions_1.isMutationInitAction(action) && action.optimisticResponse) {\n        var fakeMutationResultAction = {\n            type: 'APOLLO_MUTATION_RESULT',\n            result: { data: action.optimisticResponse },\n            mutationId: action.mutationId,\n            resultBehaviors: action.resultBehaviors,\n        };\n        var fakeStore = assign({}, store, { optimistic: previousState });\n        var optimisticData_1 = store_2.getDataWithOptimisticResults(fakeStore);\n        var fakeDataResultState_1 = store_1.data(optimisticData_1, fakeMutationResultAction, store.queries, store.mutations, config);\n        var changedKeys = Object.keys(fakeDataResultState_1).filter(function (key) { return optimisticData_1[key] !== fakeDataResultState_1[key]; });\n        var patch = pick(fakeDataResultState_1, changedKeys);\n        var optimisticState = {\n            data: patch,\n            mutationId: action.mutationId,\n        };\n        var newState = previousState.concat([optimisticState]);\n        return newState;\n    }\n    else if ((actions_1.isMutationErrorAction(action) || actions_1.isMutationResultAction(action))\n        && previousState.some(function (change) { return change.mutationId === action.mutationId; })) {\n        var newState = previousState.filter(function (change) { return change.mutationId !== action.mutationId; });\n        return newState;\n    }\n    return previousState;\n}\nexports.optimistic = optimistic;\n//# sourceMappingURL=store.js.map","\"use strict\";\nvar forOwn = require('lodash.forown');\nvar isEqual = require('lodash.isequal');\nvar store_1 = require('./store');\nvar getFromAST_1 = require('./queries/getFromAST');\nvar queryTransform_1 = require('./queries/queryTransform');\nvar printer_1 = require('graphql-tag/printer');\nvar readFromStore_1 = require('./data/readFromStore');\nvar diffAgainstStore_1 = require('./data/diffAgainstStore');\nvar queryPrinting_1 = require('./queryPrinting');\nvar batching_1 = require('./batching');\nvar scheduler_1 = require('./scheduler');\nvar Observable_1 = require('./util/Observable');\nvar errorHandling_1 = require('./util/errorHandling');\nvar errors_1 = require('./errors');\nvar ObservableQuery_1 = require('./ObservableQuery');\n;\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var _this = this;\n        var networkInterface = _a.networkInterface, store = _a.store, reduxRootSelector = _a.reduxRootSelector, queryTransformer = _a.queryTransformer, resultTransformer = _a.resultTransformer, resultComparator = _a.resultComparator, _b = _a.shouldBatch, shouldBatch = _b === void 0 ? false : _b, _c = _a.batchInterval, batchInterval = _c === void 0 ? 10 : _c;\n        this.idCounter = 0;\n        this.networkInterface = networkInterface;\n        this.store = store;\n        this.reduxRootSelector = reduxRootSelector;\n        this.queryTransformer = queryTransformer;\n        this.resultTransformer = resultTransformer;\n        this.resultComparator = resultComparator;\n        this.pollingTimers = {};\n        this.batchInterval = batchInterval;\n        this.queryListeners = {};\n        this.scheduler = new scheduler_1.QueryScheduler({\n            queryManager: this,\n        });\n        this.batcher = new batching_1.QueryBatcher({\n            shouldBatch: shouldBatch,\n            networkInterface: this.networkInterface,\n        });\n        this.batcher.start(this.batchInterval);\n        this.fetchQueryPromises = {};\n        this.observableQueries = {};\n        this.queryIdsByName = {};\n        if (this.store['subscribe']) {\n            var currentStoreData_1;\n            this.store['subscribe'](function () {\n                var previousStoreData = currentStoreData_1 || {};\n                var previousStoreHasData = Object.keys(previousStoreData).length;\n                currentStoreData_1 = _this.getApolloState();\n                if (isEqual(previousStoreData, currentStoreData_1) && previousStoreHasData) {\n                    return;\n                }\n                _this.broadcastQueries();\n            });\n        }\n    }\n    QueryManager.prototype.broadcastNewStore = function (store) {\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var _this = this;\n        var mutation = _a.mutation, variables = _a.variables, _b = _a.resultBehaviors, resultBehaviors = _b === void 0 ? [] : _b, _c = _a.fragments, fragments = _c === void 0 ? [] : _c, optimisticResponse = _a.optimisticResponse, updateQueries = _a.updateQueries, _d = _a.refetchQueries, refetchQueries = _d === void 0 ? [] : _d;\n        var mutationId = this.generateQueryId();\n        mutation = getFromAST_1.addFragmentsToDocument(mutation, fragments);\n        if (this.queryTransformer) {\n            mutation = queryTransform_1.applyTransformers(mutation, [this.queryTransformer]);\n        }\n        var mutationDef = getFromAST_1.getMutationDefinition(mutation);\n        var mutationString = printer_1.print(mutation);\n        var queryFragmentMap = getFromAST_1.createFragmentMap(getFromAST_1.getFragmentDefinitions(mutation));\n        var request = {\n            query: mutation,\n            variables: variables,\n            operationName: getFromAST_1.getOperationName(mutation),\n        };\n        var updateQueriesResultBehaviors = !optimisticResponse ? [] :\n            this.collectResultBehaviorsFromUpdateQueries(updateQueries, { data: optimisticResponse }, true);\n        this.store.dispatch({\n            type: 'APOLLO_MUTATION_INIT',\n            mutationString: mutationString,\n            mutation: {\n                id: 'ROOT_MUTATION',\n                typeName: 'Mutation',\n                selectionSet: mutationDef.selectionSet,\n            },\n            variables: variables,\n            mutationId: mutationId,\n            fragmentMap: queryFragmentMap,\n            optimisticResponse: optimisticResponse,\n            resultBehaviors: resultBehaviors.concat(updateQueriesResultBehaviors),\n        });\n        return new Promise(function (resolve, reject) {\n            _this.networkInterface.query(request)\n                .then(function (result) {\n                if (result.errors) {\n                    reject(new errors_1.ApolloError({\n                        graphQLErrors: result.errors,\n                    }));\n                }\n                _this.store.dispatch({\n                    type: 'APOLLO_MUTATION_RESULT',\n                    result: result,\n                    mutationId: mutationId,\n                    resultBehaviors: resultBehaviors.concat(_this.collectResultBehaviorsFromUpdateQueries(updateQueries, result)),\n                });\n                refetchQueries.forEach(function (name) { _this.refetchQueryByName(name); });\n                resolve(_this.transformResult(result));\n            })\n                .catch(function (err) {\n                _this.store.dispatch({\n                    type: 'APOLLO_MUTATION_ERROR',\n                    error: err,\n                    mutationId: mutationId,\n                });\n                reject(new errors_1.ApolloError({\n                    networkError: err,\n                }));\n            });\n        });\n    };\n    QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n        var _this = this;\n        var lastResult;\n        return function (queryStoreValue) {\n            if (!queryStoreValue) {\n                return;\n            }\n            var shouldNotifyIfLoading = queryStoreValue.returnPartialData\n                || queryStoreValue.previousVariables;\n            if (!queryStoreValue.loading || shouldNotifyIfLoading) {\n                if (queryStoreValue.graphQLErrors || queryStoreValue.networkError) {\n                    var apolloError = new errors_1.ApolloError({\n                        graphQLErrors: queryStoreValue.graphQLErrors,\n                        networkError: queryStoreValue.networkError,\n                    });\n                    if (observer.error) {\n                        observer.error(apolloError);\n                    }\n                    else {\n                        console.error('Unhandled error', apolloError, apolloError.stack);\n                    }\n                }\n                else {\n                    try {\n                        var resultFromStore = {\n                            data: readFromStore_1.readSelectionSetFromStore({\n                                store: _this.getDataWithOptimisticResults(),\n                                rootId: queryStoreValue.query.id,\n                                selectionSet: queryStoreValue.query.selectionSet,\n                                variables: queryStoreValue.previousVariables || queryStoreValue.variables,\n                                returnPartialData: options.returnPartialData || options.noFetch,\n                                fragmentMap: queryStoreValue.fragmentMap,\n                            }),\n                            loading: queryStoreValue.loading,\n                        };\n                        if (observer.next) {\n                            if (_this.isDifferentResult(lastResult, resultFromStore)) {\n                                lastResult = resultFromStore;\n                                observer.next(_this.transformResult(resultFromStore));\n                            }\n                        }\n                    }\n                    catch (error) {\n                        if (observer.error) {\n                            observer.error(error);\n                        }\n                    }\n                }\n            }\n        };\n    };\n    QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n        if (shouldSubscribe === void 0) { shouldSubscribe = true; }\n        getFromAST_1.getQueryDefinition(options.query);\n        var observableQuery = new ObservableQuery_1.ObservableQuery({\n            scheduler: this.scheduler,\n            options: options,\n            shouldSubscribe: shouldSubscribe,\n        });\n        return observableQuery;\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        if (options.returnPartialData) {\n            throw new Error('returnPartialData option only supported on watchQuery.');\n        }\n        if (options.query.kind !== 'Document') {\n            throw new Error('You must wrap the query string in a \"gql\" tag.');\n        }\n        var requestId = this.idCounter;\n        var resPromise = new Promise(function (resolve, reject) {\n            _this.addFetchQueryPromise(requestId, resPromise, resolve, reject);\n            return _this.watchQuery(options, false).result().then(function (result) {\n                _this.removeFetchQueryPromise(requestId);\n                resolve(result);\n            }).catch(function (error) {\n                _this.removeFetchQueryPromise(requestId);\n                reject(error);\n            });\n        });\n        return resPromise;\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options) {\n        return this.fetchQueryOverInterface(queryId, options);\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        var queryId = this.idCounter.toString();\n        this.idCounter++;\n        return queryId;\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.store.dispatch({\n            type: 'APOLLO_QUERY_STOP',\n            queryId: queryId,\n        });\n    };\n    ;\n    QueryManager.prototype.getApolloState = function () {\n        return this.reduxRootSelector(this.store.getState());\n    };\n    QueryManager.prototype.getDataWithOptimisticResults = function () {\n        return store_1.getDataWithOptimisticResults(this.getApolloState());\n    };\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {\n        this.queryListeners[queryId] = this.queryListeners[queryId] || [];\n        this.queryListeners[queryId].push(listener);\n    };\n    QueryManager.prototype.addFetchQueryPromise = function (requestId, promise, resolve, reject) {\n        this.fetchQueryPromises[requestId.toString()] = { promise: promise, resolve: resolve, reject: reject };\n    };\n    QueryManager.prototype.removeFetchQueryPromise = function (requestId) {\n        delete this.fetchQueryPromises[requestId.toString()];\n    };\n    QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n        this.observableQueries[queryId] = { observableQuery: observableQuery, subscriptions: [] };\n        var queryDef = getFromAST_1.getQueryDefinition(observableQuery.options.query);\n        if (queryDef.name && queryDef.name.value) {\n            var queryName = getFromAST_1.getQueryDefinition(observableQuery.options.query).name.value;\n            this.queryIdsByName[queryName] = this.queryIdsByName[queryName] || [];\n            this.queryIdsByName[queryName].push(observableQuery.queryId);\n        }\n    };\n    QueryManager.prototype.addQuerySubscription = function (queryId, querySubscription) {\n        if (this.observableQueries.hasOwnProperty(queryId)) {\n            this.observableQueries[queryId].subscriptions.push(querySubscription);\n        }\n        else {\n            this.observableQueries[queryId] = {\n                observableQuery: null,\n                subscriptions: [querySubscription],\n            };\n        }\n    };\n    QueryManager.prototype.removeObservableQuery = function (queryId) {\n        var observableQuery = this.observableQueries[queryId].observableQuery;\n        var queryName = getFromAST_1.getQueryDefinition(observableQuery.options.query).name.value;\n        delete this.observableQueries[queryId];\n        this.queryIdsByName[queryName] = this.queryIdsByName[queryName].filter(function (val) {\n            return !(observableQuery.queryId === val);\n        });\n    };\n    QueryManager.prototype.resetStore = function () {\n        var _this = this;\n        Object.keys(this.fetchQueryPromises).forEach(function (key) {\n            var reject = _this.fetchQueryPromises[key].reject;\n            reject(new Error('Store reset while query was in flight.'));\n        });\n        this.store.dispatch({\n            type: 'APOLLO_STORE_RESET',\n            observableQueryIds: Object.keys(this.observableQueries),\n        });\n        Object.keys(this.observableQueries).forEach(function (queryId) {\n            if (!_this.observableQueries[queryId].observableQuery.options.noFetch) {\n                _this.observableQueries[queryId].observableQuery.refetch();\n            }\n        });\n    };\n    QueryManager.prototype.startQuery = function (queryId, options, listener) {\n        this.addQueryListener(queryId, listener);\n        if (!options.pollInterval) {\n            this.fetchQuery(queryId, options);\n        }\n        return queryId;\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (options) {\n        var _this = this;\n        var query = options.query, variables = options.variables, _a = options.fragments, fragments = _a === void 0 ? [] : _a;\n        var queryDoc = getFromAST_1.addFragmentsToDocument(query, fragments);\n        if (this.queryTransformer) {\n            queryDoc = queryTransform_1.applyTransformers(queryDoc, [this.queryTransformer]);\n        }\n        var request = {\n            query: queryDoc,\n            variables: variables,\n            operationName: getFromAST_1.getOperationName(queryDoc),\n        };\n        var subId;\n        var observers = [];\n        return new Observable_1.Observable(function (observer) {\n            observers.push(observer);\n            if (observers.length === 1) {\n                var handler = function (error, result) {\n                    if (error) {\n                        observers.forEach(function (obs) {\n                            obs.error(error);\n                        });\n                    }\n                    else {\n                        observers.forEach(function (obs) {\n                            obs.next(result);\n                        });\n                    }\n                };\n                subId = _this.networkInterface.subscribe(request, handler);\n            }\n            return {\n                unsubscribe: function () {\n                    observers = observers.filter(function (obs) { return obs !== observer; });\n                    if (observers.length === 0) {\n                        _this.networkInterface.unsubscribe(subId);\n                    }\n                },\n                _networkSubscriptionId: subId,\n            };\n        });\n    };\n    ;\n    QueryManager.prototype.stopQuery = function (queryId) {\n        delete this.queryListeners[queryId];\n        this.stopQueryInStore(queryId);\n    };\n    QueryManager.prototype.getCurrentQueryResult = function (observableQuery, isOptimistic) {\n        if (isOptimistic === void 0) { isOptimistic = false; }\n        var _a = this.getQueryParts(observableQuery), queryVariables = _a.queryVariables, querySelectionSet = _a.querySelectionSet, queryFragments = _a.queryFragments;\n        var queryOptions = observableQuery.options;\n        var readOptions = {\n            store: isOptimistic ? this.getDataWithOptimisticResults() : this.getApolloState().data,\n            rootId: 'ROOT_QUERY',\n            selectionSet: querySelectionSet,\n            variables: queryVariables,\n            fragmentMap: getFromAST_1.createFragmentMap(queryFragments || []),\n            returnPartialData: false,\n        };\n        try {\n            var data = readFromStore_1.readSelectionSetFromStore(readOptions);\n            return { data: data, partial: false };\n        }\n        catch (e) {\n            if (queryOptions.returnPartialData || queryOptions.noFetch) {\n                try {\n                    readOptions.returnPartialData = true;\n                    var data = readFromStore_1.readSelectionSetFromStore(readOptions);\n                    return { data: data, partial: true };\n                }\n                catch (e) {\n                }\n            }\n            return { data: {}, partial: true };\n        }\n    };\n    QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable, isOptimistic) {\n        if (isOptimistic === void 0) { isOptimistic = false; }\n        var observableQuery;\n        if (typeof queryIdOrObservable === 'string') {\n            if (!this.observableQueries[queryIdOrObservable]) {\n                throw new Error(\"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n            }\n            observableQuery = this.observableQueries[queryIdOrObservable].observableQuery;\n        }\n        else {\n            observableQuery = queryIdOrObservable;\n        }\n        var _a = this.getQueryParts(observableQuery), queryVariables = _a.queryVariables, querySelectionSet = _a.querySelectionSet, queryFragments = _a.queryFragments;\n        var data = this.getCurrentQueryResult(observableQuery, isOptimistic).data;\n        return {\n            previousResult: data,\n            queryVariables: queryVariables,\n            querySelectionSet: querySelectionSet,\n            queryFragments: queryFragments,\n        };\n    };\n    QueryManager.prototype.transformResult = function (result) {\n        if (!this.resultTransformer) {\n            return result;\n        }\n        else {\n            return this.resultTransformer(result);\n        }\n    };\n    QueryManager.prototype.getQueryParts = function (observableQuery) {\n        var queryOptions = observableQuery.options;\n        var fragments = queryOptions.fragments;\n        var queryDefinition = getFromAST_1.getQueryDefinition(queryOptions.query);\n        if (this.queryTransformer) {\n            var doc = {\n                kind: 'Document',\n                definitions: [\n                    queryDefinition\n                ].concat((fragments || [])),\n            };\n            var transformedDoc = queryTransform_1.applyTransformers(doc, [this.queryTransformer]);\n            queryDefinition = getFromAST_1.getQueryDefinition(transformedDoc);\n            fragments = getFromAST_1.getFragmentDefinitions(transformedDoc);\n        }\n        return {\n            queryVariables: queryOptions.variables,\n            querySelectionSet: queryDefinition.selectionSet,\n            queryFragments: fragments,\n        };\n    };\n    QueryManager.prototype.collectResultBehaviorsFromUpdateQueries = function (updateQueries, mutationResult, isOptimistic) {\n        var _this = this;\n        if (isOptimistic === void 0) { isOptimistic = false; }\n        if (!updateQueries) {\n            return [];\n        }\n        var resultBehaviors = [];\n        Object.keys(updateQueries).forEach(function (queryName) {\n            var reducer = updateQueries[queryName];\n            var queryIds = _this.queryIdsByName[queryName];\n            if (!queryIds) {\n                return;\n            }\n            queryIds.forEach(function (queryId) {\n                var _a = _this.getQueryWithPreviousResult(queryId, isOptimistic), previousResult = _a.previousResult, queryVariables = _a.queryVariables, querySelectionSet = _a.querySelectionSet, queryFragments = _a.queryFragments;\n                var newResult = errorHandling_1.tryFunctionOrLogError(function () { return reducer(previousResult, {\n                    mutationResult: mutationResult,\n                    queryName: queryName,\n                    queryVariables: queryVariables,\n                }); });\n                if (newResult) {\n                    resultBehaviors.push({\n                        type: 'QUERY_RESULT',\n                        newResult: newResult,\n                        queryVariables: queryVariables,\n                        querySelectionSet: querySelectionSet,\n                        queryFragments: queryFragments,\n                    });\n                }\n            });\n        });\n        return resultBehaviors;\n    };\n    QueryManager.prototype.transformQueryDocument = function (options) {\n        var query = options.query, _a = options.fragments, fragments = _a === void 0 ? [] : _a;\n        var queryDoc = getFromAST_1.addFragmentsToDocument(query, fragments);\n        if (this.queryTransformer) {\n            queryDoc = queryTransform_1.applyTransformers(queryDoc, [this.queryTransformer]);\n        }\n        return {\n            queryDoc: queryDoc,\n            fragmentMap: getFromAST_1.createFragmentMap(getFromAST_1.getFragmentDefinitions(queryDoc)),\n        };\n    };\n    QueryManager.prototype.handleDiffQuery = function (_a) {\n        var queryDef = _a.queryDef, rootId = _a.rootId, variables = _a.variables, fragmentMap = _a.fragmentMap, noFetch = _a.noFetch;\n        var _b = diffAgainstStore_1.diffSelectionSetAgainstStore({\n            selectionSet: queryDef.selectionSet,\n            store: this.reduxRootSelector(this.store.getState()).data,\n            throwOnMissingField: false,\n            rootId: rootId,\n            variables: variables,\n            fragmentMap: fragmentMap,\n        }), missingSelectionSets = _b.missingSelectionSets, result = _b.result;\n        var initialResult = result;\n        var diffedQuery;\n        if (missingSelectionSets && missingSelectionSets.length && !noFetch) {\n            diffedQuery = queryPrinting_1.queryDocument({\n                missingSelectionSets: missingSelectionSets,\n                variableDefinitions: queryDef.variableDefinitions,\n                name: queryDef.name,\n                fragmentMap: fragmentMap,\n            });\n            diffAgainstStore_1.removeUnusedVariablesFromQuery(diffedQuery);\n        }\n        return {\n            diffedQuery: diffedQuery,\n            initialResult: initialResult,\n        };\n    };\n    QueryManager.prototype.fetchRequest = function (_a) {\n        var _this = this;\n        var requestId = _a.requestId, queryId = _a.queryId, query = _a.query, querySS = _a.querySS, options = _a.options, fragmentMap = _a.fragmentMap;\n        var variables = options.variables, noFetch = options.noFetch, returnPartialData = options.returnPartialData;\n        var request = {\n            query: query,\n            variables: variables,\n            operationName: getFromAST_1.getOperationName(query),\n        };\n        var fetchRequest = {\n            options: { query: query, variables: variables },\n            queryId: queryId,\n            operationName: request.operationName,\n        };\n        var retPromise = new Promise(function (resolve, reject) {\n            _this.addFetchQueryPromise(requestId, retPromise, resolve, reject);\n            return _this.batcher.enqueueRequest(fetchRequest)\n                .then(function (result) {\n                _this.store.dispatch({\n                    type: 'APOLLO_QUERY_RESULT',\n                    result: result,\n                    queryId: queryId,\n                    requestId: requestId,\n                });\n                _this.removeFetchQueryPromise(requestId);\n                return result;\n            }).then(function () {\n                var resultFromStore;\n                try {\n                    resultFromStore = readFromStore_1.readSelectionSetFromStore({\n                        store: _this.getApolloState().data,\n                        rootId: querySS.id,\n                        selectionSet: querySS.selectionSet,\n                        variables: variables,\n                        returnPartialData: returnPartialData || noFetch,\n                        fragmentMap: fragmentMap,\n                    });\n                }\n                catch (e) { }\n                _this.removeFetchQueryPromise(requestId);\n                resolve({ data: resultFromStore, loading: false });\n            }).catch(function (error) {\n                _this.store.dispatch({\n                    type: 'APOLLO_QUERY_ERROR',\n                    error: error,\n                    queryId: queryId,\n                    requestId: requestId,\n                });\n                _this.removeFetchQueryPromise(requestId);\n            });\n        });\n        return retPromise;\n    };\n    QueryManager.prototype.fetchQueryOverInterface = function (queryId, options) {\n        var variables = options.variables, _a = options.forceFetch, forceFetch = _a === void 0 ? false : _a, _b = options.returnPartialData, returnPartialData = _b === void 0 ? false : _b, _c = options.noFetch, noFetch = _c === void 0 ? false : _c;\n        var _d = this.transformQueryDocument(options), queryDoc = _d.queryDoc, fragmentMap = _d.fragmentMap;\n        var queryDef = getFromAST_1.getQueryDefinition(queryDoc);\n        var queryString = printer_1.print(queryDoc);\n        var querySS = {\n            id: 'ROOT_QUERY',\n            typeName: 'Query',\n            selectionSet: queryDef.selectionSet,\n        };\n        var minimizedQueryString = queryString;\n        var minimizedQuery = querySS;\n        var minimizedQueryDoc = queryDoc;\n        var storeResult;\n        if (!forceFetch) {\n            var _e = this.handleDiffQuery({\n                queryDef: queryDef,\n                rootId: querySS.id,\n                variables: variables,\n                fragmentMap: fragmentMap,\n                noFetch: noFetch,\n            }), diffedQuery = _e.diffedQuery, initialResult = _e.initialResult;\n            storeResult = initialResult;\n            if (diffedQuery) {\n                minimizedQueryDoc = diffedQuery;\n                minimizedQueryString = printer_1.print(minimizedQueryDoc);\n                minimizedQuery = {\n                    id: querySS.id,\n                    typeName: 'Query',\n                    selectionSet: getFromAST_1.getQueryDefinition(diffedQuery).selectionSet,\n                };\n            }\n            else {\n                minimizedQueryDoc = null;\n                minimizedQueryString = null;\n                minimizedQuery = null;\n            }\n        }\n        var requestId = this.generateRequestId();\n        var shouldFetch = minimizedQuery && !noFetch;\n        this.store.dispatch({\n            type: 'APOLLO_QUERY_INIT',\n            queryString: queryString,\n            query: querySS,\n            minimizedQueryString: minimizedQueryString,\n            minimizedQuery: minimizedQuery,\n            variables: variables,\n            forceFetch: forceFetch,\n            returnPartialData: returnPartialData || noFetch,\n            queryId: queryId,\n            requestId: requestId,\n            fragmentMap: fragmentMap,\n            storePreviousVariables: shouldFetch,\n        });\n        if (!shouldFetch || returnPartialData) {\n            this.store.dispatch({\n                type: 'APOLLO_QUERY_RESULT_CLIENT',\n                result: { data: storeResult },\n                variables: variables,\n                query: querySS,\n                complete: !!minimizedQuery,\n                queryId: queryId,\n            });\n        }\n        if (shouldFetch) {\n            return this.fetchRequest({\n                requestId: requestId,\n                queryId: queryId,\n                query: minimizedQueryDoc,\n                querySS: minimizedQuery,\n                options: options,\n                fragmentMap: fragmentMap,\n            });\n        }\n        return Promise.resolve({ data: storeResult });\n    };\n    QueryManager.prototype.refetchQueryByName = function (queryName) {\n        var _this = this;\n        var refetchedQueries = this.queryIdsByName[queryName];\n        if (refetchedQueries === undefined) {\n            console.warn(\"Warning: unknown query with name \" + queryName + \" asked to refetch\");\n        }\n        else {\n            refetchedQueries.forEach(function (queryId) {\n                _this.observableQueries[queryId].observableQuery.refetch();\n            });\n        }\n    };\n    QueryManager.prototype.isDifferentResult = function (lastResult, newResult) {\n        var comparator = this.resultComparator || isEqual;\n        return !comparator(lastResult, newResult);\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        var queries = this.getApolloState().queries;\n        forOwn(this.queryListeners, function (listeners, queryId) {\n            listeners.forEach(function (listener) {\n                if (listener) {\n                    var queryStoreValue = queries[queryId];\n                    listener(queryStoreValue);\n                }\n            });\n        });\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        var requestId = this.idCounter;\n        this.idCounter++;\n        return requestId;\n    };\n    return QueryManager;\n}());\nexports.QueryManager = QueryManager;\n//# sourceMappingURL=QueryManager.js.map","\"use strict\";\nvar printer_1 = require('graphql-tag/printer');\nfunction printQueryForMissingData(options) {\n    return printQueryFromDefinition(queryDefinition(options));\n}\nexports.printQueryForMissingData = printQueryForMissingData;\nfunction printQueryFromDefinition(queryDef) {\n    var queryDocumentAst = {\n        kind: 'Document',\n        definitions: [\n            queryDef,\n        ],\n    };\n    return printer_1.print(queryDocumentAst);\n}\nexports.printQueryFromDefinition = printQueryFromDefinition;\nfunction queryDocument(_a) {\n    var missingSelectionSets = _a.missingSelectionSets, _b = _a.variableDefinitions, variableDefinitions = _b === void 0 ? null : _b, _c = _a.name, name = _c === void 0 ? null : _c, fragmentMap = _a.fragmentMap;\n    var doc = {\n        kind: 'Document',\n        definitions: [],\n    };\n    var opDefinition = queryDefinition({\n        missingSelectionSets: missingSelectionSets,\n        variableDefinitions: variableDefinitions,\n        name: name,\n    });\n    doc.definitions = [opDefinition];\n    Object.keys(fragmentMap).forEach(function (key) {\n        doc.definitions.push(fragmentMap[key]);\n    });\n    return doc;\n}\nexports.queryDocument = queryDocument;\nfunction queryDefinition(_a) {\n    var missingSelectionSets = _a.missingSelectionSets, _b = _a.variableDefinitions, variableDefinitions = _b === void 0 ? null : _b, _c = _a.name, name = _c === void 0 ? null : _c;\n    var selections = [];\n    missingSelectionSets.forEach(function (missingSelectionSet, ii) {\n        if (missingSelectionSet.id === 'CANNOT_REFETCH') {\n            throw new Error('diffAgainstStore did not merge selection sets correctly');\n        }\n        if (missingSelectionSet.id !== 'ROOT_QUERY') {\n            throw new Error('Only root query selections supported.');\n        }\n        missingSelectionSet.selectionSet.selections.forEach(function (selection) {\n            selections.push(selection);\n        });\n    });\n    return {\n        kind: 'OperationDefinition',\n        operation: 'query',\n        name: name,\n        variableDefinitions: variableDefinitions,\n        directives: [],\n        selectionSet: {\n            kind: 'SelectionSet',\n            selections: selections,\n        },\n    };\n}\nexports.queryDefinition = queryDefinition;\n//# sourceMappingURL=queryPrinting.js.map","\"use strict\";\nvar cloneDeep = require('lodash.clonedeep');\n;\nvar QueryBatcher = (function () {\n    function QueryBatcher(_a) {\n        var shouldBatch = _a.shouldBatch, networkInterface = _a.networkInterface;\n        this.queuedRequests = [];\n        this.shouldBatch = shouldBatch;\n        this.queuedRequests = [];\n        this.networkInterface = networkInterface;\n    }\n    QueryBatcher.prototype.enqueueRequest = function (request) {\n        this.queuedRequests.push(request);\n        request.promise = new Promise(function (resolve, reject) {\n            request.resolve = resolve;\n            request.reject = reject;\n        });\n        if (!this.shouldBatch) {\n            this.consumeQueue();\n        }\n        return request.promise;\n    };\n    QueryBatcher.prototype.consumeQueue = function () {\n        var _this = this;\n        if (this.queuedRequests.length < 1) {\n            return undefined;\n        }\n        var requests = this.queuedRequests.map(function (queuedRequest) {\n            return {\n                query: queuedRequest.options.query,\n                variables: queuedRequest.options.variables,\n                operationName: queuedRequest.operationName,\n            };\n        });\n        var promises = [];\n        var resolvers = [];\n        var rejecters = [];\n        this.queuedRequests.forEach(function (fetchRequest, index) {\n            promises.push(fetchRequest.promise);\n            resolvers.push(fetchRequest.resolve);\n            rejecters.push(fetchRequest.reject);\n        });\n        if (this.shouldBatch) {\n            this.queuedRequests = [];\n            var batchedPromise = this.networkInterface.batchQuery(requests);\n            batchedPromise.then(function (results) {\n                results.forEach(function (result, index) {\n                    resolvers[index](result);\n                });\n            }).catch(function (error) {\n                rejecters.forEach(function (rejecter, index) {\n                    rejecters[index](error);\n                });\n            });\n            return promises;\n        }\n        else {\n            var clonedRequests = cloneDeep(this.queuedRequests);\n            this.queuedRequests = [];\n            clonedRequests.forEach(function (fetchRequest, index) {\n                _this.networkInterface.query(requests[index]).then(function (result) {\n                    resolvers[index](result);\n                }).catch(function (reason) {\n                    rejecters[index](reason);\n                });\n            });\n            return promises;\n        }\n    };\n    QueryBatcher.prototype.start = function (pollInterval) {\n        var _this = this;\n        if (this.shouldBatch) {\n            this.pollInterval = pollInterval;\n            this.pollTimer = setInterval(function () {\n                _this.consumeQueue();\n            }, this.pollInterval);\n        }\n    };\n    QueryBatcher.prototype.stop = function () {\n        if (this.pollTimer) {\n            clearInterval(this.pollTimer);\n        }\n    };\n    return QueryBatcher;\n}());\nexports.QueryBatcher = QueryBatcher;\n//# sourceMappingURL=batching.js.map","\"use strict\";\nvar ObservableQuery_1 = require('./ObservableQuery');\nvar assign = require('lodash.assign');\nvar QueryScheduler = (function () {\n    function QueryScheduler(_a) {\n        var queryManager = _a.queryManager;\n        this.queryManager = queryManager;\n        this.pollingTimers = {};\n        this.inFlightQueries = {};\n        this.registeredQueries = {};\n        this.intervalQueries = {};\n    }\n    QueryScheduler.prototype.checkInFlight = function (queryId) {\n        return this.inFlightQueries.hasOwnProperty(queryId);\n    };\n    QueryScheduler.prototype.fetchQuery = function (queryId, options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.queryManager.fetchQuery(queryId, options).then(function (result) {\n                _this.removeInFlight(queryId);\n                resolve(result);\n            }).catch(function (error) {\n                _this.removeInFlight(queryId);\n                reject(error);\n            });\n            _this.addInFlight(queryId, options);\n        });\n    };\n    QueryScheduler.prototype.startPollingQuery = function (options, queryId, firstFetch, listener) {\n        if (firstFetch === void 0) { firstFetch = true; }\n        if (!options.pollInterval) {\n            throw new Error('Attempted to start a polling query without a polling interval.');\n        }\n        this.registeredQueries[queryId] = options;\n        if (firstFetch) {\n            this.fetchQuery(queryId, options);\n        }\n        if (listener) {\n            this.queryManager.addQueryListener(queryId, listener);\n        }\n        this.addQueryOnInterval(queryId, options);\n        return queryId;\n    };\n    QueryScheduler.prototype.stopPollingQuery = function (queryId) {\n        delete this.registeredQueries[queryId];\n    };\n    QueryScheduler.prototype.fetchQueriesOnInterval = function (interval) {\n        var _this = this;\n        this.intervalQueries[interval] = this.intervalQueries[interval].filter(function (queryId) {\n            if (!_this.registeredQueries.hasOwnProperty(queryId)) {\n                return false;\n            }\n            if (_this.checkInFlight(queryId)) {\n                return true;\n            }\n            var queryOptions = _this.registeredQueries[queryId];\n            var pollingOptions = assign({}, queryOptions);\n            pollingOptions.forceFetch = true;\n            _this.fetchQuery(queryId, pollingOptions);\n            return true;\n        });\n        if (this.intervalQueries[interval].length === 0) {\n            clearInterval(this.pollingTimers[interval]);\n        }\n    };\n    QueryScheduler.prototype.addQueryOnInterval = function (queryId, queryOptions) {\n        var _this = this;\n        var interval = queryOptions.pollInterval;\n        if (this.intervalQueries.hasOwnProperty(interval.toString()) && this.intervalQueries[interval].length > 0) {\n            this.intervalQueries[interval].push(queryId);\n        }\n        else {\n            this.intervalQueries[interval] = [queryId];\n            this.pollingTimers[interval] = setInterval(function () {\n                _this.fetchQueriesOnInterval(interval);\n            }, interval);\n        }\n    };\n    QueryScheduler.prototype.registerPollingQuery = function (queryOptions) {\n        if (!queryOptions.pollInterval) {\n            throw new Error('Attempted to register a non-polling query with the scheduler.');\n        }\n        return new ObservableQuery_1.ObservableQuery({\n            scheduler: this,\n            options: queryOptions,\n        });\n    };\n    QueryScheduler.prototype.addInFlight = function (queryId, options) {\n        this.inFlightQueries[queryId] = options;\n    };\n    QueryScheduler.prototype.removeInFlight = function (queryId) {\n        delete this.inFlightQueries[queryId];\n    };\n    return QueryScheduler;\n}());\nexports.QueryScheduler = QueryScheduler;\n//# sourceMappingURL=scheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('./util/Observable');\nvar errorHandling_1 = require('./util/errorHandling');\nvar assign = require('lodash.assign');\nvar isEqual = require('lodash.isequal');\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var _this = this;\n        var scheduler = _a.scheduler, options = _a.options, _b = _a.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;\n        var queryManager = scheduler.queryManager;\n        var queryId = queryManager.generateQueryId();\n        var isPollingQuery = !!options.pollInterval;\n        var subscriberFunction = function (observer) {\n            var retQuerySubscription = {\n                unsubscribe: function () {\n                    if (isPollingQuery) {\n                        scheduler.stopPollingQuery(queryId);\n                    }\n                    queryManager.stopQuery(queryId);\n                },\n            };\n            if (shouldSubscribe) {\n                queryManager.addObservableQuery(queryId, _this);\n                queryManager.addQuerySubscription(queryId, retQuerySubscription);\n            }\n            if (isPollingQuery) {\n                if (_this.options.noFetch) {\n                    throw new Error('noFetch option should not use query polling.');\n                }\n                _this.scheduler.startPollingQuery(_this.options, queryId);\n            }\n            queryManager.startQuery(queryId, _this.options, queryManager.queryListenerForObserver(queryId, _this.options, observer));\n            return retQuerySubscription;\n        };\n        _super.call(this, subscriberFunction);\n        this.options = options;\n        this.variables = this.options.variables || {};\n        this.scheduler = scheduler;\n        this.queryManager = queryManager;\n        this.queryId = queryId;\n        this.refetch = function (variables) {\n            _this.variables = assign({}, _this.variables, variables);\n            if (_this.options.noFetch) {\n                throw new Error('noFetch option should not use query refetch.');\n            }\n            return _this.queryManager.fetchQuery(_this.queryId, assign(_this.options, {\n                forceFetch: true,\n                variables: _this.variables,\n            }))\n                .then(function (result) { return _this.queryManager.transformResult(result); });\n        };\n        this.setOptions = function (opts) {\n            _this.options = assign({}, _this.options, opts);\n            if (opts.pollInterval) {\n                _this.startPolling(opts.pollInterval);\n            }\n            else if (opts.pollInterval === 0) {\n                _this.stopPolling();\n            }\n            return _this.setVariables(opts.variables);\n        };\n        this.setVariables = function (variables) {\n            var newVariables = assign({}, _this.variables, variables);\n            if (isEqual(newVariables, _this.variables)) {\n                return _this.result();\n            }\n            else {\n                _this.variables = newVariables;\n                return _this.queryManager.fetchQuery(_this.queryId, assign(_this.options, {\n                    variables: _this.variables,\n                }))\n                    .then(function (result) { return _this.queryManager.transformResult(result); });\n            }\n        };\n        this.fetchMore = function (fetchMoreOptions) {\n            return Promise.resolve()\n                .then(function () {\n                var qid = _this.queryManager.generateQueryId();\n                var combinedOptions = null;\n                if (fetchMoreOptions.query) {\n                    combinedOptions = fetchMoreOptions;\n                }\n                else {\n                    var variables = assign({}, _this.variables, fetchMoreOptions.variables);\n                    combinedOptions = assign({}, _this.options, fetchMoreOptions, {\n                        variables: variables,\n                    });\n                }\n                combinedOptions = assign({}, combinedOptions, {\n                    forceFetch: true,\n                });\n                return _this.queryManager.fetchQuery(qid, combinedOptions);\n            })\n                .then(function (fetchMoreResult) {\n                var reducer = fetchMoreOptions.updateQuery;\n                var mapFn = function (previousResult, _a) {\n                    var queryVariables = _a.queryVariables;\n                    return reducer(previousResult, {\n                        fetchMoreResult: fetchMoreResult,\n                        queryVariables: queryVariables,\n                    });\n                };\n                _this.updateQuery(mapFn);\n                return fetchMoreResult;\n            });\n        };\n        this.updateQuery = function (mapFn) {\n            var _a = _this.queryManager.getQueryWithPreviousResult(_this.queryId), previousResult = _a.previousResult, queryVariables = _a.queryVariables, querySelectionSet = _a.querySelectionSet, _b = _a.queryFragments, queryFragments = _b === void 0 ? [] : _b;\n            var newResult = errorHandling_1.tryFunctionOrLogError(function () { return mapFn(previousResult, { queryVariables: queryVariables }); });\n            if (newResult) {\n                _this.queryManager.store.dispatch({\n                    type: 'APOLLO_UPDATE_QUERY_RESULT',\n                    newResult: newResult,\n                    queryVariables: queryVariables,\n                    querySelectionSet: querySelectionSet,\n                    queryFragments: queryFragments,\n                });\n            }\n        };\n        this.stopPolling = function () {\n            if (isPollingQuery) {\n                _this.scheduler.stopPollingQuery(_this.queryId);\n            }\n        };\n        this.startPolling = function (pollInterval) {\n            if (_this.options.noFetch) {\n                throw new Error('noFetch option should not use query polling.');\n            }\n            if (isPollingQuery) {\n                _this.scheduler.stopPollingQuery(_this.queryId);\n            }\n            _this.options.pollInterval = pollInterval;\n            _this.scheduler.startPollingQuery(_this.options, _this.queryId, false);\n        };\n    }\n    ObservableQuery.prototype.result = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var subscription = _this.subscribe({\n                next: function (result) {\n                    resolve(result);\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: function (error) {\n                    reject(error);\n                },\n            });\n        });\n    };\n    ObservableQuery.prototype.currentResult = function () {\n        var _a = this.queryManager.getCurrentQueryResult(this), data = _a.data, partial = _a.partial;\n        var queryStoreValue = this.queryManager.getApolloState().queries[this.queryId];\n        var queryLoading = !queryStoreValue || queryStoreValue.loading;\n        var loading = (this.options.forceFetch && queryLoading)\n            || (partial && !this.options.noFetch);\n        return { data: data, loading: loading };\n    };\n    return ObservableQuery;\n}(Observable_1.Observable));\nexports.ObservableQuery = ObservableQuery;\n//# sourceMappingURL=ObservableQuery.js.map","\"use strict\";\nvar symbol_observable_1 = require('symbol-observable');\nfunction isSubscription(subscription) {\n    return subscription.unsubscribe !== undefined;\n}\nvar Observable = (function () {\n    function Observable(subscriberFunction) {\n        this.subscriberFunction = subscriberFunction;\n    }\n    Observable.prototype[symbol_observable_1.default] = function () {\n        return this;\n    };\n    Observable.prototype.subscribe = function (observer) {\n        var subscriptionOrCleanupFunction = this.subscriberFunction(observer);\n        if (isSubscription(subscriptionOrCleanupFunction)) {\n            return subscriptionOrCleanupFunction;\n        }\n        else {\n            return {\n                unsubscribe: subscriptionOrCleanupFunction,\n            };\n        }\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=Observable.js.map","\"use strict\";\nfunction tryFunctionOrLogError(f) {\n    try {\n        return f();\n    }\n    catch (e) {\n        if (console.error) {\n            console.error(e);\n        }\n    }\n}\nexports.tryFunctionOrLogError = tryFunctionOrLogError;\n//# sourceMappingURL=errorHandling.js.map","module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _stringify = __webpack_require__(2);\n\n\tvar _stringify2 = _interopRequireDefault(_stringify);\n\n\texports.print = print;\n\n\tvar _visitor = __webpack_require__(5);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/**\n\t * Converts an AST into a string, using one set of reasonable\n\t * formatting rules.\n\t */\n\tfunction print(ast) {\n\t  return (0, _visitor.visit)(ast, { leave: printDocASTReducer });\n\t} /**\n\t   *  Copyright (c) 2015, Facebook, Inc.\n\t   *  All rights reserved.\n\t   *\n\t   *  This source code is licensed under the BSD-style license found in the\n\t   *  LICENSE file in the root directory of this source tree. An additional grant\n\t   *  of patent rights can be found in the PATENTS file in the same directory.\n\t   */\n\n\tvar printDocASTReducer = {\n\t  Name: function Name(node) {\n\t    return node.value;\n\t  },\n\t  Variable: function Variable(node) {\n\t    return '$' + node.name;\n\t  },\n\n\t  // Document\n\n\t  Document: function Document(node) {\n\t    return join(node.definitions, '\\n\\n') + '\\n';\n\t  },\n\n\t  OperationDefinition: function OperationDefinition(node) {\n\t    var op = node.operation;\n\t    var name = node.name;\n\t    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n\t    var directives = join(node.directives, ' ');\n\t    var selectionSet = node.selectionSet;\n\t    // Anonymous queries with no directives or variable definitions can use\n\t    // the query short form.\n\t    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n\t  },\n\n\n\t  VariableDefinition: function VariableDefinition(_ref) {\n\t    var variable = _ref.variable;\n\t    var type = _ref.type;\n\t    var defaultValue = _ref.defaultValue;\n\t    return variable + ': ' + type + wrap(' = ', defaultValue);\n\t  },\n\n\t  SelectionSet: function SelectionSet(_ref2) {\n\t    var selections = _ref2.selections;\n\t    return block(selections);\n\t  },\n\n\t  Field: function Field(_ref3) {\n\t    var alias = _ref3.alias;\n\t    var name = _ref3.name;\n\t    var args = _ref3.arguments;\n\t    var directives = _ref3.directives;\n\t    var selectionSet = _ref3.selectionSet;\n\t    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');\n\t  },\n\n\t  Argument: function Argument(_ref4) {\n\t    var name = _ref4.name;\n\t    var value = _ref4.value;\n\t    return name + ': ' + value;\n\t  },\n\n\t  // Fragments\n\n\t  FragmentSpread: function FragmentSpread(_ref5) {\n\t    var name = _ref5.name;\n\t    var directives = _ref5.directives;\n\t    return '...' + name + wrap(' ', join(directives, ' '));\n\t  },\n\n\t  InlineFragment: function InlineFragment(_ref6) {\n\t    var typeCondition = _ref6.typeCondition;\n\t    var directives = _ref6.directives;\n\t    var selectionSet = _ref6.selectionSet;\n\t    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n\t  },\n\n\t  FragmentDefinition: function FragmentDefinition(_ref7) {\n\t    var name = _ref7.name;\n\t    var typeCondition = _ref7.typeCondition;\n\t    var directives = _ref7.directives;\n\t    var selectionSet = _ref7.selectionSet;\n\t    return 'fragment ' + name + ' on ' + typeCondition + ' ' + wrap('', join(directives, ' '), ' ') + selectionSet;\n\t  },\n\n\t  // Value\n\n\t  IntValue: function IntValue(_ref8) {\n\t    var value = _ref8.value;\n\t    return value;\n\t  },\n\t  FloatValue: function FloatValue(_ref9) {\n\t    var value = _ref9.value;\n\t    return value;\n\t  },\n\t  StringValue: function StringValue(_ref10) {\n\t    var value = _ref10.value;\n\t    return (0, _stringify2.default)(value);\n\t  },\n\t  BooleanValue: function BooleanValue(_ref11) {\n\t    var value = _ref11.value;\n\t    return (0, _stringify2.default)(value);\n\t  },\n\t  EnumValue: function EnumValue(_ref12) {\n\t    var value = _ref12.value;\n\t    return value;\n\t  },\n\t  ListValue: function ListValue(_ref13) {\n\t    var values = _ref13.values;\n\t    return '[' + join(values, ', ') + ']';\n\t  },\n\t  ObjectValue: function ObjectValue(_ref14) {\n\t    var fields = _ref14.fields;\n\t    return '{' + join(fields, ', ') + '}';\n\t  },\n\t  ObjectField: function ObjectField(_ref15) {\n\t    var name = _ref15.name;\n\t    var value = _ref15.value;\n\t    return name + ': ' + value;\n\t  },\n\n\t  // Directive\n\n\t  Directive: function Directive(_ref16) {\n\t    var name = _ref16.name;\n\t    var args = _ref16.arguments;\n\t    return '@' + name + wrap('(', join(args, ', '), ')');\n\t  },\n\n\t  // Type\n\n\t  NamedType: function NamedType(_ref17) {\n\t    var name = _ref17.name;\n\t    return name;\n\t  },\n\t  ListType: function ListType(_ref18) {\n\t    var type = _ref18.type;\n\t    return '[' + type + ']';\n\t  },\n\t  NonNullType: function NonNullType(_ref19) {\n\t    var type = _ref19.type;\n\t    return type + '!';\n\t  },\n\n\t  // Type System Definitions\n\n\t  SchemaDefinition: function SchemaDefinition(_ref20) {\n\t    var directives = _ref20.directives;\n\t    var operationTypes = _ref20.operationTypes;\n\t    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n\t  },\n\n\t  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n\t    var operation = _ref21.operation;\n\t    var type = _ref21.type;\n\t    return operation + ': ' + type;\n\t  },\n\n\t  ScalarTypeDefinition: function ScalarTypeDefinition(_ref22) {\n\t    var name = _ref22.name;\n\t    var directives = _ref22.directives;\n\t    return join(['scalar', name, join(directives, ' ')], ' ');\n\t  },\n\n\t  ObjectTypeDefinition: function ObjectTypeDefinition(_ref23) {\n\t    var name = _ref23.name;\n\t    var interfaces = _ref23.interfaces;\n\t    var directives = _ref23.directives;\n\t    var fields = _ref23.fields;\n\t    return join(['type', name, wrap('implements ', join(interfaces, ', ')), join(directives, ' '), block(fields)], ' ');\n\t  },\n\n\t  FieldDefinition: function FieldDefinition(_ref24) {\n\t    var name = _ref24.name;\n\t    var args = _ref24.arguments;\n\t    var type = _ref24.type;\n\t    var directives = _ref24.directives;\n\t    return name + wrap('(', join(args, ', '), ')') + ': ' + type + wrap(' ', join(directives, ' '));\n\t  },\n\n\t  InputValueDefinition: function InputValueDefinition(_ref25) {\n\t    var name = _ref25.name;\n\t    var type = _ref25.type;\n\t    var defaultValue = _ref25.defaultValue;\n\t    var directives = _ref25.directives;\n\t    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n\t  },\n\n\t  InterfaceTypeDefinition: function InterfaceTypeDefinition(_ref26) {\n\t    var name = _ref26.name;\n\t    var directives = _ref26.directives;\n\t    var fields = _ref26.fields;\n\t    return join(['interface', name, join(directives, ' '), block(fields)], ' ');\n\t  },\n\n\t  UnionTypeDefinition: function UnionTypeDefinition(_ref27) {\n\t    var name = _ref27.name;\n\t    var directives = _ref27.directives;\n\t    var types = _ref27.types;\n\t    return join(['union', name, join(directives, ' '), '= ' + join(types, ' | ')], ' ');\n\t  },\n\n\t  EnumTypeDefinition: function EnumTypeDefinition(_ref28) {\n\t    var name = _ref28.name;\n\t    var directives = _ref28.directives;\n\t    var values = _ref28.values;\n\t    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n\t  },\n\n\t  EnumValueDefinition: function EnumValueDefinition(_ref29) {\n\t    var name = _ref29.name;\n\t    var directives = _ref29.directives;\n\t    return join([name, join(directives, ' ')], ' ');\n\t  },\n\n\t  InputObjectTypeDefinition: function InputObjectTypeDefinition(_ref30) {\n\t    var name = _ref30.name;\n\t    var directives = _ref30.directives;\n\t    var fields = _ref30.fields;\n\t    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n\t  },\n\n\t  TypeExtensionDefinition: function TypeExtensionDefinition(_ref31) {\n\t    var definition = _ref31.definition;\n\t    return 'extend ' + definition;\n\t  },\n\n\t  DirectiveDefinition: function DirectiveDefinition(_ref32) {\n\t    var name = _ref32.name;\n\t    var args = _ref32.arguments;\n\t    var locations = _ref32.locations;\n\t    return 'directive @' + name + wrap('(', join(args, ', '), ')') + ' on ' + join(locations, ' | ');\n\t  }\n\t};\n\n\t/**\n\t * Given maybeArray, print an empty string if it is null or empty, otherwise\n\t * print all items together separated by separator if provided\n\t */\n\tfunction join(maybeArray, separator) {\n\t  return maybeArray ? maybeArray.filter(function (x) {\n\t    return x;\n\t  }).join(separator || '') : '';\n\t}\n\n\t/**\n\t * Given array, print each item on its own line, wrapped in an\n\t * indented \"{ }\" block.\n\t */\n\tfunction block(array) {\n\t  return array && array.length !== 0 ? indent('{\\n' + join(array, '\\n')) + '\\n}' : '{}';\n\t}\n\n\t/**\n\t * If maybeString is not null or empty, then wrap with start and end, otherwise\n\t * print an empty string.\n\t */\n\tfunction wrap(start, maybeString, end) {\n\t  return maybeString ? start + maybeString + (end || '') : '';\n\t}\n\n\tfunction indent(maybeString) {\n\t  return maybeString && maybeString.replace(/\\n/g, '\\n  ');\n\t}\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(3), __esModule: true };\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar core  = __webpack_require__(4)\n\t  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});\n\tmodule.exports = function stringify(it){ // eslint-disable-line no-unused-vars\n\t  return $JSON.stringify.apply($JSON, arguments);\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tvar core = module.exports = {version: '2.4.0'};\n\tif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.BREAK = exports.QueryDocumentKeys = undefined;\n\n\tvar _stringify = __webpack_require__(2);\n\n\tvar _stringify2 = _interopRequireDefault(_stringify);\n\n\tvar _slicedToArray2 = __webpack_require__(6);\n\n\tvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\n\texports.visit = visit;\n\texports.visitInParallel = visitInParallel;\n\texports.visitWithTypeInfo = visitWithTypeInfo;\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t/**\n\t *  Copyright (c) 2015, Facebook, Inc.\n\t *  All rights reserved.\n\t *\n\t *  This source code is licensed under the BSD-style license found in the\n\t *  LICENSE file in the root directory of this source tree. An additional grant\n\t *  of patent rights can be found in the PATENTS file in the same directory.\n\t */\n\n\tvar QueryDocumentKeys = exports.QueryDocumentKeys = {\n\t  Name: [],\n\n\t  Document: ['definitions'],\n\t  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n\t  VariableDefinition: ['variable', 'type', 'defaultValue'],\n\t  Variable: ['name'],\n\t  SelectionSet: ['selections'],\n\t  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n\t  Argument: ['name', 'value'],\n\n\t  FragmentSpread: ['name', 'directives'],\n\t  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n\t  FragmentDefinition: ['name', 'typeCondition', 'directives', 'selectionSet'],\n\n\t  IntValue: [],\n\t  FloatValue: [],\n\t  StringValue: [],\n\t  BooleanValue: [],\n\t  EnumValue: [],\n\t  ListValue: ['values'],\n\t  ObjectValue: ['fields'],\n\t  ObjectField: ['name', 'value'],\n\n\t  Directive: ['name', 'arguments'],\n\n\t  NamedType: ['name'],\n\t  ListType: ['type'],\n\t  NonNullType: ['type'],\n\n\t  SchemaDefinition: ['directives', 'operationTypes'],\n\t  OperationTypeDefinition: ['type'],\n\n\t  ScalarTypeDefinition: ['name', 'directives'],\n\t  ObjectTypeDefinition: ['name', 'interfaces', 'directives', 'fields'],\n\t  FieldDefinition: ['name', 'arguments', 'type', 'directives'],\n\t  InputValueDefinition: ['name', 'type', 'defaultValue', 'directives'],\n\t  InterfaceTypeDefinition: ['name', 'directives', 'fields'],\n\t  UnionTypeDefinition: ['name', 'directives', 'types'],\n\t  EnumTypeDefinition: ['name', 'directives', 'values'],\n\t  EnumValueDefinition: ['name', 'directives'],\n\t  InputObjectTypeDefinition: ['name', 'directives', 'fields'],\n\n\t  TypeExtensionDefinition: ['definition'],\n\n\t  DirectiveDefinition: ['name', 'arguments', 'locations']\n\t};\n\n\tvar BREAK = exports.BREAK = {};\n\n\t/**\n\t * visit() will walk through an AST using a depth first traversal, calling\n\t * the visitor's enter function at each node in the traversal, and calling the\n\t * leave function after visiting that node and all of its child nodes.\n\t *\n\t * By returning different values from the enter and leave functions, the\n\t * behavior of the visitor can be altered, including skipping over a sub-tree of\n\t * the AST (by returning false), editing the AST by returning a value or null\n\t * to remove the value, or to stop the whole traversal by returning BREAK.\n\t *\n\t * When using visit() to edit an AST, the original AST will not be modified, and\n\t * a new version of the AST with the changes applied will be returned from the\n\t * visit function.\n\t *\n\t *     const editedAST = visit(ast, {\n\t *       enter(node, key, parent, path, ancestors) {\n\t *         // @return\n\t *         //   undefined: no action\n\t *         //   false: skip visiting this node\n\t *         //   visitor.BREAK: stop visiting altogether\n\t *         //   null: delete this node\n\t *         //   any value: replace this node with the returned value\n\t *       },\n\t *       leave(node, key, parent, path, ancestors) {\n\t *         // @return\n\t *         //   undefined: no action\n\t *         //   false: no action\n\t *         //   visitor.BREAK: stop visiting altogether\n\t *         //   null: delete this node\n\t *         //   any value: replace this node with the returned value\n\t *       }\n\t *     });\n\t *\n\t * Alternatively to providing enter() and leave() functions, a visitor can\n\t * instead provide functions named the same as the kinds of AST nodes, or\n\t * enter/leave visitors at a named key, leading to four permutations of\n\t * visitor API:\n\t *\n\t * 1) Named visitors triggered when entering a node a specific kind.\n\t *\n\t *     visit(ast, {\n\t *       Kind(node) {\n\t *         // enter the \"Kind\" node\n\t *       }\n\t *     })\n\t *\n\t * 2) Named visitors that trigger upon entering and leaving a node of\n\t *    a specific kind.\n\t *\n\t *     visit(ast, {\n\t *       Kind: {\n\t *         enter(node) {\n\t *           // enter the \"Kind\" node\n\t *         }\n\t *         leave(node) {\n\t *           // leave the \"Kind\" node\n\t *         }\n\t *       }\n\t *     })\n\t *\n\t * 3) Generic visitors that trigger upon entering and leaving any node.\n\t *\n\t *     visit(ast, {\n\t *       enter(node) {\n\t *         // enter any node\n\t *       },\n\t *       leave(node) {\n\t *         // leave any node\n\t *       }\n\t *     })\n\t *\n\t * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n\t *\n\t *     visit(ast, {\n\t *       enter: {\n\t *         Kind(node) {\n\t *           // enter the \"Kind\" node\n\t *         }\n\t *       },\n\t *       leave: {\n\t *         Kind(node) {\n\t *           // leave the \"Kind\" node\n\t *         }\n\t *       }\n\t *     })\n\t */\n\tfunction visit(root, visitor, keyMap) {\n\t  var visitorKeys = keyMap || QueryDocumentKeys;\n\n\t  var stack = void 0;\n\t  var inArray = Array.isArray(root);\n\t  var keys = [root];\n\t  var index = -1;\n\t  var edits = [];\n\t  var parent = void 0;\n\t  var path = [];\n\t  var ancestors = [];\n\t  var newRoot = root;\n\n\t  do {\n\t    index++;\n\t    var isLeaving = index === keys.length;\n\t    var key = void 0;\n\t    var node = void 0;\n\t    var isEdited = isLeaving && edits.length !== 0;\n\t    if (isLeaving) {\n\t      key = ancestors.length === 0 ? undefined : path.pop();\n\t      node = parent;\n\t      parent = ancestors.pop();\n\t      if (isEdited) {\n\t        if (inArray) {\n\t          node = node.slice();\n\t        } else {\n\t          var clone = {};\n\t          for (var k in node) {\n\t            if (node.hasOwnProperty(k)) {\n\t              clone[k] = node[k];\n\t            }\n\t          }\n\t          node = clone;\n\t        }\n\t        var editOffset = 0;\n\t        for (var ii = 0; ii < edits.length; ii++) {\n\t          var _edits$ii = (0, _slicedToArray3.default)(edits[ii], 1);\n\n\t          var editKey = _edits$ii[0];\n\n\t          var _edits$ii2 = (0, _slicedToArray3.default)(edits[ii], 2);\n\n\t          var editValue = _edits$ii2[1];\n\n\t          if (inArray) {\n\t            editKey -= editOffset;\n\t          }\n\t          if (inArray && editValue === null) {\n\t            node.splice(editKey, 1);\n\t            editOffset++;\n\t          } else {\n\t            node[editKey] = editValue;\n\t          }\n\t        }\n\t      }\n\t      index = stack.index;\n\t      keys = stack.keys;\n\t      edits = stack.edits;\n\t      inArray = stack.inArray;\n\t      stack = stack.prev;\n\t    } else {\n\t      key = parent ? inArray ? index : keys[index] : undefined;\n\t      node = parent ? parent[key] : newRoot;\n\t      if (node === null || node === undefined) {\n\t        continue;\n\t      }\n\t      if (parent) {\n\t        path.push(key);\n\t      }\n\t    }\n\n\t    var result = void 0;\n\t    if (!Array.isArray(node)) {\n\t      if (!isNode(node)) {\n\t        throw new Error('Invalid AST Node: ' + (0, _stringify2.default)(node));\n\t      }\n\t      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\t      if (visitFn) {\n\t        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n\t        if (result === BREAK) {\n\t          break;\n\t        }\n\n\t        if (result === false) {\n\t          if (!isLeaving) {\n\t            path.pop();\n\t            continue;\n\t          }\n\t        } else if (result !== undefined) {\n\t          edits.push([key, result]);\n\t          if (!isLeaving) {\n\t            if (isNode(result)) {\n\t              node = result;\n\t            } else {\n\t              path.pop();\n\t              continue;\n\t            }\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    if (result === undefined && isEdited) {\n\t      edits.push([key, node]);\n\t    }\n\n\t    if (!isLeaving) {\n\t      stack = { inArray: inArray, index: index, keys: keys, edits: edits, prev: stack };\n\t      inArray = Array.isArray(node);\n\t      keys = inArray ? node : visitorKeys[node.kind] || [];\n\t      index = -1;\n\t      edits = [];\n\t      if (parent) {\n\t        ancestors.push(parent);\n\t      }\n\t      parent = node;\n\t    }\n\t  } while (stack !== undefined);\n\n\t  if (edits.length !== 0) {\n\t    newRoot = edits[edits.length - 1][1];\n\t  }\n\n\t  return newRoot;\n\t}\n\n\tfunction isNode(maybeNode) {\n\t  return maybeNode && typeof maybeNode.kind === 'string';\n\t}\n\n\t/**\n\t * Creates a new visitor instance which delegates to many visitors to run in\n\t * parallel. Each visitor will be visited for each node before moving on.\n\t *\n\t * If a prior visitor edits a node, no following visitors will see that node.\n\t */\n\tfunction visitInParallel(visitors) {\n\t  var skipping = new Array(visitors.length);\n\n\t  return {\n\t    enter: function enter(node) {\n\t      for (var i = 0; i < visitors.length; i++) {\n\t        if (!skipping[i]) {\n\t          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */false);\n\t          if (fn) {\n\t            var result = fn.apply(visitors[i], arguments);\n\t            if (result === false) {\n\t              skipping[i] = node;\n\t            } else if (result === BREAK) {\n\t              skipping[i] = BREAK;\n\t            } else if (result !== undefined) {\n\t              return result;\n\t            }\n\t          }\n\t        }\n\t      }\n\t    },\n\t    leave: function leave(node) {\n\t      for (var i = 0; i < visitors.length; i++) {\n\t        if (!skipping[i]) {\n\t          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */true);\n\t          if (fn) {\n\t            var result = fn.apply(visitors[i], arguments);\n\t            if (result === BREAK) {\n\t              skipping[i] = BREAK;\n\t            } else if (result !== undefined && result !== false) {\n\t              return result;\n\t            }\n\t          }\n\t        } else if (skipping[i] === node) {\n\t          skipping[i] = null;\n\t        }\n\t      }\n\t    }\n\t  };\n\t}\n\n\t/**\n\t * Creates a new visitor instance which maintains a provided TypeInfo instance\n\t * along with visiting visitor.\n\t */\n\tfunction visitWithTypeInfo(typeInfo, visitor) {\n\t  return {\n\t    enter: function enter(node) {\n\t      typeInfo.enter(node);\n\t      var fn = getVisitFn(visitor, node.kind, /* isLeaving */false);\n\t      if (fn) {\n\t        var result = fn.apply(visitor, arguments);\n\t        if (result !== undefined) {\n\t          typeInfo.leave(node);\n\t          if (isNode(result)) {\n\t            typeInfo.enter(result);\n\t          }\n\t        }\n\t        return result;\n\t      }\n\t    },\n\t    leave: function leave(node) {\n\t      var fn = getVisitFn(visitor, node.kind, /* isLeaving */true);\n\t      var result = void 0;\n\t      if (fn) {\n\t        result = fn.apply(visitor, arguments);\n\t      }\n\t      typeInfo.leave(node);\n\t      return result;\n\t    }\n\t  };\n\t}\n\n\t/**\n\t * Given a visitor instance, if it is leaving or not, and a node kind, return\n\t * the function the visitor runtime should call.\n\t */\n\tfunction getVisitFn(visitor, kind, isLeaving) {\n\t  var kindVisitor = visitor[kind];\n\t  if (kindVisitor) {\n\t    if (!isLeaving && typeof kindVisitor === 'function') {\n\t      // { Kind() {} }\n\t      return kindVisitor;\n\t    }\n\t    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\t    if (typeof kindSpecificVisitor === 'function') {\n\t      // { Kind: { enter() {}, leave() {} } }\n\t      return kindSpecificVisitor;\n\t    }\n\t  } else {\n\t    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\t    if (specificVisitor) {\n\t      if (typeof specificVisitor === 'function') {\n\t        // { enter() {}, leave() {} }\n\t        return specificVisitor;\n\t      }\n\t      var specificKindVisitor = specificVisitor[kind];\n\t      if (typeof specificKindVisitor === 'function') {\n\t        // { enter: { Kind() {} }, leave: { Kind() {} } }\n\t        return specificKindVisitor;\n\t      }\n\t    }\n\t  }\n\t}\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\texports.__esModule = true;\n\n\tvar _isIterable2 = __webpack_require__(7);\n\n\tvar _isIterable3 = _interopRequireDefault(_isIterable2);\n\n\tvar _getIterator2 = __webpack_require__(58);\n\n\tvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = function () {\n\t  function sliceIterator(arr, i) {\n\t    var _arr = [];\n\t    var _n = true;\n\t    var _d = false;\n\t    var _e = undefined;\n\n\t    try {\n\t      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {\n\t        _arr.push(_s.value);\n\n\t        if (i && _arr.length === i) break;\n\t      }\n\t    } catch (err) {\n\t      _d = true;\n\t      _e = err;\n\t    } finally {\n\t      try {\n\t        if (!_n && _i[\"return\"]) _i[\"return\"]();\n\t      } finally {\n\t        if (_d) throw _e;\n\t      }\n\t    }\n\n\t    return _arr;\n\t  }\n\n\t  return function (arr, i) {\n\t    if (Array.isArray(arr)) {\n\t      return arr;\n\t    } else if ((0, _isIterable3.default)(Object(arr))) {\n\t      return sliceIterator(arr, i);\n\t    } else {\n\t      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n\t    }\n\t  };\n\t}();\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(8), __esModule: true };\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(9);\n\t__webpack_require__(54);\n\tmodule.exports = __webpack_require__(56);\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(10);\n\tvar global        = __webpack_require__(21)\n\t  , hide          = __webpack_require__(24)\n\t  , Iterators     = __webpack_require__(13)\n\t  , TO_STRING_TAG = __webpack_require__(51)('toStringTag');\n\n\tfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n\t  var NAME       = collections[i]\n\t    , Collection = global[NAME]\n\t    , proto      = Collection && Collection.prototype;\n\t  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);\n\t  Iterators[NAME] = Iterators.Array;\n\t}\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar addToUnscopables = __webpack_require__(11)\n\t  , step             = __webpack_require__(12)\n\t  , Iterators        = __webpack_require__(13)\n\t  , toIObject        = __webpack_require__(14);\n\n\t// 22.1.3.4 Array.prototype.entries()\n\t// 22.1.3.13 Array.prototype.keys()\n\t// 22.1.3.29 Array.prototype.values()\n\t// 22.1.3.30 Array.prototype[@@iterator]()\n\tmodule.exports = __webpack_require__(18)(Array, 'Array', function(iterated, kind){\n\t  this._t = toIObject(iterated); // target\n\t  this._i = 0;                   // next index\n\t  this._k = kind;                // kind\n\t// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n\t}, function(){\n\t  var O     = this._t\n\t    , kind  = this._k\n\t    , index = this._i++;\n\t  if(!O || index >= O.length){\n\t    this._t = undefined;\n\t    return step(1);\n\t  }\n\t  if(kind == 'keys'  )return step(0, index);\n\t  if(kind == 'values')return step(0, O[index]);\n\t  return step(0, [index, O[index]]);\n\t}, 'values');\n\n\t// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\n\tIterators.Arguments = Iterators.Array;\n\n\taddToUnscopables('keys');\n\taddToUnscopables('values');\n\taddToUnscopables('entries');\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(){ /* empty */ };\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(done, value){\n\t  return {value: value, done: !!done};\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {};\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// to indexed object, toObject with fallback for non-array-like ES3 strings\n\tvar IObject = __webpack_require__(15)\n\t  , defined = __webpack_require__(17);\n\tmodule.exports = function(it){\n\t  return IObject(defined(it));\n\t};\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// fallback for non-array-like ES3 and non-enumerable old V8 strings\n\tvar cof = __webpack_require__(16);\n\tmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n\t  return cof(it) == 'String' ? it.split('') : Object(it);\n\t};\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\tvar toString = {}.toString;\n\n\tmodule.exports = function(it){\n\t  return toString.call(it).slice(8, -1);\n\t};\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t// 7.2.1 RequireObjectCoercible(argument)\n\tmodule.exports = function(it){\n\t  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n\t  return it;\n\t};\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar LIBRARY        = __webpack_require__(19)\n\t  , $export        = __webpack_require__(20)\n\t  , redefine       = __webpack_require__(34)\n\t  , hide           = __webpack_require__(24)\n\t  , has            = __webpack_require__(35)\n\t  , Iterators      = __webpack_require__(13)\n\t  , $iterCreate    = __webpack_require__(36)\n\t  , setToStringTag = __webpack_require__(50)\n\t  , getPrototypeOf = __webpack_require__(52)\n\t  , ITERATOR       = __webpack_require__(51)('iterator')\n\t  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n\t  , FF_ITERATOR    = '@@iterator'\n\t  , KEYS           = 'keys'\n\t  , VALUES         = 'values';\n\n\tvar returnThis = function(){ return this; };\n\n\tmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n\t  $iterCreate(Constructor, NAME, next);\n\t  var getMethod = function(kind){\n\t    if(!BUGGY && kind in proto)return proto[kind];\n\t    switch(kind){\n\t      case KEYS: return function keys(){ return new Constructor(this, kind); };\n\t      case VALUES: return function values(){ return new Constructor(this, kind); };\n\t    } return function entries(){ return new Constructor(this, kind); };\n\t  };\n\t  var TAG        = NAME + ' Iterator'\n\t    , DEF_VALUES = DEFAULT == VALUES\n\t    , VALUES_BUG = false\n\t    , proto      = Base.prototype\n\t    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n\t    , $default   = $native || getMethod(DEFAULT)\n\t    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n\t    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n\t    , methods, key, IteratorPrototype;\n\t  // Fix native\n\t  if($anyNative){\n\t    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\n\t    if(IteratorPrototype !== Object.prototype){\n\t      // Set @@toStringTag to native iterators\n\t      setToStringTag(IteratorPrototype, TAG, true);\n\t      // fix for some old engines\n\t      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n\t    }\n\t  }\n\t  // fix Array#{values, @@iterator}.name in V8 / FF\n\t  if(DEF_VALUES && $native && $native.name !== VALUES){\n\t    VALUES_BUG = true;\n\t    $default = function values(){ return $native.call(this); };\n\t  }\n\t  // Define iterator\n\t  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n\t    hide(proto, ITERATOR, $default);\n\t  }\n\t  // Plug for library\n\t  Iterators[NAME] = $default;\n\t  Iterators[TAG]  = returnThis;\n\t  if(DEFAULT){\n\t    methods = {\n\t      values:  DEF_VALUES ? $default : getMethod(VALUES),\n\t      keys:    IS_SET     ? $default : getMethod(KEYS),\n\t      entries: $entries\n\t    };\n\t    if(FORCED)for(key in methods){\n\t      if(!(key in proto))redefine(proto, key, methods[key]);\n\t    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n\t  }\n\t  return methods;\n\t};\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\tmodule.exports = true;\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar global    = __webpack_require__(21)\n\t  , core      = __webpack_require__(4)\n\t  , ctx       = __webpack_require__(22)\n\t  , hide      = __webpack_require__(24)\n\t  , PROTOTYPE = 'prototype';\n\n\tvar $export = function(type, name, source){\n\t  var IS_FORCED = type & $export.F\n\t    , IS_GLOBAL = type & $export.G\n\t    , IS_STATIC = type & $export.S\n\t    , IS_PROTO  = type & $export.P\n\t    , IS_BIND   = type & $export.B\n\t    , IS_WRAP   = type & $export.W\n\t    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n\t    , expProto  = exports[PROTOTYPE]\n\t    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n\t    , key, own, out;\n\t  if(IS_GLOBAL)source = name;\n\t  for(key in source){\n\t    // contains in native\n\t    own = !IS_FORCED && target && target[key] !== undefined;\n\t    if(own && key in exports)continue;\n\t    // export native or passed\n\t    out = own ? target[key] : source[key];\n\t    // prevent global pollution for namespaces\n\t    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n\t    // bind timers to global for call from export context\n\t    : IS_BIND && own ? ctx(out, global)\n\t    // wrap global constructors for prevent change them in library\n\t    : IS_WRAP && target[key] == out ? (function(C){\n\t      var F = function(a, b, c){\n\t        if(this instanceof C){\n\t          switch(arguments.length){\n\t            case 0: return new C;\n\t            case 1: return new C(a);\n\t            case 2: return new C(a, b);\n\t          } return new C(a, b, c);\n\t        } return C.apply(this, arguments);\n\t      };\n\t      F[PROTOTYPE] = C[PROTOTYPE];\n\t      return F;\n\t    // make static versions for prototype methods\n\t    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n\t    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n\t    if(IS_PROTO){\n\t      (exports.virtual || (exports.virtual = {}))[key] = out;\n\t      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n\t      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n\t    }\n\t  }\n\t};\n\t// type bitmap\n\t$export.F = 1;   // forced\n\t$export.G = 2;   // global\n\t$export.S = 4;   // static\n\t$export.P = 8;   // proto\n\t$export.B = 16;  // bind\n\t$export.W = 32;  // wrap\n\t$export.U = 64;  // safe\n\t$export.R = 128; // real proto method for `library` \n\tmodule.exports = $export;\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n\t// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n\tvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n\t  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\tif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// optional / simple context binding\n\tvar aFunction = __webpack_require__(23);\n\tmodule.exports = function(fn, that, length){\n\t  aFunction(fn);\n\t  if(that === undefined)return fn;\n\t  switch(length){\n\t    case 1: return function(a){\n\t      return fn.call(that, a);\n\t    };\n\t    case 2: return function(a, b){\n\t      return fn.call(that, a, b);\n\t    };\n\t    case 3: return function(a, b, c){\n\t      return fn.call(that, a, b, c);\n\t    };\n\t  }\n\t  return function(/* ...args */){\n\t    return fn.apply(that, arguments);\n\t  };\n\t};\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(it){\n\t  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n\t  return it;\n\t};\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar dP         = __webpack_require__(25)\n\t  , createDesc = __webpack_require__(33);\n\tmodule.exports = __webpack_require__(29) ? function(object, key, value){\n\t  return dP.f(object, key, createDesc(1, value));\n\t} : function(object, key, value){\n\t  object[key] = value;\n\t  return object;\n\t};\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar anObject       = __webpack_require__(26)\n\t  , IE8_DOM_DEFINE = __webpack_require__(28)\n\t  , toPrimitive    = __webpack_require__(32)\n\t  , dP             = Object.defineProperty;\n\n\texports.f = __webpack_require__(29) ? Object.defineProperty : function defineProperty(O, P, Attributes){\n\t  anObject(O);\n\t  P = toPrimitive(P, true);\n\t  anObject(Attributes);\n\t  if(IE8_DOM_DEFINE)try {\n\t    return dP(O, P, Attributes);\n\t  } catch(e){ /* empty */ }\n\t  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n\t  if('value' in Attributes)O[P] = Attributes.value;\n\t  return O;\n\t};\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar isObject = __webpack_require__(27);\n\tmodule.exports = function(it){\n\t  if(!isObject(it))throw TypeError(it + ' is not an object!');\n\t  return it;\n\t};\n\n/***/ },\n/* 27 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(it){\n\t  return typeof it === 'object' ? it !== null : typeof it === 'function';\n\t};\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = !__webpack_require__(29) && !__webpack_require__(30)(function(){\r\n\t  return Object.defineProperty(__webpack_require__(31)('div'), 'a', {get: function(){ return 7; }}).a != 7;\r\n\t});\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Thank's IE8 for his funny defineProperty\n\tmodule.exports = !__webpack_require__(30)(function(){\n\t  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n\t});\n\n/***/ },\n/* 30 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(exec){\n\t  try {\n\t    return !!exec();\n\t  } catch(e){\n\t    return true;\n\t  }\n\t};\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar isObject = __webpack_require__(27)\n\t  , document = __webpack_require__(21).document\n\t  // in old IE typeof document.createElement is 'object'\n\t  , is = isObject(document) && isObject(document.createElement);\n\tmodule.exports = function(it){\n\t  return is ? document.createElement(it) : {};\n\t};\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 7.1.1 ToPrimitive(input [, PreferredType])\n\tvar isObject = __webpack_require__(27);\n\t// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n\t// and the second argument - flag - preferred type is a string\n\tmodule.exports = function(it, S){\n\t  if(!isObject(it))return it;\n\t  var fn, val;\n\t  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n\t  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n\t  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n\t  throw TypeError(\"Can't convert object to primitive value\");\n\t};\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(bitmap, value){\n\t  return {\n\t    enumerable  : !(bitmap & 1),\n\t    configurable: !(bitmap & 2),\n\t    writable    : !(bitmap & 4),\n\t    value       : value\n\t  };\n\t};\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(24);\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\tvar hasOwnProperty = {}.hasOwnProperty;\n\tmodule.exports = function(it, key){\n\t  return hasOwnProperty.call(it, key);\n\t};\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar create         = __webpack_require__(37)\n\t  , descriptor     = __webpack_require__(33)\n\t  , setToStringTag = __webpack_require__(50)\n\t  , IteratorPrototype = {};\n\n\t// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n\t__webpack_require__(24)(IteratorPrototype, __webpack_require__(51)('iterator'), function(){ return this; });\n\n\tmodule.exports = function(Constructor, NAME, next){\n\t  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\n\t  setToStringTag(Constructor, NAME + ' Iterator');\n\t};\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\r\n\tvar anObject    = __webpack_require__(26)\r\n\t  , dPs         = __webpack_require__(38)\r\n\t  , enumBugKeys = __webpack_require__(48)\r\n\t  , IE_PROTO    = __webpack_require__(45)('IE_PROTO')\r\n\t  , Empty       = function(){ /* empty */ }\r\n\t  , PROTOTYPE   = 'prototype';\r\n\r\n\t// Create object with fake `null` prototype: use iframe Object with cleared prototype\r\n\tvar createDict = function(){\r\n\t  // Thrash, waste and sodomy: IE GC bug\r\n\t  var iframe = __webpack_require__(31)('iframe')\r\n\t    , i      = enumBugKeys.length\r\n\t    , gt     = '>'\r\n\t    , iframeDocument;\r\n\t  iframe.style.display = 'none';\r\n\t  __webpack_require__(49).appendChild(iframe);\r\n\t  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\r\n\t  // createDict = iframe.contentWindow.Object;\r\n\t  // html.removeChild(iframe);\r\n\t  iframeDocument = iframe.contentWindow.document;\r\n\t  iframeDocument.open();\r\n\t  iframeDocument.write('<script>document.F=Object</script' + gt);\r\n\t  iframeDocument.close();\r\n\t  createDict = iframeDocument.F;\r\n\t  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\r\n\t  return createDict();\r\n\t};\r\n\r\n\tmodule.exports = Object.create || function create(O, Properties){\r\n\t  var result;\r\n\t  if(O !== null){\r\n\t    Empty[PROTOTYPE] = anObject(O);\r\n\t    result = new Empty;\r\n\t    Empty[PROTOTYPE] = null;\r\n\t    // add \"__proto__\" for Object.getPrototypeOf polyfill\r\n\t    result[IE_PROTO] = O;\r\n\t  } else result = createDict();\r\n\t  return Properties === undefined ? result : dPs(result, Properties);\r\n\t};\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar dP       = __webpack_require__(25)\r\n\t  , anObject = __webpack_require__(26)\r\n\t  , getKeys  = __webpack_require__(39);\r\n\r\n\tmodule.exports = __webpack_require__(29) ? Object.defineProperties : function defineProperties(O, Properties){\r\n\t  anObject(O);\r\n\t  var keys   = getKeys(Properties)\r\n\t    , length = keys.length\r\n\t    , i = 0\r\n\t    , P;\r\n\t  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\r\n\t  return O;\r\n\t};\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 19.1.2.14 / 15.2.3.14 Object.keys(O)\r\n\tvar $keys       = __webpack_require__(40)\r\n\t  , enumBugKeys = __webpack_require__(48);\r\n\r\n\tmodule.exports = Object.keys || function keys(O){\r\n\t  return $keys(O, enumBugKeys);\r\n\t};\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar has          = __webpack_require__(35)\r\n\t  , toIObject    = __webpack_require__(14)\r\n\t  , arrayIndexOf = __webpack_require__(41)(false)\r\n\t  , IE_PROTO     = __webpack_require__(45)('IE_PROTO');\r\n\r\n\tmodule.exports = function(object, names){\r\n\t  var O      = toIObject(object)\r\n\t    , i      = 0\r\n\t    , result = []\r\n\t    , key;\r\n\t  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\r\n\t  // Don't enum bug & hidden keys\r\n\t  while(names.length > i)if(has(O, key = names[i++])){\r\n\t    ~arrayIndexOf(result, key) || result.push(key);\r\n\t  }\r\n\t  return result;\r\n\t};\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// false -> Array#indexOf\n\t// true  -> Array#includes\n\tvar toIObject = __webpack_require__(14)\n\t  , toLength  = __webpack_require__(42)\n\t  , toIndex   = __webpack_require__(44);\n\tmodule.exports = function(IS_INCLUDES){\n\t  return function($this, el, fromIndex){\n\t    var O      = toIObject($this)\n\t      , length = toLength(O.length)\n\t      , index  = toIndex(fromIndex, length)\n\t      , value;\n\t    // Array#includes uses SameValueZero equality algorithm\n\t    if(IS_INCLUDES && el != el)while(length > index){\n\t      value = O[index++];\n\t      if(value != value)return true;\n\t    // Array#toIndex ignores holes, Array#includes - not\n\t    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n\t      if(O[index] === el)return IS_INCLUDES || index || 0;\n\t    } return !IS_INCLUDES && -1;\n\t  };\n\t};\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 7.1.15 ToLength\n\tvar toInteger = __webpack_require__(43)\n\t  , min       = Math.min;\n\tmodule.exports = function(it){\n\t  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n\t};\n\n/***/ },\n/* 43 */\n/***/ function(module, exports) {\n\n\t// 7.1.4 ToInteger\n\tvar ceil  = Math.ceil\n\t  , floor = Math.floor;\n\tmodule.exports = function(it){\n\t  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n\t};\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar toInteger = __webpack_require__(43)\n\t  , max       = Math.max\n\t  , min       = Math.min;\n\tmodule.exports = function(index, length){\n\t  index = toInteger(index);\n\t  return index < 0 ? max(index + length, 0) : min(index, length);\n\t};\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar shared = __webpack_require__(46)('keys')\r\n\t  , uid    = __webpack_require__(47);\r\n\tmodule.exports = function(key){\r\n\t  return shared[key] || (shared[key] = uid(key));\r\n\t};\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar global = __webpack_require__(21)\n\t  , SHARED = '__core-js_shared__'\n\t  , store  = global[SHARED] || (global[SHARED] = {});\n\tmodule.exports = function(key){\n\t  return store[key] || (store[key] = {});\n\t};\n\n/***/ },\n/* 47 */\n/***/ function(module, exports) {\n\n\tvar id = 0\n\t  , px = Math.random();\n\tmodule.exports = function(key){\n\t  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n\t};\n\n/***/ },\n/* 48 */\n/***/ function(module, exports) {\n\n\t// IE 8- don't enum bug keys\r\n\tmodule.exports = (\r\n\t  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\r\n\t).split(',');\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(21).document && document.documentElement;\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar def = __webpack_require__(25).f\n\t  , has = __webpack_require__(35)\n\t  , TAG = __webpack_require__(51)('toStringTag');\n\n\tmodule.exports = function(it, tag, stat){\n\t  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n\t};\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar store      = __webpack_require__(46)('wks')\n\t  , uid        = __webpack_require__(47)\n\t  , Symbol     = __webpack_require__(21).Symbol\n\t  , USE_SYMBOL = typeof Symbol == 'function';\n\n\tvar $exports = module.exports = function(name){\n\t  return store[name] || (store[name] =\n\t    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n\t};\n\n\t$exports.store = store;\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\r\n\tvar has         = __webpack_require__(35)\r\n\t  , toObject    = __webpack_require__(53)\r\n\t  , IE_PROTO    = __webpack_require__(45)('IE_PROTO')\r\n\t  , ObjectProto = Object.prototype;\r\n\r\n\tmodule.exports = Object.getPrototypeOf || function(O){\r\n\t  O = toObject(O);\r\n\t  if(has(O, IE_PROTO))return O[IE_PROTO];\r\n\t  if(typeof O.constructor == 'function' && O instanceof O.constructor){\r\n\t    return O.constructor.prototype;\r\n\t  } return O instanceof Object ? ObjectProto : null;\r\n\t};\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 7.1.13 ToObject(argument)\n\tvar defined = __webpack_require__(17);\n\tmodule.exports = function(it){\n\t  return Object(defined(it));\n\t};\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar $at  = __webpack_require__(55)(true);\n\n\t// 21.1.3.27 String.prototype[@@iterator]()\n\t__webpack_require__(18)(String, 'String', function(iterated){\n\t  this._t = String(iterated); // target\n\t  this._i = 0;                // next index\n\t// 21.1.5.2.1 %StringIteratorPrototype%.next()\n\t}, function(){\n\t  var O     = this._t\n\t    , index = this._i\n\t    , point;\n\t  if(index >= O.length)return {value: undefined, done: true};\n\t  point = $at(O, index);\n\t  this._i += point.length;\n\t  return {value: point, done: false};\n\t});\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar toInteger = __webpack_require__(43)\n\t  , defined   = __webpack_require__(17);\n\t// true  -> String#at\n\t// false -> String#codePointAt\n\tmodule.exports = function(TO_STRING){\n\t  return function(that, pos){\n\t    var s = String(defined(that))\n\t      , i = toInteger(pos)\n\t      , l = s.length\n\t      , a, b;\n\t    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n\t    a = s.charCodeAt(i);\n\t    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n\t      ? TO_STRING ? s.charAt(i) : a\n\t      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n\t  };\n\t};\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar classof   = __webpack_require__(57)\n\t  , ITERATOR  = __webpack_require__(51)('iterator')\n\t  , Iterators = __webpack_require__(13);\n\tmodule.exports = __webpack_require__(4).isIterable = function(it){\n\t  var O = Object(it);\n\t  return O[ITERATOR] !== undefined\n\t    || '@@iterator' in O\n\t    || Iterators.hasOwnProperty(classof(O));\n\t};\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// getting tag from 19.1.3.6 Object.prototype.toString()\n\tvar cof = __webpack_require__(16)\n\t  , TAG = __webpack_require__(51)('toStringTag')\n\t  // ES3 wrong here\n\t  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\n\t// fallback for IE11 Script Access Denied error\n\tvar tryGet = function(it, key){\n\t  try {\n\t    return it[key];\n\t  } catch(e){ /* empty */ }\n\t};\n\n\tmodule.exports = function(it){\n\t  var O, T, B;\n\t  return it === undefined ? 'Undefined' : it === null ? 'Null'\n\t    // @@toStringTag case\n\t    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n\t    // builtinTag case\n\t    : ARG ? cof(O)\n\t    // ES3 arguments fallback\n\t    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n\t};\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(59), __esModule: true };\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(9);\n\t__webpack_require__(54);\n\tmodule.exports = __webpack_require__(60);\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar anObject = __webpack_require__(26)\n\t  , get      = __webpack_require__(61);\n\tmodule.exports = __webpack_require__(4).getIterator = function(it){\n\t  var iterFn = get(it);\n\t  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');\n\t  return anObject(iterFn.call(it));\n\t};\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar classof   = __webpack_require__(57)\n\t  , ITERATOR  = __webpack_require__(51)('iterator')\n\t  , Iterators = __webpack_require__(13);\n\tmodule.exports = __webpack_require__(4).getIteratorMethod = function(it){\n\t  if(it != undefined)return it[ITERATOR]\n\t    || it['@@iterator']\n\t    || Iterators[classof(it)];\n\t};\n\n/***/ }\n/******/ ]);"]}}]